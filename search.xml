<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>贪心算法-Huffman算法</title>
      <link href="blog/ggu8v9/"/>
      <url>blog/ggu8v9/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>压缩算法，目的就是根据字母的出现频率来“按需分配”编码来优化编码方式。</p><p>比如：给出一串字母 <code>Huffman Coding</code>   ，按照计算机处理形式，会根据 ascll 码将这串字符编码，具体形式（十进制）就是 104 117 102 102 109 97 110 32 67 111 100 105 110 103，然后转换成二进制，最后会得到需要 97 个比特来存储。</p><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><p>算法角度来讲对上述问题 ascll 编码方式是浪费空间的，优化方向是改变编码方式，根据字母出现的频率来“按需分配”进制位。</p><p>给出下面所给出的字母，以及出现的频率，来得到哈夫曼编码<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1605340774734-5ec5e8f1-0fae-47ff-8ded-dccf9611a3ad.png#align=left&amp;display=inline&amp;height=45&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=89&amp;originWidth=411&amp;size=4276&amp;status=done&amp;style=shadow&amp;width=205.5" alt="image.png"><br>先提出将频率小的依次加入。d 和 h 组合权值为 9(或者说 A 只是称呼方便)，然后将这个 9“替换 d 和 h”代入整个序列，在进行插入树操作，</p><blockquote><p>过程中，遵循数字大的在左数字小的在右原则（互换也没关系，只不过换的是二进制的 0 和 1）</p></blockquote><p>在进行到 E 的时候，此时的队列应该为 120 107 42 37，所以此时需要重新调整队列，然后进行到结束。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1605340899720-d8867a90-d01c-4bf6-8ec7-ca0e812a99dd.png#align=left&amp;display=inline&amp;height=221&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=443&amp;originWidth=376&amp;size=24239&amp;status=done&amp;style=shadow&amp;width=188" alt="image.png"><br>最后的编码结果为：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1605341313840-61587c86-135d-4ba0-96aa-844868de1d56.png#align=left&amp;display=inline&amp;height=101&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=201&amp;originWidth=165&amp;size=4405&amp;status=done&amp;style=shadow&amp;width=82.5" alt="image.png"></p><h2 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> NS_HuffmanCoding &#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildHuffmanTree</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Initialization</span><span class="params">(<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt;&gt; chars)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Finalization</span><span class="params">()</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HFMNode</span> &#123;</span></span><br><span class="line">  <span class="keyword">char</span> Ch; <span class="keyword">int</span> Freq;</span><br><span class="line">  HFMNode* Left, * Right;</span><br><span class="line">  HFMNode(<span class="keyword">char</span> pCh, <span class="keyword">int</span> pFreq, HFMNode* pLeft, HFMNode* pRight)</span><br><span class="line">    : Ch(pCh), Freq(pFreq), Left(pLeft), Right(pRight) &#123;&#125;</span><br><span class="line">  HFMNode(<span class="keyword">char</span> pCh, <span class="keyword">int</span> pFreq)</span><br><span class="line">    : HFMNode(pCh, pFreq, <span class="literal">NULL</span>, <span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MinHeapify</span><span class="params">(<span class="built_in">vector</span>&lt;HFMNode*&gt;&amp; H)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertH</span><span class="params">(<span class="built_in">vector</span>&lt;HFMNode*&gt;&amp; H, HFMNode* node)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SiftDown</span><span class="params">(<span class="built_in">vector</span>&lt;HFMNode*&gt;&amp; H, <span class="keyword">int</span> i)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SiftUp</span><span class="params">(<span class="built_in">vector</span>&lt;HFMNode*&gt;&amp; H, <span class="keyword">int</span> i)</span></span>;</span><br><span class="line"><span class="function">HFMNode* <span class="title">ExtractMin</span><span class="params">(<span class="built_in">vector</span>&lt;HFMNode*&gt;&amp; H)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteANode</span><span class="params">(HFMNode* node)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowInput</span><span class="params">(<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt;&gt; chars)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">vector</span>&lt;HFMNode*&gt; Q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HuffmanCodingCaller</span><span class="params">(<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt;&gt; chars)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ShowInput(chars);</span><br><span class="line">  Initialization(chars);</span><br><span class="line">  BuildHuffmanTree();</span><br><span class="line">  Output();</span><br><span class="line">  Finalization();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuildHuffmanTree</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> C = <span class="string">'A'</span>;</span><br><span class="line">  <span class="keyword">while</span> (Q.size() &gt; <span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    HFMNode* x = ExtractMin(Q);</span><br><span class="line">    HFMNode* y = ExtractMin(Q);</span><br><span class="line">    HFMNode* z = <span class="keyword">new</span> HFMNode(C++, x-&gt;Freq + y-&gt;Freq, x, y);</span><br><span class="line">    InsertH(Q, z);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">HFMNode* <span class="title">ExtractMin</span><span class="params">(<span class="built_in">vector</span>&lt;HFMNode*&gt;&amp; H)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  swap(H.front(), H.back());</span><br><span class="line">  HFMNode* p = H.back();</span><br><span class="line">  H.pop_back();</span><br><span class="line">  <span class="keyword">if</span> (!H.empty())</span><br><span class="line">    SiftDown(H, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SiftDown</span><span class="params">(<span class="built_in">vector</span>&lt;HFMNode*&gt;&amp; H, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> ((i = (i &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>) &lt; H.size()) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((i + <span class="number">1</span> &lt; H.size()) &amp;&amp; (H[i + <span class="number">1</span>]-&gt;Freq &lt; H[i]-&gt;Freq))</span><br><span class="line">            i = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (H[(i - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>]-&gt;Freq &gt; H[i]-&gt;Freq)</span><br><span class="line">            swap(H[(i - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>], H[i]);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertH</span><span class="params">(<span class="built_in">vector</span>&lt;HFMNode*&gt;&amp; H, HFMNode* node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  H.push_back(node);</span><br><span class="line">  SiftUp(H, H.size() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SiftUp</span><span class="params">(<span class="built_in">vector</span>&lt;HFMNode*&gt;&amp; H, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (i &gt; <span class="number">0</span> &amp;&amp; H[i]-&gt;Freq &lt; H[(i - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>]-&gt;Freq) &#123;</span><br><span class="line">    swap(H[i], H[(i - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>]);</span><br><span class="line">    i = (i - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MinHeapify</span><span class="params">(<span class="built_in">vector</span>&lt;HFMNode*&gt;&amp; H)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = (H.size() &gt;&gt; <span class="number">1</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    SiftDown(H, i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Initialization</span><span class="params">(<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt;&gt; chars)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Q.clear();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> ch : chars)</span><br><span class="line">    Q.push_back(<span class="keyword">new</span> HFMNode(ch.first, ch.second));</span><br><span class="line">  MinHeapify(Q);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Finalization</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  DeleteANode(Q[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteANode</span><span class="params">(HFMNode* node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (node-&gt;Left)</span><br><span class="line">  &#123;</span><br><span class="line">    DeleteANode(node-&gt;Left);</span><br><span class="line">    DeleteANode(node-&gt;Right);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowInput</span><span class="params">(<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt;&gt; chars)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Huffman coding input: \n"</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> c : chars)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c,%d; "</span>, c.first, c.second);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; coding;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">char</span>, <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&gt; codingList;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetHuffmanCoding</span><span class="params">(HFMNode* node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (node-&gt;Left)</span><br><span class="line">  &#123;</span><br><span class="line">    coding.push_back(<span class="string">'0'</span>);</span><br><span class="line">    GetHuffmanCoding(node-&gt;Left);</span><br><span class="line">    coding.pop_back();</span><br><span class="line">    coding.push_back(<span class="string">'1'</span>);</span><br><span class="line">    GetHuffmanCoding(node-&gt;Right);</span><br><span class="line">    coding.pop_back();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    codingList.push_back(pair&lt;<span class="keyword">char</span>,</span><br><span class="line">      <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;(node-&gt;Ch, coding));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Huffman coding:\n"</span>);</span><br><span class="line">  coding.clear();</span><br><span class="line">  codingList.clear();</span><br><span class="line">  GetHuffmanCoding(Q[<span class="number">0</span>]);</span><br><span class="line">  sort(codingList.begin(), codingList.end());</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> c1 : codingList)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"  %c: "</span>, c1.first);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> c2 : c1.second)</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%c"</span>, c2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="comment">//namespace NS_HuffmanCoding</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> NS_HuffmanCoding;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestHuffmanCoding</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt;&gt;&gt; charLists = &#123;</span><br><span class="line">      <span class="comment">//Introduction to Algorithms</span></span><br><span class="line">     &#123;</span><br><span class="line">        &#123; &#123;<span class="string">'a'</span>,<span class="number">40</span>&#125;, &#123;<span class="string">'b'</span>,<span class="number">13</span>&#125;, &#123;<span class="string">'c'</span>,<span class="number">12</span>&#125;,</span><br><span class="line">          &#123;<span class="string">'d'</span>,<span class="number">16</span>&#125;, &#123;<span class="string">'e'</span>,<span class="number">9</span>&#125;, &#123;<span class="string">'f'</span>,<span class="number">5</span>&#125; &#125;,</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="comment">//ÑÏÎµÃô</span></span><br><span class="line">     &#123;</span><br><span class="line">        &#123; &#123;<span class="string">'a'</span>,<span class="number">5</span>&#125;, &#123;<span class="string">'b'</span>,<span class="number">29</span>&#125;, &#123;<span class="string">'c'</span>,<span class="number">7</span>&#125;, &#123;<span class="string">'d'</span>,<span class="number">8</span>&#125;,</span><br><span class="line">          &#123;<span class="string">'e'</span>,<span class="number">14</span>&#125;, &#123;<span class="string">'f'</span>,<span class="number">23</span>&#125;, &#123;<span class="string">'g'</span>,<span class="number">3</span>&#125;, &#123;<span class="string">'h'</span>,<span class="number">11</span>&#125; &#125;,</span><br><span class="line">     &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">int</span> n = charLists.size();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    HuffmanCodingCaller(charLists[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>贪心算法-Kruskal 算法</title>
      <link href="blog/ghf568/"/>
      <url>blog/ghf568/</url>
      
        <content type="html"><![CDATA[<h2 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h2><p><strong>连通图</strong></p><blockquote><p>在<a href="https://baike.baidu.com/item/%E5%9B%BE%E8%AE%BA/1433806" target="_blank" rel="noopener">图论</a>中，连通图基于连通的概念。在一个<a href="https://baike.baidu.com/item/%E6%97%A0%E5%90%91%E5%9B%BE/1680427" target="_blank" rel="noopener">无向图</a> G 中，若从<a href="https://baike.baidu.com/item/%E9%A1%B6%E7%82%B9/11030118" target="_blank" rel="noopener">顶点</a>i 到顶点 j 有路径相连（当然从 j 到 i 也一定有路径），则称 i 和 j 是连通的。如果 G 是<a href="https://baike.baidu.com/item/%E6%9C%89%E5%90%91%E5%9B%BE" target="_blank" rel="noopener">有向图</a>，那么连接 i 和 j 的路径中所有的边都必须同向。如果图中任意两点都是连通的，那么图被称作连通图。如果此图是有向图，则称为强连通图（注意：需要双向都有路径）。图的<a href="https://baike.baidu.com/item/%E8%BF%9E%E9%80%9A%E6%80%A7/6688865" target="_blank" rel="noopener">连通性</a>是图的基本性质。</p></blockquote><p><strong>生成树</strong></p><blockquote><p>包含图的全部顶点，边数最少的连通子图</p></blockquote><p><strong>最小生成树</strong></p><blockquote><p>总权值最小的生成树</p></blockquote><p>常见问题（该算法）就是求最小生成树。<br><strong>并查集</strong></p><blockquote><p>是一个数据结构，功能有查找 a 和 b 是否为同一组；将 a 和 b 合并为同一组。</p></blockquote><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>把所有边按照权值全部按数值大小拿出来，然后按顺序选取每条边，利用并查集的思想，如果这条边的两个端点不属于同一集合，那么就将它们合并，直到所有的点都属于同一个集合为止。</p><p>比如有如下这么一个图：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1605320252853-c5d445e4-aa0e-4279-b9fd-7477f23b1bc1.png#align=left&amp;display=inline&amp;height=95&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=189&amp;originWidth=438&amp;size=10882&amp;status=done&amp;style=shadow&amp;width=219" alt="image.png"><br>单独分析 ①② 边和 ③④ 边情况下，两个不在一个集合里面，<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1605320331669-51ec03dc-caf6-449d-9e8b-e4e62b9f35a6.png#align=left&amp;display=inline&amp;height=96&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=192&amp;originWidth=769&amp;size=21600&amp;status=done&amp;style=shadow&amp;width=384.5" alt="image.png"><br>不断重复，不断判断是否为同一个集合，不在同一个集合的话，就合并，持续如此。比方说当一直操作到权值为 3 的时候，此时就需要将左右两个集合合并了<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1605320497092-00097419-4852-44c4-884e-febd4d37eb65.png#align=left&amp;display=inline&amp;height=101&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=202&amp;originWidth=748&amp;size=22229&amp;status=done&amp;style=shadow&amp;width=374" alt="image.png"><br>最后的结果样式就为如下<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1605320612085-d893c759-4ef1-410c-976e-8f32ddfe6321.png#align=left&amp;display=inline&amp;height=146&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=292&amp;originWidth=780&amp;size=31319&amp;status=done&amp;style=shadow&amp;width=390" alt="image.png"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> NS_KruskalMST &#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KruskalMST</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindSet</span><span class="params">(<span class="keyword">int</span> u)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UnionSets</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Initialization</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GenEdges</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeSets</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">(<span class="keyword">int</span> v0)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF INT_MAX</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; WMatrix;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">vector</span>&lt;pair&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="keyword">int</span>&gt;&gt; Edges;</span><br><span class="line"><span class="comment">//Node struct for the disjoint set</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DJSNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> Parent; <span class="keyword">int</span> Rank;</span><br><span class="line">    DJSNode(<span class="keyword">int</span> p) : Parent(p), Rank(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">vector</span>&lt;DJSNode&gt; DisjointSet;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; MST;</span><br><span class="line"><span class="comment">//The adjacency list for MST</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; MSTList;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Prev;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KruskalMSTCaller</span><span class="params">(<span class="keyword">int</span> an,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;wMatrix, <span class="keyword">int</span> v0)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = an;</span><br><span class="line">    WMatrix = wMatrix;</span><br><span class="line">    Initialization();</span><br><span class="line">    KruskalMST();</span><br><span class="line">    Output(v0);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KruskalMST</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e: Edges)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = e.first.first;</span><br><span class="line">        <span class="keyword">int</span> v = e.first.second;</span><br><span class="line">        <span class="keyword">int</span> setU = FindSet(u);</span><br><span class="line">        <span class="keyword">int</span> setV = FindSet(v);</span><br><span class="line">        <span class="keyword">if</span> (setU != setV)</span><br><span class="line">        &#123;</span><br><span class="line">            MST.push_back(e.first);</span><br><span class="line">            <span class="keyword">if</span> (MST.size() == n - <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            UnionSets(setU, setV);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindSet</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (u != DisjointSet[u].Parent)</span><br><span class="line">        u = DisjointSet[u].Parent;</span><br><span class="line">        <span class="comment">//For path compression:</span></span><br><span class="line">        <span class="comment">//DisjointSet[u].Parent =</span></span><br><span class="line">        <span class="comment">//    FindSet(DisjointSet[u].Parent);</span></span><br><span class="line">    <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UnionSets</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (DisjointSet[u].Rank &gt;= DisjointSet[v].Rank)</span><br><span class="line">        DisjointSet[v].Parent = u;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        DisjointSet[u].Parent = v;</span><br><span class="line">    <span class="keyword">if</span> (DisjointSet[u].Rank == DisjointSet[v].Rank)</span><br><span class="line">        DisjointSet[u].Rank++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Initialization</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GenEdges();</span><br><span class="line">    sort(Edges.begin(), Edges.end(),</span><br><span class="line">        [](pair&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="keyword">int</span>&gt;a,</span><br><span class="line">            pair&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="keyword">int</span>&gt;b)</span><br><span class="line">        &#123;<span class="keyword">return</span> a.second &lt; b.second; &#125;);</span><br><span class="line">    MakeSets();</span><br><span class="line">    MST.clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GenEdges</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Edges.clear();</span><br><span class="line">    <span class="comment">//Traverse the upper triangle of WMatrix</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">            <span class="keyword">if</span> (WMatrix[i][j] != INF)</span><br><span class="line">                Edges.push_back(&#123; &#123;i, j&#125;,</span><br><span class="line">                    WMatrix[i][j] &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeSets</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DisjointSet.clear();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        DisjointSet.push_back(DJSNode(i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OutputWMatrix</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"n = %d\n"</span>, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The weight matrix:\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%3c"</span>, <span class="string">' '</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%3d"</span>, j + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%3d"</span>, i + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> j : WMatrix[i])</span><br><span class="line">            <span class="keyword">if</span> (j &lt; INF)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%3d"</span>, j);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%3c"</span>, <span class="string">'*'</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OutputPath</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Prev[u] == <span class="number">-1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, u + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        OutputPath(Prev[u]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"-%d"</span>, u + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GenMSTList</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MSTList.clear();</span><br><span class="line">    MSTList.resize(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e: MST)</span><br><span class="line">    &#123;</span><br><span class="line">        MSTList[e.first].push_back(e.second);</span><br><span class="line">        MSTList[e.second].push_back(e.first);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GenPrev</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;u : MSTList[v])</span><br><span class="line">        <span class="keyword">if</span> (u != <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Prev[u] = v;</span><br><span class="line">            <span class="keyword">auto</span> w = find(MSTList[u].begin(),</span><br><span class="line">                MSTList[u].end(), v);</span><br><span class="line">            MSTList[u][w - MSTList[u].begin()] = <span class="number">-1</span>;</span><br><span class="line">            GenPrev(u);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">(<span class="keyword">int</span> v0)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Kruskal's MST algorithm\n"</span>);</span><br><span class="line">    OutputWMatrix();</span><br><span class="line">    <span class="keyword">int</span> wSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">        wSum += WMatrix[MST[i].first][MST[i].second];</span><br><span class="line">    GenMSTList();</span><br><span class="line">    Prev.clear();</span><br><span class="line">    Prev.resize(n);</span><br><span class="line">    Prev[v0] = <span class="number">-1</span>;</span><br><span class="line">    GenPrev(v0);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The MST edges:\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Edge Weight\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e : MST)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" %d-%d  %d\n"</span>, e.first + <span class="number">1</span>, e.second + <span class="number">1</span>,</span><br><span class="line">            WMatrix[e.first][e.second]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Total MST weight: %d\n"</span>, wSum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The MST paths from vertex %d:\n"</span>, v0 + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; n; u++)</span><br><span class="line">        <span class="keyword">if</span> (u != v0)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%3d: "</span>, u + <span class="number">1</span>);</span><br><span class="line">            OutputPath(u);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="comment">//namespace NS_KruskalMST</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> NS_KruskalMST;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestKruskalMST</span><span class="params">(<span class="keyword">int</span> v0 = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&gt; w = &#123;</span><br><span class="line">        <span class="comment">//https://www.geeksforgeeks.org/</span></span><br><span class="line">        <span class="comment">//prims-minimum-spanning-tree-mst-greedy-algo-5/</span></span><br><span class="line">        &#123;</span><br><span class="line">            &#123;   <span class="number">0</span>,  <span class="number">2</span>,INF,  <span class="number">6</span>,INF &#125;,</span><br><span class="line">            &#123;   <span class="number">2</span>,  <span class="number">0</span>,  <span class="number">3</span>,  <span class="number">8</span>,  <span class="number">5</span> &#125;,</span><br><span class="line">            &#123; INF,  <span class="number">3</span>,  <span class="number">0</span>,INF,  <span class="number">7</span> &#125;,</span><br><span class="line">            &#123;   <span class="number">6</span>,  <span class="number">8</span>,INF,  <span class="number">0</span>,  <span class="number">9</span> &#125;,</span><br><span class="line">            &#123; INF,  <span class="number">5</span>,  <span class="number">7</span>,  <span class="number">9</span>,  <span class="number">0</span> &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// Dijkstra's algorithm on Wikipedia</span></span><br><span class="line">        &#123;</span><br><span class="line">            &#123;   <span class="number">0</span>,  <span class="number">7</span>,  <span class="number">9</span>,INF,INF, <span class="number">14</span> &#125;,</span><br><span class="line">            &#123;   <span class="number">7</span>,  <span class="number">0</span>, <span class="number">10</span>, <span class="number">15</span>,INF,INF &#125;,</span><br><span class="line">            &#123;   <span class="number">9</span>, <span class="number">10</span>,  <span class="number">0</span>, <span class="number">11</span>,INF,  <span class="number">2</span> &#125;,</span><br><span class="line">            &#123; INF, <span class="number">15</span>, <span class="number">11</span>,  <span class="number">0</span>,  <span class="number">6</span>,INF &#125;,</span><br><span class="line">            &#123; INF,INF,INF,  <span class="number">6</span>,  <span class="number">0</span>,  <span class="number">9</span> &#125;,</span><br><span class="line">            &#123;  <span class="number">14</span>,INF,  <span class="number">2</span>,INF,  <span class="number">9</span>,  <span class="number">0</span> &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//https://www.geeksforgeeks.org/</span></span><br><span class="line">        <span class="comment">//kruskals-minimum-spanning-tree-using-stl-in-c/</span></span><br><span class="line">        &#123;</span><br><span class="line">            &#123;   <span class="number">0</span>,  <span class="number">4</span>,INF,INF,INF,INF,INF,  <span class="number">8</span>,INF &#125;,</span><br><span class="line">            &#123;   <span class="number">4</span>,  <span class="number">0</span>,  <span class="number">8</span>,INF,INF,INF,INF, <span class="number">11</span>,INF &#125;,</span><br><span class="line">            &#123; INF,  <span class="number">8</span>,  <span class="number">0</span>,  <span class="number">7</span>,INF,  <span class="number">4</span>,INF,INF,  <span class="number">2</span> &#125;,</span><br><span class="line">            &#123; INF,INF,  <span class="number">7</span>,  <span class="number">0</span>,  <span class="number">9</span>, <span class="number">14</span>,INF,INF,INF &#125;,</span><br><span class="line">            &#123; INF,INF,INF,  <span class="number">9</span>,  <span class="number">0</span>, <span class="number">10</span>,INF,INF,INF &#125;,</span><br><span class="line">            &#123; INF,INF,  <span class="number">4</span>, <span class="number">14</span>, <span class="number">10</span>,  <span class="number">0</span>,  <span class="number">2</span>,INF,INF &#125;,</span><br><span class="line">            &#123; INF,INF,INF,INF,INF,  <span class="number">2</span>,  <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">6</span> &#125;,</span><br><span class="line">            &#123;   <span class="number">8</span>, <span class="number">11</span>,INF,INF,INF,INF,  <span class="number">1</span>,  <span class="number">0</span>,  <span class="number">7</span> &#125;,</span><br><span class="line">            &#123; INF,INF,  <span class="number">2</span>,INF,INF,INF,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">0</span> &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">int</span> k = w.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (v0 &gt; w[i].size() - <span class="number">1</span>)</span><br><span class="line">        v0 = w[i].size() - <span class="number">1</span>;</span><br><span class="line">      KruskalMSTCaller(w[i].size(), w[i], v0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建Windows子系统Linux</title>
      <link href="blog/xnh83z/"/>
      <url>blog/xnh83z/</url>
      
        <content type="html"><![CDATA[<h2 id="Windows-子系统-Linux"><a href="#Windows-子系统-Linux" class="headerlink" title="Windows 子系统 Linux"></a>Windows 子系统 Linux</h2><h3 id="子系统-Linux-下载安装"><a href="#子系统-Linux-下载安装" class="headerlink" title="子系统 Linux 下载安装"></a>子系统 Linux 下载安装</h3><p>在 windows 里面搜索 <code>windows功能</code><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1604913834448-30d164c9-e0a6-47f8-baac-03c5d6648186.png#align=left&amp;display=inline&amp;height=517&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1033&amp;originWidth=1176&amp;size=659449&amp;status=done&amp;style=shadow&amp;width=588" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1604913865729-b20b3a35-ab49-48c9-be97-9f3c56d6d7a6.png#align=left&amp;display=inline&amp;height=295&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=590&amp;originWidth=623&amp;size=61833&amp;status=done&amp;style=shadow&amp;width=311.5" alt="image.png"><br>然后已知下一步操作即可，该过程中会有重启的过程。<br>之后重启之后在应用商店下载 Ubuntu 系统，如下。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1604913776014-38c5ce17-996d-4827-8c49-bb047b2f7d3c.png#align=left&amp;display=inline&amp;height=339&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=948&amp;originWidth=1200&amp;size=183352&amp;status=done&amp;style=shadow&amp;width=429" alt="image.png"><br>然后启动的时候，会有让自己输入用户名和密码的情况。输入确认就好了（<strong>输入密码的时候，终端内不会显示光标以及输入的字符！但是会有密码验证</strong>）</p><h3 id="子系统-Linux-文件目录"><a href="#子系统-Linux-文件目录" class="headerlink" title="子系统 Linux 文件目录"></a>子系统 Linux 文件目录</h3><p><code>C:\Users\wztli\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState\rootfs\home\wztlink1013</code><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1604914117863-4fc253c2-1978-44b1-94c6-48e82a3ddf3a.png#align=left&amp;display=inline&amp;height=111&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=221&amp;originWidth=1468&amp;size=28524&amp;status=done&amp;style=shadow&amp;width=734" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1604914176405-056c5008-8168-40f8-a599-0e7951cad309.png#align=left&amp;display=inline&amp;height=293&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=585&amp;originWidth=1406&amp;size=115194&amp;status=done&amp;style=shadow&amp;width=703" alt="image.png"></p><h3 id="Linux-访问-Windows-文件"><a href="#Linux-访问-Windows-文件" class="headerlink" title="Linux 访问 Windows 文件"></a>Linux 访问 Windows 文件</h3><p>如下图中 1 所示，访问时，需要先将 Windows 磁盘挂载到/mnt 下面，然后就可以访问了。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1604914600884-f758bc8f-668d-4354-be9f-f9be774cfff1.png#align=left&amp;display=inline&amp;height=189&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=378&amp;originWidth=1122&amp;size=63616&amp;status=done&amp;style=shadow&amp;width=561" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Environment </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>uni-app简单api调用</title>
      <link href="blog/ytoag7/"/>
      <url>blog/ytoag7/</url>
      
        <content type="html"><![CDATA[<h2 id="uni-app-相对传统的变化"><a href="#uni-app-相对传统的变化" class="headerlink" title="uni-app 相对传统的变化"></a>uni-app 相对传统的变化</h2><h3 id="网络模型的变化"><a href="#网络模型的变化" class="headerlink" title="网络模型的变化"></a>网络模型的变化</h3><p>之前学习的<code>javaweb</code>形式的是“相互嵌套”类型的，<code>jsp</code>代码里面可以有<code>html</code>代码。</p><p>以前网页大多是 b/s，服务端代码混合在页面里；<br>现在是 c/s，前后端分离，通过 js api(类似 ajax 的<code>uni.request</code>)获取 json 数据，把数据绑定在界面上渲染。</p><h3 id="文件类型变化"><a href="#文件类型变化" class="headerlink" title="文件类型变化"></a>文件类型变化</h3><p>.vue 文件通过编译，编译 js 文件</p><h3 id="代码架构大变动"><a href="#代码架构大变动" class="headerlink" title="代码架构大变动"></a>代码架构大变动</h3><p>以前的 HTML 代码节点，有 html 大节点，还有 script 和 style 两个小结点</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在 template 是一级节点，用于写<strong>tag 组件</strong>，script 和 style 是并列的一级节点，也就是有 3 个一级节点</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    注意必须有一个view，且只能有一个根view。所有内容写在这个view下面。</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li><a href="https://cn.vuejs.org/v2/guide/single-file-components.html" target="_blank" rel="noopener">Vue 单文件组件</a></li></ul><p>###</p><h3 id="组件-标签的变化"><a href="#组件-标签的变化" class="headerlink" title="组件/标签的变化"></a>组件/标签的变化</h3><p>下为 html 标签和 uni-app 内置组件的映射表：<br>（其实老的 HTML 标签也可以在 uni-app 里使用，uni-app 编译器会在编译时把老标签转为新标签，比如把 div 编译成 view。但不推荐这种用法，调试 H5 端时容易混乱。）</p><ul><li>div 改成 <a href="https://uniapp.dcloud.io/component/view" target="_blank" rel="noopener">view</a></li><li>span、font 改成 <a href="https://uniapp.dcloud.io/component/text" target="_blank" rel="noopener">text</a></li><li>a 改成 <a href="https://uniapp.dcloud.io/component/navigator" target="_blank" rel="noopener">navigator</a></li><li>img 改成 <a href="https://uniapp.dcloud.io/component/image" target="_blank" rel="noopener">image</a></li><li><a href="https://uniapp.dcloud.io/component/input" target="_blank" rel="noopener">input</a> 还在，但 type 属性改成了 confirmtype</li><li><a href="https://uniapp.dcloud.io/component/form" target="_blank" rel="noopener">form</a>、<a href="https://uniapp.dcloud.io/component/button" target="_blank" rel="noopener">button</a>、<a href="https://uniapp.dcloud.io/component/checkbox" target="_blank" rel="noopener">checkbox</a>、<a href="https://uniapp.dcloud.io/component/radio" target="_blank" rel="noopener">radio</a>、<a href="https://uniapp.dcloud.io/component/label" target="_blank" rel="noopener">label</a>、<a href="https://uniapp.dcloud.io/component/textarea" target="_blank" rel="noopener">textarea</a>、<a href="https://uniapp.dcloud.io/component/canvas" target="_blank" rel="noopener">canvas</a>、<a href="https://uniapp.dcloud.io/component/video" target="_blank" rel="noopener">video</a> 这些还在。</li><li>select 改成 <a href="https://uniapp.dcloud.io/component/picker" target="_blank" rel="noopener">picker</a></li><li>iframe 改成 <a href="https://uniapp.dcloud.io/component/web-view" target="_blank" rel="noopener">web-view</a></li><li>ul、li 没有了，都用 view 替代</li><li>audio 不再推荐使用，改成 api 方式，<a href="https://uniapp.dcloud.io/api/media/background-audio-manager?id=getbackgroundaudiomanager" target="_blank" rel="noopener">背景音频 api 文档</a></li></ul><p><strong>除了改动外，新增了一批手机端常用的新组件</strong><br>**</p><ul><li>scroll-view <a href="https://uniapp.dcloud.io/component/scroll-view" target="_blank" rel="noopener">可区域滚动视图容器</a></li><li>swiper <a href="https://uniapp.dcloud.io/component/swiper" target="_blank" rel="noopener">可滑动区域视图容器</a></li><li>icon <a href="https://uniapp.dcloud.io/component/icon" target="_blank" rel="noopener">图标</a></li><li>rich-text <a href="https://uniapp.dcloud.io/component/rich-text" target="_blank" rel="noopener">富文本（不可执行 js，但可渲染各种文字格式和图片）</a></li><li>progress <a href="https://uniapp.dcloud.io/component/progress" target="_blank" rel="noopener">进度条</a></li><li>slider <a href="https://uniapp.dcloud.io/component/slider" target="_blank" rel="noopener">滑块指示器</a></li><li>switch <a href="https://uniapp.dcloud.io/component/switch" target="_blank" rel="noopener">开关选择器</a></li><li>camera <a href="https://uniapp.dcloud.io/component/camera" target="_blank" rel="noopener">相机</a></li><li>live-player <a href="https://uniapp.dcloud.io/component/live-player" target="_blank" rel="noopener">直播</a></li><li>map <a href="https://uniapp.dcloud.io/component/map" target="_blank" rel="noopener">地图</a></li><li>cover-view <a href="https://uniapp.dcloud.io/component/cover-view?id=cover-view" target="_blank" rel="noopener">可覆盖原生组件的视图容器</a><br>cover-view 需要多强调几句，uni-app 的非 h5 端的 video、map、canvas、textarea 是原生组件，层级高于其他组件。如需覆盖原生组件，则需要使用 cover-view 组件。详见<a href="https://uniapp.dcloud.net.cn/component/native-component" target="_blank" rel="noopener">层级介绍</a></li></ul><p>除了内置组件，还有很多开源的扩展组件，把常用操作都进行封装，DCloud 建立了插件市场收录这些扩展组件，详见<a href="https://ext.dcloud.net.cn/" target="_blank" rel="noopener">插件市场</a></p><p>**</p><h3 id="工程结构和页面管理"><a href="#工程结构和页面管理" class="headerlink" title="工程结构和页面管理"></a>工程结构和页面管理</h3><p>uni-app 的工程结构有单独的要求，<a href="https://uniapp.dcloud.io/frame?id=%e7%9b%ae%e5%bd%95%e7%bb%93%e6%9e%84" target="_blank" rel="noopener">详见</a></p><p>每个可显示的页面，都必须在 <a href="https://uniapp.dcloud.io/collocation/pages" target="_blank" rel="noopener">pages.json</a> 中注册。如果你开发过小程序，那么 pages.json 类似 app.json。如果你熟悉 vue，这里没有 vue 的路由，都是在 pages.json 里管理。</p><p>原来工程的首页一般是 index.html 或 default.html，是在 web server 里配的。而 uni-app 的首页，是在 pages.json 里配的，page 节点下第一个页面就是首页。一般在/pages/xx 的目录下。</p><p>app 和小程序中，为了提升体验，页面提供了原生的导航栏和底部 tabbar，注意这些配置是在 pages.json 中做，而不是在 vue 页面里创建，但点击事件的监听在显示的 vue 页面中做。</p><p>如果你熟悉小程序开发的话，对比变化如下：</p><ul><li>原来 app.json 被一拆为二。页面管理，被挪入了 uni-app 的 pages.json；非页面管理，挪入了 manifest.json</li><li>原来的 app.js 和 app.wxss 被合并到了 app.vue 中</li></ul><h2 id="文件导入方式变化"><a href="#文件导入方式变化" class="headerlink" title="文件导入方式变化"></a>文件导入方式变化</h2><h3 id="js-引入方式"><a href="#js-引入方式" class="headerlink" title="js 引入方式"></a>js 引入方式</h3><p>以前通过<code>script `</code>src <code>、</code> link <code></code>href <code>引入外部的 js 和 css；现在是**es6**的写法，</code>import`引入外部的 js 模块(注意不是文件)或 css<br>以前</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"js/jquery-1.10.2.js"</span> type=<span class="string">"text/javascript"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;link href="css/</span>bootstrap.css<span class="string">" rel="</span>stylesheet<span class="string">" type="</span>text/css<span class="string">"/&gt;</span></span><br></pre></td></tr></table></figure><p>现在</p><blockquote><p>js 要 require 进来，变成了对象。</p></blockquote><p>在 hello uni-app 项目的 common 目录有一个工具类<code>util.js</code>，可以在 hello uni-app 中搜索这个例子查看。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'../../../common/util.js'</span>); <span class="comment">//require这个js模块 var</span></span><br><span class="line">  formatedPlayTime = util.formatTime(playTime); <span class="comment">//调用js模块的方法</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>而在这个<code>util.js</code>里，要把之前的 function 封装为对象的方法<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1604048264989-b4591bb0-e4bc-4581-aae5-bf7615f268b4.png#align=left&amp;display=inline&amp;height=231&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=606&amp;originWidth=1331&amp;size=70716&amp;status=done&amp;style=shadow&amp;width=508" alt="image.png"><br>当然还有一些高级的用法</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dateUtils = <span class="built_in">require</span>(<span class="string">"../../../common/util.js"</span>).dateUtils; <span class="comment">//直接使用js模块的属性。在hello uni-app有示例</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">"/components/echarts/echarts.simple.min.js"</span>; <span class="comment">//将js导入并重命名为echarts，然后使用echarts.来继续执行方法。</span></span><br></pre></td></tr></table></figure><h3 id="CSS-引入方式"><a href="#CSS-引入方式" class="headerlink" title="CSS 引入方式"></a>CSS 引入方式</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="keyword">@import</span> <span class="string">"./common/uni.css"</span>;</span><br><span class="line">    <span class="selector-class">.uni-hello-text</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>:<span class="number">#7A7E83</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>改全局样式：</strong>在根目录下的 app.vue 里写入，每个页面都会加载 app.vue 里的样式。</p><h3 id="组件导入"><a href="#组件导入" class="headerlink" title="组件导入"></a>组件导入</h3><p>类似 hexo 博客主题设计一样，能以组件的形式模块化导入。<br>如下是导入一个角标的组件库，在页面上显示一个 abc 并且右上角有个数字角标 1，<a href="http://ext.dcloud.net.cn/plugin?id=21" target="_blank" rel="noopener">详见</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    &lt;uni-badge text=&quot;abc&quot; :inverted=&quot;true&quot;&gt;&lt;/uni-badge</span><br><span class="line">    &gt;&lt;!--3.使用组件--&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import uniBadge from &quot;../../../components/uni-badge.vue&quot;; //1.导入组件（这步属于传统vue规范，但在uni-app的easycom下可以省略这步）</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    uniBadge, //2.注册组件（这步属于传统vue规范，但在uni-app的easycom下可以省略这步）</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>如需要全局导入 vue 组件，即每个页面都可以直接使用而不用引用和注册的话，在项目根目录下的 main.js 里处理。如下是 hello uni-app 里的例子。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> pageHead <span class="keyword">from</span> <span class="string">"./components/page-head.vue"</span>; <span class="comment">//导入</span></span><br><span class="line">Vue.component(<span class="string">"page-head"</span>, pageHead); <span class="comment">//注册。注册后在每个vue的page页面里可以直接使用&lt;page-head&gt;&lt;/page-head&gt;组件。</span></span><br></pre></td></tr></table></figure><p>上述的组件使用方式属于传统 vue 的概念。uni-app 2.7 以后推出了更简单的组件使用技术<a href="https://uniapp.dcloud.net.cn/collocation/pages?id=easycom" target="_blank" rel="noopener">easycom</a>，无需引用和注册组件，直接在 template 区域使用组件即可。</p><h2 id="js-的变化"><a href="#js-的变化" class="headerlink" title="js 的变化"></a>js 的变化</h2><p>js 的变化，分为<strong>运行环境变化</strong>、<strong>数据绑定模式变化</strong>、<strong>api 变化</strong>3 部分。</p><h3 id="运行环境从浏览器变成-v8-引擎"><a href="#运行环境从浏览器变成-v8-引擎" class="headerlink" title="运行环境从浏览器变成 v8 引擎"></a>运行环境从浏览器变成 v8 引擎</h3><p>标准 js 语法和 api 都支持，比如 if、for、settimeout、indexOf 等。</p><p>但<strong>浏览器专用的</strong>window、document、navigator、location 对象，包括 cookie 等存储，<strong>只有在浏览器中才有</strong>，app 和小程序都不支持。</p><blockquote><p>可能有些人以为 js 等于浏览器里的 js。其实 js 是 ECMAScript 组织管理的，浏览器中的 js 是 w3c 组织基于 js 规范补充了 window、document、navigator、location 等专用对象。</p></blockquote><p>在 uni-app 的各个端中，除了 h5 端，其他端的 js 都运行在一个独立的 v8 引擎下，不是在浏览器中，所以浏览器的对象无法使用。如果你做过小程序开发，对此应当很了解。<br><strong>这意味着依赖 document 的很多 HTML 的库，比如 jqurey 无法使用。</strong><br>当然 app 和小程序支持 web-view 组件，里面可以加载标准 HTML，这种页面仍然支持浏览器专用对象 window、document、navigator、location。</p><h3 id="以前的-dom-操作，改成-vue-的-MVVM-模式"><a href="#以前的-dom-操作，改成-vue-的-MVVM-模式" class="headerlink" title="以前的 dom 操作，改成 vue 的 MVVM 模式"></a>以前的 dom 操作，改成 vue 的 MVVM 模式</h3><p>现在前端趋势是去 dom 化，改用<strong>mvvm 模式，</strong>更简洁的写法，大幅减少代码行数，同时差量渲染性能更好。<br>uni-app 使用 vue 的数据绑定方式解决 js 和 dom 界面交互的问题。<br>如果你想改变某个 dom 元素的显示内容，比如一个 view 的显示文字：<br><strong>以前</strong>是给 view 设 id，然后 js 里通过选择器获取 dom 元素，进一步通过 js 进行赋值操作，修改 dom 元素的属性或值。<br>如下演示了一段代码，页面中有个显示的文字区和一个按钮，点击按钮后会修改文字区的值</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.addEventListener(<span class="string">"DOMContentLoaded"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"spana"</span>).innerText = <span class="string">"456"</span>;</span></span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">changetextvalue</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"spana"</span>).innerText = <span class="string">"789"</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"spana"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"changetextvalue()"</span>&gt;</span>修改为789<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在的做法，是<strong>vue 的绑定模式</strong>，给这个<strong>dom 元素绑定一个 js 变量</strong>，在 script 中修改 js 变量的值，dom 会自动变化，页面会自动更新渲染</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    &lt;text&gt;&#123;&#123; textvalue &#125;&#125;&lt;/text</span><br><span class="line">    &gt;&lt;!-- 这里演示了组件值的绑定 --&gt;</span><br><span class="line">    &lt;button :type=&quot;buttontype&quot; @click=&quot;changetextvalue()&quot;&gt;修改为789&lt;/button</span><br><span class="line">    &gt;&lt;!-- 这里演示了属性和事件的绑定 --&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      textvalue: &quot;123&quot;,</span><br><span class="line">      buttontype: &quot;primary&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  onLoad() &#123;</span><br><span class="line">    this.textvalue = &quot;456&quot;; //这里修改textvalue的值，其实123都来不及显示就变成了456</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    changetextvalue() &#123;</span><br><span class="line">      this.textvalue = &quot;789&quot;; //这里修改textvalue的值，页面自动刷新为789</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>注意上述代码中的 <code>export default {}</code> 里的 <code>data(): {return { }}</code>。<br>在 vue 的设计中，这里存放着页面中需要绑定的数据，写在 data 里，才能被界面正确的绑定和渲染。<br>注意：uni-app 的 vue 页面是 vue 的单文件组件规范，按照 vue 的定义只接受 function，必须用 return 包起来。<br>如果你学过小程序的数据绑定，但不了解 vue，要注意：</p><ul><li>小程序的数据绑定参考了 vue，但自己修改了一些。在 uni-app 中只支持标准的 vue，不支持小程序的数据绑定语法</li><li>小程序里的 setData 在 uni-app 里并不存在，因为 vue 是自动双向数据绑定的。直接通过赋值方式修改数据，如果数据绑定到界面上，界面会自动更新渲染</li></ul><p>从上述示例，还可看出事件的写法变化。</p><ul><li>以前，元素的事件是用 onxxx=””，里面写一段 js 或引用 function 的 name，比如上述代码中的<code>onclick=&quot;changetextvalue()&quot;</code></li><li>现在，需要在 js 的<code>export default {}</code> 里的 <code>methods: {}</code> 里写一个方法，然后在组件中使用<code>@click=&quot;changetextvalue()&quot;</code></li></ul><p>在 js 中，与 data 和 methods 平级的，如上述示例代码中的<code>onload()</code>，称为生命周期。在普通 vue 页面里的生命周期叫页面生命周期。在项目根目录的 app.vue 文件中的生命周期叫应用生命周期。<br>除了<code>onload</code>，还有<code>onready</code>等很多生命周期，具体见<a href="https://uniapp.dcloud.io/collocation/frame/lifecycle" target="_blank" rel="noopener">uni-app 的生命周期</a><br>在高级用法里，<strong>vue 支持给组件设 ref（引用标记）</strong>，这类似于之前 html 中给一个 dom 元素设 id，然后在 js 中也可以用<code>this.$refs.xxx</code>来获取。如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    &lt;view ref=&quot;testview&quot;&gt;11111&lt;/view&gt;</span><br><span class="line">    &lt;button @click=&quot;getTest&quot;&gt;获取test节点&lt;/button&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getTest() &#123;</span><br><span class="line">      console.log(this.$refs.testview);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="js-api-的变化"><a href="#js-api-的变化" class="headerlink" title="js api 的变化"></a>js api 的变化</h3><p>因为 uni-app 的 api 是<strong>参考小程序</strong>的，所以<strong>和浏览器的 js api</strong>有很多不同，如</p><ol><li>alert,confirm 改成 <a href="https://uniapp.dcloud.io/api/ui/prompt?id=showmodal" target="_blank" rel="noopener">uni.showmodel</a></li><li>ajax 改成 <a href="https://uniapp.dcloud.io/api/request/request" target="_blank" rel="noopener">uni.request</a></li><li>cookie、session 没有了，local.storage 改成 <a href="https://uniapp.dcloud.io/api/storage/storage?id=setstorage" target="_blank" rel="noopener">uni.storage</a></li></ol><p>uni-app 的 js api 还有很多，但基本就是小程序的 api，把 wx.xxx 改为 uni.xxx 即可。<a href="https://uniapp.dcloud.io/api/README" target="_blank" rel="noopener">详见</a><br>uni-app 在不同的端，支持条件编译，无限制的使用各端独有的 api，<a href="https://uniapp.dcloud.io/platform" target="_blank" rel="noopener">详见条件编译</a></p><h2 id="css-的变化"><a href="#css-的变化" class="headerlink" title="css 的变化"></a>css 的变化</h2><p><strong>标准的 css 基本都是支持的。</strong></p><h3 id="选择器方面"><a href="#选择器方面" class="headerlink" title="选择器方面"></a>选择器方面</h3><blockquote><p>有 2 个变化：</p></blockquote><ol><li>*选择器不支持；</li><li>元素选择器里没有 body，改为了 page。微信小程序即是如此。</li></ol><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">page</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>单位方面：</strong>px 无法动态适应不同宽度的屏幕，rem 无法用于 nvue/weex。如果想使用根据屏幕宽度自适应的单位，推荐使用 rpx，全端支持。 <a href="https://uniapp.dcloud.io/frame?id=%e5%b0%ba%e5%af%b8%e5%8d%95%e4%bd%8d" target="_blank" rel="noopener">尺寸单位文档</a></li><li><strong>布局方面：</strong>uni-app 推荐使用 flex 布局，这个布局思路和传统流式布局有点区别。但 flex 的特色在于，不管是什么技术都支持这种排版，web、小程序/快应用、weex/rn、原生的 iOS、Android 开发，全都支持 flex。它是通吃所有端的新一代布局方案。相关教程请自行百度学习。</li></ul><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p>uni-app 的 vue 文件里支持所有 web 排版方式，不管是流式还是 flex。但 nvue 里，只支持 flex，因为它在 app 端是使用原生排版引擎渲染的。<br><strong>注意 css 里背景图和字体文件，尽量不要大于 40k，因为会影响性能。在小程序端，如果要大于 40k，需放到服务器侧远程引用或 base64 后引入，不能放到本地作为独立文件引用。</strong></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>官方教程：<a href="https://ke.qq.com/course/343370" target="_blank" rel="noopener">uni-app 跨平台框架官方教程</a></li><li><a href="https://ask.dcloud.net.cn/article/35657" target="_blank" rel="noopener">白话 uni-app 【也是 html、vue、小程序的区别】</a>(全文参考该文章的内容+自己的一些笔记)</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Android平台与开发技术</title>
      <link href="blog/im0an1/"/>
      <url>blog/im0an1/</url>
      
        <content type="html"><![CDATA[<h2 id="一、目的"><a href="#一、目的" class="headerlink" title="一、目的"></a>一、目的</h2><p>大学期间，有没有能够<strong>有专业能力的项目实战</strong>。希望在你的将来的简历中加入技术方面的项目介绍。</p><h2 id="二、考核方式"><a href="#二、考核方式" class="headerlink" title="二、考核方式"></a>二、考核方式</h2><p>PBL 的方式组队，开发一个创意项目。**</p><h2 id="三、课程背景"><a href="#三、课程背景" class="headerlink" title="三、课程背景"></a>三、课程背景</h2><ol><li><strong>Android 平台简介</strong></li><li><strong>Google  提供了官方的 Android Studio</strong><ol><li>Java  或者  Kotlin</li></ol></li><li><strong>Apple 提供了官方的开发环境</strong><ol><li>Swift 或者 OC</li></ol></li><li><strong>Wechat 提供了官方的开发环境</strong><ol><li>SNS  排第一的产品；Facebook</li><li>小程序，JD</li></ol></li><li><strong>其他平台</strong><ol><li>百度小程序等**</li></ol></li></ol><h2 id="四、技术路线"><a href="#四、技术路线" class="headerlink" title="四、技术路线"></a>四、技术路线</h2><ol><li><strong>uni-app</strong>  是一个使用 <a href="https://vuejs.org/" target="_blank" rel="noopener">Vue.js</a> 开发所有前端应用的<strong>框架</strong>，开发者编写一套代码，<strong>可发布到 iOS、Android、H5、以及各种小程序</strong>（微信/支付宝/百度/头条/QQ/钉钉/淘宝）、快应用等多个平台。</li><li><strong>DCloud 公司</strong>拥有 500 万开发者用户，几十万应用案例、10 亿手机端月活用户，数千款 uni-app 插件、70+微信/qq 群。阿里小程序工具官方内置 uni-app（<a href="https://docs.alipay.com/mini/ide/0.70-stable" target="_blank" rel="noopener">详见</a>），腾讯课堂官方为 uni-app 录制培训课程（<a href="https://ask.dcloud.net.cn/article/35640" target="_blank" rel="noopener">详见</a>），开发者可以放心选择。</li><li>uni-app 在手，做啥都不愁。即使不跨端，uni-app 也是更好的小程序开发框架（<a href="https://ask.dcloud.net.cn/article/35947" target="_blank" rel="noopener">详见</a>）、更好的 App 跨平台框架、更方便的 H5 开发框架。不管领导安排什么样的项目，你都可以快速交付，不需要转换开发思维、不需要更改开发习惯。</li></ol><h2 id="五、快速上手-安装环境"><a href="#五、快速上手-安装环境" class="headerlink" title="五、快速上手+安装环境"></a>五、快速上手+安装环境</h2><p><strong>uni-app 支持通过可视化界面、</strong><a href="https://uniapp.dcloud.io/quickstart?id=%e9%80%9a%e8%bf%87vue-cli%e5%91%bd%e4%bb%a4%e8%a1%8c" target="_blank" rel="noopener"><strong>vue-cli 命令行</strong></a><strong> 两种方式快速创建项目。</strong></p><h3 id="通过-HBuilderX-可视化界面"><a href="#通过-HBuilderX-可视化界面" class="headerlink" title="通过  HBuilderX  可视化界面"></a><a href="https://uniapp.dcloud.io/quickstart?id=_1-%e9%80%9a%e8%bf%87-hbuilderx-%e5%8f%af%e8%a7%86%e5%8c%96%e7%95%8c%e9%9d%a2" target="_blank" rel="noopener">通过  HBuilderX  可视化界面</a></h3><ol><li>可视化的方式比较简单，HBuilderX 内置相关环境，开箱即用，无需配置 nodejs。</li><li>开始之前，开发者需先下载安装如下工具：</li><li>HBuilderX：<a href="https://www.dcloud.io/hbuilderx.html" target="_blank" rel="noopener">官方 IDE 下载地址</a></li><li><a href="https://www.dcloud.io/hbuilderx.html" target="_blank" rel="noopener">HBuilderX</a>是通用的前端开发工具，但为 uni-app 做了特别强化。</li><li>下载 App 开发版，可开箱即用；如下载标准版，在运行或发行 uni-app 时，会提示安装 uni-app 插件，插件下载完成后方可使用。</li></ol><h3 id="Chrome-最新版-Edge"><a href="#Chrome-最新版-Edge" class="headerlink" title="Chrome/最新版 Edge"></a>Chrome/最新版 Edge</h3><ul><li><a href="https://www.google.com/intl/zh-CN/chrome/" target="_blank" rel="noopener">https://www.google.com/intl/zh-CN/chrome/</a></li><li>Edge(最新)浏览器：<a href="https://www.microsoftedgeinsider.com/en-us/download" target="_blank" rel="noopener">下载地址（DEV 版本会消去插件开发者禁用状态）</a></li></ul><h3 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h3><ul><li>下载地址：<a href="https://developer.android.com/studio" target="_blank" rel="noopener">https://developer.android.com/studio</a></li></ul><p>参考：</p><ul><li><a href="https://blog.csdn.net/wangmx1993328/article/details/81905195" target="_blank" rel="noopener">https://blog.csdn.net/wangmx1993328/article/details/81905195</a></li><li><a href="https://blog.csdn.net/qq_41976613/article/details/91432304?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.add_param_isCf&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.add_param_isCf" target="_blank" rel="noopener">https://blog.csdn.net/qq_41976613/article/details/91432304?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.add_param_isCf&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.add_param_isCf</a></li><li><a href="https://blog.csdn.net/qq_41976613/article/details/104394870" target="_blank" rel="noopener">https://blog.csdn.net/qq_41976613/article/details/104394870</a></li><li><a href="https://blog.csdn.net/liqz666/article/details/80243836?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.edu_weight&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.edu_weight" target="_blank" rel="noopener">https://blog.csdn.net/liqz666/article/details/80243836?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.edu_weight&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.edu_weight</a></li><li><a href="https://blog.csdn.net/weixin_43717445/article/details/108719984" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43717445/article/details/108719984</a></li></ul><h3 id="gradle-国内源配置方法"><a href="#gradle-国内源配置方法" class="headerlink" title="gradle 国内源配置方法"></a>gradle 国内源配置方法</h3><p>Android Studio 在构建项目时会拉取 gradle 资源，而 goole 和 jcenter 在国内的网络环境并不好用，容易产生 connect timeout 等错误。</p><p>因此将地址修改成阿里云的国内镜像。<br>一、允许使用 maven 仓库<br>　　点击 File-&gt;Settings 进入设置界面，勾选“Enable embedded Maven repository”，</p><p>二、修改 build.gradle<br>　　在项目文件中找到 build.gradle 文件，修改其中的 buildscript 和 allprojects 地址：</p><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        maven&#123; url <span class="string">'http://maven.aliyun.com/nexus/content/groups/public/'</span> &#125;</span><br><span class="line">        maven&#123; url <span class="string">'http://maven.aliyun.com/nexus/content/repositories/jcenter'</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:3.3.0-alpha13'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        maven&#123; url <span class="string">'http://maven.aliyun.com/nexus/content/groups/public/'</span>&#125;</span><br><span class="line">        maven&#123; url <span class="string">'http://maven.aliyun.com/nexus/content/repositories/jcenter'</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">task</span> clean(type: <span class="keyword">Delete</span>) &#123;</span><br><span class="line">    <span class="keyword">delete</span> rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gradle 的文件下载下来以后会保存在本地，也有缓存。这意味着不同的项目如果有相同的 gradle 依赖，则不需要重复下载。因此也不是每次打开新项目都需要修改 build.gradle 文件。</p><p>如果修改 build.gradle 后重新 build 还是有错，可以尝试新建一个相同 API 版本的项目。</p><p>参考：</p><ul><li><a href="https://maven.aliyun.com/mvn/guide" target="_blank" rel="noopener">阿里云 gradle 配置指南</a></li></ul><h2 id="六、考核方式"><a href="#六、考核方式" class="headerlink" title="六、考核方式"></a>六、考核方式</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1605441751743-cb395908-39ce-4303-ab00-0c885d05abe9.png#align=left&amp;display=inline&amp;height=294&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=588&amp;originWidth=1192&amp;size=83972&amp;status=done&amp;style=none&amp;width=596" alt="image.png"></p><h2 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h2><h3 id="前端后端"><a href="#前端后端" class="headerlink" title="前端后端"></a>前端后端</h3><p>Web 前端分为网页设计师、网页美工、Web 前端开发工程师。<br>首先网页设计师是对网页的架构、色彩以及网站的整体页面代码负责。<br>网页美工只针对 UI 这块儿的东西，比如网站是否做的漂亮。<br>Web 前端开发工程师是负责交互设计的，需要和程序猿进行交互设计的配合。<br>Web 前端需要掌握的有脚本技术 javascript DIV+CSS 现下最流行的页面搭建技术，ajax 和 jquery 以及简单的后端程序等。 后端的话可供开发的语言有 asp、php、jsp、.NET 这些后端开发语言的话搭建环境都不一样，具体如果你想学的话看是想从事前端部分还是后端程序部分。后端开发如果有一定的条件的话可以转为软件开发。不过要有一定的语言基础，类似 java 语言、C++等。关键是看你的兴趣爱好。<br>这个到后期不会区分这么细，做前端到后期也会懂一些后端的技术，反之，后端也是。<br>在实际的开发过程中，我们当前这样定位前端、后端开发人员。 1)前端开发人员：精通 JS，能熟练应用 JQuery，懂 CSS，能熟练运用这些知识，进行交互效果的开发。 2)后端开发人员：会写 Java 代码，会写 SQL 语句，能做简单的数据库设计，会 Spring 和 iBatis，懂一些设计模式等。<br>现在来看，对前后端的要求还是蛮低的，尤其是后端，新员工经过实习之后都是可以参与到后端开发的，没有太高的技术门槛，唯一需要做的就是先变成熟练工种，这个阶段没有涉及到设计模式、架构、效率等一些列问题。在约的专家对我的主要建议就是从这里入手。<br>Web 前端: 顾名思义是来做 Web 的前端的。我们这里所说的前端泛指 Web 前端，也就是在 Web 应用中用户可以看得见碰得着的东西。包括 Web 页面的结构、Web 的外观视觉表现以及 Web 层面的交互实现。<br>Web 后端：后端更多的是与数据库进行交互以处理相应的业务逻辑。需要考虑的是如何实现功能、数据的存取、平台的稳定性与性能等。<br>通过企业对前后端人员招聘的要求，分析企业对前端、后端的技术要求：<br>Web 前端： 1)精通 HTML，能够书写语义合理，结构清晰，易维护的 HTML 结构。 2)精通 CSS，能够还原视觉设计，并兼容业界承认的主流浏览器。 3)熟悉 JavaScript，了解 ECMAScript 基础内容，掌握 1~2 种 js 框架，如 JQuery 4)对常见的浏览器兼容问题有清晰的理解，并有可靠的解决方案。 5)对性能有一定的要求，了解 yahoo 的性能优化建议，并可以在项目中有效实施。<br>Web 后端： 1)精通 jsp，servlet，java bean，JMS，EJB，Jdbc，Flex 开发，或者对相关的工具、类库以及框架非常熟悉，如 Velocity，Spring，Hibernate，iBatis，OSGI 等，对 Web 开发的模式有较深的理解 2)练使用 oracle、sqlserver、mysql 等常用的数据库系统，对数据库有较强的设计能力 3)熟悉 maven 项目配置管理工具，熟悉 tomcat、jboss 等应用服务器，同时对在高并发处理情况下的负载调优有相关经验者优先考虑 4)精通面向对象分析和设计技术，包括设计模式、UML 建模等 5)熟悉网络编程，具有设计和开发对外 API 接口经验和能力，同时具备跨平台的 API 规范设计以及 API 高效调用设计能力</p><h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><ul><li>PHP</li><li><p>Node.js</p><blockquote><p>JavaScript<br>node.js+express+ejs</p></blockquote></li><li><p>Spring Boot</p><blockquote><p>Java 框架，难</p></blockquote></li><li><p>数据库</p><blockquote><ul><li>MyBatis-Plus</li><li>DCloud</li></ul></blockquote></li></ul><h3 id="推荐课程"><a href="#推荐课程" class="headerlink" title="推荐课程"></a>推荐课程</h3>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>npm ERR! Unexpected end of JSON input while parsing</title>
      <link href="blog/gcwu9h/"/>
      <url>blog/gcwu9h/</url>
      
        <content type="html"><![CDATA[<h2 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm WARN deprecated circular-json@0.5.9: CircularJSON is <span class="keyword">in</span> maintenance only, flatted is its successor.</span><br><span class="line">npm ERR! Unexpected end of JSON input <span class="keyword">while</span> parsing near <span class="string">'...:"~0.0.0","webpack-de'</span></span><br><span class="line"></span><br><span class="line">npm ERR! A complete <span class="built_in">log</span> of this run can be found <span class="keyword">in</span>:</span><br><span class="line">npm ERR! C:\文件路径\npm-cache_logs\2018-12-13T10_24_02_151Z-debug.log</span><br><span class="line">Package install failed, see above.</span><br></pre></td></tr></table></figure><p>（具体的报错信息和这个类似）<br>升级 hexo5.0 过程中，npm i –save 出错，各种插件都不能很好的下载。</p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>在 node 安装目录下配置的 node_cache 目录里面 <code>D:\Develop\nodejs</code><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603808754530-64316710-95b9-4e13-98dd-efda5197f782.png#align=left&amp;display=inline&amp;height=167&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=487&amp;originWidth=1128&amp;size=62358&amp;status=done&amp;style=shadow&amp;width=387" alt="image.png"><br>系统盘的 AppData/roaming 的文件夹并没有一个 npm 的缓存目录，安装 node 的时候将<code>D:\Develop\nodejs</code> 放到系统环境变量的 Path 路径了。</p><p>所以只需要一下两条命令即可</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm cache clean --force</span><br><span class="line"></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p><strong>多看看</strong><a href="https://www.ruanyifeng.com/blog/2016/01/npm-install.html" target="_blank" rel="noopener">阮一峰-npm 模块安装机制简介</a>，要对 npm 又进一步的理解。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://stackoverflow.com/questions/53759929/npm-err-unexpected-end-of-json-input-while-parsing" target="_blank" rel="noopener">stackoverflow-npm ERR! Unexpected end of JSON input while parsing</a></li><li><a href="https://www.ruanyifeng.com/blog/2016/01/npm-install.html" target="_blank" rel="noopener">阮一峰-npm 模块安装机制简介</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Cannot set property &#39;innerHTML&#39; of null</title>
      <link href="blog/fg4az5/"/>
      <url>blog/fg4az5/</url>
      
        <content type="html"><![CDATA[<h2 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Cannot <span class="keyword">set</span> property 'innerHTML' of null</span><br></pre></td></tr></table></figure><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>如果 js 放在头部时，此时浏览器渲染未进入 dom 节点，因为提示为空，或者找不到。<br>所以把 js 代码放到最后或调用的对象后面就行了。id 元素在 script 脚本之后，不能引用，类似在使用变量之前对其进行定义一样。</p>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LINKfatal error LNK1561: 必须定义入口点</title>
      <link href="blog/oyvpk4/"/>
      <url>blog/oyvpk4/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">LINK : fatal error LNK1561: 必须定义入口点</span><br></pre></td></tr></table></figure><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>每个应用程序(文件格式为 exe)都应该有个启动点，这个点就是 main 函数。缺少就会出现 link error 。</p><p>解决方法</p><ol><li>添加含有 main 函数的 CPP 文件</li><li>右击属性，在常规项中修改配置类型，将应用程序修改为库，动静态库</li></ol>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IDEA控制台输出中文乱码问题</title>
      <link href="blog/lkgrkx/"/>
      <url>blog/lkgrkx/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在 java 实现 ping/tracert 两个命令时候，输出到控制台里面中文乱码。</p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>应该是调用了终端，而 windows 的终端默认是 GBK 的编码，所以要对其更改管用的 utf-8 编码，改为 GBK 编码。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603613519544-dc851d0f-e0c0-4a0a-9a2d-0043285b3db0.png#align=left&amp;display=inline&amp;height=441&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=881&amp;originWidth=706&amp;size=74813&amp;status=done&amp;style=shadow&amp;width=353" alt="image.png"></p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><h3 id="编码更改"><a href="#编码更改" class="headerlink" title="编码更改"></a>编码更改</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603613302488-7bd6d045-81c3-470c-a57c-05a020588fcd.png#align=left&amp;display=inline&amp;height=511&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1022&amp;originWidth=1449&amp;size=141645&amp;status=done&amp;style=shadow&amp;width=724.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603613687953-21f1bbc9-b0bc-4db4-a935-3fcf6275909f.png#align=left&amp;display=inline&amp;height=185&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=369&amp;originWidth=1920&amp;size=135691&amp;status=done&amp;style=shadow&amp;width=960" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603613719305-ac9dc39b-2c6a-4350-9f31-49d48dbedfe5.png#align=left&amp;display=inline&amp;height=110&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=220&amp;originWidth=764&amp;size=24151&amp;status=done&amp;style=none&amp;width=382" alt="image.png"></p><ul><li><code>Reload</code> 表示使用新编码重新加载，新编码不会保存到文件中</li><li><code>Convert</code> 表示使用新编码进行转换，新编码会保存到文件中</li><li>含有中文的代码文件，<code>Convert</code> 之后可能会使中文变成乱码，所以在转换成请做好备份，不然可能出现转换过程变成乱码，无法还原</li></ul><h3 id="BOM-问题"><a href="#BOM-问题" class="headerlink" title="BOM 问题"></a>BOM 问题</h3><blockquote><p>BOM：byte-order mark 字节顺序标记<br><a href="https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%85%83%E7%B5%84%E9%A0%86%E5%BA%8F%E8%A8%98%E8%99%9F" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%85%83%E7%B5%84%E9%A0%86%E5%BA%8F%E8%A8%98%E8%99%9F</a></p></blockquote><p>可能会出现的问题有：</p><blockquote><p>编译报错：<code>找不到符号</code>、<code>未结束的字符串文字</code> 或者是 提示 <code>非法字符</code></p></blockquote><p>解决办法：有上述百科可知，UTF-8 编码分有 BOM 和无 BOM 两种分类。IDEA 打开 Eclipse 项目，会提示出现上述编译问题，因为<strong>Eclipse 默认是有 BOM 的文件编译</strong>，而<strong>IDEA 只能编译无 BOM 的文件编译</strong>，所以解决办法就是对项目进行<strong>BOM 去除</strong>操作。</p>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>莱文斯坦距离(LD)问题</title>
      <link href="blog/bvk4ok/"/>
      <url>blog/bvk4ok/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p><strong>Levenshtein Distance</strong>也称<strong>莱文斯坦距离</strong></p><p>具体形式就是求一个字符串到另一个字符串所需要的<strong>最少操作步数</strong>，操作形式有：</p><ul><li>替换字母</li><li>删除字母</li><li>插入字母</li></ul><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>利用动态规划思想，将其剖析为一个个子问题，用其子问题的解决方式来解决该问题。问题分解出来的子问题存在重叠的情况，这是区分分治算法的不同。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603615056984-36cbce7c-c55e-456a-bb90-eb18471167e0.png#align=left&amp;display=inline&amp;height=335&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=670&amp;originWidth=1026&amp;size=202356&amp;status=done&amp;style=shadow&amp;width=513" alt="image.png"></p><p><strong>莱文斯坦的公式化</strong>表述为：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603614727015-dad259b0-7904-4e5d-9ec8-f4ac284af2e5.png#align=left&amp;display=inline&amp;height=94&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=188&amp;originWidth=874&amp;size=23400&amp;status=done&amp;style=shadow&amp;width=437" alt="image.png"></p><p>下面利用表格的形式来步步推出该字母所需要达到相应的目标字母序列的步数。</p><p>| |<br>| s | o | n |<br>| — | — | — | — | — |<br>|<br>| 0 | 1 | 2 | 3 |<br>| s | 1 | 0 | 1 | 2 |<br>| u | 2 | 1 | 1 | 2 |<br>| n | 3 | 2 | 2 | 1 |</p><p>记横（son）为 i 字符串序列，纵（sun）为 j 字符串序列。需要完成的字符串变换为 i-&gt;j。现举例格子数值该怎么填：</p><p>当到了第三行第三列的那一格，需要完成 s-&gt;s，有三种情况可以选择</p><ol><li>左操作(i-1,j)：删除 s 字符然后插入 s 字符===操作步数两步</li><li>上操作(i,j-1)：插入 s 字符然后删除 s 字符===操作步数两步</li><li>左上操作(i-1,j-1)：替换步骤，因为这个元素相同，故===操作步数零部</li></ol><p>然后选取上述三种情况最短步数的数值 0</p><p>然后再看第三行第四列，需要完成 so-&gt;s，</p><ol><li>左操作：删除 o===一步</li><li>上操作：插入 s 删除 so===三步</li><li>做上操作：替换 s 删除 o===两步</li></ol><p>综上应该填 1</p><p>其他格子也一样以上述方法填写。</p><p>有个作业遗留问题，在 CAAIS 里面每个得出的值右上标的 <code>U</code>  <code>L</code>  <code>0</code>  <code>1</code>  这些的依次顺序是怎么个顺序？<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603615446981-23bea432-08ee-490a-9037-018ba6280c3b.png#align=left&amp;display=inline&amp;height=201&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=401&amp;originWidth=651&amp;size=49834&amp;status=done&amp;style=shadow&amp;width=325.5" alt="image.png"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LEN_NAME=<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> NS_LSEditDist &#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Initialization</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;x, <span class="keyword">const</span> <span class="built_in">string</span> &amp;y)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">GetLSEditDist</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;x, <span class="keyword">const</span> <span class="built_in">string</span> &amp;y)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">GetLSEdits</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;x, <span class="keyword">const</span> <span class="built_in">string</span> &amp;y)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;x, <span class="keyword">const</span> <span class="built_in">string</span> &amp;y, <span class="keyword">int</span> OptD)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OutputE</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;x, <span class="keyword">const</span> <span class="built_in">string</span> &amp;y)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OutputP</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;x, <span class="keyword">const</span> <span class="built_in">string</span> &amp;y)</span></span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; E;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt; P;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">string</span> xe, ye;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">LSEditDistCaller</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;x, <span class="keyword">const</span> <span class="built_in">string</span> &amp;y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Initialization(x, y);</span><br><span class="line">        <span class="keyword">int</span> OptD = GetLSEditDist(x, y);</span><br><span class="line">        GetLSEdits(x, y);</span><br><span class="line">        Output(x, y, OptD);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">GetLSEditDist</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;x, <span class="keyword">const</span> <span class="built_in">string</span> &amp;y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                E[i][j] = min(E[i - <span class="number">1</span>][j] + <span class="number">1</span>,</span><br><span class="line">                              min(E[i][j - <span class="number">1</span>] + <span class="number">1</span>,</span><br><span class="line">                                  E[i - <span class="number">1</span>][j - <span class="number">1</span>] + (x[i - <span class="number">1</span>] != y[j - <span class="number">1</span>])));</span><br><span class="line">                <span class="keyword">if</span> (E[i][j] == E[i - <span class="number">1</span>][j] + <span class="number">1</span>)</span><br><span class="line">                    P[i][j] = <span class="string">'U'</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (E[i][j] == E[i][j - <span class="number">1</span>] + <span class="number">1</span>)</span><br><span class="line">                    P[i][j] = <span class="string">'L'</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (x[i - <span class="number">1</span>] != y[j - <span class="number">1</span>])</span><br><span class="line">                    P[i][j] = <span class="string">'1'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> E[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">GetLSEdits</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;x, <span class="keyword">const</span> <span class="built_in">string</span> &amp;y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = m, j = n;</span><br><span class="line">        <span class="keyword">while</span> (i &gt; <span class="number">0</span> || j &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (P[i][j] == <span class="string">'0'</span> || P[i][j] == <span class="string">'1'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                xe.insert(<span class="number">0</span>, <span class="number">1</span>, x[i - <span class="number">1</span>]);</span><br><span class="line">                ye.insert(<span class="number">0</span>, <span class="number">1</span>, y[j - <span class="number">1</span>]);</span><br><span class="line">                i--; j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (P[i][j] == <span class="string">'U'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                xe.insert(xe.begin(), x[i - <span class="number">1</span>]);</span><br><span class="line">                ye.insert(ye.begin(), <span class="string">'-'</span>);</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                xe.insert(xe.begin(), <span class="string">'-'</span>);</span><br><span class="line">                ye.insert(ye.begin(), y[j - <span class="number">1</span>]);</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Initialization</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;x, <span class="keyword">const</span> <span class="built_in">string</span> &amp;y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m = x.length();</span><br><span class="line">        n = y.length();</span><br><span class="line">        E.clear();</span><br><span class="line">        E.resize(m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        P.clear();</span><br><span class="line">        P.resize(m + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;(n + <span class="number">1</span>, <span class="string">'0'</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            E[<span class="number">0</span>][j] = j;</span><br><span class="line">            P[<span class="number">0</span>][j] = <span class="string">'L'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            E[i][<span class="number">0</span>] = i;</span><br><span class="line">            P[i][<span class="number">0</span>] = <span class="string">'U'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        xe.clear();</span><br><span class="line">        ye.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;x, <span class="keyword">const</span> <span class="built_in">string</span> &amp;y, <span class="keyword">int</span> OptD)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Levenshtein distance: \n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Strings: %s, %s\n\n"</span>, x.c_str(), y.c_str());</span><br><span class="line">        OutputE(x, y);</span><br><span class="line">        OutputP(x, y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Distance: %d\n"</span>, OptD);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Edited strings:\n"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> c : xe)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%2c"</span>, c);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> c : ye)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%2c"</span>, c);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OutputE</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;x, <span class="keyword">const</span> <span class="built_in">string</span> &amp;y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" E  "</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%2c"</span>, y[j]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"  "</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%2c"</span>, x[i - <span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%2d"</span>, E[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OutputP</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;x, <span class="keyword">const</span> <span class="built_in">string</span> &amp;y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" P  "</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%2c"</span>, y[j]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"  "</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%2c"</span>, x[i - <span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%2c"</span>, P[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">//namespace NS_LSEditDist</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">rand_str</span><span class="params">(<span class="keyword">char</span> *str,<span class="keyword">const</span> <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;++i)</span><br><span class="line">        str[i]=<span class="string">'a'</span>+rand()%<span class="number">26</span>;</span><br><span class="line">    str[++i]=<span class="string">'\0'</span>;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> NS_LSEditDist;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; <span class="built_in">abs</span> = &#123;</span><br><span class="line">            &#123; <span class="string">"water"</span>, <span class="string">"wheat"</span> &#125;,</span><br><span class="line">            &#123; <span class="string">"servant"</span>, <span class="string">"reveal"</span> &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> ab : <span class="built_in">abs</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> a = ab[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">string</span> b = ab[<span class="number">1</span>];</span><br><span class="line">        LSEditDistCaller(a, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"两个100位字符串的LevenShtein距离："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">char</span> name[LEN_NAME+<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">string</span> x = rand_str(name,LEN_NAME);</span><br><span class="line">    <span class="built_in">string</span> y = rand_str(name,LEN_NAME);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"字符串1："</span>&lt;&lt;x&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"字符串2："</span>&lt;&lt;y&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    LSEditDistCaller(x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://zh.wikipedia.org/wiki/%E8%90%8A%E6%96%87%E6%96%AF%E5%9D%A6%E8%B7%9D%E9%9B%A2" target="_blank" rel="noopener">莱文斯坦距离</a></li><li><a href="https://www.dazhuanlan.com/2019/12/06/5dea0cb03281f/" target="_blank" rel="noopener">理解 Levenshtein Distancee</a></li><li><a href="https://www.throwable.club/2020/03/08/learn-about-levenshtein-distance-algorithm/" target="_blank" rel="noopener">Levenshtein Distance（编辑距离）算法与使用场景</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>分治算法+归并排序</title>
      <link href="blog/ab9fkt/"/>
      <url>blog/ab9fkt/</url>
      
        <content type="html"><![CDATA[<h2 id="分治算法"><a href="#分治算法" class="headerlink" title="分治算法"></a>分治算法</h2><p>此前学习的<strong>递归设计方法</strong>，是针对规模大的问题拆成规模小的问题，并且规模大的问题和规模小的问题的解决办法相同。</p><p>分治算法与递归设计方法的不同之处就是，该规模较大的问题分解为多个不重叠的子问题，并将其称为<strong>“分而治之”</strong><br>**<br>分治的三个步骤：</p><ol><li>分解：将原问题分解为若干个规模较小、相互不重叠与原问题形式相同的子问题</li><li>解决：<ol><li>若子问题规模较小且易于解决时候直接解出</li><li>否则递归地解决各个子问题</li></ol></li><li>合并：将各个子问题的解个并未原问题的解</li></ol><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><ul><li>分解：将排序数组分解为左右两个相等的不重叠的数组</li><li>解决：递归</li><li>合并：将两个已经有序的数组合并为一个有序的数组</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603617542157-07613fda-ebed-4924-bf6a-091c19b12fc7.png#align=left&amp;display=inline&amp;height=431&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=861&amp;originWidth=895&amp;size=74826&amp;status=done&amp;style=shadow&amp;width=447.5" alt="image.png"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>task_06_数据链路层-广播信道</title>
      <link href="blog/bw80k6/"/>
      <url>blog/bw80k6/</url>
      
        <content type="html"><![CDATA[<h2 id="《计算机网络》自主学习任务学习单"><a href="#《计算机网络》自主学习任务学习单" class="headerlink" title="《计算机网络》自主学习任务学习单"></a>《计算机网络》自主学习任务学习单</h2><p>2020 年 9 月 30 日，2020 年 10 月 7 日</p><table><thead><tr><th>课程介绍</th><th style="text-align:left">第三章 使用广播信道的数据链路层</th></tr></thead><tbody><tr><td>教学目标</td><td style="text-align:left">1、了解局域网拓扑结构类型及特点。</td></tr></tbody></table><p>2、了解 IEEE 802 参考模型和标准和了解通讯适配器原理。<br>3、了解广播信道媒体接入控制机制。<br>4、掌握 CSMA/CD 协议的基本原理。<br>5、掌握以太网 MAC 帧格式功能。<br>6、掌握透明网桥工作原理。<br>7、理解虚拟局域网工作原理。 |<br>| 学习内容 |<br>1、课下建议网上搜索观看中国大学 MOOC 教程《玩转计算机网络-计算机网络原理》（自主选择）（<a href="https://www.icourse163.org/course/QDU-1206901804" target="_blank" rel="noopener">https://www.icourse163.org/course/QDU-1206901804</a>）<br>03 数据链路层<br>3.3 使用广播信道的数据链路层<br>3.4 扩展的以太网<br>3.5 高速以太网<br>3.6 数据链路层设备<br>2、学习重点：<br>  （1）CSMA/CD 协议的碰撞监测原理及争用期概念。<br>（2）二进制指数类型退避算法。<br>（3）以太网三类硬件地址类型。<br>（4）以太网 MAC** <strong>帧格式功能解析。<br>（5）冲突域、广播域、广播风暴概念。<br>（6）网桥自学习算法。<br>（7）虚拟局域网使用的以太网帧格式解析。<br>  |<br>| 课堂讨论 | 1、为什么说以太网提供的服务是不可靠的交付？<br>2、以太网为什么要规定最短有效帧长？ |<br>| 课下作业 | 1、PPPOE 原理(PPT) （10 月 4 日提交）<br>2、自主学习</strong>网络协议分析工具 WireShark<strong>，PPT 演示利用 WireShark 捕获并</strong>分析以太网报文结构**。（10 月 6 日提交） |</p><h2 id="WireShark-使用"><a href="#WireShark-使用" class="headerlink" title="WireShark 使用"></a>WireShark 使用</h2><h3 id="ping-命令"><a href="#ping-命令" class="headerlink" title="ping 命令"></a>ping 命令</h3><blockquote><p>先使用 ping 命令找到需要抓包的网站的 ip 地址</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603431313609-3186fd0e-5e79-4e06-b8b8-20019fe29a14.png#align=left&amp;display=inline&amp;height=161&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=322&amp;originWidth=780&amp;size=51052&amp;status=done&amp;style=shadow&amp;width=390" alt="image.png"></p><h3 id="WireShark-使用及面板功能区域"><a href="#WireShark-使用及面板功能区域" class="headerlink" title="WireShark 使用及面板功能区域"></a>WireShark 使用及面板功能区域</h3><p>进入软件，若成功适配电脑网卡，则出现如下类似接口列表<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603434019601-cc879af3-8784-4ada-83dc-642d64e02981.png#align=left&amp;display=inline&amp;height=329&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1038&amp;originWidth=1920&amp;size=115692&amp;status=done&amp;style=shadow&amp;width=608" alt="image.png"><br>直接双击上图中 WLAN 行即可抓包，也可以如下设置网卡启动抓包<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603434096441-73c67d75-4e36-4e76-ae3c-0a8b8976da28.png#align=left&amp;display=inline&amp;height=301&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=911&amp;originWidth=1920&amp;size=114148&amp;status=done&amp;style=shadow&amp;width=634" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603431676018-f4988b52-5aef-4d92-8b9b-15109a08adab.png#align=left&amp;display=inline&amp;height=345&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1033&amp;originWidth=1920&amp;size=207427&amp;status=done&amp;style=shadow&amp;width=641" alt="image.png"></p><h3 id="1-区域-显示过滤器"><a href="#1-区域-显示过滤器" class="headerlink" title="1 区域-显示过滤器"></a>1 区域-显示过滤器</h3><blockquote><p>为过滤 ip 地址区域。相关表达式语法有</p></blockquote><ol><li>协议过滤。比如 TCP，只显示 TCP 协议。</li><li>IP 过滤。比如 ip.src == 192.168.1.102,显示源地址为 192.168.1.102，</li></ol><p>ip.dst == 192.168.1.102, 目标地址为 192.168.1.102。</p><ol start="3"><li>端口过滤。   tcp.port ==80,   端口为 80 的</li></ol><p>tcp.srcport == 80,只显示 TCP 协议的愿端口为 80 的。</p><ol start="4"><li>Http 模式过滤。http.request.method==”GET”,   只显示 HTTP GET 方法的。</li><li>逻辑运算符为 AND/ OR</li></ol><h3 id="2-区域-获取的数据包"><a href="#2-区域-获取的数据包" class="headerlink" title="2 区域-获取的数据包"></a>2 区域-获取的数据包</h3><blockquote><p>为封包列表(Packet List Pane)</p></blockquote><h3 id="3-区域-单个数据包各层详细内容"><a href="#3-区域-单个数据包各层详细内容" class="headerlink" title="3 区域-单个数据包各层详细内容"></a>3 区域-单个数据包各层详细内容</h3><blockquote><p>为封包详细信息 (Packet Details Pane)</p></blockquote><ol><li>Frame:物理层的数据帧概况。</li></ol><figure class="highlight"><table><tr><td class="code"><pre><span class="line">Frame 165: 74 bytes on wire (592 bits), 74 bytes captured (592 bits) on interface \Device\NPF_&#123;B016AB5D-3088-41BD-8997-48F19D9DEBFA&#125;, id 0 //165号帧，对方发送74字节，实际收到74字节</span><br><span class="line">    Interface id: 0 (\Device\NPF_&#123;B016AB5D-3088-41BD-8997-48F19D9DEBFA&#125;) //接口id为0</span><br><span class="line">        Interface name: \Device\NPF_&#123;B016AB5D-3088-41BD-8997-48F19D9DEBFA&#125;</span><br><span class="line">        Interface description: WLAN</span><br><span class="line">    Encapsulation type: Ethernet (1) //封装类型</span><br><span class="line">    Arrival Time: Oct 23, 2020 13:37:43.372763000 中国标准时间//捕获日期和时间（中国标准时间）</span><br><span class="line">    [Time shift for this packet: 0.000000000 seconds]</span><br><span class="line">    Epoch Time: 1603431463.372763000 seconds</span><br><span class="line">    [Time delta from previous captured frame: 0.008472000 seconds]//与前一包时间间隔</span><br><span class="line">    [Time delta from previous displayed frame: 0.000000000 seconds]</span><br><span class="line">    [Time since reference or first frame: 36.349570000 seconds]//此包与第一帧的时间间隔</span><br><span class="line">    Frame Number: 165//帧序号</span><br><span class="line">    Frame Length: 74 bytes (592 bits)//帧长度</span><br><span class="line">    Capture Length: 74 bytes (592 bits)//捕获字节长度</span><br><span class="line">    [Frame is marked: False]//是否做了标记</span><br><span class="line">    [Frame is ignored: False]//是否被忽略</span><br><span class="line">    [Protocols in frame: eth:ethertype:ip:icmp:data]//帧内封装的协议层次结构</span><br><span class="line">    [Coloring Rule Name: ICMP]//着色标记的协议名称</span><br><span class="line">    [Coloring Rule String: icmp || icmpv6]//着色规则显示的字符串</span><br></pre></td></tr></table></figure><ol start="2"><li>Ethernet II:数据链路层以太网帧头部信息。</li></ol><figure class="highlight"><table><tr><td class="code"><pre><span class="line">Ethernet II, Src: IntelCor_fb:33:94 (0c:54:15:fb:33:94), Dst: HuaweiTe_da:ff:f3 (7c:a1:77:da:ff:f3)</span><br><span class="line">    Destination: HuaweiTe_da:ff:f3 (7c:a1:77:da:ff:f3)//目的MAC地址</span><br><span class="line">    Source: IntelCor_fb:33:94 (0c:54:15:fb:33:94)//源MAC地址（就是我电脑的MAC地址）</span><br><span class="line">    Type: IPv4 (0x0800)//0x0800表示使用IP协议</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603432754493-20843464-3bbb-4c01-9ceb-e781759a583d.png#align=left&amp;display=inline&amp;height=280&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=559&amp;originWidth=1920&amp;size=110051&amp;status=done&amp;style=shadow&amp;width=960" alt="image.png"></p><ol start="3"><li>Internet Protocol Version 4:互联网层 IP 包头部信息。</li></ol><figure class="highlight"><table><tr><td class="code"><pre><span class="line">Internet Protocol Version 4, Src: 192.168.43.36, Dst: 39.156.66.18</span><br><span class="line">    0100 .... = Version: 4//互联网协议IPv4</span><br><span class="line">    .... 0101 = Header Length: 20 bytes (5)//IP包头部长度</span><br><span class="line">    Differentiated Services Field: 0x00 (DSCP: CS0, ECN: Not-ECT)//差分服务字段</span><br><span class="line">    Total Length: 60//IP包的总长度</span><br><span class="line">    Identification: 0xdf8c (57228)//标志字段</span><br><span class="line">    Flags: 0x0000//标记字段</span><br><span class="line">    Fragment offset: 0//分的偏移量</span><br><span class="line">    Time to live: 128//生存期TTL</span><br><span class="line">    Protocol: ICMP (1)//此包内封装的上层协议为TCP</span><br><span class="line">    Header checksum: 0x05ba [validation disabled]//头部数据的校验和</span><br><span class="line">    [Header checksum status: Unverified]</span><br><span class="line">    Source: 192.168.43.36//来源IP地址</span><br><span class="line">    Destination: 39.156.66.18//目标IP地址</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603433033837-c88714a1-eaa1-45cb-b836-5672e4515eee.png#align=left&amp;display=inline&amp;height=189&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=378&amp;originWidth=640&amp;size=84901&amp;status=done&amp;style=shadow&amp;width=320" alt="image.png"></p><ol start="4"><li>Transmission Control Protocol:传输层 T 的数据段头部信息，此处是 TCP。</li></ol><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">Transmission Control Protocol, Src Port: 80 (80), Dst Port: 50362 (50362), Seq: 1025, Ack: 447, Len: 714</span><br><span class="line">Source Port: 80 (80) //源端口号</span><br><span class="line">Destination Port: 50362 (50362) //目标端口号</span><br><span class="line">Sequence number: 1025 (relative sequence number) //序列号（相对序列号）</span><br><span class="line">[Next sequence number: 1739 (relative sequence number)] //下一个序列号</span><br><span class="line">Acknowledgment number: 447    (relative ack number) //确认序列号</span><br><span class="line">Header Length: 20 bytes  //头部长度</span><br><span class="line">.... 0000 0001 1000 = Flags: 0x018 (PSH, ACK) //TCP标记长度</span><br><span class="line">Window size value: 5896  //流量控制的窗口大小</span><br><span class="line"><span class="attribute">Checksum</span>: 0x915b [validation disabled] //TCP数据段的校验和</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603433149527-0125377e-b64b-4e32-9eb0-e122d0c111cb.png#align=left&amp;display=inline&amp;height=190&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=379&amp;originWidth=579&amp;size=89043&amp;status=done&amp;style=shadow&amp;width=289.5" alt="image.png"></p><ol start="5"><li><p>Hypertext Transfer Protocol:应用层的信息，此处是 HTTP 协议。</p></li><li><p>Data（312 bytes）：数据。</p></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603434354567-45e84cc7-63a9-4136-adde-85c377345e92.png#align=left&amp;display=inline&amp;height=147&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=347&amp;originWidth=1920&amp;size=49744&amp;status=done&amp;style=shadow&amp;width=813" alt="image.png"></p><h3 id="分析-网站的请求与响应-MAC-报文结构"><a href="#分析-网站的请求与响应-MAC-报文结构" class="headerlink" title="分析-网站的请求与响应 MAC 报文结构"></a>分析-网站的请求与响应 MAC 报文结构</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603435802395-644285c3-35d8-4f12-928c-84b6af135fb0.png#align=left&amp;display=inline&amp;height=515&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1030&amp;originWidth=1920&amp;size=292782&amp;status=done&amp;style=shadow&amp;width=960" alt="image.png"><br>在登陆超星的过程中，数据传输所用到的协议等信息都在下图所示。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603435903948-4774be26-9c6c-407d-ab7a-07496dff6e99.png#align=left&amp;display=inline&amp;height=339&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=677&amp;originWidth=1920&amp;size=150647&amp;status=done&amp;style=shadow&amp;width=960" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603436181846-0df06ab5-bc9d-476b-bd86-bf7a2ec2e5cd.png#align=left&amp;display=inline&amp;height=120&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=239&amp;originWidth=1919&amp;size=69455&amp;status=done&amp;style=none&amp;width=959.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603436511302-2cbd6278-74d8-4e2c-8800-44a3dae1aec0.png#align=left&amp;display=inline&amp;height=441&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=882&amp;originWidth=1920&amp;size=222060&amp;status=done&amp;style=none&amp;width=960" alt="image.png"><br>这 14 个字节对应以太网 MAC 帧的前 14 个字节：前六个字节是目的地址，接下来六个字节是源地址，接下来两个字节是类型字段(用来标志上一层使用的是什么协议，以便把收到的 MAC 帧的数据交给上一层的这个协议。0x8000 代表上层使用的是 IP 数据报)，后面是数据部分。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603436551673-e3ffc81b-d102-4397-9449-ffd65de1cc0e.png#align=left&amp;display=inline&amp;height=174&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=347&amp;originWidth=785&amp;size=38179&amp;status=done&amp;style=shadow&amp;width=392.5" alt="image.png"><br>wireshark 把 8 字节的前序和 4 字节的 FCS 都给过滤掉了，所以捕获到的帧里看不到这两部分。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/82498482" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/82498482</a></li><li><a href="https://zhuanlan.zhihu.com/p/264942536" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/264942536</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>task_07_网络层</title>
      <link href="blog/qlrcf6/"/>
      <url>blog/qlrcf6/</url>
      
        <content type="html"><![CDATA[<h2 id="《计算机网络》自主学习任务学习单"><a href="#《计算机网络》自主学习任务学习单" class="headerlink" title="《计算机网络》自主学习任务学习单"></a>《计算机网络》自主学习任务学习单</h2><p>2020 年 10 月 14 日，2020 年 10 月 21 日</p><table><thead><tr><th>课程介绍</th><th>第四章网络层</th></tr></thead><tbody><tr><td>教学目标</td><td>1、理解网络层提供的服务特点，重点领会互联网设计理念。</td></tr></tbody></table><p>2、熟练掌握 IP 地址及其表示方法。<br>3、理解地址解析协议 ARP 实现 IP 地址与物理地址的映射。<br>4、基于互联网设计理念理解 IP 数据报格式功能。<br>5、理解 IP 层分组转发流程，掌握路由表参数设置。<br>6、理解子网划分原理，熟练掌握网络规划应用问题 |<br>| 学习内容 |<br>1、课下自主网上搜索观看中国大学 MOOC 教程《计算机网络》（哈尔滨工业大学）<br>（<a href="https://www.icourse163.org/learn/HIT-154005?tid=1450314458#/learn/announce" target="_blank" rel="noopener">https://www.icourse163.org/learn/HIT-154005?tid=1450314458#/learn/announce</a>）（自愿选择）<br>04 网络层<br>4.1 网络层服务<br>4.2 虚电路网络与数据报网络<br>4.3 IPv4 协议<br>2、学习重点：<br>  （1）虚电路服务与数据报服务特征。<br>（2）互连网络与虚拟互连网络概念区别<br>（3）五类 IP 编址及表示方法。<br>（4）地址解析协议 ARP 原理<br>（5）IP 的协议格式及 IP 的分片与重组机制。<br>（6）子网划分原理、子网掩码及网关基本概念<br>（7）IP 层分组转发算法。 |<br>| 课堂讨论 | 1、电信网络与互联网的服务差异性<br>2、互联网为什么不直接使用硬件地址进行通信？ |<br>| 课下作业 | 1、 ARP 攻击原理（1 班）。(PPT，10 月 18 日前提交）<br>2、 首部检验和原理（2 班）。（PPT，10 月 18 日前提交）<br>3、 学习网络协议分析工具 WireShark。（PPT，10 月 20 日前提交自主演示并析 ICMP、IP 报文结构）<br><strong>4、 编程实现命令 ping、traceroute 功能</strong></p><ul><li>10 月 30 日晚上 9 点前提交 PPT</li><li>代码及编译程序（源代码必须提交，编译程序是指 EXE 文件，如果没有可以不提交，但是所提交的作业要能演示出要求实现的功能）</li><li>课上自主演示 3（课堂演示可以使用自己的电脑）<br>|</li></ul><h2 id="ping-和-tracert"><a href="#ping-和-tracert" class="headerlink" title="ping 和 tracert"></a>ping 和 tracert</h2><h3 id="ping-和-tracert-命令"><a href="#ping-和-tracert-命令" class="headerlink" title="ping 和 tracert 命令"></a>ping 和 tracert 命令</h3><p><strong>ping</strong>命令一般用来测试两台机器或者机器和服务器之间网络是否连通。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603437323252-a3bf1470-c4ae-450a-b0fd-4d83281aab46.png#align=left&amp;display=inline&amp;height=156&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=311&amp;originWidth=1439&amp;size=57273&amp;status=done&amp;style=shadow&amp;width=719.5" alt="image.png"><br><strong>tracert</strong>命令显示数据报到达目标主机途中所经过的路径（路由器），并且显示到达每个节点（路由器）的花费时间，显示的信息比 ping 出来的信息要多，要详细。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603437358485-aef50645-6ff9-4395-bbae-0bfe22ce3dc1.png#align=left&amp;display=inline&amp;height=269&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=538&amp;originWidth=1436&amp;size=63435&amp;status=done&amp;style=shadow&amp;width=718" alt="image.png"></p><h3 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h3><h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String tracert = <span class="string">"tracert -h 10 "</span>; <span class="comment">//模拟tracert命令</span></span><br><span class="line">    String ping = <span class="string">"ping"</span>;<span class="comment">//模拟 ping 命令</span></span><br><span class="line">    String routePrint = <span class="string">"route print -4"</span>;<span class="comment">//模拟route print命令</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String input = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"resource"</span>)</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//利用while循环接收输入的命令行参数</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"Please input destination server IP address ：\n"</span>);</span><br><span class="line"></span><br><span class="line">            input = scanner.next();</span><br><span class="line"></span><br><span class="line">            CommandUtil host = <span class="keyword">new</span> CommandUtil();</span><br><span class="line"></span><br><span class="line">            host.tracert = host.tracert + <span class="string">" "</span> + input;</span><br><span class="line"></span><br><span class="line">            host.ping = host.ping + <span class="string">" "</span> + input;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                host.command(host.routePrint);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException exception) &#123;</span><br><span class="line"></span><br><span class="line">                exception.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                host.command(host.tracert) ;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException exception) &#123;</span><br><span class="line"></span><br><span class="line">                exception.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                host.command(host.ping);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException exception) &#123;</span><br><span class="line"></span><br><span class="line">                exception.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            InetAddress ipAddress;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                ipAddress = InetAddress.getByName(input);</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"IP address : "</span>+ipAddress);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnknownHostException exception) &#123;</span><br><span class="line"></span><br><span class="line">                exception.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            URL url;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                url = <span class="keyword">new</span> URL(<span class="string">"http"</span>,input,<span class="number">80</span>,<span class="string">"index.html"</span>);</span><br><span class="line"></span><br><span class="line">                System.out.println();<span class="comment">//输出服务器地址</span></span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"Get the Server-Name# : "</span>+url.getHost());</span><br><span class="line"></span><br><span class="line">                System.out.println();<span class="comment">//输出首页文件</span></span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"Get the default file# : "</span>+url.getFile());</span><br><span class="line"></span><br><span class="line">                System.out.println();<span class="comment">//输出首页协议和端口</span></span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"Get the protocol# : "</span>+url.getProtocol()+<span class="string">" "</span>+url.getPort());</span><br><span class="line"></span><br><span class="line">                System.out.println();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line"></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"Get serverName &amp; IPAddress："</span>+InetAddress.getByName(input));</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line"></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> freeMemory = Runtime.getRuntime().freeMemory();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"Surplus memory of JVM: "</span>+freeMemory+<span class="string">"B"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//模拟 tracert 命令</span></span><br><span class="line"></span><br><span class="line">    StringBuffer commandResult = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">command</span><span class="params">(String tracerCommand)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="comment">//第一步：创建进程(是接口不必初始化)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.通过Runtime类的getRuntime().exec()传入需要运行的命令参数</span></span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(InetAddress.getByName(<span class="string">"localhost"</span>)+<span class="string">" is tracking the destination server..."</span>);</span><br><span class="line"></span><br><span class="line">        Process process = Runtime.getRuntime().exec(tracerCommand);</span><br><span class="line"></span><br><span class="line">        readResult(process.getInputStream());</span><br><span class="line"></span><br><span class="line">        process.destroy();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第二步：通过输入流来将命令执行结果输出到控制台</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readResult</span><span class="params">(InputStream inputStream)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line"></span><br><span class="line">        commandResult = <span class="keyword">new</span> StringBuffer();  <span class="comment">//初始化命令行</span></span><br><span class="line"></span><br><span class="line">        String commandInfo = <span class="keyword">null</span>; <span class="comment">//定义用于接收命令行执行结果的字符串</span></span><br><span class="line"></span><br><span class="line">        BufferedReader bufferedReader =</span><br><span class="line">                <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ( (commandInfo = bufferedReader.readLine()) != <span class="keyword">null</span>)  &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(commandInfo);</span><br><span class="line">        &#125;</span><br><span class="line">        bufferedReader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h4><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="symbol">D:</span>\Java\jdk1.<span class="number">8.0_181</span>\bin\java.exe <span class="string">"-javaagent:D:\JetBrains\IntelliJ IDEA 2020.1.3\lib\idea_rt.jar=39614:D:\JetBrains\IntelliJ IDEA 2020.1.3\bin"</span> -Dfile.encoding=GBK -classpath <span class="symbol">D:</span>\Java\jdk1.<span class="number">8.0_181</span>\jre\<span class="class"><span class="keyword">lib</span>\<span class="title">charsets</span>.<span class="title">jar</span>;</span><span class="symbol">D:</span>\Java\jdk1.<span class="number">8.0_181</span>\jre\<span class="class"><span class="keyword">lib</span>\<span class="title">deploy</span>.<span class="title">jar</span>;</span><span class="symbol">D:</span>\Java\jdk1.<span class="number">8.0_181</span>\jre\<span class="class"><span class="keyword">lib</span>\<span class="title">ext</span>\<span class="title">access</span>-<span class="title">bridge</span>-64.<span class="title">jar</span>;</span><span class="symbol">D:</span>\Java\jdk1.<span class="number">8.0_181</span>\jre\<span class="class"><span class="keyword">lib</span>\<span class="title">ext</span>\<span class="title">cldrdata</span>.<span class="title">jar</span>;</span><span class="symbol">D:</span>\Java\jdk1.<span class="number">8.0_181</span>\jre\<span class="class"><span class="keyword">lib</span>\<span class="title">ext</span>\<span class="title">dnsns</span>.<span class="title">jar</span>;</span><span class="symbol">D:</span>\Java\jdk1.<span class="number">8.0_181</span>\jre\<span class="class"><span class="keyword">lib</span>\<span class="title">ext</span>\<span class="title">jaccess</span>.<span class="title">jar</span>;</span><span class="symbol">D:</span>\Java\jdk1.<span class="number">8.0_181</span>\jre\<span class="class"><span class="keyword">lib</span>\<span class="title">ext</span>\<span class="title">jfxrt</span>.<span class="title">jar</span>;</span><span class="symbol">D:</span>\Java\jdk1.<span class="number">8.0_181</span>\jre\<span class="class"><span class="keyword">lib</span>\<span class="title">ext</span>\<span class="title">localedata</span>.<span class="title">jar</span>;</span><span class="symbol">D:</span>\Java\jdk1.<span class="number">8.0_181</span>\jre\<span class="class"><span class="keyword">lib</span>\<span class="title">ext</span>\<span class="title">nashorn</span>.<span class="title">jar</span>;</span><span class="symbol">D:</span>\Java\jdk1.<span class="number">8.0_181</span>\jre\<span class="class"><span class="keyword">lib</span>\<span class="title">ext</span>\<span class="title">sunec</span>.<span class="title">jar</span>;</span><span class="symbol">D:</span>\Java\jdk1.<span class="number">8.0_181</span>\jre\<span class="class"><span class="keyword">lib</span>\<span class="title">ext</span>\<span class="title">sunjce_provider</span>.<span class="title">jar</span>;</span><span class="symbol">D:</span>\Java\jdk1.<span class="number">8.0_181</span>\jre\<span class="class"><span class="keyword">lib</span>\<span class="title">ext</span>\<span class="title">sunmscapi</span>.<span class="title">jar</span>;</span><span class="symbol">D:</span>\Java\jdk1.<span class="number">8.0_181</span>\jre\<span class="class"><span class="keyword">lib</span>\<span class="title">ext</span>\<span class="title">sunpkcs11</span>.<span class="title">jar</span>;</span><span class="symbol">D:</span>\Java\jdk1.<span class="number">8.0_181</span>\jre\<span class="class"><span class="keyword">lib</span>\<span class="title">ext</span>\<span class="title">zipfs</span>.<span class="title">jar</span>;</span><span class="symbol">D:</span>\Java\jdk1.<span class="number">8.0_181</span>\jre\<span class="class"><span class="keyword">lib</span>\<span class="title">javaws</span>.<span class="title">jar</span>;</span><span class="symbol">D:</span>\Java\jdk1.<span class="number">8.0_181</span>\jre\<span class="class"><span class="keyword">lib</span>\<span class="title">jce</span>.<span class="title">jar</span>;</span><span class="symbol">D:</span>\Java\jdk1.<span class="number">8.0_181</span>\jre\<span class="class"><span class="keyword">lib</span>\<span class="title">jfr</span>.<span class="title">jar</span>;</span><span class="symbol">D:</span>\Java\jdk1.<span class="number">8.0_181</span>\jre\<span class="class"><span class="keyword">lib</span>\<span class="title">jfxswt</span>.<span class="title">jar</span>;</span><span class="symbol">D:</span>\Java\jdk1.<span class="number">8.0_181</span>\jre\<span class="class"><span class="keyword">lib</span>\<span class="title">jsse</span>.<span class="title">jar</span>;</span><span class="symbol">D:</span>\Java\jdk1.<span class="number">8.0_181</span>\jre\<span class="class"><span class="keyword">lib</span>\<span class="title">management</span>-<span class="title">agent</span>.<span class="title">jar</span>;</span><span class="symbol">D:</span>\Java\jdk1.<span class="number">8.0_181</span>\jre\<span class="class"><span class="keyword">lib</span>\<span class="title">plugin</span>.<span class="title">jar</span>;</span><span class="symbol">D:</span>\Java\jdk1.<span class="number">8.0_181</span>\jre\<span class="class"><span class="keyword">lib</span>\<span class="title">resources</span>.<span class="title">jar</span>;</span><span class="symbol">D:</span>\Java\jdk1.<span class="number">8.0_181</span>\jre\<span class="class"><span class="keyword">lib</span>\<span class="title">rt</span>.<span class="title">jar</span>;</span><span class="symbol">D:</span>\project-java\jiwang\<span class="keyword">out</span>\production\jiwang CommandUtil</span><br><span class="line">Please input destination server IP address ：</span><br><span class="line"></span><br><span class="line">baidu.com</span><br><span class="line"></span><br><span class="line">localhost/<span class="number">127.0</span>.<span class="number">0.1</span> is tracking the destination server...</span><br><span class="line">===========================================================================</span><br><span class="line">接口列表</span><br><span class="line">  <span class="number">6</span>...b4 b6 <span class="number">86</span> df cc <span class="number">9</span>d ......Realtek PCIe GbE Family Controller</span><br><span class="line"> <span class="number">11</span>...<span class="number">0</span>c <span class="number">54</span> <span class="number">15</span> fb <span class="number">33</span> <span class="number">95</span> ......Microsoft Wi-Fi Direct Virtual Adapter</span><br><span class="line"> <span class="number">14</span>...<span class="number">0e</span> <span class="number">54</span> <span class="number">15</span> fb <span class="number">33</span> <span class="number">94</span> ......Microsoft Wi-Fi Direct Virtual Adapter <span class="comment">#2</span></span><br><span class="line"> <span class="number">16</span>...<span class="number">0</span>c <span class="number">54</span> <span class="number">15</span> fb <span class="number">33</span> <span class="number">94</span> ......Intel(R) Dual Band Wireless-AC <span class="number">3168</span></span><br><span class="line"> <span class="number">17</span>...<span class="number">0</span>c <span class="number">54</span> <span class="number">15</span> fb <span class="number">33</span> <span class="number">98</span> ......Bluetooth Device (Personal Area Network)</span><br><span class="line">  <span class="number">1</span>...........................Software Loopback Interface <span class="number">1</span></span><br><span class="line">===========================================================================</span><br><span class="line"></span><br><span class="line">IPv4 路由表</span><br><span class="line">===========================================================================</span><br><span class="line">活动路由:</span><br><span class="line">网络目标        网络掩码          网关       接口   跃点数</span><br><span class="line">          <span class="number">0.0</span>.<span class="number">0.0</span>          <span class="number">0.0</span>.<span class="number">0.0</span>      <span class="number">192.168</span>.<span class="number">2.1</span>    <span class="number">192.168</span>.<span class="number">2.132</span>     <span class="number">35</span></span><br><span class="line">        <span class="number">127.0</span>.<span class="number">0.0</span>        <span class="number">255.0</span>.<span class="number">0.0</span>            在链路上         <span class="number">127.0</span>.<span class="number">0.1</span>    <span class="number">331</span></span><br><span class="line">        <span class="number">127.0</span>.<span class="number">0.1</span>  <span class="number">255.255</span>.<span class="number">255.255</span>            在链路上         <span class="number">127.0</span>.<span class="number">0.1</span>    <span class="number">331</span></span><br><span class="line">  <span class="number">127.255</span>.<span class="number">255.255</span>  <span class="number">255.255</span>.<span class="number">255.255</span>            在链路上         <span class="number">127.0</span>.<span class="number">0.1</span>    <span class="number">331</span></span><br><span class="line">      <span class="number">192.168</span>.<span class="number">2.0</span>    <span class="number">255.255</span>.<span class="number">255.0</span>            在链路上     <span class="number">192.168</span>.<span class="number">2.132</span>    <span class="number">291</span></span><br><span class="line">    <span class="number">192.168</span>.<span class="number">2.132</span>  <span class="number">255.255</span>.<span class="number">255.255</span>            在链路上     <span class="number">192.168</span>.<span class="number">2.132</span>    <span class="number">291</span></span><br><span class="line">    <span class="number">192.168</span>.<span class="number">2.255</span>  <span class="number">255.255</span>.<span class="number">255.255</span>            在链路上     <span class="number">192.168</span>.<span class="number">2.132</span>    <span class="number">291</span></span><br><span class="line">        <span class="number">224.0</span>.<span class="number">0.0</span>        <span class="number">240.0</span>.<span class="number">0.0</span>            在链路上         <span class="number">127.0</span>.<span class="number">0.1</span>    <span class="number">331</span></span><br><span class="line">        <span class="number">224.0</span>.<span class="number">0.0</span>        <span class="number">240.0</span>.<span class="number">0.0</span>            在链路上     <span class="number">192.168</span>.<span class="number">2.132</span>    <span class="number">291</span></span><br><span class="line">  <span class="number">255.255</span>.<span class="number">255.255</span>  <span class="number">255.255</span>.<span class="number">255.255</span>            在链路上         <span class="number">127.0</span>.<span class="number">0.1</span>    <span class="number">331</span></span><br><span class="line">  <span class="number">255.255</span>.<span class="number">255.255</span>  <span class="number">255.255</span>.<span class="number">255.255</span>            在链路上     <span class="number">192.168</span>.<span class="number">2.132</span>    <span class="number">291</span></span><br><span class="line">===========================================================================</span><br><span class="line">永久路由:</span><br><span class="line">  无</span><br><span class="line"></span><br><span class="line">localhost/<span class="number">127.0</span>.<span class="number">0.1</span> is tracking the destination server...</span><br><span class="line"></span><br><span class="line">通过最多 <span class="number">10</span> 个跃点跟踪</span><br><span class="line">到 baidu.com [<span class="number">39.156</span>.<span class="number">69.79</span>] 的路由:</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span>     <span class="number">1</span> ms     <span class="number">1</span> ms     <span class="number">1</span> ms  RM2100.lan [<span class="number">192.168</span>.<span class="number">2.1</span>]</span><br><span class="line">  <span class="number">2</span>     *        *        *     请求超时。</span><br><span class="line">  <span class="number">3</span>     *        *        *     请求超时。</span><br><span class="line">  <span class="number">4</span>     <span class="number">4</span> ms     <span class="number">3</span> ms     <span class="number">3</span> ms  <span class="number">192.168</span>.<span class="number">100.253</span></span><br><span class="line">  <span class="number">5</span>     <span class="number">4</span> ms     <span class="number">5</span> ms    <span class="number">10</span> ms  <span class="number">192.168</span>.<span class="number">100.114</span></span><br><span class="line">  <span class="number">6</span>     <span class="number">3</span> ms     <span class="number">3</span> ms     <span class="number">3</span> ms  <span class="number">192.168</span>.<span class="number">100.118</span></span><br><span class="line">  <span class="number">7</span>     *        *        *     请求超时。</span><br><span class="line">  <span class="number">8</span>     *        *        *     请求超时。</span><br><span class="line">  <span class="number">9</span>     *        *        *     请求超时。</span><br><span class="line"> <span class="number">10</span>     *        *        *     请求超时。</span><br><span class="line"></span><br><span class="line">跟踪完成。</span><br><span class="line"></span><br><span class="line">localhost/<span class="number">127.0</span>.<span class="number">0.1</span> is tracking the destination server...</span><br><span class="line"></span><br><span class="line">正在 Ping baidu.com [<span class="number">39.156</span>.<span class="number">69.79</span>] 具有 <span class="number">32</span> 字节的数据:</span><br><span class="line">来自 <span class="number">39.156</span>.<span class="number">69.79</span> 的回复: 字节=<span class="number">32</span> 时间=<span class="number">20</span>ms TTL=<span class="number">48</span></span><br><span class="line">来自 <span class="number">39.156</span>.<span class="number">69.79</span> 的回复: 字节=<span class="number">32</span> 时间=<span class="number">20</span>ms TTL=<span class="number">48</span></span><br><span class="line">来自 <span class="number">39.156</span>.<span class="number">69.79</span> 的回复: 字节=<span class="number">32</span> 时间=<span class="number">20</span>ms TTL=<span class="number">48</span></span><br><span class="line">来自 <span class="number">39.156</span>.<span class="number">69.79</span> 的回复: 字节=<span class="number">32</span> 时间=<span class="number">20</span>ms TTL=<span class="number">48</span></span><br><span class="line"></span><br><span class="line"><span class="number">39.156</span>.<span class="number">69.79</span> 的 Ping 统计信息:</span><br><span class="line">    数据包: 已发送 = <span class="number">4</span>，已接收 = <span class="number">4</span>，丢失 = <span class="number">0</span> (<span class="number">0</span>% 丢失)，</span><br><span class="line">往返行程的估计时间(以毫秒为单位):</span><br><span class="line">    最短 = <span class="number">20</span>ms，最长 = <span class="number">20</span>ms，平均 = <span class="number">20</span>ms</span><br><span class="line">IP address : baidu.com/<span class="number">39.156</span>.<span class="number">69.79</span></span><br><span class="line"></span><br><span class="line">Get the Server-Name<span class="comment"># : baidu.com</span></span><br><span class="line"></span><br><span class="line">Get the default file<span class="comment"># : index.html</span></span><br><span class="line"></span><br><span class="line">Get the protocol<span class="comment"># : http 80</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Get serverName &amp; IPAddress：baidu.com/<span class="number">39.156</span>.<span class="number">69.79</span></span><br><span class="line">Surplus memory <span class="keyword">of</span> <span class="symbol">JVM:</span> <span class="number">124194640</span>B</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++随机字符串生成函数</title>
      <link href="blog/zeszpb/"/>
      <url>blog/zeszpb/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++ 随机字符串生成函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LEN_NAME=<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">rand_str</span><span class="params">(<span class="keyword">char</span> *str,<span class="keyword">const</span> <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;++i)</span><br><span class="line">        str[i]=<span class="string">'A'</span>+rand()%<span class="number">26</span>;</span><br><span class="line">    str[++i]=<span class="string">'\0'</span>;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">char</span> name[LEN_NAME+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">20</span>;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;rand_str(name,LEN_NAME)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JAVA-正则表达式</title>
      <link href="blog/xm1a2g/"/>
      <url>blog/xm1a2g/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DB_MBook初始化</title>
      <link href="blog/tzgflu/"/>
      <url>blog/tzgflu/</url>
      
        <content type="html"><![CDATA[<h2 id="HLend-表"><a href="#HLend-表" class="headerlink" title="HLend 表"></a>HLend 表</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1601636857075-81d048ad-db40-4521-82fc-454e81fb90c3.png#align=left&amp;display=inline&amp;height=177&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=353&amp;originWidth=945&amp;size=114727&amp;status=done&amp;style=shadow&amp;width=472.5" alt="image.png"></p><h2 id="TBLend"><a href="#TBLend" class="headerlink" title="TBLend"></a>TBLend</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1601691449905-21a5348a-8992-4781-97e9-4a6aef984fc0.png#align=left&amp;display=inline&amp;height=424&amp;margin=%5Bobject%20Object%5D&amp;name=Snipaste_2020-10-02_19-08-13.png&amp;originHeight=673&amp;originWidth=419&amp;size=129974&amp;status=done&amp;style=shadow&amp;width=264" alt="Snipaste_2020-10-02_19-08-13.png"></p><h2 id="TBook"><a href="#TBook" class="headerlink" title="TBook"></a>TBook</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1601691447497-aaf04d12-fea6-4802-b310-16726ee47c7e.png#align=left&amp;display=inline&amp;height=159&amp;margin=%5Bobject%20Object%5D&amp;name=Snipaste_2020-10-02_19-08-46.png&amp;originHeight=319&amp;originWidth=1424&amp;size=135437&amp;status=done&amp;style=shadow&amp;width=710" alt="Snipaste_2020-10-02_19-08-46.png"></p><h2 id="TLend"><a href="#TLend" class="headerlink" title="TLend"></a>TLend</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1601691444632-812f7425-fc06-4878-95f8-434b68589872.png#align=left&amp;display=inline&amp;height=359&amp;margin=%5Bobject%20Object%5D&amp;name=Snipaste_2020-10-02_19-09-12.png&amp;originHeight=579&amp;originWidth=838&amp;size=148728&amp;status=done&amp;style=shadow&amp;width=520" alt="Snipaste_2020-10-02_19-09-12.png"></p><h2 id="TReader"><a href="#TReader" class="headerlink" title="TReader"></a>TReader</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1601691440813-2e8b6a45-785f-4ae6-8413-d9b9ad46f9ab.png#align=left&amp;display=inline&amp;height=293&amp;margin=%5Bobject%20Object%5D&amp;name=Snipaste_2020-10-02_19-10-16.png&amp;originHeight=609&amp;originWidth=1280&amp;size=163569&amp;status=done&amp;style=shadow&amp;width=615" alt="Snipaste_2020-10-02_19-10-16.png"></p>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>task_05_数据链路层</title>
      <link href="blog/eblx0i/"/>
      <url>blog/eblx0i/</url>
      
        <content type="html"><![CDATA[<h2 id="《计算机网络》自主学习任务学习单"><a href="#《计算机网络》自主学习任务学习单" class="headerlink" title="《计算机网络》自主学习任务学习单"></a>《计算机网络》自主学习任务学习单</h2><p>2020 年 9 月 23 日，2020 年 9 月 28 日</p><table><thead><tr><th>课程介绍</th><th>第三章 数据链路层</th></tr></thead><tbody><tr><td>教学目标</td><td>1、了解数据链路层使用的两种信道类型</td></tr></tbody></table><p>2、了解数据链路层的功能<br>3、了解帧定界原理。<br>4、掌握数据帧透明传输实施机制。<br>5、掌握 CRC 差错检测原理。<br>6、掌握 PPP 协议。 |<br>| 学习内容 |<br>1、课下自主网上搜索观看中国大学 MOOC 教程《玩转计算机网络-计算机网络原理》（参考学习，不要求）<br>（<a href="https://www.icourse163.org/course/QDU-1206901804" target="_blank" rel="noopener">https://www.icourse163.org/course/QDU-1206901804</a>）<br>03 数据链路层<br>3.1 数据链路层概述<br>3.2 PPP 协议<br>2、学习重点：<br>  （1）用字节填充法、比特填充法解决透明传输的问题。<br>（2）循环冗余检验的原理及计算方法<br>（3）PPP 协议格式。<br>  |<br>| 课堂讨论 | 1、如何做到数据链路层的可靠传输？ |<br>| 课下作业 | 1、循环冗余检错原理（PPT）（1 班作业，9 月 28 日前提交）<br>2、SLIP 与 HDLC 协议原理（PPT）（2 班作业，9 月 28 日前提交） |</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>高级概念</title>
      <link href="blog/vab07n/"/>
      <url>blog/vab07n/</url>
      
        <content type="html"><![CDATA[<h1 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h1><p>如果是 MyISAM 的数据库引擎，那么直接复制相应的数据库文件即可。<br>如果是 InnoDB 则需要利用命令。这也是更为一般的普适方法。</p><p>利用 MySQL 提供的工具———— <strong>mysqldump</strong></p><h2 id="mysqldump"><a href="#mysqldump" class="headerlink" title="mysqldump"></a>mysqldump</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">mysqldump</span> <span class="selector-tag">-uroot</span> <span class="selector-tag">-p</span> <span class="selector-tag">database_name</span> <span class="selector-attr">[table_name1,...]</span> &gt;<span class="selector-tag">pathname</span><span class="selector-class">.sql</span></span><br></pre></td></tr></table></figure><h3 id="备份数据库"><a href="#备份数据库" class="headerlink" title="备份数据库"></a>备份数据库</h3><p>使用时需指定用户名，并使用-p 选项，再回车后键入密码。实际上是利用的<a href="#%E9%87%8D%E5%AE%9A%E5%90%91">重定向</a>来生成一个 sql 脚本文件。<br>该文件中包含各个 sql 语句。</p><p>重定向符号后面的是 sql 文件的路径。Linux 请使用<code>/</code>来表示目录结构。Windows 可以用<code>\</code> 也可以用 <code>/</code>。<br>比如：</p><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p world &gt;/<span class="built_in">home</span>/jelly/<span class="built_in">config</span>/world.sql</span><br></pre></td></tr></table></figure><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p world &gt;<span class="string">d:</span><span class="regexp">/config/</span>world.sql</span><br><span class="line">mysqldump -uroot -p world &gt;<span class="string">d:</span>\config\world.sql**</span><br></pre></td></tr></table></figure><h3 id="备份部分表"><a href="#备份部分表" class="headerlink" title="备份部分表"></a>备份部分表</h3><p>如果不想备份整个数据库，而是像备份某个表，那么在数据库后面指定表的名称。</p><h1 id="还原"><a href="#还原" class="headerlink" title="还原"></a>还原</h1><p>执行已备份的 sql 脚本文件。有两种方案：</p><h2 id="已连接数据库时"><a href="#已连接数据库时" class="headerlink" title="已连接数据库时"></a>已连接数据库时</h2><p>登录 mysql 命令行，使用 source 命令（与 mysqldump 不同，source 不是独立工具，而是 MySQL 内部命令）来执行 sql 脚本。<br>需要先创建一个数据库，然后切换到给数据库，再执行该命令。</p><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">source</span> d:<span class="regexp">/tool/</span>world.sql</span><br></pre></td></tr></table></figure><h2 id="未连接数据库时"><a href="#未连接数据库时" class="headerlink" title="未连接数据库时"></a>未连接数据库时</h2><p>直接在 shell 的命令行执行：</p><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p &lt; /<span class="built_in">home</span>/jelly/<span class="built_in">config</span>/world.sql</span><br></pre></td></tr></table></figure><h1 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h1><p>存储引擎是基于表的，不是基于数据库的。</p><table><thead><tr><th>功能</th><th style="text-align:center">MyISAM</th><th style="text-align:center">InnoDB</th><th style="text-align:center">Memory</th><th style="text-align:center">Archive</th></tr></thead><tbody><tr><td>存储限制</td><td style="text-align:center">256T</td><td style="text-align:center">64T</td><td style="text-align:center">有</td><td style="text-align:center">无</td></tr><tr><td>事务安全</td><td style="text-align:center">-</td><td style="text-align:center">支持</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td>索引支持</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td><td style="text-align:center">-</td></tr><tr><td>锁颗粒</td><td style="text-align:center">表锁</td><td style="text-align:center">行锁</td><td style="text-align:center">表锁</td><td style="text-align:center">行锁</td></tr><tr><td>数据压缩</td><td style="text-align:center">支持</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">支持</td></tr><tr><td>外键</td><td style="text-align:center">-</td><td style="text-align:center">支持</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr></tbody></table><p>以上是常用引擎，另外还有其他存储引擎。</p>]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL命令</title>
      <link href="blog/emv1ek/"/>
      <url>blog/emv1ek/</url>
      
        <content type="html"><![CDATA[<h2 id="登陆命令"><a href="#登陆命令" class="headerlink" title="登陆命令"></a>登陆命令</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mysql</span> -u用户名 -p密码</span><br></pre></td></tr></table></figure><p>用户名和-u 选项之间可以有空格，但是密码和-p 选项之间必须无空格。但是这样密码会是明文。你可以在键入-p 之后，回车再输入密码，就是密文。</p><h3 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h3><table><thead><tr><th>缩写</th><th>全写</th><th>描述</th></tr></thead><tbody><tr><td>-h</td><td>–host</td><td>主机</td></tr><tr><td>-p</td><td>–password</td><td>密码</td></tr><tr><td>-P</td><td>–port</td><td>端口</td></tr><tr><td>-V</td><td>–version</td><td>版本信息</td></tr><tr><td>-u</td><td>–user</td><td>用户</td></tr><tr><td></td><td>–prompt</td><td>修改提示符</td></tr></tbody></table><h4 id="–prompt"><a href="#–prompt" class="headerlink" title="–prompt"></a>–prompt</h4><p>–prompt 支持几个转义词组</p><ul><li>\h 主机名</li><li>\D 完整日期</li><li>\d 当前数据库</li><li>\u 当前用户</li></ul><h2 id="登陆之后"><a href="#登陆之后" class="headerlink" title="登陆之后"></a>登陆之后</h2><h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><ul><li>exit</li><li>quit</li><li>\q</li></ul><p>都能退出 mysql，系统显示 Bye。</p><h3 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h3><p>键入<code>help</code>或<code>\h</code>。</p><h3 id="显示信息"><a href="#显示信息" class="headerlink" title="显示信息"></a>显示信息</h3><p>select:</p><ul><li>version(); 版本信息</li><li>now(); 当前时间</li><li>user(); 用户@主机名</li></ul><h3 id="使用系统命令"><a href="#使用系统命令" class="headerlink" title="使用系统命令"></a>使用系统命令</h3><p><strong>!</strong> 后加 shell 命令可以在 mysql 中执行 shell 命令。</p><blockquote><p>gdb 使用 shell 加命令来执行 shell 命令。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL语句的优化</title>
      <link href="blog/ix3gza/"/>
      <url>blog/ix3gza/</url>
      
        <content type="html"><![CDATA[<h2 id="IN-操作优化"><a href="#IN-操作优化" class="headerlink" title="IN 操作优化"></a>IN 操作优化</h2><ul><li>IN 后面只能接常量，且最多不超过 200 个</li><li>IN 后面不能接子查询</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb1 <span class="keyword">where</span> tb1.id <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> tb2 <span class="keyword">where</span> tb2.c1...)</span><br><span class="line">// 优化后：</span><br><span class="line"><span class="keyword">select</span> tb1.* <span class="keyword">from</span> tb1, (<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> tb2 <span class="keyword">where</span> tb2.c1...)t <span class="keyword">where</span> tb1.id = t.id;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>权限管理</title>
      <link href="blog/frgbbo/"/>
      <url>blog/frgbbo/</url>
      
        <content type="html"><![CDATA[<h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h1><blockquote><p>本文所有操作，均可<strong>通过普通 SQL 语句更新系统表 user</strong>来实现相应的功能。</p></blockquote><h2 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h2><blockquote><p>基本格式</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'username'</span>@<span class="string">'host'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'password'</span>;</span><br></pre></td></tr></table></figure><p>注意引号的位置，不要用一对引号把@也包含进来。@前面是用户名，后面是主机名，可以使用通配符<code>%</code></p><blockquote><p>实际上可以省略用户名和主机名处的引号，但如果使用了通配符则引号不能省略</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'jelly'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'123456'</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> jelly@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> jelly;</span><br></pre></td></tr></table></figure><h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> jelly@<span class="string">'%'</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> jelly@localhost</span><br></pre></td></tr></table></figure><h2 id="重命名用户"><a href="#重命名用户" class="headerlink" title="重命名用户"></a>重命名用户</h2><blockquote><p>例如：</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RENAME</span> <span class="keyword">USER</span> <span class="string">'jelly'</span>@<span class="string">'%'</span> <span class="keyword">TO</span> <span class="string">'guodong'</span>@<span class="string">'%'</span>;</span><br></pre></td></tr></table></figure><h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><blockquote><p>例如：</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> = <span class="keyword">PASSWORD</span>(<span class="string">'123456'</span>);</span><br></pre></td></tr></table></figure><blockquote><p>此外还可以使用 mysql 工具<code>mysqladmin</code>来修改<br>格式：<code>mysqladmin -u用户名 -p旧密码 password 新密码</code></p></blockquote><h1 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h1><table><thead><tr><th>权限范围</th><th>可用权限</th></tr></thead><tbody><tr><td>表权限</td><td><code>Select</code>, <code>Insert</code>, <code>Update</code>, <code>Delete</code>, <code>Create</code>, <code>Drop</code>, <code>Grant</code>, <code>References</code>, <code>Index</code>, <code>Alter</code></td></tr><tr><td>列权限</td><td><code>Select</code>, <code>Insert</code>, <code>Update</code>,<code>References</code></td></tr><tr><td>过程权限</td><td><code>Execute</code>, <code>Alter Routine</code>, <code>Grant</code></td></tr></tbody></table><h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> *.*  <span class="keyword">TO</span> jelly@<span class="string">'%'</span></span><br><span class="line">//给一个用户（jelly）分配全部的操作权限</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.*  <span class="keyword">TO</span> jelly@<span class="string">'%'</span></span><br></pre></td></tr></table></figure><p>%就是前面我们提到过的通配符，可以匹配 0 到 n 个字符。这里指的是该用户所登录的任何主机。</p><h2 id="取消授权"><a href="#取消授权" class="headerlink" title="取消授权"></a>取消授权</h2><p>语法：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> privilege <span class="keyword">ON</span> databasename.tablename <span class="keyword">FROM</span> <span class="string">'username'</span>@<span class="string">'host'</span>;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> test.user <span class="keyword">FROM</span> <span class="string">'jelly'</span>@<span class="string">'%'</span>;</span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> *.* <span class="keyword">FROM</span> <span class="string">'jelly'</span>@<span class="string">'%'</span>;</span><br></pre></td></tr></table></figure><blockquote><p><strong>GRANT</strong>和<strong>REVOKE</strong>对于用户而言，一个是<strong>TO</strong>，一个是<strong>FROM</strong></p></blockquote><h2 id="查看授权"><a href="#查看授权" class="headerlink" title="查看授权"></a>查看授权</h2><p>例如：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> <span class="string">'jelly'</span>@<span class="string">'%'</span>;</span><br></pre></td></tr></table></figure><h2 id="刷新权限"><a href="#刷新权限" class="headerlink" title="刷新权限"></a>刷新权限</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span></span><br></pre></td></tr></table></figure><p>偶尔会出现，修改了操作系统表的权限，却没有及时更新的情况。可以用上述命令刷新。</p>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库中的函数</title>
      <link href="blog/sbxidb/"/>
      <url>blog/sbxidb/</url>
      
        <content type="html"><![CDATA[<h1 id="字符（串）函数"><a href="#字符（串）函数" class="headerlink" title="字符（串）函数"></a>字符（串）函数</h1><p>函数可以在 MySQL 提示符中，直接用 SELECT 语句测试。<br>比如 <strong>SELECT USER();</strong></p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li>字符函数</li><li>数值运算符与函数</li><li>比较运算符与函数</li><li>日期时间函数</li><li>信息函数</li><li>聚合函数</li><li>加密函数</li></ul><h2 id="字符（串）函数-1"><a href="#字符（串）函数-1" class="headerlink" title="字符（串）函数"></a>字符（串）函数</h2><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>CONCAT</td><td>字符串连接</td></tr><tr><td>CONCAT_WS</td><td>同上，但指定连接符</td></tr><tr><td>FORMAT</td><td>数字格式化</td></tr><tr><td>LOWER</td><td>转换成小写字母</td></tr><tr><td>UPPER</td><td>转换成大写字母</td></tr><tr><td>LEFT</td><td>获取左侧字符</td></tr><tr><td>RIGHT</td><td>获取右侧字符</td></tr><tr><td>LENGTH</td><td>获取长度</td></tr><tr><td>LTRIM</td><td>删除前导空格</td></tr><tr><td>RTRIM</td><td>删除后续空格</td></tr><tr><td>TRIM</td><td>删除前后空格</td></tr><tr><td>SUBSTRING</td><td>字符串截取</td></tr><tr><td>[NOT] LIKE</td><td>模式匹配</td></tr><tr><td>REPEAT</td><td>重复字符串</td></tr><tr><td>REPLACE</td><td>字符串替换</td></tr></tbody></table><h3 id="CONCAT"><a href="#CONCAT" class="headerlink" title="CONCAT"></a>CONCAT</h3><p>参数个数不限，连接成一个字符串<br>已知 test 表的内如如下：</p><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">+----+------------+-----------+</span><br><span class="line">|<span class="string"> id </span>|<span class="string"> first_name </span>|<span class="string"> last_name </span>|</span><br><span class="line">+----+------------+-----------+</span><br><span class="line">|<span class="string">  1 </span>|<span class="string"> A          </span>|<span class="string"> B         </span>|</span><br><span class="line">|<span class="string">  2 </span>|<span class="string"> C          </span>|<span class="string"> D         </span>|</span><br><span class="line">|<span class="string">  3 </span>|<span class="string"> tom%       </span>|<span class="string"> 123       </span>|</span><br><span class="line">|<span class="string">  4 </span>|<span class="string"> NULL       </span>|<span class="string"> 11        </span>|</span><br><span class="line">|<span class="string">  5 </span>|<span class="string"> 11         </span>|<span class="string"> 22        </span>|</span><br><span class="line">|<span class="string">  6 </span>|<span class="string"> AA         </span>|<span class="string"> BB        </span>|</span><br><span class="line">|<span class="string">  7 </span>|<span class="string"> CC         </span>|<span class="string"> DD        </span>|</span><br><span class="line">+----+------------+-----------+</span><br></pre></td></tr></table></figure><p>test 表中有两个字段 first_name,和 last_name，调用连接函数之后：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT CONCAT(first_name,last_name)AS full_name FROM test;</span><br><span class="line"></span><br><span class="line">+-----------+</span><br><span class="line">| full_name |</span><br><span class="line">+-----------+</span><br><span class="line">| AB        |</span><br><span class="line">| CD        |</span><br><span class="line">| tom%123   |</span><br><span class="line">| NULL      |</span><br><span class="line">| 1122      |</span><br><span class="line">| AABB      |</span><br><span class="line">| CCDD      |</span><br><span class="line">+-----------+</span><br></pre></td></tr></table></figure><h3 id="CONCAT-WS"><a href="#CONCAT-WS" class="headerlink" title="CONCAT_WS"></a>CONCAT_WS</h3><p>参数至少有三个，第一参数为要连接字符串的分隔符，后面的都是待连接的字符串。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT CONCAT_WS(&apos;-&apos;,1992,10,17);</span><br><span class="line"></span><br><span class="line">+---------------------------+</span><br><span class="line">| CONCAT_WS(&apos;-&apos;,1992,10,17) |</span><br><span class="line">+---------------------------+</span><br><span class="line">| 1992-10-17                |</span><br><span class="line">+---------------------------+</span><br></pre></td></tr></table></figure><h3 id="FORMAT"><a href="#FORMAT" class="headerlink" title="FORMAT"></a>FORMAT</h3><p>将数字格式化为字符串。第二个参数为小数的位数。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT FORMAT(12345.67,2);</span><br></pre></td></tr></table></figure><p>结果为千分位:</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+--------------------+</span></span><br><span class="line">| FORMAT(12345.67,2) |</span><br><span class="line"><span class="code">+--------------------+</span></span><br><span class="line">| 12,345.67          |</span><br><span class="line"><span class="code">+--------------------+</span></span><br></pre></td></tr></table></figure><h3 id="LOWER-UPPER"><a href="#LOWER-UPPER" class="headerlink" title="LOWER/UPPER"></a>LOWER/UPPER</h3><p>顾名思义，不再解释</p><h3 id="LEFT-RIGHT"><a href="#LEFT-RIGHT" class="headerlink" title="LEFT/RIGHT"></a>LEFT/RIGHT</h3><p>获取左（右）侧第几个字符。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LEFT</span>(<span class="string">'MySQL'</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h3 id="LENGTH"><a href="#LENGTH" class="headerlink" title="LENGTH"></a>LENGTH</h3><p>获取字符串长度。SQL Server 中是 len 函数。MySQL 中没有 len 函数。</p><h3 id="LTRIM-RTRIM"><a href="#LTRIM-RTRIM" class="headerlink" title="LTRIM/RTRIM"></a>LTRIM/RTRIM</h3><p>删除前导/后续空格</p><h3 id="SUBSTRING"><a href="#SUBSTRING" class="headerlink" title="SUBSTRING"></a>SUBSTRING</h3><p>与其他语言中一样，截取子串的三个参数分别为：</p><ul><li>原字符串</li><li>起始位置（注意下标从 1 算起；可以为负数，即从右数起）</li><li>截取长度（缺省为截取到结尾）</li></ul><h3 id="NOT-LIKE"><a href="#NOT-LIKE" class="headerlink" title="[NOT] LIKE"></a>[NOT] LIKE</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">FROM</span> <span class="string">'MySQL'</span> <span class="keyword">LIKE</span> <span class="string">'M%'</span>;</span><br></pre></td></tr></table></figure><p>结果为 1，即 true。</p><ul><li>%代表 0 个或多个字符。</li><li>_代表任意一个字符。</li></ul><blockquote><p>关于转义<br>当要匹配的字符中含有特殊字符(比如%)时，需要转义。\，貌似\也可以<br>SELECT CONCAT(first_name,last_name)AS full_name FROM test WHERE first_name LIKE’%%’;</p></blockquote><p>也可以自己指定<br>SELECT CONCAT(first_name,last_name)AS full_name FROM test WHERE first_name LIKE’%1%’ ESCAPE ‘1’;</p><h3 id="TRIM"><a href="#TRIM" class="headerlink" title="TRIM"></a>TRIM</h3><p>缺省可以删除前后空格，也可以删除指定的字符。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 删除??MySQL???前面的？</span><br><span class="line">SELECT TRIM(LEADING &apos;?&apos; FROM &apos;??MySQL???&apos;);</span><br><span class="line">-- 删除后面的？</span><br><span class="line">SELECT TRIM(TRAILING &apos;?&apos; FROM &apos;??MySQL???&apos;);</span><br><span class="line">-- 删除前后的？</span><br><span class="line">SELECT TRIM(BOTH &apos;?&apos; FROM &apos;??MySQL???&apos;);</span><br></pre></td></tr></table></figure><h3 id="REPEAT"><a href="#REPEAT" class="headerlink" title="REPEAT"></a>REPEAT</h3><p>重复某一字符串多少次</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT REPEAT(&apos;ab&apos;,2);</span><br></pre></td></tr></table></figure><p>结果是：</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+----------------+</span></span><br><span class="line">| REPEAT(<span class="emphasis">'ab'</span>,2) |</span><br><span class="line"><span class="code">+----------------+</span></span><br><span class="line">| abab           |</span><br><span class="line"><span class="code">+----------------+</span></span><br></pre></td></tr></table></figure><h3 id="REPLACE"><a href="#REPLACE" class="headerlink" title="REPLACE"></a>REPLACE</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 去掉所有的？</span><br><span class="line">SELECT REPLACE(&apos;??MySQL&apos;,&apos;?&apos;,&apos;&apos;);</span><br></pre></td></tr></table></figure><p>注意！替换的时候也可以一换多，多换一。</p><h1 id="数值运算和比较运算"><a href="#数值运算和比较运算" class="headerlink" title="数值运算和比较运算"></a>数值运算和比较运算</h1><h2 id="数值运算"><a href="#数值运算" class="headerlink" title="数值运算"></a>数值运算</h2><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>CEIL()</td><td>进一取整</td></tr><tr><td>DIV</td><td>整数除法</td></tr><tr><td>FLOOR()</td><td>舍一取整</td></tr><tr><td>MOD</td><td>模运算</td></tr><tr><td>POWER()</td><td>幂运算</td></tr><tr><td>ROUND()</td><td>四舍五入</td></tr><tr><td>TRUNCARE()</td><td>数字截取</td></tr></tbody></table><h3 id="CEIL-FLOOR-ROUND"><a href="#CEIL-FLOOR-ROUND" class="headerlink" title="CEIL/FLOOR/ROUND"></a>CEIL/FLOOR/ROUND</h3><p>前两者为对应操作。一个向上取整，一个向下取整。第三个 ROUND 为四舍五入。</p><h3 id="DIV-MOD"><a href="#DIV-MOD" class="headerlink" title="DIV/MOD"></a>DIV/MOD</h3><p>两者并非函数，而是 <strong>运算符</strong>。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT 5 DIV 2;</span><br><span class="line">SELECT 7 MOD 3;</span><br></pre></td></tr></table></figure><p>MOD 与%等价，就是模运算，与别不同的是，MySQL 中支持浮点数取模。</p><h3 id="POWER"><a href="#POWER" class="headerlink" title="POWER"></a>POWER</h3><p>幂运算</p><h3 id="TRUNCARE"><a href="#TRUNCARE" class="headerlink" title="TRUNCARE"></a>TRUNCARE</h3><p>所谓的数字截取，就是对数字逐位的截断。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT TRUNCATE(125.123, 1);</span><br><span class="line">SELECT TRUNCATE(125.123, 0);</span><br><span class="line">SELECT TRUNCATE(125.123, - 1);</span><br></pre></td></tr></table></figure><h2 id="运算的结果分别为：125-1、125-0-120"><a href="#运算的结果分别为：125-1、125-0-120" class="headerlink" title="运算的结果分别为：125.1、125.0,120"></a>运算的结果分别为：125.1、125.0,120</h2><h2 id="比较运算符与函数"><a href="#比较运算符与函数" class="headerlink" title="比较运算符与函数"></a>比较运算符与函数</h2><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>[NOT] BETWEEN…AND…</td><td>[不]在范围内</td></tr><tr><td>[NOT] IN()</td><td>[不]在列出的值范围内</td></tr><tr><td>IS [NOT] NULL</td><td>[不]为空</td></tr></tbody></table><h1 id="日期时间函数"><a href="#日期时间函数" class="headerlink" title="日期时间函数"></a>日期时间函数</h1><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>NOW()</td><td>当前日期和时间</td></tr><tr><td>CURDATE()</td><td>当前日期</td></tr><tr><td>CURTIME()</td><td>当前时间</td></tr><tr><td>DATE_ADD()</td><td>日期变化</td></tr><tr><td>DATEDIFF()</td><td>日期差值</td></tr><tr><td>DATE_FORMATE()</td><td>日期格式化</td></tr></tbody></table><h3 id="NOW-CURDATE-CURTIME"><a href="#NOW-CURDATE-CURTIME" class="headerlink" title="NOW/CURDATE/CURTIME"></a>NOW/CURDATE/CURTIME</h3><p>可以把 NOW 看作是 CURDATE 和 CURTIME 的综合</p><h3 id="DATE-ADD"><a href="#DATE-ADD" class="headerlink" title="DATE_ADD"></a>DATE_ADD</h3><p>实现日志的增减，加为正数，减为负数</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT DATE_ADD(CURDATE(),INTERVAL 3 WEEK);</span><br></pre></td></tr></table></figure><p>WEEK,也可以是 DAY，YEAR<br>与之相对的还有一个 DATE_SUB 函数。</p><h3 id="DATEDIFF"><a href="#DATEDIFF" class="headerlink" title="DATEDIFF"></a>DATEDIFF</h3><p>获取两个日期之间的差值，左边减去右边，值为天数。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT DATEDIFF(&apos;2014-10-11&apos;,&apos;2014-09-06&apos;);</span><br></pre></td></tr></table></figure><h3 id="DATE-FORMAT"><a href="#DATE-FORMAT" class="headerlink" title="DATE_FORMAT()"></a>DATE_FORMAT()</h3><p>日期格式化为其他形式，比如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT DATE_FORMAT(&apos;2014-11-01&apos;,&apos;%m/%d/%Y&apos;);</span><br></pre></td></tr></table></figure><p>结果为：<br>11/01/2014<br>如果是小写的 y，则格式化为 11/01/14</p><h1 id="信息函数"><a href="#信息函数" class="headerlink" title="信息函数"></a>信息函数</h1><table><thead><tr><th>名称</th><th>函数</th></tr></thead><tbody><tr><td>CONNECTIOIN_ID</td><td>连接 ID</td></tr><tr><td>DATABASE</td><td>当前数据库</td></tr><tr><td>LAST_INSERT_ID</td><td>最后插入记录 ID</td></tr><tr><td>USER</td><td>当前用户</td></tr><tr><td>VERSION</td><td>版本信息</td></tr></tbody></table><h3 id="CONNECTION-ID"><a href="#CONNECTION-ID" class="headerlink" title="CONNECTION_ID"></a>CONNECTION_ID</h3><p>第一连接就是 1，以此类推。</p><h3 id="DATABASE"><a href="#DATABASE" class="headerlink" title="DATABASE"></a>DATABASE</h3><h3 id="LAST-INSERT-ID"><a href="#LAST-INSERT-ID" class="headerlink" title="LAST_INSERT_ID"></a>LAST_INSERT_ID</h3><p>当一条语句插入多条记录的时候，它只返回第一条记录的 ID。</p><h3 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h3><p>返回当前用户。MYSQL 中的用户的完整用户名是 <strong>用户名@登录主机</strong></p><h3 id="VERSION"><a href="#VERSION" class="headerlink" title="VERSION"></a>VERSION</h3><p>MySQL 版本号</p><h1 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h1><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>AVG</td><td>平均值</td></tr><tr><td>COUNT</td><td>计数</td></tr><tr><td>MAX</td><td>最大值</td></tr><tr><td>MIN</td><td>最小值</td></tr><tr><td>SUM</td><td>求和</td></tr></tbody></table><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>聚合函数只有一个返回值！</li><li>不能直接用 SELECT 加函数名的形式来调用，必须针对字段！</li><li>优先级<ul><li>聚合函数优先级小于 WHERE 语句，不能用来 WHERE 后面。</li><li>聚合函数优先级大于 HAVING，可以用在 HAVING 后面。</li></ul></li></ul><h2 id="COUNT"><a href="#COUNT" class="headerlink" title="COUNT"></a>COUNT</h2><ul><li>COUNT(*)统计 null</li><li>COUNT(字段)不统计 null</li><li>COUNT(1)可统计</li></ul><h1 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h1><p>UDF(User-defined function)</p><h2 id="创建自定义函数"><a href="#创建自定义函数" class="headerlink" title="创建自定义函数"></a>创建自定义函数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE FUCNTION function_name</span><br><span class="line">RETURNS</span><br><span class="line">&#123;STRING|INTEGER|REAL|DECIMAL&#125;</span><br><span class="line">RETURN</span><br><span class="line">routine_body</span><br></pre></td></tr></table></figure><h2 id="函数体"><a href="#函数体" class="headerlink" title="函数体"></a>函数体</h2><p>上面的 routine_body 指代函数体。其构成：</p><ul><li>函数体由合法的 SQL 语句构成</li><li>函数体可以是简单的 SELECT 或 INSERT 语句</li><li>函数体如果为符合结构则使用 BEGIN…END 语句</li><li>符合结构可以包含声明，循环，控制结构</li></ul><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p><code>来源慕课网</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 无参数</span><br><span class="line">CREATE function f()</span><br><span class="line">RETURNS VARCHAR(30)</span><br><span class="line">  RETURN Date_format(Now(), &apos;%Y年%m月%d日 %H点：%i分：%s秒&apos;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 带参数</span><br><span class="line">CREATE function f2(num1 SMALLINT UNSIGNED,</span><br><span class="line">                   num2 SMALLINT UNSIGNED)</span><br><span class="line">RETURNS FLOAT(10, 2) UNSIGNED</span><br><span class="line">  RETURN ( num1 + num2 ) / 2;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--  复合结构的函数体</span></span><br><span class="line">DELIMITER //</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">function</span></span><br><span class="line">  adduser(username <span class="built_in">VARCHAR</span>(<span class="number">20</span>)) <span class="keyword">returns</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">INSERT</span> <span class="keyword">test</span></span><br><span class="line">         (</span><br><span class="line">                username</span><br><span class="line">         )</span><br><span class="line">         <span class="keyword">VALUES</span></span><br><span class="line">         (</span><br><span class="line">                username</span><br><span class="line">         );</span><br><span class="line"></span><br><span class="line">  RETURN Last_insert_id();</span><br><span class="line"><span class="keyword">END</span>//</span><br></pre></td></tr></table></figure><p>三个要点：</p><ul><li>首先因为函数体内有分号，所以我们要修改定界符，避免函数中途停止。使用 DELIMITER 指定新的定界符为//。</li><li>然后，因为函数体内有多条 SQL 语句，所以我们要用 BEGIN…END 包裹。</li><li>RETURN 在 BEGIN…END 结构内部。并且必须有 RETURN。默认情况下，RETURN 后面的语句会在屏幕上打印出来。</li></ul><h2 id="删除函数"><a href="#删除函数" class="headerlink" title="删除函数"></a>删除函数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP FUCNTION [IF EXISTS] function_name;</span><br></pre></td></tr></table></figure><p>一次只能删除一个函数。</p><h1 id="加密函数"><a href="#加密函数" class="headerlink" title="加密函数"></a>加密函数</h1><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>MD5</td><td>信息摘要算法</td></tr><tr><td>PASSWORD</td><td>密码算法</td></tr></tbody></table><p>用于 WEB 页面用 MD5 算法保存用户密码<br>用户本地用户，用 PASSWORD 修改密码。比如</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">SET</span> <span class="keyword">Password</span>=<span class="keyword">PASSWORD</span>(<span class="string">'newpassword'</span>) <span class="keyword">where</span> <span class="keyword">USER</span>=<span class="string">'root'</span>;</span><br></pre></td></tr></table></figure><p>注意 user 表在系统数据库 mysql 下。执行命令之前请<code>USE mysql</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>索引</title>
      <link href="blog/tr2ahg/"/>
      <url>blog/tr2ahg/</url>
      
        <content type="html"><![CDATA[<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>索引能提高查询效率，但是查询效率和修改效率一直是一个矛盾。</p><h2 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 单独创建，colname为列名</span><br><span class="line">CREATE INDEX indexname ON tablename(colname(length));</span><br><span class="line">-- 也可以在修改表的时候创建</span><br><span class="line">ALTER TABLE table_name ADD INDEX [index_name] (column_list)</span><br><span class="line">-- 创建表的时候指定</span><br><span class="line">CREATE TABLE mytable(</span><br><span class="line">trueID INT NOT NULL,</span><br><span class="line">    username VARCHAR(16) NOT NULL,</span><br><span class="line">    INDEX [indexname] (username(length)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h2><p>索引列必须唯一，但可以为 NULL，不能有多个 NULL。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 单独创建</span><br><span class="line">CREATE UNIQUE INDEX indexname ON tablename(colname(length));</span><br><span class="line">-- 也可以在修改表的时候创建</span><br><span class="line">ALTER TABLE table_name ADD UNIQUE [index_name] (column_list)</span><br><span class="line">-- 创建表的时候指定</span><br><span class="line">CREATE TABLE mytable(</span><br><span class="line">trueID INT NOT NULL,</span><br><span class="line">    username VARCHAR(16) NOT NULL,</span><br><span class="line">    UNIQUE INDEX [indexname] (username(length)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h2><p>就是之前所说过的主键。不能使用<code>CREATE</code>语句单独创建。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 可以在修改表的时候创建</span><br><span class="line">ALTER TABLE tablename ADD PRIMARY KEY (column_list);</span><br><span class="line">-- 在表级定义主键</span><br><span class="line">CREATE TABLE mytable(</span><br><span class="line">trueID INT NOT NULL,</span><br><span class="line">    username VARCHAR(16) NOT NULL,</span><br><span class="line">    PRIMARY KEY(ID)</span><br><span class="line">);</span><br><span class="line">-- 在列级定义主键</span><br><span class="line">CREATE TABLE mytable(</span><br><span class="line">trueID INT NOT NULL PRIMARY KEY,</span><br><span class="line">    username VARCHAR(16) NOT NULL</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>由上可知，有两种主键定义方法。但是两者不尽相同。在列级定义主键<strong>这样是无法指定多个字段做主键的</strong>，这中情况下只能在表级定义主键</p><h3 id="索引组织表"><a href="#索引组织表" class="headerlink" title="索引组织表"></a>索引组织表</h3><p>InnoDB 引擎中，表都是根据主键顺序组织存放的。称之为<code>索引组织表</code>。<br>在没有显示地声明主键的情况下，InnoDB 按照如下方式选择或创建主键：</p><ul><li>如果存在<code>非空</code>的<code>唯一约束</code>，则将该列视为主键</li><li>如果不存在，则自动创建一个 6 字节大小的指针</li></ul><p>如果表中有多个非空的唯一索引，那么 InnoDB 选择第一个定义的非空索引。这里依据的顺序是索引定义的顺序，而不是建表时列的顺序。</p><h3 id="rowid"><a href="#rowid" class="headerlink" title="_rowid"></a>_rowid</h3><p>在主键为单个列的时候，我们可以使用_rowid 来查看主键的值。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 比如：</span><br><span class="line">SELECT *,_rowid FROM test;</span><br></pre></td></tr></table></figure><h2 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h2><p>只有 InnodB 引擎支持</p>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>约束</title>
      <link href="blog/bhcyvg/"/>
      <url>blog/bhcyvg/</url>
      
        <content type="html"><![CDATA[<h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>根据列的数目分为：</p><ul><li>列级约束<ul><li>对一个数据列建立的约束，称为列级约束</li><li>NOT NULL 和 DEFAULT 只有列级约束</li><li>其他三个有表级约束</li></ul></li><li>表级约束<ul><li>对多个数据列建立的约束，称为表级约束</li></ul></li></ul><p>列级约束可以在列定义时声明，也可以在列定义后声明。<br>表级约束只能在列定义后声明。</p><p>根据功能分为：</p><table><thead><tr><th>代码</th><th>描述</th></tr></thead><tbody><tr><td>NOT NULL</td><td>非空约束</td></tr><tr><td>PRIMARY KEY</td><td>主键约束</td></tr><tr><td>UNIQUE</td><td>唯一约束</td></tr><tr><td>DEFAULT</td><td>默认约束</td></tr><tr><td>FOREGIN KEY</td><td>外键约束</td></tr></tbody></table><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>父表和子表具有相同的存储引擎（–InnoDB–）</li><li>外键列和参照列必须具有相似的数据类型<ul><li>其中数字的长度或是否有符号必须相同</li><li>字符的长度可以不同</li></ul></li><li>外键列和参照列必须创建 _索引_，如果外键列不存在索引，MySQL 会自动帮其创建，但是不会自动帮参照列创建</li></ul><blockquote><p>父表：具有参照列的是父表，比如省份与人中的省份。<br>子表：具有外键列的是子表，比如人</p></blockquote><h3 id="外键约束的参照操作"><a href="#外键约束的参照操作" class="headerlink" title="外键约束的参照操作"></a>外键约束的参照操作</h3><ul><li>CASEADE //更新（删除）父表（中的行），子表也随之更新</li><li>SET NULL</li><li>RESTRICT</li><li>NO ACTION //标准的 SQL 关键字，功能与 MySQL 中的 RESTRICT 相同。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库操作</title>
      <link href="blog/afuf5u/"/>
      <url>blog/afuf5u/</url>
      
        <content type="html"><![CDATA[<h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> &#123;<span class="keyword">DATABASE</span>|<span class="keyword">SCHEMA</span>&#125; [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] db_name [<span class="keyword">DEFAULT</span>] CHARCTER <span class="keyword">SET</span> [=] charset_name;</span><br></pre></td></tr></table></figure><blockquote><p>注意设置字符集的时候，utf-8 要写作 utf8。</p></blockquote><h2 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h2><blockquote><p>使用指定数据库</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">DATABASE</span></span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure><h2 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> &#123;<span class="keyword">DATABASE</span>|<span class="keyword">SCHEMA</span>&#125; db_name [DEFAUTL] CHARCTER <span class="keyword">SET</span> [=] charset_name;</span><br></pre></td></tr></table></figure><h3 id="修改数据库编码格式"><a href="#修改数据库编码格式" class="headerlink" title="修改数据库编码格式"></a>修改数据库编码格式</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">NAMES</span> GBK;</span><br></pre></td></tr></table></figure><p>GBK 也可以是其他编码格式。但这只是修改你客户端显示的编码格式。服务端并不变化。<br><strong>修改配置文件来改服务端编码</strong><br>打开/etc/my.cnf 文件<br>在[mysqld]条目下：增加</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">character_set_server</span>=utf8</span><br><span class="line"><span class="attr">init_connect</span>=<span class="string">'SET NAMES utf8'</span></span><br></pre></td></tr></table></figure><p>有时在数据库创建完成后，编码格式是无法修改的。只能删掉重新建。</p><h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP &#123;DATABASE|SCHEMA&#125; [IF EXISTS] db_name;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>表基本操作</title>
      <link href="blog/zqbaxc/"/>
      <url>blog/zqbaxc/</url>
      
        <content type="html"><![CDATA[<h1 id="表基本操作"><a href="#表基本操作" class="headerlink" title="表基本操作"></a>表基本操作</h1><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> student(</span><br><span class="line">trueSno <span class="built_in">char</span>(<span class="number">9</span>),</span><br><span class="line">trueSame <span class="built_in">char</span>(<span class="number">20</span>),</span><br><span class="line">trueSsex <span class="built_in">char</span>(<span class="number">2</span>),</span><br><span class="line">trueSage <span class="built_in">smallint</span>,</span><br><span class="line">trueSdept <span class="built_in">char</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> course(</span><br><span class="line">trueCno <span class="built_in">char</span>(<span class="number">4</span>),</span><br><span class="line">trueCname <span class="built_in">char</span>(<span class="number">40</span>),</span><br><span class="line">trueCpno <span class="built_in">char</span>(<span class="number">4</span>),</span><br><span class="line">trueCcredit <span class="built_in">smallint</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> sc(</span><br><span class="line">trueSno <span class="built_in">char</span>(<span class="number">9</span>),</span><br><span class="line">trueCno <span class="built_in">char</span>(<span class="number">4</span>),</span><br><span class="line">trueGrade <span class="built_in">smallint</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="string">'200215121'</span>,<span class="string">'李勇'</span>,<span class="string">'男'</span>,<span class="number">20</span>,<span class="string">'cs'</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="string">'200215122'</span>,<span class="string">'刘晨'</span>,<span class="string">'女'</span>,<span class="number">19</span>,<span class="string">'cs'</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="string">'200215123'</span>,<span class="string">'王敏'</span>,<span class="string">'女'</span>,<span class="number">18</span>,<span class="string">'ma'</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="string">'200515124'</span>,<span class="string">'张立'</span>,<span class="string">'男'</span>,<span class="number">19</span>,<span class="string">'is'</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> course <span class="keyword">values</span> (<span class="string">'1'</span>,<span class="string">'数据库'</span>,<span class="string">'5'</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> course <span class="keyword">values</span> (<span class="string">'2'</span>,<span class="string">'数学'</span>,<span class="literal">NULL</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> course <span class="keyword">values</span>(<span class="string">'3'</span>,<span class="string">'信息系统'</span>,<span class="string">'1'</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> course <span class="keyword">values</span>(<span class="string">'4'</span>,<span class="string">'操作系统'</span>,<span class="string">'6'</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> course <span class="keyword">values</span>(<span class="string">'5'</span>,<span class="string">'数据结构'</span>,<span class="string">'7'</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> course <span class="keyword">values</span>(<span class="string">'6'</span>,<span class="string">'数据处理'</span>,<span class="literal">NULL</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> course <span class="keyword">values</span>(<span class="string">'7'</span>,<span class="string">'pascal语言'</span>,<span class="string">'6'</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> sc <span class="keyword">values</span>(<span class="string">'200215121'</span>,<span class="string">'1'</span>,<span class="number">92</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> sc <span class="keyword">values</span>(<span class="string">'200215121'</span>,<span class="string">'2'</span>,<span class="number">85</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> sc <span class="keyword">values</span>(<span class="string">'200215121'</span>,<span class="string">'3'</span>,<span class="number">88</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> sc <span class="keyword">values</span>(<span class="string">'200215122'</span>,<span class="string">'2'</span>,<span class="number">90</span>);</span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> sc <span class="keyword">values</span>(<span class="string">'200215122'</span>,<span class="string">'3'</span>,<span class="number">80</span>);</span><br></pre></td></tr></table></figure><h2 id="查看表"><a href="#查看表" class="headerlink" title="查看表"></a>查看表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLES</span> [<span class="keyword">FROM</span> db_name] [<span class="keyword">LIKE</span> <span class="string">'pattern'</span>|WHEAR expr];</span><br></pre></td></tr></table></figure><h2 id="查看列（表的组织结构）"><a href="#查看列（表的组织结构）" class="headerlink" title="查看列（表的组织结构）"></a>查看列（表的组织结构）</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">COLUMNS</span> <span class="keyword">FROM</span> tb_name;</span><br><span class="line">DESC tb_name;</span><br></pre></td></tr></table></figure><p>以上两条语句都可以。</p><h2 id="查看表的内容"><a href="#查看表的内容" class="headerlink" title="查看表的内容"></a>查看表的内容</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tb_name;</span><br></pre></td></tr></table></figure><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> [<span class="keyword">INTO</span>] tb_name [(col_name,...)] <span class="keyword">VALUES</span>(val,...);</span><br></pre></td></tr></table></figure><p>如果不指明任何字段名，那么插入的数据必须要包含所有的字段。</p><h1 id="插入记录"><a href="#插入记录" class="headerlink" title="插入记录"></a>插入记录</h1><p>共有三种 Insert 语句。</p><h2 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> [<span class="keyword">INTO</span>] tb_name [(col_name,.....)] &#123;<span class="keyword">VALUE</span>|<span class="keyword">VALUES</span>&#125; (&#123;expr|<span class="keyword">DEFAULT</span>&#125;,...) (...),...</span><br></pre></td></tr></table></figure><ul><li>values 是标准 SQL 关键字，value 是 MySQL 自己的。</li><li>插入语句可以一次性插入多条记录。</li><li>值可以是：<ul><li>函数</li><li>数学表达式</li><li>等</li></ul></li></ul><p>默认值</p><p>在创建数据表的时候可以设置 DEFAUTL。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">users</span>(</span><br><span class="line">true<span class="keyword">id</span> SAMLLINT <span class="keyword">UNSIGNED</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">trueusername SAMLLINT <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">true<span class="keyword">password</span> SAMLLINT <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">trueage <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">10</span>,</span><br><span class="line">truesex <span class="built_in">BOOLEAN</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>INSERT 的时候如果为自动编号的字段（比如上表中主键 id）赋值的话，可写作 NULL，或 DEFAULT 就会采用默认值。<br>如果字段设置了 DEFAULT（比如上表中 age），那么值直接写 DEFAULT 就行，注意此时，不能为 NULL。例如：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">users</span> <span class="keyword">VALUES</span>(<span class="literal">NULL</span>,<span class="string">'TOM'</span>,<span class="string">'123'</span>,<span class="keyword">DEFAULT</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h2 id="INSERT…SET"><a href="#INSERT…SET" class="headerlink" title="INSERT…SET"></a>INSERT…SET</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> [<span class="keyword">INTO</span>] tb_name <span class="keyword">SET</span> col_name=&#123;expr|<span class="keyword">DEFAULT</span>&#125;,...</span><br></pre></td></tr></table></figure><p>采用了<a href="%E5%AD%90%E6%9F%A5%E8%AF%A2.md">子查询</a>。例如，上表中插入：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">users</span> <span class="keyword">SET</span> username=<span class="string">'Ben'</span>,<span class="keyword">password</span>=<span class="string">'456'</span>;</span><br></pre></td></tr></table></figure><p>因为 id，和 age 都有默认值，所以可以不写。而 sex 允许为空，也可以不写。</p><h2 id="INSERT…SELECT"><a href="#INSERT…SELECT" class="headerlink" title="INSERT…SELECT*"></a>INSERT…SELECT*</h2><p>将查找的结果写入记录中。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">test</span>(username) <span class="keyword">SELECT</span> username <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> age &gt;=<span class="number">30</span>;</span><br></pre></td></tr></table></figure><h1 id="删除记录"><a href="#删除记录" class="headerlink" title="删除记录"></a>删除记录</h1><p>同样分为：</p><ul><li>单表删除</li><li>多表删除</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE FROM tb_name [WHERE where_condition];</span><br></pre></td></tr></table></figure><p>没有 where 部分则会删除全部记录。</p><h1 id="更新记录-单表更新"><a href="#更新记录-单表更新" class="headerlink" title="更新记录-单表更新"></a>更新记录-单表更新</h1><p>更新记录分为：</p><ul><li>单表更新</li><li>多表更新（要涉及连接）</li></ul><blockquote><p>单表更新</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE [LOW_PRIORITY] [IGNORE] tb_reference</span><br><span class="line">SET col_name1=&#123;expr|DEFAULT&#125; [,col_name2=&#123;expr|DEFAULT&#125;]...</span><br><span class="line">[WHERE where_condition]</span><br></pre></td></tr></table></figure><p>不写 where 会更新全部的记录。</p><h1 id="更新记录-连接（多表更新）"><a href="#更新记录-连接（多表更新）" class="headerlink" title="更新记录-连接（多表更新）"></a>更新记录-连接（多表更新）</h1><h2 id="多表更新"><a href="#多表更新" class="headerlink" title="多表更新"></a>多表更新</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE table_references</span><br><span class="line">SET col_name1=&#123;expr1|DEFAULT&#125;</span><br><span class="line">[,col_name2=&#123;expr2|DEFAULT&#125;]...</span><br><span class="line">[WHERE where_condition]</span><br></pre></td></tr></table></figure><h2 id="CREATE…SELECT"><a href="#CREATE…SELECT" class="headerlink" title="CREATE…SELECT"></a>CREATE…SELECT</h2><p>创建数据表同时将查询结果写入到数据表</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE [IF NOT EXISTS]tb_name</span><br><span class="line">[(create_definetion,...)]</span><br><span class="line">select_statement</span><br></pre></td></tr></table></figure><p>比如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE tall (</span><br><span class="line">    tall_id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    num INT</span><br><span class="line">) SELECT 身高 AS num FROM</span><br><span class="line">    av</span><br><span class="line">GROUP BY 身高;</span><br></pre></td></tr></table></figure><p>创建新表 tall，并从 av 表中选取身高字段插入到 tall 表的 num 字段。</p><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><h3 id="语法结构"><a href="#语法结构" class="headerlink" title="语法结构"></a>语法结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">table_reference</span><br><span class="line">&#123;[INNER|CROSS] JOIN|&#123;LELT|RIGHT&#125;[OUTER] JOIN&#125;</span><br><span class="line">table_reference</span><br><span class="line">ON conditional_expr</span><br></pre></td></tr></table></figure><p>ON 为条件。<br>三种连接，即：</p><ul><li>内连接</li><li>左外连接</li><li>右外连接</li></ul><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p>显示左表及右表符合连接条件的记录（交集）</p><h4 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h4><p>显示左表的全部记录及右表符合连接条件的记录</p><h4 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h4><p>类别左外连接</p><h3 id="UPDATE-JOIN-SET"><a href="#UPDATE-JOIN-SET" class="headerlink" title="UPDATE..JOIN..SET"></a>UPDATE..JOIN..SET</h3><p>比如</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE actor AS a</span><br><span class="line">        INNER JOIN</span><br><span class="line">    tall AS b ON a.tall = b.num</span><br><span class="line">SET</span><br><span class="line">    a.tall = b.tall_id;</span><br></pre></td></tr></table></figure><p>依据实际情况，选择是否使用别名。（如果两个表中进行比较的字段名相同，则需要别名）<br>该语句完成了一个替换，将 actor 表中具体的身高数值，替换为 tall 表中身高的对应 id。</p><h1 id="修改数据表"><a href="#修改数据表" class="headerlink" title="修改数据表"></a>修改数据表</h1><p>所有的数据表的修改 SQL 语句的开头都是 ALTER TABLE+表名称。</p><h2 id="给表改名"><a href="#给表改名" class="headerlink" title="给表改名"></a>给表改名</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb_name <span class="keyword">RENAME</span> &#123;<span class="keyword">TO</span>|<span class="keyword">AS</span>&#125; tb_new_name;</span><br></pre></td></tr></table></figure><p>另外有个写法是：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RENAME</span> <span class="keyword">TABLE</span> tb_name <span class="keyword">TO</span> tb_new_name;</span><br></pre></td></tr></table></figure><p>这句可以批量修改多个表的名称。</p><blockquote><p>尽量不要随意修改表的名称。对视图有影响。</p></blockquote><h2 id="添加-删除列"><a href="#添加-删除列" class="headerlink" title="添加/删除列"></a>添加/删除列</h2><h3 id="插入列"><a href="#插入列" class="headerlink" title="插入列"></a>插入列</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb_name <span class="keyword">ADD</span> [<span class="keyword">COLUMN</span>] col_name column_definition [<span class="keyword">FIRST</span>|<span class="keyword">AFTER</span> col_name];</span><br></pre></td></tr></table></figure><p>默认会插入到表的最下面，指定 FIRST，则置于最上面，或者用<code>AFTER col_name</code> 指定为<code>col_name</code>的下面。</p><h3 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb_name <span class="keyword">DROP</span> col_name,DROP.....;</span><br></pre></td></tr></table></figure><p>可以一次性删除多个列。</p><h2 id="修改列"><a href="#修改列" class="headerlink" title="修改列"></a>修改列</h2><h3 id="修改列定义"><a href="#修改列定义" class="headerlink" title="修改列定义"></a>修改列定义</h3><p>即修改列的属性。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb_name <span class="keyword">MODIFY</span> col_name column_definition [<span class="keyword">FIRST</span>|<span class="keyword">AFTER</span> col_name];</span><br></pre></td></tr></table></figure><p>比如：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">test</span> <span class="keyword">ADD</span> <span class="keyword">id</span> <span class="built_in">SMALLINT</span> <span class="keyword">unsigned</span> <span class="keyword">KEY</span> auto_increment <span class="keyword">first</span>;</span><br></pre></td></tr></table></figure><p>key 可以表示主键，无需 primary。fitrst 表示插入的位置。</p><blockquote><p>如果要修改的列已经是<code>主键</code>了，则修改列定义的时候再加上<code>主键</code>字段会报错。</p></blockquote><h3 id="修改列名"><a href="#修改列名" class="headerlink" title="修改列名"></a>修改列名</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb_name <span class="keyword">CHANGE</span> col_name col_new_name column_definition [<span class="keyword">FIRST</span>|<span class="keyword">AFTER</span> col_name];</span><br></pre></td></tr></table></figure><p>修改列名时，新列名后面要指明数据类型。</p><h3 id="修改列顺序"><a href="#修改列顺序" class="headerlink" title="修改列顺序"></a>修改列顺序</h3><p>其实同上，具体比如：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> <span class="keyword">CHANGE</span> <span class="string">`join_time`</span> <span class="string">`join_time`</span> <span class="built_in">DATE</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">AFTER</span> <span class="string">`role`</span>;</span><br></pre></td></tr></table></figure><p>把 join_time 列放到 role 列后面。</p><h2 id="修改约束"><a href="#修改约束" class="headerlink" title="修改约束"></a>修改约束</h2><h3 id="PRIMARY-KEY"><a href="#PRIMARY-KEY" class="headerlink" title="PRIMARY KEY"></a>PRIMARY KEY</h3><p>添加主键约束</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb_name <span class="keyword">ADD</span> [CONSTRAIN[symbol]] PRIMARY <span class="keyword">KEY</span> [index.type] (index_col_name,.....);</span><br></pre></td></tr></table></figure><p>删除主键约束</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb_name <span class="keyword">DROP</span> [index.type] PRIMARY <span class="keyword">KEY</span>;</span><br></pre></td></tr></table></figure><p>不需要指定列名，因为每个表只有一个主键。<br>注意！只有一个主键并不意味着主键只有一列。</p><h3 id="UNIQUE"><a href="#UNIQUE" class="headerlink" title="UNIQUE"></a>UNIQUE</h3><p>添加唯一约束</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb_name <span class="keyword">ADD</span> [index.type] <span class="keyword">unique</span>(col_name);</span><br></pre></td></tr></table></figure><p>删除唯一约束</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb_name <span class="keyword">DROP</span> [index.type] <span class="keyword">unique</span>(col_name);</span><br></pre></td></tr></table></figure><h3 id="DEFAULT"><a href="#DEFAULT" class="headerlink" title="DEFAULT"></a>DEFAULT</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb_name <span class="keyword">ALTER</span> [<span class="keyword">COLUMN</span>] col_name &#123;<span class="keyword">SET</span> <span class="keyword">DEFAULT</span> literal|<span class="keyword">DROP</span> <span class="keyword">DEFAULT</span>&#125;;</span><br><span class="line">for example:</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">users</span> <span class="keyword">ALTER</span> age <span class="keyword">SET</span> <span class="keyword">DEFAULT</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure><h3 id="FOREIGN-KEY"><a href="#FOREIGN-KEY" class="headerlink" title="FOREIGN KEY"></a>FOREIGN KEY</h3><p>添加外键约束</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb_name <span class="keyword">ADD</span> [CONSTRAIN[symbol]] <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> [index_name](index_col_name,...)reference_definition;</span><br><span class="line">for example:</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">users</span> <span class="keyword">add</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (pid) <span class="keyword">REFERENCE</span> provinces (<span class="keyword">id</span>);</span><br></pre></td></tr></table></figure><p>删除外键约束</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb_name <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> fk_symbol;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>表查询操作</title>
      <link href="blog/igxqxi/"/>
      <url>blog/igxqxi/</url>
      
        <content type="html"><![CDATA[<h2 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h2><blockquote><p>查询就是 SELECT 语句</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  [ <span class="keyword">ALL</span> | <span class="keyword">DISTINCT</span> ]</span><br><span class="line">truetrue[ TOP expression [ <span class="keyword">PERCENT</span> ] [ <span class="keyword">WITH</span> <span class="keyword">TIES</span> ] ]</span><br><span class="line">true&lt;列名&gt; <span class="comment">/*指定要选择的列及其限定*/</span></span><br><span class="line">true[ <span class="keyword">INTO</span> &lt;表名&gt; ] <span class="comment">/*INTO子句，指定结果存入新表*/</span></span><br><span class="line">true[ <span class="keyword">FROM</span> &lt;查询对象&gt; ]<span class="comment">/*FROM子句，指定表或视图*/</span></span><br><span class="line">true[ <span class="keyword">WHERE</span> &lt;条件&gt; ] <span class="comment">/*WHERE子句，指定查询条件*/</span></span><br><span class="line">true[ <span class="keyword">GROUP</span> <span class="keyword">BY</span> &lt;分组表达式&gt;] <span class="comment">/*GROUP BY子句，指定分组表达式*/</span></span><br><span class="line">true[ <span class="keyword">HAVING</span> &lt;分组统计条件&gt;] <span class="comment">/*HAVING子句，指定分组统计条件*/</span></span><br><span class="line">true[ <span class="keyword">ORDER</span> <span class="keyword">BY</span> &lt;排序表达式&gt; [ <span class="keyword">ASC</span> | <span class="keyword">DESC</span> ] ] <span class="comment">/*ORDER子句，指定排序表达式和顺序*/</span></span><br></pre></td></tr></table></figure><blockquote><p>说明：<br>所有被使用的子句必须按语法说明中显示的顺序严格地排序。例如，一个 HAVING 子句必须位于 GROUP BY 子句之后，并位于 ORDER BY 子句之前。</p></blockquote><blockquote><p>SELECT 语句返回一个表的结果集，通常该结果集被称为表值表达式。</p></blockquote><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;列名&gt; ::=</span><br><span class="line">&#123;</span><br><span class="line">    * /*选择当前表或视图的所有列*/</span><br><span class="line">      | &lt;表名或视图名&gt;.* /*选择指定的表或视图的所有列*/</span><br><span class="line">      | &lt;列名1&gt;[, &lt;列名2&gt;….] /*选择指定的列*/</span><br><span class="line">true| &lt;列名或表达式&gt;</span><br><span class="line">true[ [ AS ] &lt;列别名&gt; ]/*AS子句，定义列别名*/</span><br><span class="line">      | &lt;列标题&gt;= &lt;列名&gt;/*选择指定列并更改列标题*/</span><br><span class="line">&#125; [ ,...n ]</span><br></pre></td></tr></table></figure><h3 id="数学计算"><a href="#数学计算" class="headerlink" title="数学计算"></a>数学计算</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">SELECT <span class="number">3</span>*<span class="number">9</span></span><br></pre></td></tr></table></figure><h3 id="别名-as"><a href="#别名-as" class="headerlink" title="别名 as"></a>别名 as</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">AS</span> userId，username <span class="keyword">AS</span> uname</span><br><span class="line">true<span class="keyword">FROM</span> <span class="keyword">users</span>;</span><br></pre></td></tr></table></figure><p>查询出来的列名，就变成了别名。AS 其实可以省略，但可能会出现问题。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> username  <span class="keyword">FROM</span> <span class="keyword">users</span>;</span><br></pre></td></tr></table></figure><p>这样会将 username 视作 id 的别名。</p><h3 id="正则匹配-like"><a href="#正则匹配-like" class="headerlink" title="正则匹配 like"></a>正则匹配 like</h3><p>SELECT 书名 AS BookName, 作译者 AS Author, 出版社 AS Press<br>FROM TBook<br>WHERE 书名 LIKE ‘%SQL Server%’</p><h3 id="多条件匹配-and、or"><a href="#多条件匹配-and、or" class="headerlink" title="多条件匹配 and、or"></a>多条件匹配 and、or</h3><p>where 作译者=’谭浩强’ or 出版社=’电子工业出版社’</p><blockquote><p>键可以不用引号，但是值要引号<br>列名又空格也需要加引号</p></blockquote><h3 id="次序-top、不在其中-not-in、子查询"><a href="#次序-top、不在其中-not-in、子查询" class="headerlink" title="次序 top、不在其中 not in、子查询"></a>次序 top、不在其中 not in、子查询</h3><p>select top 5 *<br>from TBook<br>where 价格 not in (<br> select top 4 价格<br> from TBook)</p><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><ul><li>有公共的列，在前面表名以示区分</li><li>指明两个表的公共<strong>相等</strong>的列</li></ul><p>select TLend.ISBN, TLend.借书时间, TLend.借书证号, TLend.图书 ID, TLend.应还时间,TReader.姓名<br>from TReader,TLend, TBook<br>where TReader.借书证号 = TLend.借书证号<br>and TBook.ISBN = TLend.ISBN<br>and TLend.借书证号 = ‘081101’<br>and TBook.书名 = ‘SQL Server 实用教程（第 3 版）’</p><h3 id="多表连接-join-on"><a href="#多表连接-join-on" class="headerlink" title="多表连接 join on"></a>多表连接 join on</h3><p>select 姓名<br>from TReader join HLend<br>on TReader.借书证号 = HLend.借书证号<br>where (还书时间 - 借书时间)&gt;5</p><h3 id="聚合函数-count"><a href="#聚合函数-count" class="headerlink" title="聚合函数 count"></a>聚合函数 count</h3><p>select count(*) 读者总数<br>from TReader</p><h3 id="分组-group-by"><a href="#分组-group-by" class="headerlink" title="分组 group by"></a>分组 group by</h3><p>select 专业, count(*) 不同专业人数<br>from TReader<br>group by 专业</p><h4 id="having-语句进行筛选"><a href="#having-语句进行筛选" class="headerlink" title="having 语句进行筛选"></a>having 语句进行筛选</h4><p>SELECT 借书证号<br>FROM TLend<br>WHERE 借书时间&lt;’2009-09-23’<br>GROUP BY 借书证号<br> HAVING COUNT(借书证号)&gt;=2</p><h4 id="排序升序-asc、降序-desc"><a href="#排序升序-asc、降序-desc" class="headerlink" title="排序升序 asc、降序 desc"></a>排序升序 asc、降序 desc</h4><p>SELECT *<br>FROM TReader<br>WHERE 专业=’计算机’<br>ORDER BY 出生时间 desc</p><h3 id="分组-GROUP-BY"><a href="#分组-GROUP-BY" class="headerlink" title="分组 GROUP BY"></a>分组 GROUP BY</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[GROUP BY &#123;col_name|position&#125; [ASC|DESC],...]</span><br></pre></td></tr></table></figure><p>ASC 和 DESC 分别是升序（缺省）和降序。<br>看一个脚本：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span>;</span><br><span class="line"><span class="keyword">SELECT</span> sex <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex;</span><br></pre></td></tr></table></figure><p>两条语句的执行结果分别为：</p><p>也可以使用编号代替字段名，但是这样不鼓励。比如上面的分组语句可以写成：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sex <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>后面的数字 1，值得是在 SELECT 选取的字段中的顺序。这里只选了一个字段，当然为 1。</p><h4 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h4><p>与 GROUP BY 分组联用。只对部分记录做分组操作。有两种用法，比如：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sex,age <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex <span class="keyword">HAVING</span> age &gt; <span class="number">35</span>;</span><br><span class="line"><span class="keyword">SELECT</span> sex <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex <span class="keyword">HAVING</span> <span class="keyword">count</span>(<span class="keyword">id</span>) &gt;=<span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li>第一种，注意后面的 HAVING 的字段必须在前面 SELECT 部分出现才行。</li><li>第二种，在 HAVING 后面使用<em>聚合函数</em>，前面无需出现相应字段。</li></ul><p>!!!Having 放在 group by 后面</p><h3 id="排序-ORDER-BY"><a href="#排序-ORDER-BY" class="headerlink" title="排序 ORDER BY"></a>排序 ORDER BY</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[ORDER BY &#123;col_name|expr|position&#125; [ASC|DESC],...]</span><br></pre></td></tr></table></figure><p>比如：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span> <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>可以排序多个字段，如果第一个字段能排出结果，就不会用到第 2 个字段。比如：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span> ,<span class="keyword">id</span> <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>因为年龄 age 有相同的，继续排序就要用到 id 的降序。</p><h3 id="限制返回记录的数量-LIMIT"><a href="#限制返回记录的数量-LIMIT" class="headerlink" title="限制返回记录的数量 LIMIT"></a>限制返回记录的数量 LIMIT</h3><p>LIMIT 有两种语法结构，第一种比较常见。</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[LIMIT &#123;[offset,] row_count|row_count OFFSET offset&#125;]</span><br></pre></td></tr></table></figure><p>起始位置，偏移量</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> ;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">LIMIT</span> <span class="number">3</span>,<span class="number">2</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">LIMIT</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>3，2：表示从第 3 条开始返回，返回两条记录。注意记录从 0 开始编号，即结果集中的从第 0 条开始。<br>如果 LIMIT 后面只有一个参数，认作是偏移量，起始位置缺省为 0。</p><h3 id="合并查询结果-UNION"><a href="#合并查询结果-UNION" class="headerlink" title="合并查询结果 UNION"></a>合并查询结果 UNION</h3><p>在多条查询语句之间，使用<code>UNION</code>关键字会何必所有查询结果。<br>默认会去掉重复行，如果不想去掉重复行，请使用<code>UNION ALL</code><br>需要注意的是，要联合的查询结果必须有相同的列数（列名可以不同）</p><blockquote><p>去重效率比不去重效率低</p></blockquote><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>子查询（Subquery）是指嵌套在查询内部，且必须始终出现在圆括号内。</p><blockquote><p>外面的查询并非只是指的查找。</p></blockquote><h3 id="可以包含的关键字或条件"><a href="#可以包含的关键字或条件" class="headerlink" title="可以包含的关键字或条件"></a>可以包含的关键字或条件</h3><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">DISTINCT、<span class="keyword">GROUP</span> <span class="title">BY</span>、<span class="keyword">ORDER</span> <span class="title">BY</span>、LIMIT、函数等</span><br></pre></td></tr></table></figure><p>##外层的查询可以是</p><ul><li>SELECT</li><li>INSERT</li><li>UPDATE</li><li>SET</li><li>DO</li></ul><h3 id="子查询分为三类"><a href="#子查询分为三类" class="headerlink" title="子查询分为三类"></a>子查询分为三类</h3><h3 id="使用比较运算符的子查询"><a href="#使用比较运算符的子查询" class="headerlink" title="使用比较运算符的子查询"></a>使用比较运算符的子查询</h3><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">=,&gt;,&lt;,&gt;=,&lt;=,&lt;&gt;,!=,&lt;=&gt;</span><br></pre></td></tr></table></figure><h4 id="语法结构"><a href="#语法结构" class="headerlink" title="语法结构"></a>语法结构</h4><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">operand comparison_operator &#123;ANY|<span class="keyword">SOME</span>|<span class="keyword">ALL</span>&#125; (subquery)</span><br></pre></td></tr></table></figure><p>比如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM av WHERE 身高&gt;=(SELECT AVG(身高) FROM av);</span><br></pre></td></tr></table></figure><p>字段名不加引号</p><h4 id="修饰比较运算符"><a href="#修饰比较运算符" class="headerlink" title="修饰比较运算符"></a>修饰比较运算符</h4><p>使用 ANY、SOME、ALL，ANY 和 SOME 是等价的。</p><table><thead><tr><th></th><th>ANY</th><th>ALL</th></tr></thead><tbody><tr><td>&gt;,&gt;=</td><td>最小值</td><td>最大值</td></tr><tr><td>&lt;,&lt;=</td><td>最大值</td><td>最小值</td></tr><tr><td>=,&lt;=&gt;</td><td>任意值</td><td></td></tr><tr><td>&lt;&gt;,!=</td><td></td><td>任意值</td></tr></tbody></table><p>比如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM av WHERE 胸围&gt;=ALL(SELECT 胸围 FROM av WHERE  身高&lt;160);</span><br></pre></td></tr></table></figure><h3 id="使用-NOT-IN-的子查询"><a href="#使用-NOT-IN-的子查询" class="headerlink" title="使用[NOT]IN 的子查询"></a>使用[NOT]IN 的子查询</h3><h4 id="语法结构-1"><a href="#语法结构-1" class="headerlink" title="语法结构"></a>语法结构</h4><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">operand</span> <span class="selector-tag">comparison_operator</span> <span class="selector-attr">[NOT]</span> <span class="selector-tag">IN</span> (subquery)</span><br></pre></td></tr></table></figure><p>=ANY 和 IN 等效<br>!=ALL 和 NOT IN 等效</p><h3 id="使用-NOT-EXISTS-的子查询"><a href="#使用-NOT-EXISTS-的子查询" class="headerlink" title="使用[NOT]EXISTS 的子查询"></a>使用[NOT]EXISTS 的子查询</h3><p>如果子查询返回任何行，EXISTS 将返回 TRUE，否则返回 FALSE。<br>该类子查询使用较少</p>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DB_Student数据库记录</title>
      <link href="blog/wot7wd/"/>
      <url>blog/wot7wd/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Student-表"><a href="#一、Student-表" class="headerlink" title="一、Student 表"></a>一、Student 表</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1600849205116-d4263820-8bbb-4d01-b97b-a0363f4498e7.png#align=left&amp;display=inline&amp;height=216&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=432&amp;originWidth=722&amp;size=41200&amp;status=done&amp;style=shadow&amp;width=361" alt="image.png"></p><h2 id="二、Course-表"><a href="#二、Course-表" class="headerlink" title="二、Course 表"></a>二、Course 表</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1600849217512-41be815b-8bc4-4b6a-82c2-cbb4d335c9b9.png#align=left&amp;display=inline&amp;height=256&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=511&amp;originWidth=632&amp;size=38392&amp;status=done&amp;style=shadow&amp;width=316" alt="image.png"></p><h2 id="三、SC-表"><a href="#三、SC-表" class="headerlink" title="三、SC 表"></a>三、SC 表</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1600849229639-8d5cd91f-d87e-49e9-a1cd-9c563b64723f.png#align=left&amp;display=inline&amp;height=262&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=523&amp;originWidth=492&amp;size=32976&amp;status=done&amp;style=shadow&amp;width=246" alt="image.png"></p><h2 id="四、初始化-SQL-语句"><a href="#四、初始化-SQL-语句" class="headerlink" title="四、初始化 SQL 语句"></a>四、初始化 SQL 语句</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">NAMES</span> utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*学生表*/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student</span><br><span class="line">(</span><br><span class="line">    Sno  <span class="built_in">INT</span>(<span class="number">9</span>) PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    Sname <span class="built_in">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">    Ssex  <span class="built_in">CHAR</span>(<span class="number">2</span>),</span><br><span class="line">    Sage  <span class="built_in">TINYINT</span>(<span class="number">3</span>),</span><br><span class="line">    Sdept <span class="built_in">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Student</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">201215121</span>, <span class="string">'李勇'</span>, <span class="string">'男'</span>, <span class="number">20</span>, <span class="string">'CS'</span>),</span><br><span class="line">     (<span class="number">201215122</span>, <span class="string">'刘晨'</span>, <span class="string">'女'</span>, <span class="number">19</span>, <span class="string">'CS'</span>),</span><br><span class="line">    (<span class="number">201215123</span>, <span class="string">'王敏'</span>, <span class="string">'女'</span>, <span class="number">18</span>, <span class="string">'MA'</span>),</span><br><span class="line">    (<span class="number">201215125</span>, <span class="string">'张立'</span>, <span class="string">'男'</span>, <span class="number">19</span>, <span class="string">'IS'</span>),</span><br><span class="line">    (<span class="number">201215133</span>, <span class="string">'张三'</span>, <span class="string">'男'</span>, <span class="number">21</span>, <span class="string">'TE'</span>),</span><br><span class="line">     (<span class="number">201215137</span>, <span class="string">'赵四'</span>, <span class="string">'男'</span>, <span class="number">23</span>, <span class="string">'TE'</span>),</span><br><span class="line">     (<span class="number">201215139</span>, <span class="string">'田二'</span>, <span class="string">'女'</span>, <span class="number">24</span>, <span class="string">'CS'</span>),</span><br><span class="line">     (<span class="number">201215140</span>, <span class="string">'李四'</span>, <span class="string">'男'</span>, <span class="number">21</span>, <span class="string">'CS'</span>),</span><br><span class="line">     (<span class="number">201215141</span>, <span class="string">'郑五'</span>, <span class="string">'女'</span>, <span class="number">22</span>, <span class="string">'IS'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*课程表*/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Course</span><br><span class="line">(</span><br><span class="line">    Cno  <span class="built_in">INT</span>(<span class="number">4</span>) PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    Cname <span class="built_in">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">    Cpno  <span class="built_in">INT</span>(<span class="number">4</span>),</span><br><span class="line">    Ccredit <span class="built_in">TINYINT</span>(<span class="number">3</span>),</span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (Cpno) <span class="keyword">REFERENCES</span> Course (Cno)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Course</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">'数据库'</span>, <span class="number">5</span>, <span class="number">4</span>),</span><br><span class="line">    (<span class="number">2</span>, <span class="string">'数学'</span>, <span class="literal">NULL</span>, <span class="number">2</span>),</span><br><span class="line">    (<span class="number">3</span>, <span class="string">'信息系统'</span>, <span class="number">1</span>, <span class="number">4</span>),</span><br><span class="line">     (<span class="number">4</span>, <span class="string">'操作系统'</span>, <span class="number">6</span>, <span class="number">3</span>),</span><br><span class="line">     (<span class="number">5</span>, <span class="string">'数据结构'</span>, <span class="number">7</span>, <span class="number">4</span>),</span><br><span class="line">     (<span class="number">6</span>, <span class="string">'数据处理'</span>, <span class="literal">NULL</span>, <span class="number">2</span>),</span><br><span class="line">     (<span class="number">7</span>, <span class="string">'PASCAL语言'</span>, <span class="number">6</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*选课表*/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SC</span><br><span class="line">(</span><br><span class="line">    Sno  <span class="built_in">INT</span>(<span class="number">9</span>),</span><br><span class="line">    Cno  <span class="built_in">INT</span>(<span class="number">4</span>),</span><br><span class="line">    Grade <span class="built_in">SMALLINT</span>(<span class="number">3</span>),</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (Sno, Cno),</span><br><span class="line"><span class="comment">/* 主码由两个属性构成，必须作为表级完整性进行定义*/</span></span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (Sno) <span class="keyword">REFERENCES</span> Student (Sno),</span><br><span class="line"><span class="comment">/* 表级完整性约束条件，Sno是外码，被参照表是Student */</span></span><br><span class="line">    <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (Cno) <span class="keyword">REFERENCES</span> Course (Cno)</span><br><span class="line"><span class="comment">/* 表级完整性约束条件， Cno是外码，被参照表是Course*/</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">201215121</span>, <span class="number">1</span>, <span class="number">92</span>),</span><br><span class="line">truetruetrue(<span class="number">201215121</span>, <span class="number">2</span>, <span class="number">85</span>),</span><br><span class="line">truetruetrue(<span class="number">201215121</span>, <span class="number">3</span>, <span class="number">88</span>),</span><br><span class="line">truetruetrue(<span class="number">201215122</span>, <span class="number">2</span>, <span class="number">90</span>),</span><br><span class="line">      (<span class="number">201215122</span>, <span class="number">3</span>, <span class="number">80</span>),</span><br><span class="line">truetruetrue(<span class="number">201215122</span>, <span class="number">6</span>, <span class="number">59</span>),</span><br><span class="line">     (<span class="number">201215123</span>, <span class="number">1</span>, <span class="number">84</span>),</span><br><span class="line">     (<span class="number">201215125</span>, <span class="number">1</span>, <span class="number">60</span>),</span><br><span class="line">     (<span class="number">201215125</span>, <span class="number">3</span>, <span class="number">90</span>),</span><br><span class="line">     (<span class="number">201215133</span>, <span class="number">4</span>, <span class="number">87</span>),</span><br><span class="line">     (<span class="number">201215137</span>, <span class="number">2</span>, <span class="number">79</span>),</span><br><span class="line">     (<span class="number">201215139</span>, <span class="number">2</span>, <span class="number">80</span>),</span><br><span class="line">     (<span class="number">201215140</span>, <span class="number">2</span>, <span class="number">81</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo</title>
      <link href="blog/styt9s/"/>
      <url>blog/styt9s/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JAVA-抽象类和接口</title>
      <link href="blog/akog9h/"/>
      <url>blog/akog9h/</url>
      
        <content type="html"><![CDATA[<h2 id="概念名词"><a href="#概念名词" class="headerlink" title="概念名词"></a>概念名词</h2><ul><li><strong>接口</strong>：许多类的<strong>共同行为</strong>（包含非相关类），就当与给客户看的。</li><li><strong>抽象类</strong>：就相当于一个父类，该父类包含其子类的<strong>共性</strong>特征，就像是子类园和子类长方形，两个类可以有一个共同的父类，该父类定义为抽象类，其包含一个<strong>抽象方法</strong>，比如求面积或是求周长</li></ul><h2 id="接口的一些要点"><a href="#接口的一些要点" class="headerlink" title="接口的一些要点"></a>接口的一些要点</h2><blockquote><p><code>public interface List&lt;E&gt; { }</code></p></blockquote><ul><li>接口是一个<strong>写注释</strong>的好地方</li></ul><h2 id="抽象类的一些要点"><a href="#抽象类的一些要点" class="headerlink" title="抽象类的一些要点"></a>抽象类的一些要点</h2><blockquote><p><code>public abstract class AbstractList&lt;E&gt; implements List&lt;E&gt; { }</code> &gt; <code>public abstract class Test(){}</code> &gt; <code>public abstract double getTest(){}</code></p></blockquote><ul><li>抽象类当中的<strong>抽象方法</strong>要在其子类当中实现，因为抽象类“抽象”的以至于没有实例</li><li>包含抽象方法的类必定是抽象类</li><li><strong>抽象类的构造函数实现要加上 protected，因为其构造函数只被其子类所使用，在创建子类实例的时候，其父类构造函数被调用来初始化该父类的数据域</strong></li><li><strong>抽象类不可以 new 对象，不对外公开，只抽取公共代码，eg：ArrayList 和 LinkedList</strong></li><li><strong>抽象类可以不是先接口里面的部分函数</strong></li><li><strong>抽象类作用：放“公共代码”</strong></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598686636557-2700f743-9f28-435a-b771-86bdf7b2b25c.png#align=left&amp;display=inline&amp;height=326&amp;margin=%5Bobject%20Object%5D&amp;originHeight=574&amp;originWidth=732&amp;size=0&amp;status=done&amp;style=shadow&amp;width=416" alt></p>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JAVA-继承和多态</title>
      <link href="blog/bn6afv/"/>
      <url>blog/bn6afv/</url>
      
        <content type="html"><![CDATA[<h2 id="extends-和-super"><a href="#extends-和-super" class="headerlink" title="extends 和 super"></a>extends 和 super</h2><ul><li><strong>子类继承父类用关键字 <code>extends</code> </strong></li><li>super 关键字作用有<ul><li>继承父类的构造函数</li><li>构造方法链</li><li>调用父类的方法（一般不怎么用）</li></ul></li></ul><h2 id="方法重写和方法重载"><a href="#方法重写和方法重载" class="headerlink" title="方法重写和方法重载"></a>方法重写和方法重载</h2><blockquote><p>方法重写注意要子类和父类的方法都得是一样的签名和返回类型</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1600089343780-c8d0a28c-dc06-4aab-a331-9ac926a65498.png#align=left&amp;display=inline&amp;height=289&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=577&amp;originWidth=764&amp;size=325094&amp;status=done&amp;style=shadow&amp;width=382" alt="image.png"></p><p>为了避免编写程序过程中方法重载和方法重写的误用，使用<strong>重写标注 <code>@Override</code></strong> 来区分，系统可以检查方法的正确性。</p><h2 id="Object-类"><a href="#Object-类" class="headerlink" title="Object 类"></a>Object 类</h2><blockquote><p>java 中所有类都继承子 java.lang.Object 类，其中 toString 就是该类里面的方法之一，所有许多接口/类都会重写这个方法，手写的链表里面的该方法就是重写之后的方法</p></blockquote><h2 id="多态与动态绑定"><a href="#多态与动态绑定" class="headerlink" title="多态与动态绑定"></a>多态与动态绑定</h2><blockquote><p>多态</p></blockquote><p>使用夫类对象的地方都可以使用子类对象。也就意味着父类的变量可以引用子类型的对象</p><blockquote><p>动态绑定</p></blockquote><p>如果定义了一个父类的对象，该对象调用了一个方法，该方法不存在父类当中，但是存在其父类下面的多个子类当中，那么这个方法调用的是哪个子类当中的该方法呢？JVM 有这么一个机制，从“辈分最小的类”依次往上找，第一个找到含有该方法的类，则调用该类当中的那个方法<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1600138148812-5cc991ce-0577-4f01-b57c-bec631518a99.png#align=left&amp;display=inline&amp;height=109&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=217&amp;originWidth=960&amp;size=14420&amp;status=done&amp;style=shadow&amp;width=483" alt="image.png"><br>注：Cn 为父类，往后都是以此继承的子类</p><h2 id="对象转换"><a href="#对象转换" class="headerlink" title="对象转换"></a>对象转换</h2><blockquote><p>向下转换与向上转换</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object o = <span class="keyword">new</span> Student(); <span class="comment">// 可以：因为Student的实例也是Object的实例</span></span><br><span class="line"></span><br><span class="line">Student a = o; <span class="comment">// (o是Object对象)不可以：因为“级别”的不可逆</span></span><br><span class="line"></span><br><span class="line">Student s = Student(o); <span class="comment">//向上转换</span></span><br></pre></td></tr></table></figure><blockquote><p>instanceof</p></blockquote><p>如果一个对象不是 Student 实例，他就不能转换成 Student 类型的变量，会报错 <code>ClassCastException</code> 。因此，在此之前最好先确保该对象是另一个对象的实例，于是用到关键字 <code>instanceof</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object myObject = <span class="keyword">new</span> Circle();</span><br><span class="line">... <span class="comment">// Some lines of code</span></span><br><span class="line"><span class="comment">/** Perform casting if myObject is an instance of Circle */</span></span><br><span class="line"><span class="keyword">if</span> (myObject <span class="keyword">instanceof</span> Circle) &#123;</span><br><span class="line">  System.out.println(<span class="string">"The circle diameter is "</span> +</span><br><span class="line">    ((Circle)myObject).getDiameter());</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="override"><a href="#override" class="headerlink" title="@override"></a>@override</h2><p>在重写父类的函数时，在方法前面加上<a href="https://www.yuque.com/Override" target="_blank" rel="noopener">@Override </a> 系统可以帮你检查方法的正确性。</p>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>task_04_物理层</title>
      <link href="blog/zugllf/"/>
      <url>blog/zugllf/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机网络自主学习任务学习单"><a href="#计算机网络自主学习任务学习单" class="headerlink" title="计算机网络自主学习任务学习单"></a>计算机网络自主学习任务学习单</h2><p>2020 年 9 月 16 日，2020 年 9 月 21 日</p><table><thead><tr><th>课程介绍</th><th>第二章、    物理层</th></tr></thead><tbody><tr><td>教学目标</td><td>1、了解数据通信的基础知识</td></tr></tbody></table><p>2、了解网络传输介质<br>3、理解信道复用技术。<br>4、理解数字传输系统<br>5、了解物理层连接设备<br>6、了解宽带接入技术 |<br>| 学习内容 |<br>1、课下自主网上搜索观看中国大学 MOOC 教程《玩转计算机网络-计算机网络原理》<br>（<a href="https://www.icourse163.org/course/QDU-1206901804" target="_blank" rel="noopener">https://www.icourse163.org/course/QDU-1206901804</a>）<br>02 物理层<br>2.1 数据通信的基础知识<br>2.2 信道的极限容量<br>2.3 有线传输介质<br>2.4 信道复用技术<br>2.4.1 信道复用技术：FDM 和 TDM<br>2.4.2 信道复用技术：CDMA<br>2.5 数字传输系统<br>2.6 物理层设备<br>2、学习重点：<br>  （1）不同信道复用技术的特点<br>（2）数字传输系统标准<br>  |<br>| 课堂讨论 | 1、你身边的网络终端设备使用的什么调制技术？。 |<br>| 课下作业 | T568B 是制作直通双绞线的标准线序，请描述一下该如何制作一根直通的双绞线。<br>大家可以参考这个视频（<a href="https://v.qq.com/x/page/u0383gxewwq.html" target="_blank" rel="noopener">https://v.qq.com/x/page/u0383gxewwq.html</a>）<br>作业提交 PPT（时间 9 月 21 日之前），若有条件可以提交制作视频。 |</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>0-1背包问题</title>
      <link href="blog/kb5sse/"/>
      <url>blog/kb5sse/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>给定一组已知重量和价值的物品和一个容量已知的背包，求解在不超过背包容量情况下，选用那些物品放入背包，使得所选用的所有物品价值最大化。</p><table><thead><tr><th>物品总数 N</th><th>4</th></tr></thead><tbody><tr><td>背包容量 M</td><td>8</td></tr><tr><td>每个物品重量 wi</td><td>{5, 4, 3, 2}</td></tr><tr><td>每个物品价值 vi</td><td>{15, 10, 6, 2}</td></tr></tbody></table><h3 id="问题的判定性说法"><a href="#问题的判定性说法" class="headerlink" title="问题的判定性说法"></a>问题的判定性说法</h3><h3 id><a href="#" class="headerlink" title></a><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1600597489691-e0d838af-003e-404e-8a40-5145d2fefbad.png#align=left&amp;display=inline&amp;height=108&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=216&amp;originWidth=969&amp;size=73465&amp;status=done&amp;style=shadow&amp;width=484.5" alt="image.png"></h3><h3 id="问题的形式化定义"><a href="#问题的形式化定义" class="headerlink" title="问题的形式化定义"></a>问题的形式化定义</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1600597354257-45eba2b3-641c-433a-8732-9b6c11a16061.png#align=left&amp;display=inline&amp;height=281&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=561&amp;originWidth=1065&amp;size=184609&amp;status=done&amp;style=shadow&amp;width=532.5" alt="image.png"></p><h2 id="问题思路"><a href="#问题思路" class="headerlink" title="问题思路"></a>问题思路</h2><h3 id="动态规划思路"><a href="#动态规划思路" class="headerlink" title="动态规划思路"></a>动态规划思路</h3><p><strong>动态规划</strong>解决该问题，类似于<strong>莱文斯坦距离</strong>的解法类似。利用 CAAIS 数据来说明这个问题的解决思想。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603943092299-49a0bc97-f2cf-4258-8dde-022b4aae06d1.png#align=left&amp;display=inline&amp;height=154&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=307&amp;originWidth=842&amp;size=44700&amp;status=done&amp;style=shadow&amp;width=421" alt="image.png"><br><strong>动态规划 DP 方程构造</strong><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603943375703-889cea96-f3a0-41df-b806-386dca8bcc82.png#align=left&amp;display=inline&amp;height=112&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=223&amp;originWidth=1020&amp;size=23862&amp;status=done&amp;style=shadow&amp;width=510" alt="image.png"><br><strong>PS：V[i,j]表示在前 i 件物品中选择若干件放在承重为 j 的背包中，可以取得的最大价值</strong></p><p>（整张表格是从上往下，从左往右地填）<br>举例说明表格中的数值填法，<strong>倒数第二行倒数第四列的 16 4</strong>的填法：</p><ul><li>首先不满足 DP 方程的第一种和第二种情况</li><li>所以代入取最大值 max 函数<ul><li>V（i-1，j）：不选本物品（3，6），还是用之前的值，继承上面的第一个物品和第二个物品，DP 值为 15 U</li><li>V（i-1，j）+vi：用该容量（7）-所选物品的重量为 4，然后再查容量为 4 的时候 DP 值为 10，然后求出该情况 DP 是，10 加上该物品的价值，所以该情况下的 DP 值为 16，右上标为 4（CAAIS），值来源于前面容量为 4 的情况。</li></ul></li></ul><hr><p><strong>格子如上方式填就好了！</strong></p><h3 id="递归思路"><a href="#递归思路" class="headerlink" title="递归思路"></a>递归思路</h3><p>第二节课将递归的时候，也讲了这个问题的递归思路。不过复杂度记得是指数级的，暂时不写了~~</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="动态规划-Code"><a href="#动态规划-Code" class="headerlink" title="动态规划 Code"></a>动态规划 Code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> NS_DP0_1Knapsack &#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP0_1Knapsack</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> W, <span class="keyword">int</span> *w, <span class="keyword">int</span> *v)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> W, <span class="keyword">int</span> *w, <span class="keyword">int</span> *v, <span class="keyword">int</span> OptV)</span></span>;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; V;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; x;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DP0_1KnapsackCaller</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> W, <span class="keyword">int</span> *w, <span class="keyword">int</span> *v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    V.clear();</span><br><span class="line">    V.resize(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(W + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    x.resize(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> OptV = DP0_1Knapsack(n, W, w, v);</span><br><span class="line">    Output(n, W, w, v, OptV);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP0_1Knapsack</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> W, <span class="keyword">int</span> *w, <span class="keyword">int</span> *v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= W; j++)</span><br><span class="line">            <span class="keyword">if</span> (j &lt; w[i - <span class="number">1</span>])</span><br><span class="line">                V[i][j] = V[i - <span class="number">1</span>][j];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (V[i - <span class="number">1</span>][j] &gt;=</span><br><span class="line">                V[i - <span class="number">1</span>][j - w[i - <span class="number">1</span>]] + v[i - <span class="number">1</span>])</span><br><span class="line">                V[i][j] = V[i - <span class="number">1</span>][j];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                V[i][j] = V[i - <span class="number">1</span>][j - w[i - <span class="number">1</span>]] + v[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> j = W;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (V[i][j] == V[i - <span class="number">1</span>][j])</span><br><span class="line">            x[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;   x[i] = <span class="number">1</span>; j -= w[i - <span class="number">1</span>];  &#125;</span><br><span class="line">    <span class="keyword">return</span> V[n][W];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> W, <span class="keyword">int</span> *w, <span class="keyword">int</span> *v, <span class="keyword">int</span> OptV)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//inputs</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"DP to solve 0-1 knapsack:\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d items with knapsack capacity %d.\n"</span>, n , W);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%-6s: "</span>, <span class="string">"Weight"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%3d"</span>, w[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%-6s: "</span>, <span class="string">"Value"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%3d"</span>, v[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="comment">//the value matrix</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nThe value matrix:\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"  "</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= W; j++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%3d"</span>, j);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%2d"</span>, i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= W; j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%3d"</span>, V[i][j]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//solution</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nThe optimal value: %d\n"</span>, OptV);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The optimal solution:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%2d"</span>, x[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="comment">//namespace NS_DP0_1Knapsack</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> NS_DP0_1Knapsack;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 物品个数</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; N = &#123; <span class="number">4</span>,  <span class="number">10</span>&#125;;</span><br><span class="line">    <span class="comment">// 背包容量</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; W = &#123; <span class="number">8</span>,  <span class="number">100</span>&#125;;</span><br><span class="line">    <span class="comment">// 各物品重量</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; w = &#123;</span><br><span class="line">        &#123; <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span> &#125;,</span><br><span class="line">        &#123; <span class="number">4</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">5</span> &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 各物品价值</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; v = &#123;</span><br><span class="line">        &#123; <span class="number">15</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">2</span> &#125;,</span><br><span class="line">        &#123; <span class="number">15</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">23</span>, <span class="number">12</span>, <span class="number">33</span>, <span class="number">7</span>, <span class="number">22</span>, <span class="number">10</span> &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> m = N.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        DP0_1KnapsackCaller(N[i], W[i], &amp;w[i][<span class="number">0</span>], &amp;v[i][<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态规划-Result"><a href="#动态规划-Result" class="headerlink" title="动态规划 Result"></a>动态规划 Result</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603943258085-fac4811f-87e7-4eef-8194-ee47d88063a6.png#align=left&amp;display=inline&amp;height=379&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=757&amp;originWidth=1920&amp;size=74181&amp;status=done&amp;style=shadow&amp;width=960" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603943276039-f6f74edf-4871-426d-8af8-e1a62edaf071.png#align=left&amp;display=inline&amp;height=276&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=552&amp;originWidth=1920&amp;size=66929&amp;status=done&amp;style=shadow&amp;width=960" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603943291836-84a15101-d6e7-4c9f-91b5-1122afd7ac5c.png#align=left&amp;display=inline&amp;height=177&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=353&amp;originWidth=1920&amp;size=29292&amp;status=done&amp;style=shadow&amp;width=960" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TSP问题</title>
      <link href="blog/bkbll1/"/>
      <url>blog/bkbll1/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>假设有 n 个城市，各个城市与城市间的距离也已知，有一位旅行商需要途径所有的这 n 个城市，且每个城市只能且必须经过以此，求出一条路线，使得旅行商所走过的路程最短</p><h2 id="问题思路"><a href="#问题思路" class="headerlink" title="问题思路"></a>问题思路</h2><h2 id="代码思路"><a href="#代码思路" class="headerlink" title="代码思路"></a>代码思路</h2><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://jerkwin.github.io/2016/03/17/%E6%97%85%E8%A1%8C%E6%8E%A8%E9%94%80%E5%95%86%E9%97%AE%E9%A2%98TSP%E7%9A%84%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%A7%A3%E6%B3%95/" target="_blank" rel="noopener">旅行推销商问题 TSP 的动态规划解法</a></li><li><a href="https://blog.csdn.net/joekwok/article/details/4749713" target="_blank" rel="noopener">TSP(旅行者问题)——动态规划详解</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>全排列问题</title>
      <link href="blog/kgaymi/"/>
      <url>blog/kgaymi/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定 n 个有序元素的集合，列出其可能出现的排列。</p><h2 id="问题思路"><a href="#问题思路" class="headerlink" title="问题思路"></a>问题思路</h2><h2 id="代码思路"><a href="#代码思路" class="headerlink" title="代码思路"></a>代码思路</h2><ul><li>利用动态数组数据结构</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wztlink1013.al._递归法_;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全排列问题</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Permuting</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ArrayList&lt;Integer&gt; x  = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> t;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">10</span>;</span><br><span class="line">        Times.test(<span class="string">"当n = "</span> + n + <span class="string">"时候的耗费时间"</span>, <span class="keyword">new</span> Times.Task() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                PermutingCaller(n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PermutingCaller</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        N = n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            x.add(i + <span class="number">1</span>);</span><br><span class="line">        Permuting(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Permuting</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; N - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; N; j++) &#123;</span><br><span class="line">                t = x.get(i);</span><br><span class="line">                x.set(i, x.get(j));</span><br><span class="line">                x.set(j, t);</span><br><span class="line">                Permuting(i + <span class="number">1</span>);</span><br><span class="line">                t = x.get(i);</span><br><span class="line">                x.set(i, x.get(j));</span><br><span class="line">                x.set(j, t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            OutputOnePermutation();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OutputOnePermutation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.print(++cnt + <span class="string">" : "</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x : x)</span><br><span class="line">            System.out.print(x + <span class="string">" "</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>n:10</p></blockquote><blockquote><p>n</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线性搜索</title>
      <link href="blog/ete0k7/"/>
      <url>blog/ete0k7/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1599481660030-a834223b-30e4-4a9e-a290-243f028112f2.png#align=left&amp;display=inline&amp;height=325&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=650&amp;originWidth=1040&amp;size=166464&amp;status=done&amp;style=shadow&amp;width=520" alt="image.png"></p><h2 id="问题思路"><a href="#问题思路" class="headerlink" title="问题思路"></a>问题思路</h2><h2 id="代码思路"><a href="#代码思路" class="headerlink" title="代码思路"></a>代码思路</h2><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>穷举+洗牌算法</title>
      <link href="blog/czgm7d/"/>
      <url>blog/czgm7d/</url>
      
        <content type="html"><![CDATA[<h2 id="穷举思想"><a href="#穷举思想" class="headerlink" title="穷举思想"></a>穷举思想</h2><p>穷举法就是针对问题可能出现的结果，对其逐个进行测验并得出是否为符合要求的结果，穷举法也是许多高级算法中的某个部分。有点像高中数学里面的对问题进行分类讨论的过程中，寻找所有的情况的异曲同工之处。</p><h3 id="两部分组成"><a href="#两部分组成" class="headerlink" title="两部分组成"></a>两部分组成</h3><ol><li>系统化地枚举问题各种可能的候选解</li><li>检查验证每一个候选解是否满足问题的求解要求</li></ol><h3 id="穷举的抽象算法伪代码"><a href="#穷举的抽象算法伪代码" class="headerlink" title="穷举的抽象算法伪代码"></a>穷举的抽象算法伪代码</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1599469820927-b990d8a2-9025-4f33-becb-46a03890bf07.png#align=left&amp;display=inline&amp;height=323&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=645&amp;originWidth=1097&amp;size=223732&amp;status=done&amp;style=shadow&amp;width=548.5" alt="image.png"></p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1599475674143-ee86ef49-1b68-4940-baef-e556f225e43d.png#align=left&amp;display=inline&amp;height=297&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=594&amp;originWidth=1056&amp;size=159618&amp;status=done&amp;style=shadow&amp;width=528" alt="image.png"></p><h2 id="问题思路"><a href="#问题思路" class="headerlink" title="问题思路"></a>问题思路</h2><ul><li>在 1~n-1 当中随机选择一个数 k1，将其与第 n 个数互换；</li><li>在 1~n-2 当中随机选择一个属 k2，将其与第 n-1 个数互换；</li><li>在第 i 轮之后，1~n-<strong>(i-1)</strong>当中选择一个数 ki，将其与第 n-<strong>(i-1)</strong>个数互换；</li></ul><h2 id="代码思路"><a href="#代码思路" class="headerlink" title="代码思路"></a>代码思路</h2><ul><li>在区间之间随机数的生成</li><li>交换函数</li><li>泛型：支持各种类型数据的“洗牌”</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>递归+子集问题</title>
      <link href="blog/mz8hpp/"/>
      <url>blog/mz8hpp/</url>
      
        <content type="html"><![CDATA[<h2 id="一、递归"><a href="#一、递归" class="headerlink" title="一、递归"></a>一、递归</h2><h3 id="算法特点"><a href="#算法特点" class="headerlink" title="算法特点"></a>算法特点</h3><p>适用于递归解决的问题通常有两个特点：</p><ol><li>递归性：能将规模为 n 的问题简化为 n-1 的问题，并且规模为 n 的问题和规模为 n-1 的问题性质一样</li><li>可终结性：不能无限递归下去，小到一定程度能够得出结果</li></ol><blockquote><p>eg：前 n 个自然数的和、n 个数之和这两个问题就可以用递归来解决</p></blockquote><h3 id="递归和迭代"><a href="#递归和迭代" class="headerlink" title="递归和迭代"></a>递归和迭代</h3><p>递归问题也可以用迭代方式来解决（循环），这过程中，有一些普遍的特点就是：</p><ol><li>递归问题有较好的直觉性</li><li>迭代运行过程中调用太多的栈空间，因而运行效率相对优于递归</li></ol><h2 id="二、问题描述"><a href="#二、问题描述" class="headerlink" title="二、问题描述"></a>二、问题描述</h2><p>给定一个正整数 n，生成集合 {1,2,3,…n} 的所有子集</p><h2 id="三、问题思路"><a href="#三、问题思路" class="headerlink" title="三、问题思路"></a>三、问题思路</h2><blockquote><p>思路一：二进制法</p></blockquote><p>利用<strong>二进制</strong>“<strong>是否显现”</strong>的转换思路来解决这个问题，一个数字在子集当中就标记为 1 反之标记为 0，就比如 <code>n=3</code> ，输出： <code>{}{1,0,0}{0,1,0}{0,0,1}{1,1,0}{1,0,1}{0,1,1}{1,1,1}</code></p><h2 id="四、代码思路"><a href="#四、代码思路" class="headerlink" title="四、代码思路"></a>四、代码思路</h2><blockquote><p>思路一：利用动态数组数据结构</p></blockquote><p>输入的 n 就是动态数组的初始大小<br>然后依次利用“吞进来”和“吐出去”尾元素来实现</p><h2 id="五、代码实现"><a href="#五、代码实现" class="headerlink" title="五、代码实现"></a>五、代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wztlink1013.al._递归法_;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 作用：测量代码运行时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Times</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat fmt = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss.SSS"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Task</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String title, Task task)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (task == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        title = (title == <span class="keyword">null</span>) ? <span class="string">""</span> : (<span class="string">"【"</span> + title + <span class="string">"】"</span>);</span><br><span class="line">        System.out.println(title);</span><br><span class="line">        System.out.println(<span class="string">"开始："</span> + fmt.format(<span class="keyword">new</span> Date()));</span><br><span class="line">        <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">        task.execute();</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"结束："</span> + fmt.format(<span class="keyword">new</span> Date()));</span><br><span class="line">        <span class="keyword">double</span> delta = (end - begin) / <span class="number">1000.0</span>;</span><br><span class="line">        System.out.println(<span class="string">"耗时："</span> + delta + <span class="string">"秒"</span>);</span><br><span class="line">        System.out.println(<span class="string">"-------------------------------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wztlink1013.al._递归法_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子集问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubSetting</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ArrayList&lt;Integer&gt; x  = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">4</span>;</span><br><span class="line">        Times.test(<span class="string">"当n = "</span> + n + <span class="string">"时候的耗费时间"</span>, <span class="keyword">new</span> Times.Task() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Subsetting(n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Subsetting</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            x.add(<span class="number">0</span>);</span><br><span class="line">            Subsetting(n - <span class="number">1</span>);</span><br><span class="line">            x.remove(x.size() - <span class="number">1</span>);</span><br><span class="line">            x.add(<span class="number">1</span>);</span><br><span class="line">            Subsetting(n - <span class="number">1</span>);</span><br><span class="line">            x.remove(x.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            OutputOneSubsetBinary();</span><br><span class="line">            OutputOneSubset();</span><br><span class="line">            System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OutputOneSubset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">"; &#123;"</span>);</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = x.size() - <span class="number">1</span>; i &gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x.get(i) == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (k &gt; <span class="number">0</span>)</span><br><span class="line">                    System.out.printf(<span class="string">","</span>);</span><br><span class="line">                System.out.printf(<span class="string">"%d"</span>, x.size() - i);</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">"&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OutputOneSubsetBinary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">"%010d: "</span>, ++cnt);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = x.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            System.out.printf(<span class="string">"%d"</span>, x.get(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>n：18（分钟）</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1600319992252-d49865a4-9a9d-4c65-88c8-ea72f140bf85.png#align=left&amp;display=inline&amp;height=219&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=438&amp;originWidth=1920&amp;size=146634&amp;status=done&amp;style=none&amp;width=960" alt="image.png"></p><blockquote><p>n：19（分钟）</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1600320121635-ea76638e-a4c2-4686-a017-0d97088dc417.png#align=left&amp;display=inline&amp;height=190&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=380&amp;originWidth=1920&amp;size=140804&amp;status=done&amp;style=none&amp;width=960" alt="image.png"></p><blockquote><p>n：20（分钟）</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1600320284010-b885d1eb-01da-40d9-a098-f5d84744d847.png#align=left&amp;display=inline&amp;height=196&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=392&amp;originWidth=1920&amp;size=144176&amp;status=done&amp;style=none&amp;width=960" alt="image.png"></p><blockquote><p>n：21（分钟）</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1600320620721-cf61057d-1eac-48d3-b724-36d0d21c4d1e.png#align=left&amp;display=inline&amp;height=160&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=319&amp;originWidth=1920&amp;size=129722&amp;status=done&amp;style=none&amp;width=960" alt="image.png"></p><blockquote><p>n：22（分钟）</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1600321218265-60888e51-2006-4dd7-bbe0-60b336895b8c.png#align=left&amp;display=inline&amp;height=173&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=345&amp;originWidth=1920&amp;size=131717&amp;status=done&amp;style=none&amp;width=960" alt="image.png"></p><blockquote><p>n：23（分钟）</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1600329834700-9cb11fdc-fec8-463d-934a-b140b45cc0ae.png#align=left&amp;display=inline&amp;height=193&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=386&amp;originWidth=1920&amp;size=146130&amp;status=done&amp;style=none&amp;width=960" alt="image.png"></p><blockquote><p>网上查的代码！</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printSubsets</span><span class="params">(String[] set)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = set.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span>&lt;&lt;n); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.print(<span class="string">"&#123; "</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                <span class="keyword">if</span> ((i &amp; (<span class="number">1</span> &lt;&lt; j)) &gt; <span class="number">0</span>)</span><br><span class="line">                    System.out.print(set[j] + <span class="string">" "</span>);</span><br><span class="line">            System.out.println(<span class="string">"&#125;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String[] set = &#123;<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>,</span><br><span class="line">                        <span class="string">"5"</span>, <span class="string">"6"</span>, <span class="string">"7"</span>, <span class="string">"8"</span>&#125;;</span><br><span class="line">        printSubsets(set);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JAVA-常用类</title>
      <link href="blog/rnsz9o/"/>
      <url>blog/rnsz9o/</url>
      
        <content type="html"><![CDATA[<h2 id="java-util-Date"><a href="#java-util-Date" class="headerlink" title="java.util.Date"></a>java.util.Date</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.util.Date date = <span class="keyword">new</span> java.util.Date();</span><br><span class="line">System.out.println(date.toString());</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">Sun</span> <span class="string">Mar</span> <span class="number">09</span> <span class="number">13</span><span class="string">:50:19</span> <span class="string">EST</span> <span class="number">2020</span></span><br></pre></td></tr></table></figure><h2 id="java-util-Random"><a href="#java-util-Random" class="headerlink" title="java.util.Random"></a>java.util.Random</h2><blockquote><p>Math.Random()：Math 类里面的随机数函数，范围是 0.0 到 0.1</p></blockquote><blockquote><p>java.util.Random</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1600085762621-35c72adc-6c6e-4ab2-ac8b-d76d50e570e5.png#align=left&amp;display=inline&amp;height=176&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=352&amp;originWidth=899&amp;size=45653&amp;status=done&amp;style=shadow&amp;width=449.5" alt="image.png"></p><h2 id="javafx-geometry-Point2D"><a href="#javafx-geometry-Point2D" class="headerlink" title="javafx.geometry.Point2D"></a>javafx.geometry.Point2D</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1600086091697-6fa8f4e4-137d-490a-8fe0-3546693a1f86.png#align=left&amp;display=inline&amp;height=103&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=206&amp;originWidth=960&amp;size=115357&amp;status=done&amp;style=shadow&amp;width=480" alt="image.png"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> javafx.geometry.Point2D;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPoint2D</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Scanner input= <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">"Enter point1's x-,y-coordinates:"</span>);</span><br><span class="line">    <span class="keyword">double</span> x1=input.nextDouble();</span><br><span class="line">    <span class="keyword">double</span> y1=input.nextDouble();</span><br><span class="line">    System.out.println(<span class="string">"Enter point2's x-,y-coordinates:"</span>);</span><br><span class="line">    <span class="keyword">double</span> x2=input.nextDouble();</span><br><span class="line">    <span class="keyword">double</span> y2=input.nextDouble();</span><br><span class="line">    Point2D p1 =<span class="keyword">new</span> Point2D(x1,y1);</span><br><span class="line">    Point2D p2 =<span class="keyword">new</span> Point2D(x2,y2);</span><br><span class="line">    System.out.println(<span class="string">"p1 is"</span>+p1.toString());</span><br><span class="line">    System.out.println(<span class="string">"p2 is"</span>+p2.toString());</span><br><span class="line">    System.out.println(<span class="string">"distance is"</span>+p1.distance(p2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">Enter</span> <span class="string">point1's</span> <span class="string">x-,y-coordinates:</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="string">Enter</span> <span class="string">point2's</span> <span class="string">x-,y-coordinates:</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="string">p1</span> <span class="string">isPoint2D</span> <span class="string">[x</span> <span class="string">=</span> <span class="number">1.0</span><span class="string">,</span> <span class="string">y</span> <span class="string">=</span> <span class="number">2.0</span><span class="string">]</span></span><br><span class="line"><span class="string">p2</span> <span class="string">isPoint2D</span> <span class="string">[x</span> <span class="string">=</span> <span class="number">3.0</span><span class="string">,</span> <span class="string">y</span> <span class="string">=</span> <span class="number">4.0</span><span class="string">]</span></span><br><span class="line"><span class="string">distance</span> <span class="string">is2.8284271247461903</span></span><br></pre></td></tr></table></figure><h2 id="String-和-StringBuilder-和-StringBuffer"><a href="#String-和-StringBuilder-和-StringBuffer" class="headerlink" title="String 和 StringBuilder 和 StringBuffer"></a>String 和 StringBuilder 和 StringBuffer</h2><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><h3 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString()方法"></a>toString()方法</h3><h3 id="equals-方法"><a href="#equals-方法" class="headerlink" title="equals()方法"></a>equals()方法</h3><blockquote><p>默认实现的方法</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>重写例子</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Circe)</span><br><span class="line">        <span class="keyword">return</span> radius == ((Circle)o).radius;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span> == o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>task_03_计算机网络指标、TCP/IP协议</title>
      <link href="blog/usypu4/"/>
      <url>blog/usypu4/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机网络自主学习任务学习单"><a href="#计算机网络自主学习任务学习单" class="headerlink" title="计算机网络自主学习任务学习单"></a>计算机网络自主学习任务学习单</h2><p>2020 年 9 月 9 日，2020 年 9 月 14 日</p><p>| 课程介绍 | 1.   计算机网络指标。</p><ol start="2"><li>TCP/IP 网络体系结构.<br>|<br>| — | — |<br>| 教学目标 | 1、了解计算机网络指标。<br>2、理解 TCP/IP 网络体系结构及协议。<br>|<br>| 学习内容 |</li></ol><p>1、课下自主网上搜索观看中国大学 MOOC 教程《玩转计算机网络-计算机网络原理》（<a href="https://www.icourse163.org/course/QDU-1206901804" target="_blank" rel="noopener">https://www.icourse163.org/course/QDU-1206901804</a>） 1.计算机网络性能指标<br>（1）了解速率、带宽、吞吐量<br>（2）理解四类时延定义，掌握简单计算方法<br>（3）定量描述报文和分组交换的特征差异<br>2、计算机网络体系结构<br>（1）了解分层的思想：从黑匣子到透明访问<br>（2）了解 OSI/RM 与 TCP/IP 的体系结构差异性<br>（2）理解网络协议三要素<br>（3）理解 TCP/IP 沙漏模型<br>  |<br>| 课堂讨论 | 网络协议的设计必须考虑到所有的不可靠情况？请分析。 |<br>| 课下作业 | TCP/IP 沙漏模型<a href>未来可能的演变发展</a>？（9 月 14 日提交） |</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>task_02_计算机网络发展、基本概念</title>
      <link href="blog/kfnbgq/"/>
      <url>blog/kfnbgq/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机网络自主学习任务学习单"><a href="#计算机网络自主学习任务学习单" class="headerlink" title="计算机网络自主学习任务学习单"></a>计算机网络自主学习任务学习单</h2><p>2020 年 9 月 7 日</p><p>| 课程介绍 | 1.   计算机网络的发展。</p><ol start="2"><li>计算机网络基本概念.<br>|<br>| — | — |<br>| 教学目标 | 了解互联网的发展历史及基本概念。 |<br>| 学习内容 |<br>1、课下自主网上搜索观看中国大学 MOOC 教程《玩转计算机网络-计算机网络原理》（<a href="https://www.icourse163.org/course/QDU-1206901804" target="_blank" rel="noopener">https://www.icourse163.org/course/QDU-1206901804</a>）<br>2、课下自主学习《计算机网络》第一章 1.因特网概述<br>（1）网络与因特网<br>（2）三级结构的因特网<br>（3）因特网的标准化工作 2.因特网的组成      (1)通信方式<br>(2)三种交换方式及不同特点 3.计算机网络在我国的发展 4.计算机网络的分类<br>问题思考：</li><li>电路交换、分组交换、报文交换技术的区别<br>电路交换：由一条专用的物理通路来进行连接。【优】其传输速率快【缺】通信线路资源未被很好利用而被浪费<br>分组交换：由网状拓扑结构来组成分组交换网。【优】灵活，动态分配通信线路【缺】有时延，无法确保带宽<br>报文交换技术：通过多条纸带的物理形式来进行分组交换。【优】利用存储转发技术来动态分配通信线路【缺】有较大的时延，消耗较大的人力物力</li><li>存储转发原理机制。<br>原理机制：将报文划分若干个数据段，每个数据段都有其首部，然后路由器根据其首部所包含的目的地址和源地址等重要控制信息，在互联网中独立地选择通信线路传输路径，最终将其正确地交付到终点。 |<br>| 课堂讨论 | 互联网为什么没有采用中心节点网络，而是实施了分布交换网络？<br>答：<br>l  当用户数量增多，数据传输任务加大，中心节点将承担不起所传输的任务，因此选择分布交换网络，利用分组交换技术，来动态分配通信线路 |<br>| 课下作业 | 小组 PPT 作业：OSI 为何败给了 TCP/IP？（9 月 9 日前提交）<br>l  缺乏商业驱动力<br>l  实现过于复杂，而且运行效率低<br>l  制定周期长<br>l  层次划分不合理 |</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>📅链表基础题目</title>
      <link href="blog/ipiwza/"/>
      <url>blog/ipiwza/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="237-删除链表中的节点"><a href="#237-删除链表中的节点" class="headerlink" title="237. 删除链表中的节点"></a>237. 删除链表中的节点</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>给出一个带值得链表，删除指定值 d 结点。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603193824228-3a24481d-e89e-4896-a20d-9c7c77d7511d.png#align=left&amp;display=inline&amp;height=261&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=521&amp;originWidth=727&amp;size=54507&amp;status=done&amp;style=shadow&amp;width=363.5" alt="image.png"></p><h3 id="问题思路"><a href="#问题思路" class="headerlink" title="问题思路"></a>问题思路</h3><blockquote><p>题目<strong>并没有说明有 head 节点</strong>，应该转换思维，一直往 next.next 元素，往后删去。</p></blockquote><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(ListNode node)</span> </span>&#123;</span><br><span class="line">        node.val = node.next.val;</span><br><span class="line">        node.next = node.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206. 反转链表"></a>206. 反转链表</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603193588776-6539785f-f52d-494b-b7a1-2bc6cebf1e60.png#align=left&amp;display=inline&amp;height=136&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=271&amp;originWidth=725&amp;size=20430&amp;status=done&amp;style=shadow&amp;width=362.5" alt="image.png"></p><h3 id="问题思路-1"><a href="#问题思路-1" class="headerlink" title="问题思路"></a>问题思路</h3><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><p><strong>递归实现</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 避免陷入死循环</span></span><br><span class="line"><span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">ListNode newHead = reverseList(head.next); <span class="comment">//此处递归，找到最后一个节点了</span></span><br><span class="line">head.next.next = head; <span class="comment">//重新指定节点指向（有两个next，注意少写）</span></span><br><span class="line">head.next = <span class="keyword">null</span>; <span class="comment">//将最初的节点指向空</span></span><br><span class="line"><span class="keyword">return</span> newHead; <span class="comment">//返回新的“倒置”头节点</span></span><br></pre></td></tr></table></figure><p><strong>快慢指针</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 避免陷入死循环</span></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">        ListNode newHead = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>)&#123;</span><br><span class="line">            ListNode tmp = head.next;</span><br><span class="line">            head.next = newHead;</span><br><span class="line">            newHead = head;</span><br><span class="line">            head = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="141-环形链表"><a href="#141-环形链表" class="headerlink" title="141. 环形链表"></a>141. 环形链表</h2><h3 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h3><p>给定一个链表，判断链表中是否有环。</p><p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。</p><p>如果链表中存在环，则返回 true 。 否则，返回 false 。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603195777983-5574f7c4-135c-45c2-aef2-6118e954bf68.png#align=left&amp;display=inline&amp;height=172&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=343&amp;originWidth=726&amp;size=36403&amp;status=done&amp;style=shadow&amp;width=363" alt="image.png"></p><h3 id="问题思路-2"><a href="#问题思路-2" class="headerlink" title="问题思路"></a>问题思路</h3><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 快慢指针</span></span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head.next;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="keyword">if</span> (slow == fast) <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">//如果能相遇则表示有环</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">//不能相遇则没有环</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203. 移除链表元素"></a>203. 移除链表元素</h2><h3 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603195857807-2e8c8296-2d79-4e36-b304-f02c4dee52b3.png#align=left&amp;display=inline&amp;height=100&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=200&amp;originWidth=729&amp;size=15034&amp;status=done&amp;style=shadow&amp;width=364.5" alt="image.png"></p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeElements</span><span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 将整个链表想象成head+子链表</span></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 先处理子链表</span></span><br><span class="line">        head.next = removeElements(head.next, val);</span><br><span class="line">        <span class="comment">// 再处理头结点</span></span><br><span class="line">        <span class="keyword">return</span> head.val == val ? head.next : head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="83-删除排序链表中的重复元素"><a href="#83-删除排序链表中的重复元素" class="headerlink" title="83. 删除排序链表中的重复元素"></a>83. 删除排序链表中的重复元素</h2><h3 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603195897467-fdb33dfe-a1c0-4963-b76a-2c978f565801.png#align=left&amp;display=inline&amp;height=177&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=354&amp;originWidth=727&amp;size=22776&amp;status=done&amp;style=shadow&amp;width=363.5" alt="image.png"></p><h3 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h3><h3 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 快慢指针</span></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head.next;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (slow.val != fast.val) &#123;</span><br><span class="line">                slow.next = fast;</span><br><span class="line">                slow = fast;</span><br><span class="line">            &#125;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 单指针下一步</span></span><br><span class="line"><span class="comment">//class Solution &#123;</span></span><br><span class="line"><span class="comment">//    public ListNode deleteDuplicates(ListNode head) &#123;</span></span><br><span class="line"><span class="comment">//        ListNode cur = head;</span></span><br><span class="line"><span class="comment">//        while(cur != null &amp;&amp; cur.next != null) &#123;</span></span><br><span class="line"><span class="comment">//            if(cur.val == cur.next.val) &#123;</span></span><br><span class="line"><span class="comment">//                cur.next = cur.next.next;</span></span><br><span class="line"><span class="comment">//            &#125; else &#123;</span></span><br><span class="line"><span class="comment">//                cur = cur.next;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return head;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><h2 id="876-链表的中间结点"><a href="#876-链表的中间结点" class="headerlink" title="876. 链表的中间结点"></a>876. 链表的中间结点</h2><h3 id="问题描述-5"><a href="#问题描述-5" class="headerlink" title="问题描述"></a>问题描述</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603195941092-8cd11b96-c174-425e-ab68-a7015110092e.png#align=left&amp;display=inline&amp;height=208&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=415&amp;originWidth=717&amp;size=49665&amp;status=done&amp;style=shadow&amp;width=358.5" alt="image.png"></p><h3 id="问题分析-2"><a href="#问题分析-2" class="headerlink" title="问题分析"></a>问题分析</h3><h3 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">middleNode</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="keyword">if</span> (head.next.next == <span class="keyword">null</span>) <span class="keyword">return</span> head.next;</span><br><span class="line"></span><br><span class="line">        ListNode slow = head.next;</span><br><span class="line">        ListNode fast = head.next.next;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="keyword">if</span> (fast == <span class="keyword">null</span>) <span class="keyword">return</span> slow;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DataStructure </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>⏱算法复杂度</title>
      <link href="blog/veggl2/"/>
      <url>blog/veggl2/</url>
      
        <content type="html"><![CDATA[<h2 id="一、算法优化方向"><a href="#一、算法优化方向" class="headerlink" title="一、算法优化方向"></a>一、算法优化方向</h2><ol><li>用尽量少的存储空间</li><li>用尽量少的执行步骤（执行时间）</li><li>具体情况，具体分析（空间换时间，时间换空间）</li></ol><h2 id="二、时间复杂度"><a href="#二、时间复杂度" class="headerlink" title="二、时间复杂度"></a>二、时间复杂度</h2><blockquote><p>估算程序指令的执行次数（执行时间）</p></blockquote><h3 id="大-O-估算法"><a href="#大-O-估算法" class="headerlink" title="大 O 估算法"></a>大 O 估算法</h3><blockquote><p>忽略常数、系数、低阶<br>常见的复杂度</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1599393633525-ae152fa4-ab52-4436-a91a-4237888491db.png#align=left&amp;display=inline&amp;height=220&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=440&amp;originWidth=915&amp;size=109404&amp;status=done&amp;style=shadow&amp;width=457.5" alt="image.png"><br><code>Ο(1)＜Ο(logn)＜Ο(n)＜Ο(nlogn)＜Ο(n^2)＜Ο(n^3)＜…＜Ο(2^n)＜Ο(n!)&lt;O(n^n)</code></p><blockquote><p>当数据规模较小的时候</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1599393701320-c1869593-be0a-4552-9b1c-8a6fb00d300c.png#align=left&amp;display=inline&amp;height=239&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=477&amp;originWidth=813&amp;size=162408&amp;status=done&amp;style=shadow&amp;width=406.5" alt="image.png"></p><blockquote><p>当数据规模较大的时候</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1599395912246-1e996955-9150-4af1-b6d9-f7d15ce7d594.png#align=left&amp;display=inline&amp;height=253&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=597&amp;originWidth=1004&amp;size=174523&amp;status=done&amp;style=shadow&amp;width=426" alt="image.png"><br><a href="https://zh.numberempire.com/graphingcalculator.php" target="_blank" rel="noopener">函数图像绘制工具</a></p><h2 id="三、空间复杂度"><a href="#三、空间复杂度" class="headerlink" title="三、空间复杂度"></a>三、空间复杂度</h2><blockquote><p>估算所需占用的存储空间</p></blockquote><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">空间复杂度(Space Complexity)是对一个算法在运行过程中临时占用存储空间大小的量度。一个算法在计算机存储器上所占用的存储空间，包括存储算法本身所占用的存储空间，算法的输入输出数据所占用的存储空间和算法在运行过程中临时占用的存储空间这三个方面。算法的输入输出数据所占用的存储空间是由要解决的问题决定的，是通过参数表由调用函数传递而来的，它不随本算法的不同而改变。存储算法本身所占用的存储空间与算法书写的长短成正比，要压缩这方面的存储空间，就必须编写出较短的算法。算法在运行过程中临时占用的存储空间随算法的不同而异，有的算法只需要占用少量的临时工作单元，而且不随问题规模的大小而改变，我们称这种算法是“就地\"进行的，是节省存储的算法，如这一节介绍过的几个算法都是如此；有的算法需要占用的临时工作单元数与解决问题的规模<span class="built_in">n</span>有关，它随着<span class="built_in">n</span>的增大而增大，当<span class="built_in">n</span>较大时，将占用较多的存储单元，例如将在第九章介绍的快速排序和归并排序算法就属于这种情况。</span><br><span class="line"></span><br><span class="line">如当一个算法的空间复杂度为一个常量，即不随被处理数据量<span class="built_in">n</span>的大小而改变时，可表示为O(<span class="number">1</span>)；当一个算法的空间复杂度与以<span class="number">2</span>为底的<span class="built_in">n</span>的对数成正比时，可表示为<span class="number">0</span>(<span class="number">10</span>g2n)；当一个算法的空I司复杂度与<span class="built_in">n</span>成线性比例关系时，可表示为<span class="number">0</span>(<span class="built_in">n</span>).若形参为数组，则只需要为它分配一个存储由实参传送来的一个地址指针的空间，即一个机器字长空间；若形参为引用方式，则也只需要为其分配存储一个地址的空间，用它来存储对应实参变量的地址，以便由系统自动引用实参变量。</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/zolalad/article/details/11848739" target="_blank" rel="noopener">参考：算法的时间复杂度和空间复杂度-总结</a></p><h2 id="最好最坏复杂度"><a href="#最好最坏复杂度" class="headerlink" title="最好最坏复杂度"></a>最好最坏复杂度</h2><h2 id="均摊复杂度"><a href="#均摊复杂度" class="headerlink" title="均摊复杂度"></a>均摊复杂度</h2><h2 id="复杂度震荡"><a href="#复杂度震荡" class="headerlink" title="复杂度震荡"></a>复杂度震荡</h2><h2 id="平均复杂度"><a href="#平均复杂度" class="headerlink" title="平均复杂度"></a>平均复杂度</h2><p>##</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>20. 有效的括号</title>
      <link href="blog/aritwv/"/>
      <url>blog/aritwv/</url>
      
        <content type="html"><![CDATA[<h2 id="问题思路"><a href="#问题思路" class="headerlink" title="问题思路"></a>问题思路</h2><p>将所有的左半边括号 push 到栈内，然后遇到右半边括号，就将其与栈顶元素匹配测试，若能匹配成功则继续匹配，反之输出 false。<br>在这之间注意比较当栈内没有元素了，而字符串还有待匹配的字符，输出 false，当栈内还有元素，外面与之匹配测试的右半边括号，也输出 false。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="栈实现"><a href="#栈实现" class="headerlink" title="栈实现"></a>栈实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'('</span> || c == <span class="string">'['</span> || c == <span class="string">'&#123;'</span>) &#123;</span><br><span class="line">                stack.push(c);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (stack.isEmpty()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">char</span> left = stack.pop();</span><br><span class="line">                <span class="keyword">if</span> (left == <span class="string">'('</span> &amp;&amp; c !=<span class="string">')'</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (left == <span class="string">'['</span> &amp;&amp; c !=<span class="string">']'</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (left == <span class="string">'&#123;'</span> &amp;&amp; c !=<span class="string">'&#125;'</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HashMap-实现"><a href="#HashMap-实现" class="headerlink" title="HashMap 实现"></a>HashMap 实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">true<span class="keyword">private</span> <span class="keyword">static</span> HashMap&lt;Character, Character&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">true<span class="keyword">static</span> &#123;</span><br><span class="line">truetrue<span class="comment">// key - value</span></span><br><span class="line">truetruemap.put(<span class="string">'('</span>, <span class="string">')'</span>);</span><br><span class="line">truetruemap.put(<span class="string">'&#123;'</span>, <span class="string">'&#125;'</span>);</span><br><span class="line">truetruemap.put(<span class="string">'['</span>, <span class="string">']'</span>);</span><br><span class="line">true&#125;</span><br><span class="line"></span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">truetrueStack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">truetrue<span class="keyword">int</span> len = s.length();</span><br><span class="line">truetrue<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">truetruetrue<span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">truetruetrue<span class="keyword">if</span> (map.containsKey(c)) &#123; <span class="comment">// 左括号</span></span><br><span class="line">truetruetruetruestack.push(c);</span><br><span class="line">truetruetrue&#125; <span class="keyword">else</span> &#123; <span class="comment">// 右括号</span></span><br><span class="line">truetruetruetrue<span class="keyword">if</span> (stack.isEmpty()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">truetruetruetrue<span class="keyword">if</span> (c != map.get(stack.pop())) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">truetruetrue&#125;</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DataStructure </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>栈</title>
      <link href="blog/yxy6mv/"/>
      <url>blog/yxy6mv/</url>
      
        <content type="html"><![CDATA[<h2 id="栈的设计"><a href="#栈的设计" class="headerlink" title="栈的设计"></a>栈的设计</h2><h3 id="栈的特点"><a href="#栈的特点" class="headerlink" title="栈的特点"></a>栈的特点</h3><p>栈的最重要特点就是其元素的<strong>后进先出，先进后出</strong>。</p><h3 id="栈的接口设计"><a href="#栈的接口设计" class="headerlink" title="栈的接口设计"></a>栈的接口设计</h3><p>栈可以<strong>直接继承</strong>之前所学的 ArrayList 抑或是 List 接口。<br>这过程中需要注意，最好不要直接继承，因为如果直接继承，会将接口里面的其他方法也继承下来，会导致栈的对外接口不合理，解决办法就是在<strong>类设计内部 new 一个 private List 对象</strong>来设计栈。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>; <span class="comment">// 元素的数量</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>; <span class="comment">// 栈是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(E element)</span></span>; <span class="comment">// 入栈</span></span><br><span class="line"><span class="function">E <span class="title">pop</span><span class="params">()</span></span>; <span class="comment">// 出栈</span></span><br><span class="line"><span class="function">E <span class="title">top</span><span class="params">()</span></span>; <span class="comment">// 获取栈顶元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>; <span class="comment">// 清空栈</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wztlink1013.ds.stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wztlink1013.ds.stack.list.ArrayList;</span><br><span class="line"><span class="keyword">import</span> com.wztlink1013.ds.stack.list.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;E&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        list.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        list.add(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.remove(list.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.get(list.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h2><p><strong>浏览器的前进和后退</strong>的功能。<br>假如有网页 a、b、c、d，依次点击 abc 三个网页，然后回退至 b 网页，这个时候，就相当于在 1 栈中有 ab 两个网页（且 b 为栈顶元素），c 暂时放到 2 栈中，此时依然可以使用回退前进功能，但是现在在 b 页面上在新输入 d 网页并进入，此时 2 栈被清空，d 为 1 栈的栈顶元素，在此时的 d 页面内，不能使用浏览器的前进功能，只能使用后退功能。</p><p>##</p>]]></content>
      
      
      <categories>
          
          <category> DataStructure </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>队列</title>
      <link href="blog/zqmygi/"/>
      <url>blog/zqmygi/</url>
      
        <content type="html"><![CDATA[<h2 id="Queue-队列设计"><a href="#Queue-队列设计" class="headerlink" title="Queue 队列设计"></a>Queue 队列设计</h2><blockquote><p>在头尾两端进行操作，先进先出 FIFO</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wztlink1013.ds.queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wztlink1013.ds.queue.list.LinkedList;</span><br><span class="line"><span class="keyword">import</span> com.wztlink1013.ds.queue.list.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;E&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        list.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enQueue</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        list.add(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">deQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.remove(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">front</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Deque-双端队列设计"><a href="#Deque-双端队列设计" class="headerlink" title="Deque 双端队列设计"></a>Deque 双端队列设计</h2><blockquote><p>双端队列是能在头尾两端添加、删除的队列</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wztlink1013.ds.queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wztlink1013.ds.queue.list.LinkedList;</span><br><span class="line"><span class="keyword">import</span> com.wztlink1013.ds.queue.list.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Deque</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;E&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        list.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enQueueRear</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        list.add(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">deQueueFront</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.remove(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enQueueFront</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        list.add(<span class="number">0</span>, element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">deQueueRear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.remove(list.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">front</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">rear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.get(list.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DataStructure </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>📅刷题</title>
      <link href="blog/dq9vp6/"/>
      <url>blog/dq9vp6/</url>
      
        <content type="html"><![CDATA[<p>👉 <a href="https://github.com/wztlink1013/datastructure/tree/master/src/com/wztlink1013/problems/leetcode/editor/cn" target="_blank" rel="noopener">GitHub 源码链接</a></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[j] == target - nums[i]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; i, j &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="18-四数之和"><a href="#18-四数之和" class="headerlink" title="18. 四数之和"></a>18. 四数之和</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; fourSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> d = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=nums[a];i&lt;nums.length;++a)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=nums[b];j&lt;nums.length;++b)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k=nums[c];k&lt;nums.length;++c)&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> l=nums[d];l&lt;nums.length;++d)&#123;</span><br><span class="line">                        <span class="keyword">if</span> (i+j+k+l == target)&#123;</span><br><span class="line">                            result.add(<span class="keyword">new</span> LinkedList&lt;&gt;(Arrays.asList(i, j, k, l)));</span><br><span class="line">                        &#125;<span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="486-预测赢家"><a href="#486-预测赢家" class="headerlink" title="486. 预测赢家"></a>486. 预测赢家</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">PredictTheWinner</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> total(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>, <span class="number">1</span>) &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">total</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> turn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start == end) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[start] * turn;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> scoreStart = nums[start] * turn + total(nums, start + <span class="number">1</span>, end, -turn);</span><br><span class="line">        <span class="keyword">int</span> scoreEnd = nums[end] * turn + total(nums, start, end - <span class="number">1</span>, -turn);</span><br><span class="line">        <span class="keyword">return</span> Math.max(scoreStart * turn, scoreEnd * turn) * turn;</span><br><span class="line"><span class="comment">//        if(turn == 1)&#123;</span></span><br><span class="line"><span class="comment">//            return Math.max(scoreStart ,scoreEnd );</span></span><br><span class="line"><span class="comment">//        &#125;else&#123;</span></span><br><span class="line"><span class="comment">//            return Math.min(scoreStart ,scoreEnd );</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="509-斐波那契数"><a href="#509-斐波那契数" class="headerlink" title="509. 斐波那契数"></a>509. 斐波那契数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> for循环实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (N &lt;= <span class="number">1</span>) <span class="keyword">return</span> N;</span><br><span class="line">        <span class="keyword">int</span> first = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> second = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = first + second;</span><br><span class="line">            first = second;</span><br><span class="line">            second = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> second;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    // <span class="doctag">TODO:</span> 递归实现O(2^n)</span></span><br><span class="line"><span class="comment">//    public int fib1(int n) &#123;</span></span><br><span class="line"><span class="comment">//        if (n &lt;= 1) return n;</span></span><br><span class="line"><span class="comment">//        return fib1(n - 1) + fib1(n - 2);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    // <span class="doctag">TODO:</span> 首尾实现</span></span><br><span class="line"><span class="comment">//    public int fib3(int n) &#123;</span></span><br><span class="line"><span class="comment">//        if (n &lt;= 1) return n;</span></span><br><span class="line"><span class="comment">//        int first = 0;</span></span><br><span class="line"><span class="comment">//        int second = 1;</span></span><br><span class="line"><span class="comment">//        while (n-- &gt; 1) &#123;</span></span><br><span class="line"><span class="comment">//            second += first;</span></span><br><span class="line"><span class="comment">//            first = second - first;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return second;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="729-我的日程安排表-I"><a href="#729-我的日程安排表-I" class="headerlink" title="729. 我的日程安排表 I"></a>729. 我的日程安排表 I</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCalendar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> [] month = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">30</span>];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyCalendar</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">book</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> p = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (month[start] == <span class="number">1</span>) &#123;</span><br><span class="line">            p = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (p) &#123;</span><br><span class="line">                <span class="keyword">int</span> i = start;</span><br><span class="line">                month[i] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (month[i+<span class="number">1</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> p = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                i = i+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="509-斐波那契数-1"><a href="#509-斐波那契数-1" class="headerlink" title="509. 斐波那契数"></a>509. 斐波那契数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 递归：O(2^n)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fib1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">return</span> fib1(n - <span class="number">1</span>) + fib1(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for循环：O(n)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fib2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">int</span> first = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> second = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = first + second;</span><br><span class="line">        first = second;</span><br><span class="line">        second = sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 首尾法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fib3</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> first = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> second = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n-- &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        second += first;</span><br><span class="line">        first = second - first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 特征方程解法：O（1）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fib4</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> c = Math.sqrt(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) (Math.pow((<span class="number">1</span>+c) / <span class="number">2</span>, n) - Math.pow((<span class="number">1</span>-c) / <span class="number">2</span>, c));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##</p>]]></content>
      
      
      <categories>
          
          <category> DataStructure </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>链表</title>
      <link href="blog/nkn2os/"/>
      <url>blog/nkn2os/</url>
      
        <content type="html"><![CDATA[<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>链表是一种数据结构，和<strong>数组同级</strong>。之前的 ArrayList 数据结构，其实现原理是数组，而 LinkedList 的实现原理就是链表了。链表在进行循环遍历时效率不高，但是插入和删除时优势明显。<br>单向链表是一种线性表，实际上是由<strong>节点（Node）</strong>组成的，一个链表拥有不定数量的节点。其数据在<strong>内存中存储是不连续的</strong>，它存储的数据分散在内存中，每个结点只能也只有它能知道下一个结点的存储位置。由 N 各节点（Node）组成单向链表，每一个 Node 记录本 Node 的数据及下一个 Node。向外暴露的只有一个头节点（Head），<strong>我们对链表的所有操作，都是直接或者间接地通过其头节点来进行的。</strong><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603194076184-195f3044-1083-4244-9eeb-d86c96a37e6f.png#align=left&amp;display=inline&amp;height=98&amp;margin=%5Bobject%20Object%5D&amp;originHeight=98&amp;originWidth=491&amp;size=0&amp;status=done&amp;style=shadow&amp;width=491" alt><br>上图中最左边的节点即为头结点（Head），但是添加节点的顺序是从右向左的，添加的新节点会被作为新节点。最先添加的节点对下一节点的引用可以为空。引用是引用下一个节点而非下一个节点的对象。因为有着不断的引用，所以<strong>头节点就可以操作所有节点</strong>了。<br>下图描述了单向链表存储情况。存储是分散的，每一个节点只要记录下一节点，就把所有数据串了起来，形成了一个单向链表。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603194105521-d31f8e78-7f2a-4c60-8838-57e15707e27b.png#align=left&amp;display=inline&amp;height=219&amp;margin=%5Bobject%20Object%5D&amp;originHeight=219&amp;originWidth=195&amp;size=0&amp;status=done&amp;style=shadow&amp;width=195" alt><br>节点（Node）是由一个需要储存的对象及对下一个节点的引用组成的。也就是说，节点拥有两个成员：储存的对象、对下一个节点的引用。下面图是具体的说明：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603194124335-fc6fc00c-35fb-44e1-a01c-de4b8b5531af.png#align=left&amp;display=inline&amp;height=207&amp;margin=%5Bobject%20Object%5D&amp;originHeight=207&amp;originWidth=370&amp;size=0&amp;status=done&amp;style=shadow&amp;width=370" alt></p><h2 id="关于链表的指向"><a href="#关于链表的指向" class="headerlink" title="关于链表的指向"></a>关于链表的指向</h2><h3 id="何为指向？"><a href="#何为指向？" class="headerlink" title="何为指向？"></a>何为指向？</h3><p>链表的所有操作主要就是理解——<strong>“指向”</strong><br>每个节点的<strong>next</strong>用来存放<strong>下一个节点的“地址”</strong><br><strong>每个节点的自身就是地址</strong>，相当于 C 语言中数组的数组名就是本数组的地址</p><h3 id="谁指向谁？"><a href="#谁指向谁？" class="headerlink" title="谁指向谁？"></a>谁指向谁？</h3><p><strong>根处：目标</strong><br><strong>箭头处：地址仓库</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1599309003706-ad779a14-1678-4d0c-86f2-b147752bd252.png#align=left&amp;display=inline&amp;height=293&amp;margin=%5Bobject%20Object%5D&amp;originHeight=594&amp;originWidth=955&amp;size=0&amp;status=done&amp;style=shadow&amp;width=471" alt><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1599309003751-ffeee4d8-9662-416e-8f46-5cf5edf03114.png#align=left&amp;display=inline&amp;height=363&amp;margin=%5Bobject%20Object%5D&amp;originHeight=725&amp;originWidth=938&amp;size=0&amp;status=done&amp;style=shadow&amp;width=469" alt><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1599309003658-46b3e7db-e6dc-4d13-baea-e7e44075e8bc.png#align=left&amp;display=inline&amp;height=295&amp;margin=%5Bobject%20Object%5D&amp;originHeight=626&amp;originWidth=975&amp;size=0&amp;status=done&amp;style=shadow&amp;width=459" alt></p><h3 id="指向错位？"><a href="#指向错位？" class="headerlink" title="指向错位？"></a>指向错位？</h3><p><strong>第一个元素节点即为 head        </strong></p><h2 id="LinkedList-和-ArrayList-的设计"><a href="#LinkedList-和-ArrayList-的设计" class="headerlink" title="LinkedList 和 ArrayList 的设计"></a>LinkedList 和 ArrayList 的设计</h2><blockquote><p>同时设计 LinkedList 和 ArrayList</p></blockquote><p><strong>LinkedList</strong>不需要构造函数，<strong>ArrayList</strong>需要，后者需要一个容量的初始化。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603191040309-0ed4b536-89c0-449d-85cc-e763afcb73ea.png#align=left&amp;display=inline&amp;height=300&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=600&amp;originWidth=557&amp;size=89515&amp;status=done&amp;style=shadow&amp;width=278.5" alt="image.png"></p><h3 id="接口-List-设计"><a href="#接口-List-设计" class="headerlink" title="接口 List 设计"></a>接口 List 设计</h3><blockquote><p>只用来声明对外接口，不能声明</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wztlink1013.ds.linkedlist;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * fun：实现ArrayList和LinkedList的接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ELEMENT_NOT_FOUND = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 元素的数量[抽象类中实现]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否为空[抽象类中实现]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否包含某个元素[抽象类中实现]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加元素到尾部[抽象类中实现]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(E element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清除所有元素[实现类中实现]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取index位置的元素[实现类中实现]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置index位置的元素[实现类中实现]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 原来的元素ֵ</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在index位置插入一个元素[实现类中实现]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除index位置的元素[实现类中实现]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看元素的索引[实现类中实现]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象类-AbstractList-设计"><a href="#抽象类-AbstractList-设计" class="headerlink" title="抽象类 AbstractList 设计"></a>抽象类 AbstractList 设计</h3><blockquote><p>放 ArrayList 和 LinkedList 的公共代码<br>声明抽象类 abstract，就意味着可以不用全部实现接口 List 里面的所有方法，</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wztlink1013.ds.linkedlist;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * fun：放ArrayList和LinkedList公共代码的抽象类（父类）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 元素的数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否为空</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否包含某个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(element) != ELEMENT_NOT_FOUND;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加元素到尾部</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        add(size, element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下面三个是ArrayList和LinkedList两个实现类中的公共代码</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">outOfBounds</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index:"</span> + index + <span class="string">", Size:"</span> + size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">            outOfBounds(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line">            outOfBounds(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ArrayList-设计"><a href="#ArrayList-设计" class="headerlink" title="ArrayList 设计"></a>ArrayList 设计</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wztlink1013.ds.linkedlist;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *fun：实现动态数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> E[] elements;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> capaticy)</span> </span>&#123;</span><br><span class="line">        capaticy = (capaticy &lt; DEFAULT_CAPACITY) ? DEFAULT_CAPACITY : capaticy;</span><br><span class="line">        elements = (E[]) <span class="keyword">new</span> Object[capaticy];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(DEFAULT_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            elements[i] = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line">        <span class="keyword">return</span> elements[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        E old = elements[index];</span><br><span class="line">        elements[index] = element;</span><br><span class="line">        <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        ensureCapacity(size + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size; i &gt; index; i--) &#123;</span><br><span class="line">            elements[i] = elements[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        elements[index] = element;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        E old = elements[index];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index + <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line">            elements[i - <span class="number">1</span>] = elements[i];</span><br><span class="line">        &#125;</span><br><span class="line">        elements[--size] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;  <span class="comment">// 1</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (elements[i] == <span class="keyword">null</span>) <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (element.equals(elements[i])) <span class="keyword">return</span> i; <span class="comment">// n</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ELEMENT_NOT_FOUND;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保证要有capacity的容量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> capacity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elements.length;</span><br><span class="line">        <span class="keyword">if</span> (oldCapacity &gt;= capacity) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新容量为旧容量的1.5倍</span></span><br><span class="line">        <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        E[] newElements = (E[]) <span class="keyword">new</span> Object[newCapacity];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            newElements[i] = elements[i];</span><br><span class="line">        &#125;</span><br><span class="line">        elements = newElements;</span><br><span class="line"></span><br><span class="line">        System.out.println(oldCapacity + <span class="string">"扩容为"</span> + newCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// size=3, [99, 88, 77]</span></span><br><span class="line">        StringBuilder string = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        string.append(<span class="string">"size="</span>).append(size).append(<span class="string">", ["</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                string.append(<span class="string">", "</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            string.append(elements[i]);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        string.append(<span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">return</span> string.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新添加功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(E element)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (element == elements[i])&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ELEMENT_NOT_FOUND;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LinkedList-设计"><a href="#LinkedList-设计" class="headerlink" title="LinkedList 设计"></a>LinkedList 设计</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wztlink1013.ds.linkedlist;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *fun：链表的实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; first;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; last;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        E element;</span><br><span class="line">        Node&lt;E&gt; prev;</span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E element, Node&lt;E&gt; next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.element = element;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        first = <span class="keyword">null</span>;</span><br><span class="line">        last = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node(index).element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        Node&lt;E&gt; node = node(index);</span><br><span class="line">        E old = node.element;</span><br><span class="line">        node.element = element;</span><br><span class="line">        <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>)&#123;</span><br><span class="line">            first = <span class="keyword">new</span> Node&lt;&gt;(element, first);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; prev = node(index - <span class="number">1</span>);</span><br><span class="line">            prev.next = <span class="keyword">new</span> Node&lt;&gt;(element, prev.next);</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        Node&lt;E&gt; node = first;</span></span><br><span class="line"><span class="comment">//        if (index == 0) &#123;</span></span><br><span class="line"><span class="comment">//            first = first.next;</span></span><br><span class="line"><span class="comment">//        &#125; else &#123;</span></span><br><span class="line"><span class="comment">//            Node&lt;E&gt; prev = node(index -1);</span></span><br><span class="line"><span class="comment">//            node = prev.next;</span></span><br><span class="line"><span class="comment">//            prev.next = node.next;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; node = node(index);</span><br><span class="line">        Node&lt;E&gt; prev = node.prev;</span><br><span class="line">        Node&lt;E&gt; next = node.next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123; <span class="comment">// index == 0</span></span><br><span class="line">            first = next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123; <span class="comment">// index == size - 1</span></span><br><span class="line">            last = prev;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next.prev = prev;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> node.element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Node&lt;E&gt; node = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node.element == <span class="keyword">null</span>) <span class="keyword">return</span> i;</span><br><span class="line"></span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; node = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (element.equals(node.element)) <span class="keyword">return</span> i;</span><br><span class="line"></span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ELEMENT_NOT_FOUND;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取index位置对应的节点对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">            Node&lt;E&gt; node = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; node = last;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--) &#123;</span><br><span class="line">                node = node.prev;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder string = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        string.append(<span class="string">"size="</span>).append(size).append(<span class="string">", ["</span>);</span><br><span class="line">        Node&lt;E&gt; node = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                string.append(<span class="string">", "</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            string.append(node);</span><br><span class="line"></span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        string.append(<span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">return</span> string.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##</p>]]></content>
      
      
      <categories>
          
          <category> DataStructure </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>链表C++设计</title>
      <link href="blog/nlhg88/"/>
      <url>blog/nlhg88/</url>
      
        <content type="html"><![CDATA[<h2 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h2><blockquote><p>一些概念</p></blockquote><ul><li>首元结点：第一个有元素的结点</li><li>头结点：一般不放元素，“L”</li><li>头指针：指向链表的第一个结点，有头结点则为头结点的指针，反之，指向首元结点的指针<blockquote><p>参考资料：<a href="https://www.jianshu.com/p/73d56c3d228c" target="_blank" rel="noopener">https://www.jianshu.com/p/73d56c3d228c</a></p></blockquote></li></ul><h2 id="C-实现"><a href="#C-实现" class="headerlink" title="C++实现"></a>C++实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span></span><br><span class="line">true<span class="keyword">int</span> data; <span class="comment">//结点的数据域</span></span><br><span class="line">true<span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span> <span class="comment">//结点的指针域</span></span><br><span class="line">&#125;LNode, *LinkList; <span class="comment">//LinkList为指向结构体LNode的指针类型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitList_L</span><span class="params">(LinkList &amp;L)</span><span class="comment">//构造一个空的单链表L//结构体指针类型变量做为函数的形式参数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L=<span class="keyword">new</span> LNode;     <span class="comment">//生成新结点作为头结点，用头指针L指向头结点//变量名 = new 类型</span></span><br><span class="line">true<span class="keyword">if</span>(!L)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">//生成结点失败</span></span><br><span class="line">trueL-&gt;next=<span class="literal">NULL</span>;   <span class="comment">//头结点的指针域置空</span></span><br><span class="line">true<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateList_H</span><span class="params">(LinkList &amp;L)</span><span class="comment">//前插法创建单链表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">true<span class="comment">//输入n个元素的值，建立到头结点的单链表L</span></span><br><span class="line">true<span class="keyword">int</span> n;</span><br><span class="line">trueLinkList s; <span class="comment">//定义一个所建立的结构体指针变量</span></span><br><span class="line">trueL=<span class="keyword">new</span> LNode; <span class="comment">//生成新结点作为头结点，用头指针L指向头结点</span></span><br><span class="line">trueL-&gt;next=<span class="literal">NULL</span>; <span class="comment">//先建立一个带头结点的空链表</span></span><br><span class="line">true<span class="built_in">cout</span> &lt;&lt;<span class="string">"请输入元素个数n："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">true<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">true<span class="built_in">cout</span> &lt;&lt;<span class="string">"请依次输入n个元素："</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">true<span class="built_in">cout</span> &lt;&lt;<span class="string">"前插法创建单链表..."</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">true<span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">truetrues=<span class="keyword">new</span> LNode; <span class="comment">//生成新结点s</span></span><br><span class="line">truetrue<span class="built_in">cin</span>&gt;&gt;s-&gt;data; <span class="comment">//输入元素值赋给新结点的数据域</span></span><br><span class="line">truetrues-&gt;next=L-&gt;next;</span><br><span class="line">truetrueL-&gt;next=s; <span class="comment">//将新结点s插入到头结点之后</span></span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateList_R</span><span class="params">(LinkList &amp;L)</span><span class="comment">//尾插法创建单链表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">true<span class="comment">//输入n个元素的值，建立带表头结点的单链表L</span></span><br><span class="line">true<span class="keyword">int</span> n;</span><br><span class="line">trueLinkList s, r;</span><br><span class="line">trueL=<span class="keyword">new</span> LNode;</span><br><span class="line">trueL-&gt;next=<span class="literal">NULL</span>; <span class="comment">//先建立一个带头结点的空链表</span></span><br><span class="line">truer=L; <span class="comment">//尾指针r指向头结点</span></span><br><span class="line">true<span class="built_in">cout</span> &lt;&lt;<span class="string">"请输入元素个数n："</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">true<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">true<span class="built_in">cout</span> &lt;&lt;<span class="string">"请依次输入n个元素："</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">true<span class="built_in">cout</span> &lt;&lt;<span class="string">"尾插法创建单链表..."</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">true<span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">truetrues=<span class="keyword">new</span> LNode;<span class="comment">//生成新结点</span></span><br><span class="line">truetrue<span class="built_in">cin</span>&gt;&gt;s-&gt;data; <span class="comment">//输入元素值赋给新结点的数据域</span></span><br><span class="line">truetrues-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">truetruer-&gt;next=s;<span class="comment">//将新结点s插入尾结点*r之后</span></span><br><span class="line">truetruer=s;<span class="comment">//r指向新的尾结点s</span></span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GetElem_L</span><span class="params">(LinkList L, <span class="keyword">int</span> i, <span class="keyword">int</span> &amp;e)</span><span class="comment">//单链表的取值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">true<span class="comment">//在带头结点的单链表L中查找第i个元素</span></span><br><span class="line">true<span class="comment">//用e记录L中第i个数据元素的值</span></span><br><span class="line">true<span class="keyword">int</span> j;</span><br><span class="line">trueLinkList p;</span><br><span class="line">truep=L-&gt;next;<span class="comment">//p指向首元结点</span></span><br><span class="line">truej=<span class="number">1</span>; <span class="comment">//j为计数器</span></span><br><span class="line">true<span class="keyword">while</span> (j&lt;i &amp;&amp; p) <span class="comment">//顺链域向后扫描，直到p指向第i个元素或p为空</span></span><br><span class="line">    &#123;</span><br><span class="line">truetruep=p-&gt;next; <span class="comment">//p指向下一个结点类似结点的自加</span></span><br><span class="line">truetruej++; <span class="comment">//计数器j相应加1</span></span><br><span class="line">true&#125;</span><br><span class="line">true<span class="keyword">if</span> (!p || j&gt;i)</span><br><span class="line">truetrue<span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//i值不合法i＞n或i&lt;=0</span></span><br><span class="line">truee=p-&gt;data; <span class="comment">//取第i个结点的数据域</span></span><br><span class="line">true<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">LocateElem_L</span><span class="params">(LinkList L, <span class="keyword">int</span> e)</span> <span class="comment">//按值查找</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">true<span class="comment">//在带头结点的单链表L中查找值为e的元素</span></span><br><span class="line">trueLinkList p;</span><br><span class="line">truep=L-&gt;next;</span><br><span class="line">true<span class="keyword">while</span> (p &amp;&amp; p-&gt;data!=e)<span class="comment">//顺链域向后扫描，直到p为空或p所指结点的数据域等于e</span></span><br><span class="line">truetruep=p-&gt;next; <span class="comment">//p指向下一个结点</span></span><br><span class="line">true<span class="keyword">if</span>(!p)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//查找失败p为NULL</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert_L</span><span class="params">(LinkList &amp;L, <span class="keyword">int</span> i, <span class="keyword">int</span> e)</span><span class="comment">//单链表的插入</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">true<span class="comment">//在带头结点的单链表L中第i个位置插入值为e的新结点</span></span><br><span class="line">true<span class="keyword">int</span> j;</span><br><span class="line">trueLinkList p, s;</span><br><span class="line">truep=L;</span><br><span class="line">truej=<span class="number">0</span>;</span><br><span class="line">true<span class="keyword">while</span> (p&amp;&amp;j&lt;i<span class="number">-1</span>) <span class="comment">//查找第i-1个结点，p指向该结点</span></span><br><span class="line">    &#123;</span><br><span class="line">truetruep=p-&gt;next;</span><br><span class="line">truetruej++;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="keyword">if</span> (!p || j&gt;i<span class="number">-1</span>)<span class="comment">//i＞n+1或者i＜1</span></span><br><span class="line">truetrue<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">trues=<span class="keyword">new</span> LNode;     <span class="comment">//生成新结点</span></span><br><span class="line">trues-&gt;data=e;       <span class="comment">//将新结点的数据域置为e</span></span><br><span class="line">trues-&gt;next=p-&gt;next; <span class="comment">//将新结点的指针域指向结点ai</span></span><br><span class="line">truep-&gt;next=s;       <span class="comment">//将结点p的指针域指向结点s</span></span><br><span class="line">true<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDelete_L</span><span class="params">(LinkList &amp;L, <span class="keyword">int</span> i)</span> <span class="comment">//单链表的删除</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">true<span class="comment">//在带头结点的单链表L中，删除第i个位置</span></span><br><span class="line">trueLinkList p, q;</span><br><span class="line">true<span class="keyword">int</span> j;</span><br><span class="line">truep=L;</span><br><span class="line">truej=<span class="number">0</span>;</span><br><span class="line">true<span class="keyword">while</span>((p-&gt;next)&amp;&amp;(j&lt;i<span class="number">-1</span>)) <span class="comment">//查找第i-1个结点，p指向该结点</span></span><br><span class="line">true&#123;</span><br><span class="line">truetruep=p-&gt;next;</span><br><span class="line">truetruej++;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="keyword">if</span> (!(p-&gt;next)||(j&gt;i<span class="number">-1</span>))<span class="comment">//当i&gt;n或i&lt;1时，删除位置不合理</span></span><br><span class="line">truetrue<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">trueq=p-&gt;next;        <span class="comment">//临时保存被删结点的地址以备释放空间</span></span><br><span class="line">truep-&gt;next=q-&gt;next; <span class="comment">//改变删除结点前驱结点的指针域</span></span><br><span class="line">true<span class="keyword">delete</span> q;        <span class="comment">//释放被删除结点的空间</span></span><br><span class="line">true<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Listprint_L</span><span class="params">(LinkList L)</span> <span class="comment">//单链表的输出</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList p;</span><br><span class="line">    p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;p-&gt;data&lt;&lt;<span class="string">"\t"</span>;</span><br><span class="line">truetruep=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">true<span class="keyword">int</span> i,x,e,choose;</span><br><span class="line">trueLinkList L;</span><br><span class="line">true<span class="built_in">cout</span> &lt;&lt; <span class="string">"1. 初始化\n"</span>;</span><br><span class="line">true<span class="built_in">cout</span> &lt;&lt; <span class="string">"2. 创建单链表（前插法）\n"</span>;</span><br><span class="line">true<span class="built_in">cout</span> &lt;&lt; <span class="string">"3. 创建单链表（尾插法）\n"</span>;</span><br><span class="line">true<span class="built_in">cout</span> &lt;&lt; <span class="string">"4. 取值\n"</span>;</span><br><span class="line">true<span class="built_in">cout</span> &lt;&lt; <span class="string">"5. 查找\n"</span>;</span><br><span class="line">true<span class="built_in">cout</span> &lt;&lt; <span class="string">"6. 插入\n"</span>;</span><br><span class="line">true<span class="built_in">cout</span> &lt;&lt; <span class="string">"7. 删除\n"</span>;</span><br><span class="line">true<span class="built_in">cout</span> &lt;&lt; <span class="string">"8. 输出\n"</span>;</span><br><span class="line">true<span class="built_in">cout</span> &lt;&lt; <span class="string">"0. 退出\n"</span>;</span><br><span class="line">truechoose=<span class="number">-1</span>;</span><br><span class="line">true<span class="keyword">while</span> (choose!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">truetrue<span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入数字选择:"</span>;</span><br><span class="line">truetrue<span class="built_in">cin</span>&gt;&gt;choose;</span><br><span class="line">truetrue<span class="keyword">switch</span> (choose)</span><br><span class="line">truetrue&#123;</span><br><span class="line">truetrue<span class="keyword">case</span> <span class="number">1</span>: <span class="comment">//初始化一个空的单链表</span></span><br><span class="line">truetruetrue<span class="keyword">if</span> (InitList_L(L))</span><br><span class="line">truetruetruetrue<span class="built_in">cout</span> &lt;&lt; <span class="string">"初始化一个空的单链表!\n"</span>;</span><br><span class="line">truetruetrue<span class="keyword">break</span>;</span><br><span class="line">truetrue<span class="keyword">case</span> <span class="number">2</span>: <span class="comment">//创建单链表（前插法）</span></span><br><span class="line">truetruetrueCreateList_H(L);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"前插法创建单链表输出结果:\n"</span>;</span><br><span class="line">            Listprint_L(L);</span><br><span class="line">truetruetrue<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>: <span class="comment">//创建单链表（尾插法）</span></span><br><span class="line">truetruetrueCreateList_R(L);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"尾插法创建单链表输出结果:\n"</span>;</span><br><span class="line">            Listprint_L(L);</span><br><span class="line">truetruetrue<span class="keyword">break</span>;</span><br><span class="line">truetrue<span class="keyword">case</span> <span class="number">4</span>: <span class="comment">//单链表的按序号取值</span></span><br><span class="line">truetruetrue<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入一个位置i用来取值:"</span>;</span><br><span class="line">truetruetrue<span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (GetElem_L(L,i,e))</span><br><span class="line">            &#123;</span><br><span class="line">truetruetruetrue<span class="built_in">cout</span> &lt;&lt; <span class="string">"查找成功\n"</span>;</span><br><span class="line">truetruetruetrue<span class="built_in">cout</span> &lt;&lt; <span class="string">"第"</span> &lt;&lt; i &lt;&lt; <span class="string">"个元素是："</span>&lt;&lt;e&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">truetruetrue&#125;</span><br><span class="line">truetruetrue<span class="keyword">else</span></span><br><span class="line">truetruetruetrue<span class="built_in">cout</span> &lt;&lt; <span class="string">"查找失败\n\n"</span>;</span><br><span class="line">truetruetrue<span class="keyword">break</span>;</span><br><span class="line">truetrue<span class="keyword">case</span> <span class="number">5</span>: <span class="comment">//单链表的按值查找</span></span><br><span class="line">truetruetrue<span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入所要查找元素x:"</span>;</span><br><span class="line">truetruetrue<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (LocateElem_L(L,x))</span><br><span class="line">truetruetruetrue<span class="built_in">cout</span> &lt;&lt; <span class="string">"查找成功\n"</span>;</span><br><span class="line">truetruetrue<span class="keyword">else</span></span><br><span class="line">truetruetruetrue<span class="built_in">cout</span> &lt;&lt; <span class="string">"查找失败! "</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">truetruetrue<span class="keyword">break</span>;</span><br><span class="line">truetrue<span class="keyword">case</span> <span class="number">6</span>: <span class="comment">//单链表的插入</span></span><br><span class="line">truetruetrue<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入插入的位置和元素（用空格隔开）:"</span>;</span><br><span class="line">truetruetrue<span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">truetruetrue<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (ListInsert_L(L, i, x))</span><br><span class="line">truetruetruetrue<span class="built_in">cout</span> &lt;&lt; <span class="string">"插入成功.\n\n"</span>;</span><br><span class="line">truetruetrue<span class="keyword">else</span></span><br><span class="line">truetruetruetrue<span class="built_in">cout</span> &lt;&lt; <span class="string">"插入失败!\n\n"</span>;</span><br><span class="line">truetruetrue<span class="keyword">break</span>;</span><br><span class="line">truetrue<span class="keyword">case</span> <span class="number">7</span>: <span class="comment">//单链表的删除</span></span><br><span class="line">truetruetrue<span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入所要删除的元素位置i:"</span>;</span><br><span class="line">truetruetrue<span class="built_in">cin</span>&gt;&gt;i;</span><br><span class="line">truetruetrue<span class="keyword">if</span> (ListDelete_L(L, i))</span><br><span class="line">truetruetruetrue<span class="built_in">cout</span>&lt;&lt;<span class="string">"删除成功!\n"</span>;</span><br><span class="line">truetruetrue<span class="keyword">else</span></span><br><span class="line">truetruetruetrue<span class="built_in">cout</span>&lt;&lt;<span class="string">"删除失败!\n"</span>;</span><br><span class="line">truetruetrue<span class="keyword">break</span>;</span><br><span class="line">truetrue<span class="keyword">case</span> <span class="number">8</span>: <span class="comment">//单链表的输出</span></span><br><span class="line">truetruetrue<span class="built_in">cout</span> &lt;&lt; <span class="string">"当前单链表的数据元素分别为:\n"</span>;</span><br><span class="line">truetruetrueListprint_L(L);</span><br><span class="line">truetruetrue<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">truetruetrue<span class="keyword">break</span>;</span><br><span class="line">truetrue&#125;</span><br><span class="line">true&#125;</span><br><span class="line">truesystem(<span class="string">"pause"</span>);</span><br><span class="line">true<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DataStructure </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>task_01_课程介绍及考核方式</title>
      <link href="blog/mirmuq/"/>
      <url>blog/mirmuq/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机网络自主学习任务学习单"><a href="#计算机网络自主学习任务学习单" class="headerlink" title="计算机网络自主学习任务学习单"></a>计算机网络自主学习任务学习单</h2><p>2020 年 9 月 2 日</p><p>| 课程介绍 | 1.   计算机网络课程介绍及考核方式。<br>  |<br>| — | — |<br>| 教学目标 | 了解互联网的发展历史。<br>  |<br>| 学习内容 |<br>课下自主网上搜索观看纪录片《互联网时代》第 1 集《时代》（50 分钟）<br>【简介】从冷战这个偶然的历史背景展开，本集描述互联网技术的诞生过程，它如何在技术、社会、文化、制度等多重因素作用下，逐步发展为连接起每个人的互联网。同时，回望人类历史长河中科学技术带给人类社会发展的巨大推动，比照农耕时代、工业时代和互联网创造的社会变革，理解互联网技术正开创人类一个全新的时代。</p><p>问题思考：</p><ol><li>互联网的产生背景（需求分析）</li><li>网络联接的意义分析（异构主机、异构网络、异构系统）</li><li>了解互联网发展阶段性代表技术（机–机联接、人-人联接、人-机联接）<br>(1)分布式网络思想-分组交换网络技术<br>（2）统一虚拟的网络空间—基于 TCP/IP 协议的-异构网络互联技术<br>（3）统一虚拟的应用空间–基于 HTTP 协议的的异构操作系统互访技术</li><li>基本概念：<br>(1)ARPAnet<br>(2)路由器<br>(3)TCP/IP<br>(4)分组交换网络<br>(5)HTTP、 WWW、 HTML 5. 互联网历史文化(主要贡献者) ：<br>罗伯特.泰勒<br>拉里-罗伯茨<br>罗伯特-卡恩/温顿-瑟夫<br>蒂姆-伯纳斯-李<br>|<br>| 课堂讨论 | 互联网为什么没有采用中心节点网络，而是实施了分布交换网络？<br>|<br>| 课下作业 | 你认为如何学习计算机网络？<br>|</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>🧙‍♂️算法分析与设计</title>
      <link href="blog/eq2l1v/"/>
      <url>blog/eq2l1v/</url>
      
        <content type="html"><![CDATA[<h2 id="形式化定义"><a href="#形式化定义" class="headerlink" title="形式化定义"></a>形式化定义</h2><p>对于一个问题，将其进行科学的分析研究，就需要对其进行更加严谨的形式化定义，其形式就类似于数学建模过程中的构建出<strong>数学模型</strong>一样，对其进行问题的抽象化提取，以及合理的公式化，就比如“0-1 背包”问题中：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1600597354257-45eba2b3-641c-433a-8732-9b6c11a16061.png#align=left&amp;display=inline&amp;height=281&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=561&amp;originWidth=1065&amp;size=184609&amp;status=done&amp;style=shadow&amp;width=532.5" alt="image.png"></p><h2 id="判定性问题"><a href="#判定性问题" class="headerlink" title="判定性问题"></a>判定性问题</h2><p>类似于数学建模当中<strong>模型的求解</strong>，在给定模型以及约束条件的情况下求出符合该约束条件下的模型解：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1600597489691-e0d838af-003e-404e-8a40-5145d2fefbad.png#align=left&amp;display=inline&amp;height=108&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=216&amp;originWidth=969&amp;size=73465&amp;status=done&amp;style=shadow&amp;width=484.5" alt="image.png"></p><h2 id="eg：Euclid-GCD-问题"><a href="#eg：Euclid-GCD-问题" class="headerlink" title="eg：Euclid-GCD 问题"></a>eg：Euclid-GCD 问题</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>将每个整数分解为素因子的积，找出公共的素因子，它们的积即是 GCD</p><h3 id="问题思路"><a href="#问题思路" class="headerlink" title="问题思路"></a>问题思路</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1599360897754-ab7b7684-5565-471b-aece-1725b39196bb.png#align=left&amp;display=inline&amp;height=296&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=848&amp;originWidth=1131&amp;size=231186&amp;status=done&amp;style=shadow&amp;width=395" alt="image.png"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wztlink1013.al.EuclidGCD;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"请输入两个大于零的自然数："</span>);</span><br><span class="line">        <span class="keyword">int</span> a = input.nextInt();</span><br><span class="line">        <span class="keyword">int</span> b = input.nextInt();</span><br><span class="line">        GCD(a,b);</span><br><span class="line">        System.out.println(a + <span class="string">"和"</span> + b + <span class="string">"两个数的GCD值为："</span> + GCD(a,b));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">GCD</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> r;</span><br><span class="line">        <span class="keyword">while</span> (j != <span class="number">0</span>)&#123;</span><br><span class="line">            r = i%j;</span><br><span class="line">            i = j;</span><br><span class="line">            j = r;</span><br><span class="line">            System.out.println(<span class="string">"a="</span>+i+<span class="string">"；b="</span>+j+<span class="string">"；r="</span>+r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Bert-自然语言处理</title>
      <link href="blog/mssoff/"/>
      <url>blog/mssoff/</url>
      
        <content type="html"><![CDATA[<h2 id="why？"><a href="#why？" class="headerlink" title="why？"></a>why？</h2><blockquote><p>BERT 可以用来干什么？</p></blockquote><p>处理这种非结构化的数据以及之前学习到的情感分析</p><p>BERT 可以用于问答系统，情感分析，垃圾邮件过滤，命名实体识别，文档聚类等任务中，作为这些任务的基础设施即语言模型，</p><h2 id="what？"><a href="#what？" class="headerlink" title="what？"></a>what？</h2><p>是一个自然语言处理模型<br>提出了“训练词向量”概念，这是独特之处</p><p><strong>BERT 利用了 Transformer 的 encoder 部分。</strong><br><strong>BERT 的创新点在于它将双向 Transformer 用于语言模型，</strong><br>之前的模型是从左向右输入一个文本序列，或者将 left-to-right 和 right-to-left 的训练结合起来。实验的结果表明，双向训练的语言模型对语境的理解会比单向的语言模型更深刻，Transformer 是一种注意力机制，可以学习文本中单词之间的上下文关系的。Transformer 的原型包括两个独立的机制，一个 encoder 负责接收文本作为输入，一个 decoder 负责预测任务的结果。BERT 的目标是生成语言模型，所以只需要 encoder 机制。Transformer 的 encoder 是一次性读取整个文本序列，而不是从左到右或从右到左地按顺序读取，这个特征使得模型能够基于单词的两侧学习，相当于是一个双向的功能。 Transformer 的 encoder 部分，输入是一个 token 序列，先对其进行 embedding 称为向量，然后输入给神经网络，输出是大小为 H 的向量序列，每个向量对应着具有相同索引的 token。当我们在训练语言模型时，有一个挑战就是要定义一个预测目标，很多模型在一个序列中预测下一个单词，“The child came home from ___”双向的方法在这样的任务中是有限制的，为了克服这个问题，BERT 使用两个策略:</p><h3 id="Masked-LM-MLM"><a href="#Masked-LM-MLM" class="headerlink" title="Masked LM (MLM)"></a>Masked LM (MLM)</h3><p>论文中介绍了一种新技术叫做 Masked LM（MLM），在这个技术出现之前是无法进行双向语言模型训练的。在将单词序列输入给 BERT 之前，每个序列中有 15％ 的单词被 [MASK] token 替换。 然后模型尝试基于序列中其他未被 mask 的单词的上下文来预测被掩盖的原单词。</p><p>这样就需要：</p><ul><li>[x] 在 encoder 的输出上添加一个分类层</li><li>[x] 用嵌入矩阵乘以输出向量，将其转换为词汇的维度</li><li>[x] 用 softmax 计算词汇表中每个单词的概率</li></ul><p>BERT 的损失函数只考虑了 mask 的预测值，忽略了没有掩蔽的字的预测。这样的话，模型要比单向模型收敛得慢，不过结果的情境意识增加了。</p><p><strong>eg：my dog is hairy</strong></p><ul><li>有 80%的概率用“[mask]”标记来替换——my dog is [MASK]</li><li>有 10%的概率用随机采样的一个单词来替换——my dog is apple</li><li>有 10%的概率不做替换——my dog is hairy</li></ul><h3 id="Next-Sentence-Prediction-NSP"><a href="#Next-Sentence-Prediction-NSP" class="headerlink" title="Next Sentence Prediction (NSP)"></a>Next Sentence Prediction (NSP)</h3><p>在 BERT 的训练过程中，模型接收成对的句子作为输入，并且预测其中第二个句子是否在原始文档中也是后续句子。在训练期间，50％ 的输入对在原始文档中是前后关系，另外 50％ 中是从语料库中随机组成的，并且是与第一句断开的。为了帮助模型区分开训练中的两个句子，输入在进入模型之前要按以下方式进行处理：</p><ul><li>[x] 在第一个句子的开头插入 [CLS] 标记，在每个句子的末尾插入 [SEP] 标记。</li><li>[x] 将表示句子 A 或句子 B 的一个句子 embedding 添加到每个 token 上。</li><li>[x] 给每个 token 添加一个位置 embedding，来表示它在序列中的位置。</li><li>[x] 为了预测第二个句子是否是第一个句子的后续句子，用下面几个步骤来预测：</li><li>[x] 整个输入序列输入给 Transformer 模型</li><li>[x] 用一个简单的分类层将 [CLS] 标记的输出变换为 2×1 形状的向量</li><li>[x] 用 softmax 计算 IsNextSequence 的概率</li></ul><p>在训练 BERT 模型时，Masked LM 和 Next Sentence Prediction 是一起训练的，目标就是要最小化两种策略的组合损失函数。</p><h2 id="how？"><a href="#how？" class="headerlink" title="how？"></a>how？</h2><p>BERT 可以用于各种 NLP 任务，只需在核心模型中添加一个层.<br>例如：</p><ul><li>[x] 在分类任务中，例如情感分析等，只需要在 Transformer 的输出之上加一个分类层</li><li>[x] 在问答任务（例如 SQUAD v1.1）中，问答系统需要接收有关文本序列的 question，并且需要在序列中标记 answer。 可以使用 BERT 学习两个标记 answer 开始和结尾的向量来训练 Q＆A 模型。</li><li>[x] 在命名实体识别（NER）中，系统需要接收文本序列，标记文本中的各种类型的实体（人员，组织，日期等）。 可以用 BERT 将每个 token 的输出向量送到预测 NER 标签的分类层。</li></ul>]]></content>
      
      
      <categories>
          
          <category> MachingLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bert </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>银行家算法（C++实现）</title>
      <link href="blog/kc645t/"/>
      <url>blog/kc645t/</url>
      
        <content type="html"><![CDATA[<h2 id="一、银行家算法"><a href="#一、银行家算法" class="headerlink" title="一、银行家算法"></a>一、银行家算法</h2><p>课本伪代码的实现，避免死锁</p><h2 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">//定义全局变量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> x=<span class="number">50</span>,y=<span class="number">50</span>; <span class="comment">//x为进程个数 y为资源种类数</span></span><br><span class="line"><span class="keyword">int</span> Available[y]; <span class="comment">//各资源可利用的数量</span></span><br><span class="line"><span class="keyword">int</span> Allocation[x][y]; <span class="comment">//各进程当前已分配的资源数量</span></span><br><span class="line"><span class="keyword">int</span> Max[x][y]; <span class="comment">//各进程对各类资源的最大需求数</span></span><br><span class="line"><span class="keyword">int</span> Need[x][y]; <span class="comment">//尚需多少资源</span></span><br><span class="line"><span class="keyword">int</span> Request[y]; <span class="comment">//申请多少资源</span></span><br><span class="line"><span class="keyword">int</span> Work[y]; <span class="comment">//工作向量，表示系统可提供给进程继续运行所需的各类资源数量</span></span><br><span class="line"><span class="keyword">int</span> Finish[x]; <span class="comment">//表示系统是否有足够的资源分配给进程，1为是</span></span><br><span class="line"><span class="keyword">int</span> p[x]; <span class="comment">//存储安全序列</span></span><br><span class="line"><span class="keyword">int</span> i,j; <span class="comment">//i表示进程，j表示资源</span></span><br><span class="line"><span class="keyword">int</span> n,m; <span class="comment">//n为进程i的数量,m为资源j种类数</span></span><br><span class="line"><span class="keyword">int</span> l=<span class="number">0</span>; <span class="comment">//l用来记录有几个进程是Finish[i]=1的，当l=n是说明系统状态是安全的</span></span><br><span class="line"><span class="keyword">int</span> counter=<span class="number">0</span>; <span class="comment">//记数器,记录可执行的进程数</span></span><br><span class="line"><span class="comment">//函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">chushihua</span><span class="params">()</span></span>; <span class="comment">//初始化函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">safe</span><span class="params">()</span></span>; <span class="comment">//安全性算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>; <span class="comment">//函数show,输出当前状态</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bank</span><span class="params">()</span></span>; <span class="comment">//银行家算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jieshu</span><span class="params">()</span></span>; <span class="comment">//结束函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">chushihua</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"输入进程的数量: "</span>;<span class="comment">//从此开始输入有关数据</span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"输入资源种类数: "</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"输入各种资源当前可用的数量( "</span>&lt;&lt;m&lt;&lt;<span class="string">" 种): "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;m; j++)<span class="comment">//m为资源数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"输入资源 "</span>&lt;&lt;j&lt;&lt;<span class="string">" 可利用的数量Available["</span>&lt;&lt;j&lt;&lt;<span class="string">"]: "</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;Available[j]; <span class="comment">//输入数字的过程</span></span><br><span class="line">Work[j]=Available[j]; <span class="comment">//初始化Work[j]，它的初始值就是当前可用的资源数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"输入各进程当前已分配的资源数量Allocation["</span>&lt;&lt;n&lt;&lt;<span class="string">"]["</span>&lt;&lt;m&lt;&lt;<span class="string">"]: "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; i++) <span class="comment">//n为进程数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;m; j++)<span class="comment">//m为资源数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">" 输入进程 "</span>&lt;&lt;i&lt;&lt;<span class="string">" 当前已分配的资源 "</span>&lt;&lt;j&lt;&lt;<span class="string">" 数量: "</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;Allocation[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">Finish[i]=<span class="number">0</span>;<span class="comment">//初始化Finish[i]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"输入各进程对各类资源的最大需求Max["</span>&lt;&lt;n&lt;&lt;<span class="string">"]["</span>&lt;&lt;m&lt;&lt;<span class="string">"]: "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; i++)<span class="comment">//n为进程数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;m; j++)<span class="comment">//m为资源数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">" 输入进程 "</span>&lt;&lt;i&lt;&lt;<span class="string">" 对资源 "</span>&lt;&lt;j&lt;&lt;<span class="string">" 的最大需求数: "</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;Max[i][j];</span><br><span class="line"><span class="keyword">if</span>(Max[i][j]&gt;=Allocation[i][j]) <span class="comment">//若最大需求大于已分配，则计算需求量</span></span><br><span class="line">Need[i][j] = Max[i][j]-Allocation[i][j];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">Need[i][j]=<span class="number">0</span>;<span class="comment">//Max小于已分配的时候，此类资源已足够不需再申请</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"初始化完成"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//安全性算法函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">safe</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">l=<span class="number">0</span>;<span class="comment">//l用来记录有几个进程是Finish[i]=1的，当l=n是说明系统状态是安全的</span></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n;i++)<span class="comment">//n为进程数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Finish[i]==<span class="number">0</span>)</span><br><span class="line">&#123; <span class="comment">//逐个查找Finish[i]==0的进程 条件一</span></span><br><span class="line">counter=<span class="number">0</span>; <span class="comment">//记数器,记录有多少个进程已经执行</span></span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;m; j++)<span class="comment">//m为资源数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Work[j]&gt;=Need[i][j])</span><br><span class="line">counter=counter+<span class="number">1</span>;<span class="comment">//可用大于需求，记数，该进程可以执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(counter==m) <span class="comment">//i进程的每类资源都符合Work[j]&gt;=Need[i][j] 条件二</span></span><br><span class="line">&#123;</span><br><span class="line">p[l]=i; <span class="comment">//存储安全序列</span></span><br><span class="line">Finish[i]=<span class="number">1</span>; <span class="comment">//i进程标志为可分配</span></span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;m;j++)</span><br><span class="line">Work[j]=Work[j]+Allocation[i][j]; <span class="comment">//释放资源</span></span><br><span class="line">l=l+<span class="number">1</span>; <span class="comment">//记数,现在有l个进程是安全的，当l=n时说明满足安全序列</span></span><br><span class="line">i= <span class="number">-1</span>; <span class="comment">//从第一个进程开始继续寻找满足条件一二的进程</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示当前状态函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> <span class="comment">//函数show,输出当前资源分配情况</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j; <span class="comment">//局部变量，i表示进程，j表示资源</span></span><br><span class="line"><span class="keyword">int</span> All[y]; <span class="comment">//各种资源的总数量</span></span><br><span class="line"><span class="keyword">int</span> L1; <span class="comment">//局部变量L1</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"当前的状态为："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"各种资源的总数量:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;m;j++)<span class="comment">//m为资源数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">" 资源"</span>&lt;&lt;j&lt;&lt;<span class="string">": "</span>;</span><br><span class="line">All[j]=Available[j]; <span class="comment">//总数量=可用的+已分配的</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) <span class="comment">//n为进程数</span></span><br><span class="line">All[j]+=Allocation[i][j];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;All[j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"当前各种资源可用的量为(available):"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;j++)<span class="comment">//m为资源数</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">" 资源"</span>&lt;&lt;j&lt;&lt;<span class="string">": "</span>&lt;&lt;Available[j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"各进程所需的最大资源量(Max): "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)<span class="comment">//m为资源数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">" 资源"</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(L1=<span class="number">0</span>;L1&lt;n;L1++)<span class="comment">//n为进程数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"进程"</span>&lt;&lt;L1&lt;&lt;<span class="string">": "</span>;</span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;Max[L1][j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"各进程已经得到的资源量(allocation): "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)<span class="comment">//m为资源数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">" 资源"</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(L1=<span class="number">0</span>;L1&lt;n;L1++)<span class="comment">//n为进程数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"进程"</span>&lt;&lt;L1&lt;&lt;<span class="string">": "</span>;</span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;Allocation[L1][j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"各进程还需要的资源量(need):"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)<span class="comment">//m为资源数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">" 资源"</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(L1=<span class="number">0</span>;L1&lt;n;L1++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"进程"</span>&lt;&lt;L1&lt;&lt;<span class="string">": "</span>;</span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;Need[L1][j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//银行家算法函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bank</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"进程申请分配资源："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">0</span>; <span class="comment">//用于输入进程编号</span></span><br><span class="line"><span class="keyword">bool</span> r=<span class="literal">false</span>; <span class="comment">// 初值为假，输入Y继续申请则置为真</span></span><br><span class="line"><span class="keyword">do</span>&#123;<span class="comment">//输入请求</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"输入申请资源的进程(0-"</span>&lt;&lt;n<span class="number">-1</span>&lt;&lt;<span class="string">"): "</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;k;<span class="comment">//进程编号</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">while</span>(k&gt;n<span class="number">-1</span>) <span class="comment">//输入错误处理</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"无该进程号，重新输入："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"输入申请资源的进程(0--"</span>&lt;&lt;n<span class="number">-1</span>&lt;&lt;<span class="string">"): "</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;k;<span class="comment">//进程编号</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"输入该进程申请各类资源的数量: "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;m; j++)<span class="comment">//m为资源数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span>&#123; <span class="comment">//do……while 循环判断申请输入的情况</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"进程 "</span>&lt;&lt;k&lt;&lt;<span class="string">" 申请资源["</span>&lt;&lt;j&lt;&lt;<span class="string">"]的数量:"</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;Request[j];<span class="comment">//输入请求进程数</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span>(Request[j]&gt;Need[k][j])&#123; <span class="comment">//申请大于需求量时出错，提示重新输入 cout&lt;&lt;"申请量大于需要量!"&lt;&lt;endl;</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"申请的资源"</span>&lt;&lt;j&lt;&lt;<span class="string">"的数量为"</span>&lt;&lt;Request[j]&lt;&lt;<span class="string">",大于进程"</span>&lt;&lt;k&lt;&lt;<span class="string">"对该资源需求量"</span>&lt;&lt;Need[k][j]&lt;&lt;<span class="string">"。"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"重新输入!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先判断是否申请大于需求量，再判断是否申请大于可利用量</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Request[j]&gt;Available[j])&#123; <span class="comment">//申请大于可利用量， 应该阻塞等待</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"\n没有那么多资源，目前可利用资源"</span>&lt;&lt;j&lt;&lt;<span class="string">"数量为"</span>&lt;&lt;Available[j]&lt;&lt;<span class="string">",本次申请不成功，进程等待!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">Finish[k]=<span class="number">0</span>; <span class="comment">//该进程等待</span></span><br><span class="line"><span class="keyword">goto</span> error; <span class="comment">//goto语句跳转，结束本次申请</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">while</span>(Request[j]&gt;Need[k][j]); <span class="comment">//Request[j]&gt;Available[j]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//改变Available、Allocation、Need的值</span></span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;m; j++) &#123;<span class="comment">//m为资源数</span></span><br><span class="line">Available[j] = Available[j]-Request[j];<span class="comment">//可用的资源数=可用的资源数-请求分配的资源数</span></span><br><span class="line">Allocation[k][j] = Allocation[k][j]+Request[j];<span class="comment">//已分配的资源数=已分配的资源数+请求的资源数</span></span><br><span class="line">Need[k][j] = Need[k][j]-Request[j];<span class="comment">//还需要的资源数=还需要的资源数-请求的资源数</span></span><br><span class="line">Work[j] = Available[j];</span><br><span class="line">&#125;</span><br><span class="line">safe(); <span class="comment">//调用安全性算法函数，判断当前状态的安全性</span></span><br><span class="line"><span class="keyword">if</span> (l&lt;n)<span class="comment">//l用来记录有几个进程是Finish[i]=1的，当l=n是说明系统状态是安全的</span></span><br><span class="line">&#123;</span><br><span class="line">l=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"\n试分配后,状态不安全,所以不予分配!恢复原状态"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//恢复数据</span></span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;m; j++)<span class="comment">//m为资源数</span></span><br><span class="line">&#123;</span><br><span class="line">Available[j] = Available[j]+Request[j];</span><br><span class="line">Allocation[k][j] = Allocation[k][j]-Request[j];</span><br><span class="line">Need[k][j] = Need[k][j]+Request[j];</span><br><span class="line">Work[j] = Available[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; i++)<span class="comment">//n为进程数</span></span><br><span class="line">Finish[i]=<span class="number">0</span>; <span class="comment">//进程均置为未分配状态</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//l=n，即所有的Finish[i]=1,每一个进程均能执行</span></span><br><span class="line">&#123;</span><br><span class="line">l=<span class="number">0</span>;<span class="comment">//判断标志</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"\n申请资源成功!!!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;j++)<span class="comment">//m为资源数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(Need[k][j]==<span class="number">0</span>);</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">//有一种资源还没全部申请到，则该进程不可执行，不能释放拥有的资源</span></span><br><span class="line">l=<span class="number">1</span>; <span class="comment">//置l为1，作为判断标志</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(l!=<span class="number">1</span>)&#123; <span class="comment">//进程可以执行，则释放该进程的所有资源</span></span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;m;j++)&#123;<span class="comment">//m为资源数</span></span><br><span class="line">Available[j]=Available[j]+Allocation[k][j];</span><br><span class="line">Allocation[k][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"该进程已得到所有需求资源，执行后将释放其所有拥有资源！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">l=<span class="number">0</span>; <span class="comment">//归零</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"\n安全的状态!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"安全序列为: "</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"进程"</span>&lt;&lt;<span class="string">"("</span>&lt;&lt;p[<span class="number">0</span>]&lt;&lt;<span class="string">")"</span>; <span class="comment">//输出安全序列，考虑显示格式，先输出第一个</span></span><br><span class="line">Finish[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;n; i++)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"==&gt;&gt;"</span>&lt;&lt;<span class="string">"进程"</span>&lt;&lt;<span class="string">"("</span>&lt;&lt;p[i]&lt;&lt;<span class="string">")"</span>;</span><br><span class="line">Finish[i]=<span class="number">0</span>; <span class="comment">//所有进程置为未分配状态</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">show(); <span class="comment">//显示当前状态</span></span><br><span class="line">error: <span class="comment">//申请大于可利用量， 应该阻塞等待,结束本次资源申请，GOTO 语句跳转至此</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"是否继续申请资源(y/n)或（Y/N）?"</span>;</span><br><span class="line"><span class="keyword">char</span>* b=<span class="keyword">new</span> <span class="keyword">char</span>; <span class="comment">//输入y/n，判断是否继续申请 &lt;&lt;endl</span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;b;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"-------------------------------------------"</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span>(*b==<span class="string">'y'</span>||*b==<span class="string">'Y'</span>)</span><br><span class="line">r=<span class="literal">true</span>;<span class="comment">//继续申请</span></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">r=<span class="literal">false</span>; <span class="comment">//不继续申请</span></span><br><span class="line">jieshu(); <span class="comment">//调用结束函数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (r==<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结束函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jieshu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"\t\t 演示计算完毕"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"\t\t\t\t模拟银行家算法"</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">chushihua(); <span class="comment">//初始化函数调用</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">show(); <span class="comment">//输出当前状态</span></span><br><span class="line">safe(); <span class="comment">//判断当前状态的安全性</span></span><br><span class="line"><span class="keyword">if</span> (l&lt;n) <span class="comment">//l在safe中是用来记录安全的进程的个数的</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"\n当前状态不安全，拒绝申请！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> i; <span class="comment">//局部变量</span></span><br><span class="line">l=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"\n当前的状态是安全的!安全序列为:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"进程"</span>&lt;&lt;<span class="string">"("</span>&lt;&lt;p[<span class="number">0</span>]&lt;&lt;<span class="string">")"</span>; <span class="comment">//输出安全序列</span></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;n; i++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"-&gt;&gt;"</span>&lt;&lt;<span class="string">"进程"</span>&lt;&lt;<span class="string">"("</span>&lt;&lt;p[i]&lt;&lt;<span class="string">")"</span>;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">Finish[i]=<span class="number">0</span>; <span class="comment">//所有进程置为未分配状态</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">bank(); <span class="comment">//调用银行家算法函数</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"\t\t 演示计算完毕"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JAVA-泛型</title>
      <link href="blog/ef1q5c/"/>
      <url>blog/ef1q5c/</url>
      
        <content type="html"><![CDATA[<p>###</p><p>TODO: 有时候尖括号中有 E，有时候没有，查清楚</p><p>##</p>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GitHub Actions代码汇总</title>
      <link href="blog/uwpbn0/"/>
      <url>blog/uwpbn0/</url>
      
        <content type="html"><![CDATA[<h2 id="website-source"><a href="#website-source" class="headerlink" title="website-source"></a>website-source</h2><blockquote><p><del>目的：做好 StackEdit 的文件备份工作，将 master 分支下的写文章的文件夹备份到该分支写的 backup 备份文件夹里面。</del></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name: CI</span><br><span class="line">on: [watch]</span><br><span class="line"><span class="built_in">jobs</span>:</span><br><span class="line">  build:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">    - uses: actions/checkout@v2</span><br><span class="line">    - name: 配置Git</span><br><span class="line">      run: |</span><br><span class="line">        git config --global user.name <span class="string">'wztlink1013'</span></span><br><span class="line">        git config --global user.email <span class="string">'2550374815@qq.com'</span></span><br><span class="line">    - name: 在云端进行复制文件夹操作</span><br><span class="line">      env:</span><br><span class="line">        Github_Token: <span class="variable">$&#123;&#123; secrets.TOKEN_GITHUBAPI &#125;</span>&#125;</span><br><span class="line">      run: |</span><br><span class="line">        git <span class="built_in">clone</span> https://<span class="variable">$&#123;Github_Token&#125;</span>@github.com/wztlink1013/website-source website-source</span><br><span class="line">        <span class="built_in">cd</span> website-source</span><br><span class="line">        cp -r ./Secret文集/ ./backup/</span><br><span class="line">        git status</span><br><span class="line">        git add .</span><br><span class="line">        git commit -m <span class="string">"backup"</span></span><br><span class="line">        git push --force --quiet <span class="string">"https://<span class="variable">$&#123;Github_Token&#125;</span>@github.com/wztlink1013/website-source"</span>  master:master</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GitHub-CICD不同文件夹迁移</title>
      <link href="blog/qp5kuu/"/>
      <url>blog/qp5kuu/</url>
      
        <content type="html"><![CDATA[<h2 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h2><ul><li>仓库一：wztlink1013.github.io【master】</li><li>仓库二：test【gh-pages】</li></ul><p>将 test 仓库下 gh-pages 分支下的所有文件复制到文件夹 test，将 wztlink1013.github.io 仓库下 clone 到文件夹 wztlink1013.github.io 中，进入 wztlink1013.github.io 文件夹，然后通过命令将 test 文件夹复制到 wztlink1013 文件夹中，最后 push 到 wztlink1013.github.io 仓库中。</p><h2 id="二、编写脚本"><a href="#二、编写脚本" class="headerlink" title="二、编写脚本"></a>二、编写脚本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">'wztlink1013'</span></span><br><span class="line">git config --global user.email <span class="string">'2550374815@qq.com'</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/wztlink1013/test.git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/wztlink1013/wztlink1013.github.io.git</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd wztlink1013.github.io</span><br><span class="line">mkdir test</span><br><span class="line">cd ..</span><br><span class="line">xcopy .\test .\wztlink1013.github.io /e</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> wztlink1013.github.io</span><br><span class="line">git status</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"add gh-pages files"</span></span><br><span class="line">git push <span class="string">"https://<span class="variable">$&#123;Github_Token&#125;</span>@github.com/wztlink1013/wztlink1013.github.io"</span>  master:master</span><br></pre></td></tr></table></figure><h2 id="三、编写-GitHub-Actions"><a href="#三、编写-GitHub-Actions" class="headerlink" title="三、编写 GitHub Actions"></a>三、编写 GitHub Actions</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">CI</span> <span class="string">for</span> <span class="string">wztlink1013.github.io</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> <span class="string">[push,</span> <span class="string">watch]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">配置Git</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">'wztlink1013'</span> </span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">'2550374815@qq.com'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">在云端进行复制文件夹操作</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">Github_Token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.TOKEN_GITHUBAPI</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/wztlink1013/visualization</span> <span class="string">visualization</span></span><br><span class="line">          <span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/wztlink1013/wztlink1013.github.io</span> <span class="string">.github_pages</span></span><br><span class="line">          <span class="string">cd</span> <span class="string">visualization</span></span><br><span class="line">          <span class="string">rm</span> <span class="string">-r</span> <span class="string">.git</span></span><br><span class="line">          <span class="string">rm</span> <span class="string">-r</span> <span class="string">.github</span></span><br><span class="line">          <span class="string">cd</span> <span class="string">..</span></span><br><span class="line">          <span class="string">cd</span> <span class="string">.github_pages</span></span><br><span class="line">          <span class="string">rm</span> <span class="string">-r</span> <span class="string">visualization</span></span><br><span class="line">          <span class="string">cd</span> <span class="string">..</span></span><br><span class="line">          <span class="string">mv</span> <span class="string">visualization/</span> <span class="string">-f</span> <span class="string">.github_pages/</span></span><br><span class="line">          <span class="string">cd</span> <span class="string">.github_pages</span></span><br><span class="line">          <span class="string">git</span> <span class="string">status</span></span><br><span class="line">          <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">          <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">"add gh-pages files"</span></span><br><span class="line">          <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">"https://$&#123;Github_Token&#125;@github.com/wztlink1013/wztlink1013.github.io"</span>  <span class="string">master:master</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Environment </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>动态数组</title>
      <link href="blog/bx5ouf/"/>
      <url>blog/bx5ouf/</url>
      
        <content type="html"><![CDATA[<h2 id="动态数组设计"><a href="#动态数组设计" class="headerlink" title="动态数组设计"></a>动态数组设计</h2><h3 id="private-设计"><a href="#private-设计" class="headerlink" title="private 设计"></a>private 设计</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 元素的数量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"><span class="comment">// 所有的元素</span></span><br><span class="line"><span class="keyword">private</span> E[] elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ELEMENT_NOT_FOUND = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保证要有capacity的容量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> capacity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elements.length;</span><br><span class="line">    <span class="keyword">if</span> (oldCapacity &gt;= capacity) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新容量为旧容量的1.5倍</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    E[] newElements = (E[]) <span class="keyword">new</span> Object[newCapacity];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        newElements[i] = elements[i];</span><br><span class="line">    &#125;</span><br><span class="line">    elements = newElements;</span><br><span class="line"></span><br><span class="line">    System.out.println(oldCapacity + <span class="string">"扩容为"</span> + newCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">outOfBounds</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index:"</span> + index + <span class="string">", Size:"</span> + size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">        outOfBounds(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line">        outOfBounds(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造函数设计"><a href="#构造函数设计" class="headerlink" title="构造函数设计"></a>构造函数设计</h3><p>在 new 一个对象之后，给定空间大小，抑或是扩容</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> capaticy)</span> </span>&#123;</span><br><span class="line">    capaticy = (capaticy &lt; DEFAULT_CAPACITY) ? DEFAULT_CAPACITY : capaticy;</span><br><span class="line">    elements = (E[]) <span class="keyword">new</span> Object[capaticy];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(DEFAULT_CAPACITY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对外接口"><a href="#对外接口" class="headerlink" title="对外接口"></a>对外接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>; <span class="comment">// 返回动态数组元素个数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>; <span class="comment">// 是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E element)</span></span>; <span class="comment">// 是否包含某个元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E element)</span></span>; <span class="comment">// 在数组尾部添加元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>; <span class="comment">// 返回index位置对应的元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span>; <span class="comment">// 设置/更换index位置上的值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span> <span class="params">(<span class="keyword">int</span> index, E element)</span></span>; <span class="comment">// 在index位置上添加元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>; <span class="comment">// 移除index位置上的值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span></span>; <span class="comment">// 查看元素的位置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>; <span class="comment">// 清空动态数组所有元素</span></span><br></pre></td></tr></table></figure><h3 id="重写输出"><a href="#重写输出" class="headerlink" title="重写输出"></a>重写输出</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// size=3, [99, 88, 77]</span></span><br><span class="line">    StringBuilder string = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    string.append(<span class="string">"size="</span>).append(size).append(<span class="string">", ["</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">            string.append(<span class="string">", "</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        string.append(elements[i]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//if (i != size - 1) &#123;</span></span><br><span class="line">        <span class="comment">//string.append(", ");</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    string.append(<span class="string">"]"</span>);</span><br><span class="line">    <span class="keyword">return</span> string.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DataStructure </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>测试阿里云函数</title>
      <link href="blog/hmc9fy/"/>
      <url>blog/hmc9fy/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Python3-的执行环境"><a href="#一、Python3-的执行环境" class="headerlink" title="一、Python3 的执行环境"></a>一、Python3 的执行环境</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">OK = <span class="string">b'ok\n'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handler</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">    status = <span class="string">'200 OK'</span></span><br><span class="line">    response_headers = [(<span class="string">'Content-type'</span>, <span class="string">'text/plain'</span>)]</span><br><span class="line">    sync_yuque()</span><br><span class="line">    start_response(status, response_headers)</span><br><span class="line">    <span class="keyword">return</span> [OK]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sync_yuque</span><span class="params">()</span>:</span></span><br><span class="line">    requests.post(<span class="string">"https://api.github.com/repos/wztlink1013/Blog3.0/dispatches"</span>,</span><br><span class="line">    json=&#123;<span class="string">'event_type'</span>: <span class="string">"run-it"</span>&#125;,</span><br><span class="line">    headers=&#123;<span class="string">"User-Agent"</span>:<span class="string">'curl/7.52.1'</span>,</span><br><span class="line">              <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">              <span class="string">'Accept'</span>: <span class="string">'application/vnd.github.everest-preview+json'</span>,</span><br><span class="line">              <span class="string">'Authorization'</span>: <span class="string">'token 一串英文数字'</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="二、测试-GitHub-Actions-触发"><a href="#二、测试-GitHub-Actions-触发" class="headerlink" title="二、测试 GitHub Actions 触发"></a>二、测试 GitHub Actions 触发</h2><blockquote><p>不行</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">repository_dispatch:</span></span><br><span class="line"><span class="attr">watch:</span></span><br><span class="line">  <span class="attr">types:</span> <span class="string">[started]</span></span><br><span class="line"><span class="attr">issue_comment:</span></span><br><span class="line">  <span class="attr">types:</span> <span class="string">[created,</span> <span class="string">edited,</span> <span class="string">deleted]</span></span><br></pre></td></tr></table></figure><blockquote><p>行</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">[repository_dispatch,</span> <span class="string">watch]</span> <span class="comment"># wztch默认只有star会触发，取消star不会触发</span></span><br></pre></td></tr></table></figure><h2 id="三、webhook-自定义触发"><a href="#三、webhook-自定义触发" class="headerlink" title="三、webhook 自定义触发"></a>三、webhook 自定义触发</h2><blockquote><p><strong>仅主动推送更新触发</strong>：只在文档发布或更新的时候勾选了「文档有较大更新，推送给关注人」才会触 Webhooks</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/wztlink1013/CDN-article/article1/20200726093426.png" alt></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1594720551100-1a8e4650-e1b2-47bb-b4a2-16e1027f9d4d.png#align=left&amp;display=inline&amp;height=644&amp;margin=%5Bobject%20Object%5D&amp;name=Snipaste_2020-07-14_17-53-33.png&amp;originHeight=644&amp;originWidth=1013&amp;size=76185&amp;status=done&amp;style=none&amp;width=1013" alt="Snipaste_2020-07-14_17-53-33.png"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yuque </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试语雀文章</title>
      <link href="blog/xm6cb9/"/>
      <url>blog/xm6cb9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>模板：此文章作为技术博客站点写作模板</p></blockquote><blockquote><p><del>测试：语雀仓库由公有转为私有——以保证加密文章在语雀端也是“加密文章”</del></p></blockquote><p>~~</p><ul><li>[x] 语雀上面图片经过博客不展示</li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yuque </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git使用Token连接</title>
      <link href="blog/lg6q7n/"/>
      <url>blog/lg6q7n/</url>
      
        <content type="html"><![CDATA[<h2 id="一、应用"><a href="#一、应用" class="headerlink" title="一、应用"></a>一、应用</h2><p>多个终端使用，而且没必要配置 SSH 连接的情况，可以使用 GitHub Token 来连接使用。还有就是使用 GitHub Actions 时候用 Token 情况较 SSH 方便。</p><p>不同的托管平台使用语法会有差异，在此记录下 GitHub、Coding、Gitee 的使用</p><h2 id="二、GitHub"><a href="#二、GitHub" class="headerlink" title="二、GitHub"></a>二、GitHub</h2><p>GitHub 生成一个 Token：***</p><p>使用 SSH 情况：<code>git clone [https://github.com/wztlink1013/blog3.0.git](https://github.com/wztlink1013/blog3.0.git)</code></p><p>使用 Token 情况：<code>[https://x-access-token:**************@github.com/wztlink1013/blog3.0.git](https://x-access-token:**************@github.com/wztlink1013/blog3.0.git)</code></p><h2 id="三、Coding"><a href="#三、Coding" class="headerlink" title="三、Coding"></a>三、Coding</h2><p>在个人设置中设置一个访问令牌</p><ul><li>令牌用户名：####</li><li>令牌 Token：*</li></ul><p>使用 SSH 情况：<code>[https://e.coding.net/wztlink1013/project/repo.git](https://e.coding.net/wztlink1013/project/repo.git)</code><br>使用令牌情况：<code>[https://####:***********@e.coding.net/wztlink1013/project/repo.git](https://####:***********@e.coding.net/wztlink1013/project/repo.git)</code></p><h2 id="四、Gitee"><a href="#四、Gitee" class="headerlink" title="四、Gitee"></a>四、Gitee</h2><p>头像设置中申请私人令牌：**</p><p>使用 SSH 情况：<code>[https://gitee.com/user/repo.git](https://gitee.com/user/repo.git)</code></p><p>使用 Token 情况：<code>[https://oauth2:**********@gitee.com/user/repo.git](https://oauth2:**********@gitee.com/user/repo.git)</code></p><h2 id="五、GitHub-Actions-中的使用"><a href="#五、GitHub-Actions-中的使用" class="headerlink" title="五、GitHub Actions 中的使用"></a>五、GitHub Actions 中的使用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Github_Pages:  github.com/wztlink1013/wztlink1013.github.io</span><br><span class="line">Github_Token:  <span class="variable">$&#123;&#123;  secrets.token_GithubAPI  &#125;</span>&#125;</span><br><span class="line"></span><br><span class="line">git  push  --force  --quiet  <span class="string">"https://<span class="variable">$&#123;Github_Token&#125;</span>@<span class="variable">$&#123;Github_Pages&#125;</span>"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Coding_Pages:  e.coding.net/wztlink1013/wztlink1013.git</span><br><span class="line">Coding_Token:  <span class="variable">$&#123;&#123;  secrets.token_CodingAPI  &#125;</span>&#125;</span><br><span class="line">Coding_Username:  <span class="variable">$&#123;&#123;  secrets.Username_Coding  &#125;</span>&#125;</span><br><span class="line"></span><br><span class="line">git  push  --force  --quiet  <span class="string">"https://<span class="variable">$&#123;Coding_Username&#125;</span>:<span class="variable">$&#123;Coding_Token&#125;</span>@<span class="variable">$&#123;Coding_Pages&#125;</span>"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Environment </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb-大作业要求</title>
      <link href="blog/mpib4g/"/>
      <url>blog/mpib4g/</url>
      
        <content type="html"><![CDATA[<h2 id="一、大作业架构要求"><a href="#一、大作业架构要求" class="headerlink" title="一、大作业架构要求"></a>一、大作业架构要求</h2><p>基于 JSP 技术完成一个 WEB 管理系统的开发。系统内容按以下要求完成</p><h3 id="1-网站目录管理"><a href="#1-网站目录管理" class="headerlink" title="1.网站目录管理"></a>1.网站目录管理</h3><p>建立一个完整的总文件夹，所有系统内容都要包含在建立的这个文件夹内，系统各类元素文件在总文件夹中以子文件夹形式分类清楚。（如图片都放在子文件夹 image 里，html 页都放在 pages 子文件夹内，数据库文件放在 DB 文件夹内）</p><h3 id="2-系统前台设计（JSP-设计）"><a href="#2-系统前台设计（JSP-设计）" class="headerlink" title="2.系统前台设计（JSP 设计）"></a>2.系统前台设计（JSP 设计）</h3><p>a)页面设计美观，使用方便。</p><p>b)如所选题目要求功能较少，需要自己扩充其它功能。</p><p>c)使用 MVC 模式：即 JavaBean+JSP+Servlet 技术。</p><h3 id="3-系统后台管理："><a href="#3-系统后台管理：" class="headerlink" title="3.系统后台管理："></a>3.系统后台管理：</h3><p>普通用户的主要功能模块：登录与注册等。</p><p>管理员的主要功能模块：用户信息的管理（添加、删除、修改、查询）。</p><h3 id="4-数据库设计"><a href="#4-数据库设计" class="headerlink" title="4.数据库设计"></a>4.数据库设计</h3><p>用 MySql 创建后台数据库，并完善数据库的结构和数据。数据库至少包含：用户信息表、相关业务数据表等。</p><h2 id="二、大作业实验报告要求"><a href="#二、大作业实验报告要求" class="headerlink" title="二、大作业实验报告要求"></a>二、大作业实验报告要求</h2><p>附带一份课程设计报告，也放在总文件夹中。</p><p>(1) 设计报告参照以下提纲书写：</p><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">i</span>.需求分析。</span><br><span class="line">ii.数据库结构设计。</span><br><span class="line">iii.程序结构框图。</span><br><span class="line">iv.程序功能说明。</span><br><span class="line">v.系统实现界面。</span><br><span class="line">vi.总结及体会。</span><br></pre></td></tr></table></figure><p>(2) 设计报告按照以下格式打印：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span>)打印用纸：<span class="selector-tag">A4</span></span><br><span class="line"><span class="selector-tag">b</span>)页面设置：上：3<span class="selector-class">.5cm</span>,下<span class="selector-pseudo">:2.5</span> <span class="selector-tag">cm</span>,左<span class="selector-pseudo">:3.0</span> <span class="selector-tag">cm</span>,右<span class="selector-pseudo">:2.4</span> <span class="selector-tag">cm</span>,页眉：2<span class="selector-class">.5</span> <span class="selector-tag">cm</span>，页脚：1<span class="selector-class">.8</span> <span class="selector-tag">cm</span>，行间距：1<span class="selector-class">.25</span>倍行距。</span><br><span class="line"><span class="selector-tag">c</span>)字体、字号：</span><br><span class="line">   大标题：黑体、三号；</span><br><span class="line">   小标题：黑体、四号；</span><br><span class="line">   正文部分：宋体、小四；</span><br></pre></td></tr></table></figure><p>(3) 作业提交要求</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">a)作品（<span class="number">1</span>组<span class="number">1</span>份）保存到文件夹以压缩文件的形式上交，文件命名：作品名+班级<span class="number">1</span>+学号<span class="number">1</span>+姓名<span class="number">1</span>+班级<span class="number">2</span>+学号<span class="number">2</span>+姓名<span class="number">2.</span>..，上交后应自备一份备份，以备教师手中的作品因故无法正常读取时补交。</span><br><span class="line">b)提交网页设计报告电子版（<span class="number">1</span>组<span class="number">1</span>份），文件命名：报告++班级<span class="number">1</span>+学号<span class="number">1</span>+姓名<span class="number">1</span>+班级<span class="number">2</span>+学号<span class="number">2</span>+姓名<span class="number">2.</span>..，上交后应自备一份备份，以备教师手中的作品因故无法正常读取时补交。</span><br><span class="line">c)做好自己作品的著作权保护，如果发现抄袭或者雷同现象，一律评为不及格。</span><br><span class="line">d)作品演示之前提交设计报告电子版和作品以班级为单位，由课代表收齐，发送至课代表或U盘拷贝给任课老师，时间预计在教学的<span class="number">17</span><span class="number">-18</span>周。设计报告纸质版（以班级为单位，由课代表收齐，统一交到学院楼<span class="number">402</span>），纸质版的提交时间根据学校开学情况再行通知。</span><br></pre></td></tr></table></figure><h2 id="三、展示要求"><a href="#三、展示要求" class="headerlink" title="三、展示要求"></a>三、展示要求</h2><h3 id="演示时间安排"><a href="#演示时间安排" class="headerlink" title="演示时间安排"></a>演示时间安排</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">演示时间另行通知，预计<span class="number">17</span><span class="number">-18</span>周上课时间。</span><br></pre></td></tr></table></figure><h3 id="汇报要求"><a href="#汇报要求" class="headerlink" title="汇报要求"></a>汇报要求</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">a)<span class="number">6</span>月<span class="number">4</span>日前，确定分组情况并上报课代表汇总。</span><br><span class="line">b)演示时间：<span class="number">10</span>分钟/组，包括<span class="number">6</span>分钟展示，<span class="number">4</span>分钟答疑。</span><br><span class="line">c)材料准备：打印评分表（<span class="number">1</span>人<span class="number">1</span>份）、填写完成的设计报告（<span class="number">1</span>组<span class="number">1</span>份）（见下页），同一小组一并装订，汇报前上交。</span><br><span class="line">d)汇报顺序：随机抽取。组长首先介绍分工，然后各成员分别介绍各自工作。</span><br></pre></td></tr></table></figure><h3 id="任务安排"><a href="#任务安排" class="headerlink" title="任务安排"></a>任务安排</h3><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="comment">(1)</span>项目分组完成（每组<span class="number">1</span><span class="number">-3</span>人）。每人承担项目的一部分任务，如：总体设计、数据库设计、代码实现、美工、文档等。每组设一位组长，组长负责总体设计和最终代码的整合。负责数据库、美工、文档的同学也要完成项目中部分简单功能模块的代码。（分组项目，培养团队合作的精神、锻炼与他人沟通的能力。）</span><br><span class="line"><span class="comment">(2)</span>提交电子版完整的设计报告和源程序。</span><br><span class="line"><span class="comment">(3)</span>设计分三阶段</span><br><span class="line">第一阶段: 明确系统功能需求，设计数据库</span><br><span class="line">第二阶段: 系统功能模块分析并用JSP实现相应页面</span><br><span class="line">第三阶段: 整理文档和调试程序，演示答辩。答辩时需要演示项目作品功能，叙述小组分工和每个人的工作量。回答老师提出的问题。答辩，或队员协助演示作品的功能。答辩<span class="number">6</span>分钟，老师提问<span class="number">4</span>分钟。最后老师从作品功能完善性、交互界面美观性、文档规范性、答辩是否流畅等几个方面给出小组答辩成绩。个人最终成绩=小组成绩*<span class="number">0.4</span>+个人得分*<span class="number">0.6</span>。</span><br></pre></td></tr></table></figure><h2 id="四、评分表"><a href="#四、评分表" class="headerlink" title="四、评分表"></a>四、评分表</h2><table><thead><tr><th>姓名</th><th>内容</th><th>分值</th></tr></thead><tbody><tr><td>一、主题与内容（20 分）</td><td>1.主题鲜明，题材合适，内容能很好为主题服务</td><td></td></tr><tr><td></td><td>2.页面具有较强的个人设计创意,色彩搭配鲜明,内容布局合理</td><td></td></tr><tr><td>二、常规技术(50 分)</td><td>1.页面布局合理，页面内容清晰明了，在页面中，插入文字、图片、表格、表单、超级链接、多媒体等各种对象，网页中部分页面可应用行为或者网页特效</td><td></td></tr><tr><td></td><td>2.表单、数据库操作技术</td><td></td></tr><tr><td></td><td>3.Jsp、Servlet 技术</td><td></td></tr><tr><td>三、其他技术(10 分)</td><td>1.有特色的结束，如有自己制作的动画、JS 脚本特效等</td><td></td></tr><tr><td>四、作业设计报告(20 分)</td><td>1.项目文档内容详细完整、结构清晰、提交文件名正确</td></tr></tbody></table><p>打印说明:</p><ol><li>小组成员每人单独打印一份，在第一列表头中填写姓名；</li><li>作业答辩时，将评分表装订在作业设计报告前面。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Navicat-1045报错</title>
      <link href="blog/wp9hok/"/>
      <url>blog/wp9hok/</url>
      
        <content type="html"><![CDATA[<h2 id="一、报错信息"><a href="#一、报错信息" class="headerlink" title="一、报错信息"></a>一、报错信息</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">1045-Access denied <span class="keyword">for</span><span class="built_in"> user </span>root@localhost(using password:YES)</span><br></pre></td></tr></table></figure><h2 id="二、问题分析与解决"><a href="#二、问题分析与解决" class="headerlink" title="二、问题分析与解决"></a>二、问题分析与解决</h2><p>不被接入，改 root 密码</p><p>在 mysql 控制台里面改密码</p><p><code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;你的密码&#39;;</code></p><p>刷新数据库</p><p><code>flush privileges;</code></p><p>退出</p><p><code>quit;</code></p><p>重启 Navicat 再次链接即可。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/acoolgiser/article/details/82967317?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522159185926319725250149590%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=159185926319725250149590&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_ctr_v3-4-82967317.ecpm_v1_rank_ctr_v3&amp;utm_term=1045-Access+denied+for+user+ro" target="_blank" rel="noopener">acoolgiser</a></li><li><a href="https://blog.csdn.net/zhang_yu_ling/article/details/103177296?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522159185926319725250149590%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=159185926319725250149590&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_ctr_v3-2-103177296.ecpm_v1_rank_ctr_v3&amp;utm_term=1045-Access+denied+for+user+ro" target="_blank" rel="noopener">张张张 i</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>yuque-未拉取成功</title>
      <link href="blog/wsmygb/"/>
      <url>blog/wsmygb/</url>
      
        <content type="html"><![CDATA[<h2 id="一、报错信息"><a href="#一、报错信息" class="headerlink" title="一、报错信息"></a>一、报错信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yuque-hexo sync</span><br><span class="line">[INFO] clear previous directory.</span><br><span class="line">[INFO] remove yuque posts: D:\Blog\blog-wztlink1013-3.0\<span class="built_in">source</span>\yuque</span><br><span class="line">Mon, 01 Jun 2020 04:02:22 GMT yuque-hexo deprecated TOKEN of yuque will be required <span class="keyword">while</span> verion &gt;v1.6.0. at ..\..\Develop\nodejs\node_global\node_modules\yuque-hexo\lib\Downloader.js:39:19</span><br><span class="line">[INFO] reading from <span class="built_in">local</span> file: D:\Blog\blog-wztlink1013-3.0\yuque.json</span><br><span class="line">[WARNING] Cannot find module <span class="string">'D:\Blog\blog-wztlink1013-3.0\yuque.json'</span></span><br><span class="line">Require stack:</span><br><span class="line">- D:\Develop\nodejs\node_global\node_modules\yuque-hexo\lib\Downloader.js</span><br><span class="line">- D:\Develop\nodejs\node_global\node_modules\yuque-hexo\<span class="built_in">command</span>\sync.js</span><br><span class="line">- D:\Develop\nodejs\node_global\node_modules\yuque-hexo\node_modules\common-bin\lib\command.js</span><br><span class="line">- D:\Develop\nodejs\node_global\node_modules\yuque-hexo\node_modules\common-bin\index.js</span><br><span class="line">- D:\Develop\nodejs\node_global\node_modules\yuque-hexo\index.js</span><br><span class="line">- D:\Develop\nodejs\node_global\node_modules\yuque-hexo\bin\yuque-hexo.js</span><br><span class="line">⚠️  Error: fail to fetch article list, response: &#123;<span class="string">"status"</span>:401,<span class="string">"message"</span>:<span class="string">"Unauthorized"</span>&#125;</span><br><span class="line">⚠️  Command Error, <span class="built_in">enable</span> `DEBUG=common-bin` <span class="keyword">for</span> detail</span><br></pre></td></tr></table></figure><h2 id="二、分析并解决问题"><a href="#二、分析并解决问题" class="headerlink" title="二、分析并解决问题"></a>二、分析并解决问题</h2><p>认证出错，应该和下面三个原因有关</p><ul><li>客户端将其身份验证凭据发送到服务器，但是服务器由于某种原因拒绝了凭据。</li><li>客户端无法在请求中提供任何身份验证凭据。</li><li>客户端由于某种原因被禁止。某些应用程序用来限制来自特定 IP 地址的访问请求，因此，如果身份验证不是问题，则可能是服务器端禁止。401 Unauthorized Errors</li></ul><p>也就是身份没有被验证，首先检查用户元信息相关</p><p>的确，配置都是没有问题的，然后去 issue 里面查看相关问题，了解到是语雀官方出于对知识库安全性的调整，需要使用第三方 API 访问知识库，需要传入环境变量 YUQUE_TOKEN。</p><p>然后根据两种指导方式，传入参数即可</p><ul><li>设置全局的环境变量 YUQUE_TOKEN</li><li>命令执行时传入环境变量<ul><li>mac / linux: YUQUE_TOKEN=xxx yuque-hexo sync</li><li>windows: set YUQUE_TOKEN=xxx &amp;&amp; yuque-hexo sync</li></ul></li></ul><p>传入之后会有一封邮件发过来，然后新开 git bash 窗口，重新键入命令即可</p><p>成功之后是这个样子的</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yuque-hexo sync</span><br><span class="line">[INFO] clear previous directory.</span><br><span class="line">[INFO] remove yuque posts: D:\Blog\blog-wztlink1013-3.0\<span class="built_in">source</span>\_posts\yuque</span><br><span class="line">[INFO] reading from <span class="built_in">local</span> file: D:\Blog\blog-wztlink1013-3.0\yuque.json</span><br><span class="line">[INFO] article amount: 2</span><br><span class="line">[INFO] download articles <span class="keyword">done</span>!</span><br><span class="line">[INFO] writing to <span class="built_in">local</span> file: D:\Blog\blog-wztlink1013-3.0\yuque.json</span><br><span class="line">[INFO] create posts directory (<span class="keyword">if</span> it not exists): D:\Blog\blog-wztlink1013-3.0\<span class="built_in">source</span>\_posts\yuque</span><br><span class="line">[INFO] generate post file: D:\Blog\blog-wztlink1013-3.0\<span class="built_in">source</span>\_posts\yuque\hexo-test.md</span><br><span class="line">[INFO] generate post file: D:\Blog\blog-wztlink1013-3.0\<span class="built_in">source</span>\_posts\yuque\语雀文章测试.md</span><br><span class="line">[INFO] yuque-hexo sync <span class="keyword">done</span>!</span><br></pre></td></tr></table></figure><h2 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h2><ul><li><a href="https://airbrake.io/blog/http-errors/401-unauthorized-error" target="_blank" rel="noopener">https://airbrake.io/blog/http-errors/401 U-unauthorized E-error:What It Is and How to Fix It</a></li><li><a href="https://www.yuguocong.cn/yuque/eg7hkp.html#Reference" target="_blank" rel="noopener">使用语雀编辑器写静态博客 https://www.yuguocong.cn/yuque/eg7hkp.html#Reference</a></li><li><a href="https://blog.csdn.net/Caoyang_He/article/details/82181695?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase" target="_blank" rel="noopener">windows10 环境变量设置及理解环境变量</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo-生成文章出错</title>
      <link href="blog/pxpix4/"/>
      <url>blog/pxpix4/</url>
      
        <content type="html"><![CDATA[<h2 id="一、报错信息"><a href="#一、报错信息" class="headerlink" title="一、报错信息"></a>一、报错信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">INFO  Start processing</span><br><span class="line">FATAL Somethings wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class="line">Template render error: (unknown path)</span><br><span class="line">  unexpected end of file</span><br><span class="line">    at Object._prettifyError (D:\Blog\blog-wztlink1013-3.0\node_modules\nunjucks\src\lib.js:36:11)</span><br><span class="line">    at Template.render (D:\Blog\blog-wztlink1013-3.0\node_modules\nunjucks\src\environment.js:536:21)</span><br><span class="line">    at Environment.renderString (D:\Blog\blog-wztlink1013-3.0\node_modules\nunjucks\src\environment.js:378:17)</span><br><span class="line">    at D:\Blog\blog-wztlink1013-3.0\node_modules\hexo\lib\extend\tag.js:120:48</span><br><span class="line">    at tryCatcher (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Function.Promise.fromNode.Promise.fromCallback (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:209:30)</span><br><span class="line">    at Tag.render (D:\Blog\blog-wztlink1013-3.0\node_modules\hexo\lib\extend\tag.js:120:18)</span><br><span class="line">    at Object.onRenderEnd (D:\Blog\blog-wztlink1013-3.0\node_modules\hexo\lib\hexo\post.js:291:22)</span><br><span class="line">    at D:\Blog\blog-wztlink1013-3.0\node_modules\hexo\lib\hexo\render.js:79:21</span><br><span class="line">    at tryCatcher (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Promise._settlePromiseFromHandler (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:547:31)</span><br><span class="line">    at Promise._settlePromise (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:604:18)</span><br><span class="line">    at Promise._settlePromise0 (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:649:10)</span><br><span class="line">    at Promise._settlePromises (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:729:18)</span><br><span class="line">    at _drainQueueStep (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\async.js:93:12)</span><br><span class="line">    at _drainQueue (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\async.js:86:9)</span><br><span class="line">    at Async._drainQueues (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\async.js:102:5)</span><br><span class="line">    at Immediate.Async.drainQueues (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\async.js:15:14)</span><br><span class="line">    at processImmediate (internal/timers.js:456:21)</span><br></pre></td></tr></table></figure><h2 id="二、分析并解决问题"><a href="#二、分析并解决问题" class="headerlink" title="二、分析并解决问题"></a>二、分析并解决问题</h2><p>根据报错信息，包 nunjucks、bluebird 使用异常</p><p>然后进到 node_modules 文件夹里面分别找到两个包，进入 README.md 进入官网，numjucks 包应该是渲染文章有关，期间出错应该是 markdown 文章里面所使用的标签与 nunjucks 模板引擎的标签冲突，</p><p>根据文档定位英文大括号的使用，定位文章使用带有大括号的 fancybox 标签，标签结束忘记加 end 而导致出错</p><h2 id="三、hexo-g-出错总结"><a href="#三、hexo-g-出错总结" class="headerlink" title="三、hexo g 出错总结"></a>三、hexo g 出错总结</h2><p>hexo g 出错总结多为文件格式出错，主题配置出错，抑或是文章格式出错等</p><h3 id="文章头部"><a href="#文章头部" class="headerlink" title="文章头部"></a>文章头部</h3><ul><li><em>hexo 相关文章报错，大多数为格式出错，文章头部的使用严格遵循 hexo 官方文档的使用，但是目录优化插件，使得文章头部的元信息更为简单化</em></li><li>减号<code>-</code>分隔符，注意头部 front-matter、markdown 行分隔。如果没有加 front-matter，文章还用了 markdown，会报错<br><code>YAMLException: end of the stream or a document separator is expected at line 6, column 1:</code></li><li>目录优化插件的使用</li></ul><h3 id="文章体"><a href="#文章体" class="headerlink" title="文章体"></a>文章体</h3><ul><li>英文大括号的使用要“有始有终”，Volantis 主题的大括号标签使用</li></ul><h3 id="空格问题"><a href="#空格问题" class="headerlink" title="空格问题"></a>空格问题</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ERROR Process failed: _posts/yuque/外汇时间序列预测.md</span><br><span class="line">YAMLException: end of the stream or a document separator is expected at line 2, column 11:</span><br><span class="line">    categories:</span><br><span class="line">              ^</span><br><span class="line">    at generateError (D:\Blog\blog-wztlink1013-3.0\node_modules\js-yaml\lib\js-yaml\loader.js:167:10)</span><br><span class="line">    at throwError (D:\Blog\blog-wztlink1013-3.0\node_modules\js-yaml\lib\js-yaml\loader.js:173:9)</span><br><span class="line">    at readDocument (D:\Blog\blog-wztlink1013-3.0\node_modules\js-yaml\lib\js-yaml\loader.js:1545:5)</span><br><span class="line">    at loadDocuments (D:\Blog\blog-wztlink1013-3.0\node_modules\js-yaml\lib\js-yaml\loader.js:1588:5)</span><br><span class="line">    at Object.load (D:\Blog\blog-wztlink1013-3.0\node_modules\js-yaml\lib\js-yaml\loader.js:1614:19)</span><br><span class="line">    at parseYAML (D:\Blog\blog-wztlink1013-3.0\node_modules\hexo-front-matter\lib\front_matter.js:78:23)</span><br><span class="line">    at parse (D:\Blog\blog-wztlink1013-3.0\node_modules\hexo-front-matter\lib\front_matter.js:54:12)</span><br><span class="line">    at D:\Blog\blog-wztlink1013-3.0\node_modules\hexo\lib\plugins\processor\post.js:48:20</span><br><span class="line">    at tryCatcher (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Promise._settlePromiseFromHandler (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:544:35)</span><br><span class="line">    at Promise._settlePromise (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:604:18)</span><br><span class="line">    at Promise._settlePromise0 (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:649:10)</span><br><span class="line">    at Promise._settlePromises (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:729:18)</span><br><span class="line">    at Promise._fulfill (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:673:18)</span><br><span class="line">    at PromiseArray._resolve (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise_array.js:127:19)</span><br><span class="line">    at PromiseArray._promiseFulfilled (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise_array.js:145:14)</span><br><span class="line">    at PromiseArray._iterate (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise_array.js:115:31)</span><br><span class="line">    at PromiseArray.init [as _init] (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise_array.js:79:10)</span><br><span class="line">    at Promise._settlePromise (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:601:21)</span><br><span class="line">    at Promise._settlePromise0 (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:649:10)</span><br><span class="line">    at Promise._settlePromises (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:729:18)</span><br><span class="line">    at Promise._fulfill (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:673:18)</span><br><span class="line">    at PromiseArray._resolve (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise_array.js:127:19)</span><br><span class="line">    at PromiseArray._promiseFulfilled (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise_array.js:145:14)</span><br><span class="line">    at Promise._settlePromise (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:609:26)</span><br><span class="line">    at Promise._settlePromise0 (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:649:10)</span><br><span class="line">    at Promise._settlePromises (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:729:18)</span><br><span class="line">    at Promise._fulfill (D:\Blog\blog-wztlink1013-3.0\node_modules\bluebird\js\release\promise.js:673:18)</span><br><span class="line">INFO  Generating Baidu urls <span class="keyword">for</span> last 1 posts</span><br></pre></td></tr></table></figure><p>奇葩错误，在最上面的三个分隔符后面也要加空格，可能是语雀那边同步过来的文章问题</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://mozilla.github.io/nunjucks/cn/getting-started.html" target="_blank" rel="noopener">nunjucks 文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SSH-登录</title>
      <link href="blog/pix070/"/>
      <url>blog/pix070/</url>
      
        <content type="html"><![CDATA[<h2 id="一、报错信息"><a href="#一、报错信息" class="headerlink" title="一、报错信息"></a>一、报错信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">remote: Coding 提示: Authentication failed.</span><br><span class="line">remote: 认证失败，请确认您输入了正确的账号密码。</span><br><span class="line">fatal: Authentication failed <span class="keyword">for</span> <span class="string">'https://e.coding.net/wztlink1013/wztlink1013.git/'</span></span><br><span class="line"><span class="comment">##[error]Process completed with exit code 128.</span></span><br></pre></td></tr></table></figure><h2 id="二、分析并解决问题"><a href="#二、分析并解决问题" class="headerlink" title="二、分析并解决问题"></a>二、分析并解决问题</h2><p>自动化部署过程中，coding 认证出错，我觉得应该有两个可能性</p><ol><li>字面意思账号密码出错</li><li>SSH 密匙没有匹配到</li><li>在 GitHub Actions 上所配置的 Token 信息之间也修改了一次，会不会是忘了改用户名</li></ol><p>如果是第一种情况，已经进入控制面板中的凭据管理器，更改了 coding 在本机上的默认永久密码，不弹窗理论没事，但是无效，</p><p>根据上次在本机上克隆 coding 仓库也没有其任何反应，所以问题应该出在 ssh 密匙上面，进一步回想，自己重装电脑后，当时是打算不使用全局用户没加上 global 打算使用各个用户，但是最后又换成全局用户，所以生成的.ssh 文件夹下的 config 文件有被删除了，会不会是 config 里面的 coding host 被删除，就默认这个电脑只有初始化 github 用户呢？</p><p>好的，试验了一下，解决了在本地电脑 coding“不算用户”的问题，但是自动化部署的问题未解决</p><p>最后试一下 GitHub Actions 上是不是 coding 用户名之间忘了换一次，的确是……</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.jianshu.com/p/501277e1bada" target="_blank" rel="noopener">一台电脑利用秘钥绑定多个 ssh-key 账号（实 n</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python-qrcode和myqr花式二维码</title>
      <link href="blog/ro3p67/"/>
      <url>blog/ro3p67/</url>
      
        <content type="html"><![CDATA[<h2 id="一、官方文档"><a href="#一、官方文档" class="headerlink" title="一、官方文档"></a>一、官方文档</h2><p><a href="https://pypi.org/project/qrcode/" target="_blank" rel="noopener">https://pypi.org/project/qrcode/</a></p><p><a href="https://pypi.org/project/MyQR/" target="_blank" rel="noopener">https://pypi.org/project/MyQR/</a></p><h2 id="二、下载包"><a href="#二、下载包" class="headerlink" title="二、下载包"></a>二、下载包</h2><p>pip install qrcode  #方法多，体量小</p><p>pip install myqr    #操作简单，功能强大</p><h2 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h2><h3 id="qrcode-一行字二维码"><a href="#qrcode-一行字二维码" class="headerlink" title="qrcode 一行字二维码"></a>qrcode 一行字二维码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> qrcode</span><br><span class="line"></span><br><span class="line">qrcode.make(<span class="string">"不睡觉干嘛呢"</span>).get_image().show()   <span class="comment">#设置URL必须添加http://</span></span><br></pre></td></tr></table></figure><h3 id="qrcode-一行字二维码-1"><a href="#qrcode-一行字二维码-1" class="headerlink" title="qrcode 一行字二维码"></a>qrcode 一行字二维码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> qrcode</span><br><span class="line"></span><br><span class="line">text = input(<span class="string">"输入文字或URL："</span>)</span><br><span class="line">img =qrcode.make(text)</span><br><span class="line">img.save()                            <span class="comment">#保存图片至本地目录，可以设定路径</span></span><br><span class="line">img.show()</span><br></pre></td></tr></table></figure><h3 id="qrcode-生成-logo-二维码"><a href="#qrcode-生成-logo-二维码" class="headerlink" title="qrcode 生成 logo 二维码"></a>qrcode 生成 logo 二维码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> qrcode,os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_qrcode</span><span class="params">(url,qrcodename)</span>:</span></span><br><span class="line">    qr = qrcode.QRCode(</span><br><span class="line">        version=<span class="number">1</span>,  <span class="comment"># 设置容错率为最高</span></span><br><span class="line">        error_correction=qrcode.ERROR_CORRECT_H, <span class="comment"># 用于控制二维码的错误纠正程度</span></span><br><span class="line">        box_size=<span class="number">8</span>, <span class="comment"># 控制二维码中每个格子的像素数，默认为10</span></span><br><span class="line">        border=<span class="number">1</span>, <span class="comment"># 二维码四周留白，包含的格子数，默认为4</span></span><br><span class="line">        <span class="comment">#image_factory=None,  保存在模块根目录的image文件夹下</span></span><br><span class="line">        <span class="comment">#mask_pattern=None</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    qr.add_data(url) <span class="comment"># QRCode.add_data(data)函数添加数据</span></span><br><span class="line">    qr.make(fit=<span class="literal">True</span>)  <span class="comment"># QRCode.make(fit=True)函数生成图片</span></span><br><span class="line"></span><br><span class="line">    img = qr.make_image()</span><br><span class="line">    img = img.convert(<span class="string">"RGBA"</span>) <span class="comment"># 二维码设为彩色</span></span><br><span class="line">    logo = Image.open(<span class="string">'xx.jpg'</span>) <span class="comment"># 传gif生成的二维码也是没有动态效果的</span></span><br><span class="line"></span><br><span class="line">    w , h = img.size</span><br><span class="line">    logo_w , logo_h = logo.size</span><br><span class="line">    factor = <span class="number">4</span>   <span class="comment"># 默认logo最大设为图片的四分之一</span></span><br><span class="line">    s_w = int(w / factor)</span><br><span class="line">    s_h = int(h / factor)</span><br><span class="line">    <span class="keyword">if</span> logo_w &gt; s_w <span class="keyword">or</span> logo_h &gt; s_h:</span><br><span class="line">        logo_w = s_w</span><br><span class="line">        logo_h = s_h</span><br><span class="line"></span><br><span class="line">    logo = logo.resize((logo_w, logo_h), Image.ANTIALIAS)</span><br><span class="line">    l_w = int((w - logo_w) / <span class="number">2</span>)</span><br><span class="line">    l_h = int((h - logo_h) / <span class="number">2</span>)</span><br><span class="line">    logo = logo.convert(<span class="string">"RGBA"</span>)</span><br><span class="line">    img.paste(logo, (l_w, l_h), logo)</span><br><span class="line">    img.show()</span><br><span class="line">    img.save(os.getcwd()+<span class="string">'/'</span> + qrcodename + <span class="string">'.png'</span>, quality=<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h3 id="myqr-动态二维码"><a href="#myqr-动态二维码" class="headerlink" title="myqr 动态二维码"></a>myqr 动态二维码</h3><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">相关参数：</span><br><span class="line">    words：二维码内容，链接或者句子</span><br><span class="line">    <span class="keyword">version</span>：二维码大小，范围为[1,40]</span><br><span class="line">    level：二维码纠错级别，范围为&#123;L,M,Q,H&#125;，H为最高级，默认。</span><br><span class="line">    picture：自定义二维码背景图，支持格式为 <span class="string">.jpg</span>，<span class="string">.png</span>，<span class="string">.bmp</span>，<span class="string">.gif</span>，默认为黑白色</span><br><span class="line">    colorized：二维码背景颜色，默认为 False，即黑白色</span><br><span class="line">    contrast：对比度，值越高对比度越高，默认为 1.0</span><br><span class="line">    brightness：亮度，值越高亮度越高，默认为 1.0，值常和对比度相同</span><br><span class="line">    save_name：二维码名称，默认为 qrcode.png</span><br><span class="line">    save_dir：二维码路径，默认为程序工作路径</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 调用库</span></span><br><span class="line"><span class="keyword">from</span> MyQR <span class="keyword">import</span> myqr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数部分</span></span><br><span class="line">myqr.run(</span><br><span class="line">    <span class="comment"># 网址</span></span><br><span class="line">    words=<span class="string">'https://wztlink1013.com'</span>,</span><br><span class="line">    <span class="comment"># 控制边长，范围是1到40，数字越大边长越大，默认边长是取决于你输入的信息的长度和使用的纠错等级</span></span><br><span class="line">    version=<span class="number">5</span>,</span><br><span class="line">    <span class="comment"># 控制纠错水平，范围是L、M、Q、H，从左到右依次升高</span></span><br><span class="line">    level=<span class="string">'H'</span>,</span><br><span class="line">    <span class="comment"># 将QR二维码图像与一张同目录下的图片相结合，此处设置该图片，可以是gif</span></span><br><span class="line">    picture=<span class="string">'./input/girl.gif'</span>,</span><br><span class="line">    <span class="comment"># 默认是黑白(False)，可以选择彩色(True)</span></span><br><span class="line">    colorized=<span class="literal">True</span>,</span><br><span class="line">    <span class="comment"># 调节图片的对比度，1.0 表示原始图片，更小的值表示更低对比度，更大反之。默认为1.0。</span></span><br><span class="line">    contrast=<span class="number">1.0</span>,</span><br><span class="line">    <span class="comment"># 调节图片的亮度，用法与contrast相同</span></span><br><span class="line">    brightness=<span class="number">1.0</span>,</span><br><span class="line">    <span class="comment"># 输出文件名，格式可以是jpg，png，bmp，gif</span></span><br><span class="line">    save_name=<span class="string">'girl.gif'</span>,</span><br><span class="line">    save_dir=<span class="string">'./output'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qrcode </tag>
            
            <tag> myqr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UTC-GMT-GST</title>
      <link href="blog/delag2/"/>
      <url>blog/delag2/</url>
      
        <content type="html"><![CDATA[<h2 id="一、三者区别与关系"><a href="#一、三者区别与关系" class="headerlink" title="一、三者区别与关系"></a>一、三者区别与关系</h2><h3 id="UTC：世界标准时间"><a href="#UTC：世界标准时间" class="headerlink" title="UTC：世界标准时间"></a><strong>UTC：世界标准时间</strong></h3><p>协调世界时（英：Coordinated Universal Time ，法：Temps Universel Coordonné），又称世界统一时间，世界标准时间，国际协调时间。英文（CUT）和法文（TUC）的缩写不同，作为妥协，简称 UTC。</p><h3 id="GMT：格林尼治时间"><a href="#GMT：格林尼治时间" class="headerlink" title="GMT：格林尼治时间"></a><strong>GMT：格林尼治时间</strong></h3><p>世界时 UT   即格林尼治时间，格林尼治所在地的标准时间。以地球自转为基础的时间计量系统。地球自转的角度可用地方子午线相对于地球上的基本参考点的运动来度量。为了测量地球自转，人们在地球上选取了两个基本参考点：春分点（见分至点）和平太阳，由此确定的时间分别称为恒星时和平太阳时。</p><h3 id="GST：北京时间"><a href="#GST：北京时间" class="headerlink" title="GST：北京时间"></a><strong>GST：北京时间</strong></h3><p>在数据库中存放，或者给用户看的时间都是 GST 时间</p><h3 id="UTC-和-GST"><a href="#UTC-和-GST" class="headerlink" title="UTC 和 GST"></a><strong>UTC 和 GST</strong></h3><p>中国北京市的时间比 Coordinated Universal Time<strong>早</strong> 8 小时</p><h2 id="二、UTC-与-GST-之间的转换"><a href="#二、UTC-与-GST-之间的转换" class="headerlink" title="二、UTC 与 GST 之间的转换"></a><strong>二、UTC 与 GST 之间的转换</strong></h2><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><blockquote><p>2020-05-23T01:12:19.602Z</p></blockquote><ul><li>T：他表示后面跟的时间</li><li>Z：表示 UTC 统一时间</li><li>602：表示毫秒，如果为 6020，最后得到的时间，秒会增加 1 秒。000Z 意思就是 0 毫秒  utc 统一时间</li></ul><h3 id="java-实现"><a href="#java-实现" class="headerlink" title="java 实现"></a>java 实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> website;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UTC_GST</span> </span>&#123;</span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line"></span><br><span class="line">truetrueString date = <span class="string">"2020-05-23T20:12:19.602Z"</span>;</span><br><span class="line">truetruedate = date.replace(<span class="string">"Z"</span>, <span class="string">" UTC"</span>);</span><br><span class="line">truetrueSystem.out.println(<span class="string">"输入的UTC格式数据为："</span>+date);</span><br><span class="line"></span><br><span class="line">truetrueSimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd'T'HH:mm:ss.SSS Z"</span>);</span><br><span class="line">truetrueDate d = format.parse(date);</span><br><span class="line">truetrueSystem.out.println(<span class="string">"输出的背景格式数据为："</span>+d);</span><br><span class="line"></span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入的UTC格式数据为：<span class="number">2020</span>-<span class="number">05</span>-<span class="number">23</span>T20:<span class="number">12</span>:<span class="number">19.602</span> UTC</span><br><span class="line">输出的背景格式数据为：Sun May <span class="number">24</span> <span class="number">04</span>:<span class="number">12</span>:<span class="number">19</span> CST <span class="number">2020</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> website;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Format</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Date ss = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(<span class="string">"一般日期输出："</span> + ss);</span><br><span class="line">        System.out.println(<span class="string">"toString日期输出："</span> + ss.toString());</span><br><span class="line">        System.out.println(<span class="string">"时间戳："</span> + ss.getTime()+<span class="string">"\n"</span>); <span class="comment">// getTime返回的是1970年1月1号至今流逝的时间</span></span><br><span class="line">        <span class="comment">//Date aw = Calendar.getInstance().getTime();//获得时间的另一种方式，测试效果一样</span></span><br><span class="line"></span><br><span class="line">        SimpleDateFormat format0 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        String time = format0.format(ss.getTime());<span class="comment">//这个就是把时间戳经过处理得到期望格式的时间</span></span><br><span class="line">        System.out.println(<span class="string">"格式化结果0："</span> + time + <span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">        SimpleDateFormat format1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH时mm分ss秒"</span>);</span><br><span class="line">        time = format1.format(ss.getTime());</span><br><span class="line">        System.out.println(<span class="string">"格式化结果1："</span> + time + <span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">一般日期输出：Sat May <span class="number">23</span> <span class="number">15</span>:<span class="number">03</span>:<span class="number">25</span> CST <span class="number">2020</span></span><br><span class="line">toString日期输出：Sat May <span class="number">23</span> <span class="number">15</span>:<span class="number">03</span>:<span class="number">25</span> CST <span class="number">2020</span></span><br><span class="line">时间戳：<span class="number">1590217405777</span></span><br><span class="line"></span><br><span class="line">格式化结果<span class="number">0</span>：<span class="number">2020</span>-<span class="number">05</span>-<span class="number">23</span> <span class="number">15</span>:<span class="number">03</span>:<span class="number">25</span></span><br><span class="line"></span><br><span class="line">格式化结果<span class="number">1</span>：<span class="number">2020</span>年<span class="number">05</span>月<span class="number">23</span>日 <span class="number">15</span>时<span class="number">03</span>分<span class="number">25</span>秒</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DataAnalysis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>👨‍💻编程习惯</title>
      <link href="blog/ml46ei/"/>
      <url>blog/ml46ei/</url>
      
        <content type="html"><![CDATA[<h2 id="一、代码"><a href="#一、代码" class="headerlink" title="一、代码"></a>一、代码</h2><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><ul><li>项目：小写字母 <code>datastructure</code></li><li>包：<code>com.公司名.项目名.模块名....</code>（其中模块名可以按照功能/逻辑来分）</li><li>类：全部首字母大写，一般驼峰式命名 <code>public class TestBan{}</code></li><li>常量：全部大写字母 <code>String RE_PRI = ‘wztlink’</code></li><li>变量：下划线方式  <code>int pri_const</code></li><li>方法：首字母小写，如果有多个单词，单词首字母大写 <code>public void toString(){}</code></li></ul><blockquote><ul><li>好的命名以及编程习惯：① 小/大驼峰命名 ② 匈牙利命名 ③ 下划线命名</li><li><a href="https://blog.csdn.net/ZCF1002797280/article/details/51495229" target="_blank" rel="noopener">https://blog.csdn.net/ZCF1002797280/article/details/51495229</a></li><li><a href="https://blog.csdn.net/z_h_s/article/details/24007249" target="_blank" rel="noopener">https://blog.csdn.net/z_h_s/article/details/24007249</a></li></ul></blockquote><h3 id="注释规范"><a href="#注释规范" class="headerlink" title="注释规范"></a>注释规范</h3><blockquote><p>文件注释</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> / *</span><br><span class="line">   * 文件名：[文件名]</span><br><span class="line">   * 作者：〈版权〉</span><br><span class="line">   * 描述：〈描述〉</span><br><span class="line">   * 修改人：Wu ZuTao</span><br><span class="line">   * 修改时间：<span class="number">2020</span>-<span class="number">06</span>-<span class="number">06</span></span><br><span class="line">   * 修改内容：新增X方法</span><br><span class="line">   * 修改人：Wu ZuTao</span><br><span class="line">   * 修改时间：<span class="number">2020</span>-<span class="number">07</span>-<span class="number">01</span></span><br><span class="line">   * 修改内容：修改B模块</span><br><span class="line">* /</span><br></pre></td></tr></table></figure><blockquote><p>类和接口注释</p></blockquote><p>类和接口的注释：该注释放在 class 定义之前，using 或 package 关键字之后。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wztlink.xxx;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 注释内容</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XxxManager</span></span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/ *</span><br><span class="line">  * 〈一句话功能简述〉</span><br><span class="line">  * 〈功能详细描述〉</span><br><span class="line">  * <span class="meta">@author</span> [作者]</span><br><span class="line">  * <span class="meta">@version</span> [版本号, YYYY-MM-DD]</span><br><span class="line">  * <span class="meta">@see</span> [相关类/方法]</span><br><span class="line">  * <span class="meta">@since</span> [产品/模块版本]</span><br><span class="line">  * <span class="meta">@deprecated</span></span><br><span class="line">  */</span><br></pre></td></tr></table></figure><blockquote><p>方法</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 类方法的详细使用说明</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> 参数1 参数1的使用说明</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 返回结果的说明</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> 异常类型.错误代码 注明从此类方法中抛出异常的说明</span></span><br><span class="line"><span class="comment">   */</span></span><br></pre></td></tr></table></figure><blockquote><p>方法内部、属性、必要语句</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注释内容</span></span><br><span class="line"><span class="keyword">private</span> String logType</span><br></pre></td></tr></table></figure><blockquote><p>注意事项</p></blockquote><ul><li>边写代码边注释，修改代码同时修改相应的注释，以保证注释与代码的一致性。不再有用的注释要删除。</li><li>避免在注释中使用缩写，特别是不常用缩写。说明：在使用缩写时或之前，应对缩写进行必要的说明。 注释应该放在被注释的代码前面，分行展示，但中间不留空行。</li><li><a href="https://blog.csdn.net/vbirdbest/article/details/80296136" target="_blank" rel="noopener">javadoc 使用规范</a></li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>主入口函数和其他功能函数分开，如果是功能性函数，全部放到一个 <code>Tools</code>  函数里面</p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>不要在自己类下定义自己的对象</p><h2 id="二、项目"><a href="#二、项目" class="headerlink" title="二、项目"></a>二、项目</h2><h3 id="解决写不出代码的方法"><a href="#解决写不出代码的方法" class="headerlink" title="解决写不出代码的方法"></a>解决写不出代码的方法</h3><blockquote><p>1、先分析实现的思路</p></blockquote><p>拿到作业，按照要实现的功能，先分析去实现的思路。<br>如果完全不知道该怎么去实现，一头雾水，最好先看看其他人事如何实现的，或者与老师或同学讨论。<br>重点是要找到解决问题的办法，理清实现的思路。<br>如果自己能想出几步来，那就先把这几步记录下来，然后重复上面的步骤。</p><blockquote><p>2、把实现的思路边分析边记录下来。</p></blockquote><p>在分析实现思路的时候，边分析，边写出来，使用中文写，写得详细点。<br>如果在编程工具里面写的话，直接写成注释，比如：<br>第一步是要干上面<br>第 1.1 要做什么<br>第 1.2 要做什么<br>第二步是要干上面<br>第 2.1 要做什么<br>第 2.2 要做什么<br>…以此类推<br>遇到写不下去的地方，先看看是没有思路还是前面的思路没有想清楚<br>如果是没有思路了，参见第一条处理。<br>如果是前面的思路没有想清楚，那就返回来重新思考，一定要考虑明白。<br>这其实也是这个方法一个额外的好处，那就是能强迫你思考，并进行细致考虑。</p><blockquote><p>3、写实现代码</p></blockquote><p>如果思路整理清楚了，实现思路的步骤也整理好了，这个时候再写代码，<br>几乎就是个翻译的过程，很容易实现。<br>如果只是几步思路清楚了，也没有关系，想清楚多少，就写多少代码，慢慢来。</p><blockquote><p>4、有思路但是写不出代码的解决方法</p></blockquote><p>这种情况常出现在初学者身上，主要是代码写少了。（这种情况需每日练习两百到三百行代码）<br>建议多看看别人怎么写的，积累代码的写法，这一次不会写不要紧。<br>见过一回，下次会写九可以了，积少成多，写得多了，自己能实现的也就多了。</p><blockquote><p>5、方法不一定照搬，可以变通使用</p></blockquote><p>比如边分析、边写思路然后就编写代码也是可以的，只要能有助你思考，都可以。</p><blockquote><p>6、写不出代码</p></blockquote><p>大多数人在写不出代码的时候，都不是完全写不出来，也不是一点都写不出来，请尽量把会的、能写出来的先写出来，多按照本文介绍的方法去练习，量变到质变，很快就能自己写出实现代码来。</p><blockquote><p>参考：<a href="https://www.cnblogs.com/luchuangao/p/6821210.html" target="_blank" rel="noopener">https://www.cnblogs.com/luchuangao/p/6821210.html</a></p></blockquote><h3 id="提高代码阅读能力"><a href="#提高代码阅读能力" class="headerlink" title="提高代码阅读能力"></a>提高代码阅读能力</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1602593438617-6e64c23d-0230-4104-b1b5-6ccd512ad999.png#align=left&amp;display=inline&amp;height=100&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=199&amp;originWidth=1017&amp;size=53543&amp;status=done&amp;style=shadow&amp;width=508.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1602593456351-275ca8e5-583b-499b-aca4-e4295b312c55.png#align=left&amp;display=inline&amp;height=157&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=313&amp;originWidth=1008&amp;size=102518&amp;status=done&amp;style=shadow&amp;width=504" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1602593476552-c6a6f01f-1d45-40e7-93b5-be56bc08e0c7.png#align=left&amp;display=inline&amp;height=170&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=339&amp;originWidth=1010&amp;size=98037&amp;status=done&amp;style=shadow&amp;width=505" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1602593492992-c4a224fc-10e7-478e-9424-c90da2b4805a.png#align=left&amp;display=inline&amp;height=88&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=176&amp;originWidth=996&amp;size=51461&amp;status=done&amp;style=shadow&amp;width=498" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1602593510079-399972ba-bee4-4dbc-81c9-ae619486f7da.png#align=left&amp;display=inline&amp;height=202&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=403&amp;originWidth=996&amp;size=126977&amp;status=done&amp;style=shadow&amp;width=498" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1602593528314-e583f78d-6f87-46d1-826d-841629871530.png#align=left&amp;display=inline&amp;height=163&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=325&amp;originWidth=1013&amp;size=96139&amp;status=done&amp;style=shadow&amp;width=506.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1602593547023-cbcc3eac-6350-4b92-856d-0cfd2a1ccf75.png#align=left&amp;display=inline&amp;height=98&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=196&amp;originWidth=1011&amp;size=52272&amp;status=done&amp;style=shadow&amp;width=505.5" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>🐞解决总结</title>
      <link href="blog/mtigbx/"/>
      <url>blog/mtigbx/</url>
      
        <content type="html"><![CDATA[<h2 id="一、关于-bug"><a href="#一、关于-bug" class="headerlink" title="一、关于 bug"></a>一、关于 bug</h2><p>在编写程序过程中，总会出现各种各样的 bug，按 bug 得类型来分的话</p><ul><li>程序的逻辑出错</li><li>程序语法出错编译器不能通过</li></ul><p>对待 bug，心态端正，不抵触不畏惧不怕麻烦，要想着解 bug 就是这个职业的要务之一，有耐心，积极主动的去解决问题。一步一步的解决问题，所有的技术都是熟能生巧、</p><h2 id="二、解决-bug-的一些方法"><a href="#二、解决-bug-的一些方法" class="headerlink" title="二、解决 bug 的一些方法"></a>二、解决 bug 的一些方法</h2><h3 id="报错信息-理论知识"><a href="#报错信息-理论知识" class="headerlink" title="报错信息+理论知识"></a>报错信息+理论知识</h3><p>当一个 bug 摆在面前，首先要做的就是要认真阅读展现出来的出错信息，这里面有几点需要注意</p><blockquote><p><strong>提高英语</strong></p></blockquote><p>专业词汇的积累、阅读能力等</p><blockquote><p><strong>运用底层知识</strong></p></blockquote><p>学会运行所学过的理论知识，比如在编程过程中，出现路径相关的错误，首先是根据报错可以直接在代码里面更改为正确可运行代码，然后可以利用所学过的操作系统相关文件管理知识等来进一步底层分析之，最后可以旁通自己之前搭建环境过程种总是要配的环境变量，一起思考一起分析，发散性思考，触类旁通所学知识，运用之</p><blockquote><p><strong>IDE 的 Debug 或 print 通法</strong></p></blockquote><p>熟悉各种开发环境的 debug</p><h3 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h3><blockquote><p><strong>一个原则</strong>：“遇事不决，大事谷歌，小事百度”</p></blockquote><ul><li>谷歌需要一些手段才能进行，总结下来就是<strong>搭建一个机场</strong>，方便，安全</li><li>百度解决一些小问题，抑或是 <strong>“烂大街的易错知识”</strong></li><li>相关编程论坛，比如 Stack Overflow、CSDN、博客园等（还是要用谷歌）</li></ul><blockquote><p><strong>结果择优原则</strong></p></blockquote><ul><li>环境统一：解决办法的环境需要和自己的 bug 的环境需要一致</li><li>非毁灭性原则：尽量不要做全局性的修改，比如用命令删除 git 的两个文件来改一个小 bug，属实挖坑</li></ul><blockquote><p><strong>擅用官方文档</strong></p></blockquote><p>如果说出现的 bug 抑或是，使用某个知识出错，是在官方文档中能查到的，优先选择官方文档</p><p>就比如在使用 python 数据分析的时候，许多时候，很多包（pandas、numpy、matplotlib 等）更新比较快，而网上找的一般都是旧版本的指导。同时<br>官方文档讲解更加全面，不过这过程中，要注意提高自身英语水平！</p><h3 id="“思维冥想体”"><a href="#“思维冥想体”" class="headerlink" title="“思维冥想体”"></a>“思维冥想体”</h3><blockquote><p><strong>地阶</strong></p></blockquote><p>运用万能学习方法，去复现一个学习（复现代码）过程，<strong>复盘</strong>bug 之前的工作，来从中找出可能有哪些细节会导致出现该 bug。</p><blockquote><p><strong>天阶</strong></p></blockquote><p>按照思路重写代码！再不行重装系统！</p><p>重构，让你的代码更优美和简洁~</p><p>重装，让你的世界焕然一新~</p><h2 id="三、多记录多总结多仔细"><a href="#三、多记录多总结多仔细" class="headerlink" title="三、多记录多总结多仔细"></a>三、多记录多总结多仔细</h2><blockquote><p>bug 遇见的多了，也就由“形同陌路”转变为“日久生情”了!<br>良好的编程习惯加快解决速度</p></blockquote><p>做事情还是粗心，百分之九十的 bug 都来源于粗心，</p><h2 id="四、持续补充"><a href="#四、持续补充" class="headerlink" title="四、持续补充"></a>四、持续补充</h2><ul><li>在利用搜索引擎找到解决办法时候，不要 <strong>吃着嘴里的，想着锅里的</strong> ，找到一个办法，先将其解决办法看懂看透彻，不要这个方法还没看透彻就看下一个答案。</li><li>学会提取关键词来搜索，能提高很大效率</li></ul>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git常见使用总结</title>
      <link href="blog/fnsge3/"/>
      <url>blog/fnsge3/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Git-安装和本地用户全局配置"><a href="#一、Git-安装和本地用户全局配置" class="headerlink" title="一、Git 安装和本地用户全局配置"></a>一、Git 安装和本地用户全局配置</h2><p>官网<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">下载</a>并且安装</p><p>查看是否安装成功<code>win + R</code>输入 git，出现 git 命令指南，则安装成功</p><p><strong>全局配置本地用户</strong>，在 git Bash 中进行下面配置（尽量仔细，检查一遍），下面的账号名字和邮箱都是 github 的账号所使用的</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"wztlink1013"</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">"2550374815@qq.com"</span></span><br></pre></td></tr></table></figure><p>其中：global 表示全局可用，如果要设置局部可用，则只需要删除 global 即可</p><p>验证是否配置成功：<code>git config --global --list</code></p><h2 id="二、利用-SSH-绑定-Git-和-GitHub"><a href="#二、利用-SSH-绑定-Git-和-GitHub" class="headerlink" title="二、利用 SSH 绑定 Git 和 GitHub"></a>二、利用 SSH 绑定 Git 和 GitHub</h2><h3 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h3><p>输入<code>ssh-keygen -t rsa</code>，然后回车三下 <del>（有些时候要回车四下）</del></p><p>然后在用户管理员文件夹下生成两个文件夹 id_rsa 和 id_rsa.pub,将后者内容添加到 GitHub 上即可。</p><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><p>在 github 上的 setting 上添加新的 ssh 即可</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>在 git Bash 输入：<code>ssh -T git@github.com</code></p><ul><li>如果出现 Hi name !you are……证明绑定成功。</li><li>如果报错，则是因为少了一个文件，使用过程中直接点 yes。具体<a href="https://blog.csdn.net/qq_34446663/article/details/81106018" target="_blank" rel="noopener">解决原理</a></li></ul><h2 id="三、Git-向-GitHub-提交代码"><a href="#三、Git-向-GitHub-提交代码" class="headerlink" title="三、Git 向 GitHub 提交代码"></a>三、Git 向 GitHub 提交代码</h2><p>了解 pull 和 push</p><p><code>git push origin master</code></p><p><code>git pull origin master</code></p><h3 id="提交情况-1：clone"><a href="#提交情况-1：clone" class="headerlink" title="提交情况 1：clone"></a>提交情况 1：clone</h3><p>本地没有 git 仓库，也没有 git init 操作，需要先从 GitHub 下载</p><p>选定仓库克隆</p><blockquote><p>git clone <a href="https://github.com/wztlink1013/Python_DataAnalysis.git" target="_blank" rel="noopener">https://github.com/wztlink1013/Python_DataAnalysis.git</a></p></blockquote><p>对本地文件夹进行一系列更改之后，执行命令：</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">git status   <span class="comment">#查看仓库命令状态</span></span><br><span class="line">git <span class="keyword">add</span><span class="bash"> .    <span class="comment">#文件提交到文件缓冲区</span></span></span><br><span class="line">git commmit -m <span class="string">"描述本次修改信息"</span>    <span class="comment">#提交仓库并且添加提交信息</span></span><br><span class="line">git log  <span class="comment">#查看修改日志</span></span><br><span class="line">git status   <span class="comment">#再次查看</span></span><br></pre></td></tr></table></figure><p>push 到远程仓库</p><blockquote><p>首次推送：<code>git push -u origin master</code><br>非首次推送：<code>git push origin master</code></p></blockquote><h3 id="提交情况-2：pull"><a href="#提交情况-2：pull" class="headerlink" title="提交情况 2：pull"></a>提交情况 2：pull</h3><p>这种情况是，本地有 git 仓库，指之前已经进行 git init 等一系列命令对该文件夹操作过。新建一个例子：</p><blockquote><p><code>git init</code>初始化本地仓库<br><code>git remote add origin [https://github.com/guobinhit/springmvc-tutorial.git](https://github.com/guobinhit/springmvc-tutorial.git)</code>关联远程仓库<br><code>git pull origin master</code>同步远程仓库和本地仓库</p></blockquote><p>假如在本地新加文件：</p><blockquote><p>执行 git status 等命令<br>再执行<code>git push origin master</code>将本地新内容提交到远程仓库</p></blockquote><p><strong>注意！</strong>：在进行本地仓库和远程仓库的文件交互时，一定要先 pull 再 push，不然会出未知错误。</p><h2 id="四、常用命令总结"><a href="#四、常用命令总结" class="headerlink" title="四、常用命令总结"></a>四、常用命令总结</h2><h3 id="常规命令"><a href="#常规命令" class="headerlink" title="常规命令"></a>常规命令</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git status</span><br><span class="line">git add</span><br><span class="line">git <span class="keyword">commit</span></span><br><span class="line">git <span class="keyword">log</span></span><br><span class="line">git branch   <span class="comment">#查看分支</span></span><br><span class="line">git checkout    <span class="comment">#切换分支</span></span><br><span class="line">git <span class="keyword">merge</span>   <span class="comment">#合并分支</span></span><br><span class="line">git branch -d   <span class="comment">#删除分支</span></span><br><span class="line">git tag <span class="comment">#给分支添加标签</span></span><br><span class="line">git remote -v   <span class="comment">#查看相关信息</span></span><br></pre></td></tr></table></figure><h3 id="git-push-f"><a href="#git-push-f" class="headerlink" title="git push -f"></a>git push -f</h3><p>报错信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push origin master</span><br><span class="line">To https://github.com/wztlink1013/website-source.git</span><br><span class="line"> ! [rejected]        master -&gt; master (fetch first)</span><br><span class="line">error: failed to push some refs to <span class="string">'https://github.com/wztlink1013/website-source.git'</span></span><br><span class="line">hint: Updates were rejected because the remote contains work that you <span class="keyword">do</span></span><br><span class="line">hint: not have locally. This is usually caused by another repository pushing</span><br><span class="line">hint: to the same ref. You may want to first integrate the remote changes</span><br><span class="line">hint: (e.g., <span class="string">'git pull ...'</span>) before pushing again.</span><br><span class="line">hint: See the <span class="string">'Note about fast-forwards'</span> <span class="keyword">in</span> <span class="string">'git push --help'</span> <span class="keyword">for</span> details.</span><br></pre></td></tr></table></figure><p>分析并解决问题</p><blockquote><p>强制性 push</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push -f origin master</span><br></pre></td></tr></table></figure><h3 id="文件夹相关命令"><a href="#文件夹相关命令" class="headerlink" title="文件夹相关命令"></a>文件夹相关命令</h3><blockquote><p>复制文件夹</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp  -r  ./js/  ./backup/</span><br></pre></td></tr></table></figure><blockquote><p>移动文件夹</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv  visualization/  -f  .github_pages/</span><br></pre></td></tr></table></figure><blockquote><p>删除文件夹</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm  -r  .git</span><br></pre></td></tr></table></figure><h2 id="五、部署多个-github-coding-等账号"><a href="#五、部署多个-github-coding-等账号" class="headerlink" title="五、部署多个 github/+coding 等账号"></a>五、部署多个 github/+coding 等账号</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>好处：一台设备可以使用多个 github 账号/github+coding 等等多平台托管/搭建两个静态博客</p><p>取消全局用户配置（每建立一个新文件夹，需要输入使用账号），建立多个 ssh 密匙（如果是 github 账号+coding 账号+gitee 账号等）</p><p>SSH 的公钥是 GitHub 连接本地仓库和远程仓库的标识，一个公钥只能对应一个 GitHub 账户，一个相同的公钥不能上传到不同的 GitHub 账户</p><p>一台电脑，可以生成多对公私钥，可以通过配置，将不同的公钥上传到不同的 GitHub 账号，那么就不存在单个公钥绑定多个 GitHub 账号的情况存在了</p><h3 id="多密匙生成"><a href="#多密匙生成" class="headerlink" title="多密匙生成"></a>多密匙生成</h3><ul><li>先进来该文件夹（忽略图片上写的字）<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1597632490897-11718be6-6492-4ead-a739-1c92af25c648.png#align=left&amp;display=inline&amp;height=372&amp;margin=%5Bobject%20Object%5D&amp;originHeight=372&amp;originWidth=1215&amp;size=0&amp;status=done&amp;style=none&amp;width=1215" alt></li><li>创建新密匙方法一（首选）</li></ul><p><code>ssh-keygen -t rsa -f ~/.ssh/这里是新密钥名称 -C &quot;这里是你的邮箱&quot;</code></p><p>注意区别新密钥名称和旧密钥名称，不要相同！！</p><ul><li>创建新密匙方法二</li></ul><p>输入这个：<code>ssh-keygen -t rsa -C &quot;这里是你的邮箱&quot;</code></p><p>出现这两句：<br><code>Generating public/private rsa key pair.</code></p><p><code>Enter file in which to save the key (/c/Users/you/.ssh/id_rsa):</code></p><p>注意此时需要你输入新密钥的名称，同样要注意区别新密钥名称和旧密钥名称，不要相同，之后再两次回车。</p><h3 id="配置-config"><a href="#配置-config" class="headerlink" title="配置 config"></a>配置 config</h3><p>.ssh 根文件夹下没有 config 文件，需要新建</p><ul><li>新建 config 文件方法一</li></ul><p>在.ssh 根路径下键入该命令<code>touch config</code></p><ul><li>新建 config 文件方法二</li></ul><p>记事本新建文件 config 文件！！没有后缀</p><ul><li>输入内容</li></ul><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#第一个账号，默认使用的账号，不用做任何更改</span></span><br><span class="line">Host github.com</span><br><span class="line">trueHostName github.com</span><br><span class="line"><span class="built_in">User </span>git</span><br><span class="line">trueIdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"><span class="comment">#第二个新账号，#"xxxxxx"为前缀名，可以任意设置，要记住，后面需要用到</span></span><br><span class="line">Host xxxxxx.github.com</span><br><span class="line">trueHostName github.com</span><br><span class="line"><span class="built_in">User </span>git</span><br><span class="line">trueIdentityFile ~/.ssh/这里是你创建的新密钥的名称</span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">one</span>(one<span class="variable">@gmail</span>.com)</span><br><span class="line"><span class="selector-tag">Host</span> <span class="selector-tag">one</span><span class="selector-class">.github</span><span class="selector-class">.com</span></span><br><span class="line"><span class="selector-tag">HostName</span> <span class="selector-tag">github</span><span class="selector-class">.com</span></span><br><span class="line"><span class="selector-tag">PreferredAuthentications</span> <span class="selector-tag">publickey</span></span><br><span class="line"><span class="selector-tag">IdentityFile</span> ~/<span class="selector-class">.ssh</span>/<span class="selector-tag">id_rsa_one</span></span><br><span class="line"><span class="selector-tag">User</span> <span class="selector-tag">one</span></span><br><span class="line"></span><br><span class="line"># <span class="selector-tag">two</span>(two<span class="variable">@gmail</span>.com)</span><br><span class="line"><span class="selector-tag">Host</span> <span class="selector-tag">two</span><span class="selector-class">.github</span><span class="selector-class">.com</span></span><br><span class="line"><span class="selector-tag">HostName</span> <span class="selector-tag">github</span><span class="selector-class">.com</span></span><br><span class="line"><span class="selector-tag">PreferredAuthentications</span> <span class="selector-tag">publickey</span></span><br><span class="line"><span class="selector-tag">IdentityFile</span> ~/<span class="selector-class">.ssh</span>/<span class="selector-tag">id_rsa_two</span></span><br><span class="line"><span class="selector-tag">User</span> <span class="selector-tag">two</span></span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Host myhost（这里是自定义的host简称，以后连接远程服务器就可以用命令ssh myhost）</span><br><span class="line">HostName 主机名可用ip也可以是域名(如:github.com或者bitbucket.org)</span><br><span class="line">Port 服务器open-ssh端口（默认：22,默认时一般不写此行）</span><br><span class="line">PreferredAuthentications   配置登录时用什么权限认证--可设为publickey,password publickey,keyboard-interactive等</span><br><span class="line">IdentityFile 证书文件路径（如~/.ssh/id_rsa_*)</span><br><span class="line">User 登录用户名(如：git)</span><br></pre></td></tr></table></figure><p>每个账号单独配置一个 Host，每个 Host 要取一个别名，一般为每个 Host 主要配置 HostName 和 IdentityFile 两个属性，配置完保存即可。</p><p>Host 的名字可以自定义名字，不过这个会影响 git 相关命令，例如：Host mygithub 这样定义的话，使用命令 git clone git@mygithub:PopFisher/AndroidRotateAnim.git，git@后面紧跟的名字改为 mygithub</p><blockquote><p><strong>mine</strong> &gt; <img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1597632490639-fd51b09d-c037-4fdb-bad3-e2e1d56d7aed.png#align=left&amp;display=inline&amp;height=637&amp;margin=%5Bobject%20Object%5D&amp;originHeight=637&amp;originWidth=999&amp;size=0&amp;status=done&amp;style=none&amp;width=999" alt></p></blockquote><h3 id="部署-SSH-key"><a href="#部署-SSH-key" class="headerlink" title="部署 SSH key"></a>部署 SSH key</h3><p>将根文件夹下的<code>wztlink1013.pub</code>文件复制到 github 上，coding/gitee 类似</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1597632490332-674f64ec-d09e-4351-a3cd-dbebc15a3a32.png#align=left&amp;display=inline&amp;height=872&amp;margin=%5Bobject%20Object%5D&amp;originHeight=872&amp;originWidth=1839&amp;size=0&amp;status=done&amp;style=none&amp;width=1839" alt><br>title 可以随便填</p><h3 id="清缓存，添-agent"><a href="#清缓存，添-agent" class="headerlink" title="清缓存，添 agent"></a>清缓存，添 agent</h3><p>在根目录下</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">ssh-<span class="keyword">add</span><span class="bash"> -D</span></span><br><span class="line">ssh-<span class="keyword">add</span><span class="bash"> xxxxxx <span class="comment">#旧密钥名称，一般是id_rsa</span></span></span><br><span class="line">ssh-<span class="keyword">add</span><span class="bash"> xxxxxx <span class="comment">#新创建的密钥名称</span></span></span><br></pre></td></tr></table></figure><p>如果执行以上命令出现错误：<code>Could not open a connection to your authentication agent.</code>，那么就需要先执行<code>ssh-agent bash</code>，再执行以上命令</p><h3 id="验证是否配置成功"><a href="#验证是否配置成功" class="headerlink" title="验证是否配置成功"></a>验证是否配置成功</h3><p>一下第一个是之前默认的 github 账号，默认即可，第二个是添加的</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ssh</span> -T git<span class="variable">@github</span>.com</span><br><span class="line">ssh -T git<span class="variable">@xxxxxxx</span>.github.com</span><br></pre></td></tr></table></figure><p>出现<code>Hi 你的用户名! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code>则成功。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>取消全局用户名和邮箱配置（如果已经设置了全局的话）</li></ul><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global --unset user.name</span><br><span class="line">git<span class="built_in"> config </span>--global --unset user.email</span><br></pre></td></tr></table></figure><ul><li>clone</li></ul><p>原来：<code>git clone git@github.com: wztlink1013/learngit.git</code></p><p>现在：</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">git</span>@wztlink1013.github.com: wztlink1013/learngit.git</span><br><span class="line">git <span class="keyword">clone</span> <span class="title">git</span>@twicename.github.com: twicename/learngit.git</span><br></pre></td></tr></table></figure><ul><li>单独为每个 repo 设置 用户名/邮箱【以文件夹为单位】</li></ul><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">git<span class="built_in"> config </span>user.name <span class="string">"wztlink1013"</span></span><br><span class="line">git<span class="built_in"> config </span>user.email <span class="string">"2550374815@qq.com"</span></span><br><span class="line"></span><br><span class="line">git<span class="built_in"> config </span>user.name <span class="string">"twicename"</span></span><br><span class="line">git<span class="built_in"> config </span>user.email <span class="string">"123456789@qq.com"</span></span><br></pre></td></tr></table></figure><p>如果报错：<code>fatal: not in a git directory</code>，说明没有进入.git 目录下，具体路径：其中.git 目录是隐藏的，需要你设置隐藏目录可见<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1597632490310-1580343b-946c-4d67-a063-d5cd11bc6136.png#align=left&amp;display=inline&amp;height=105&amp;margin=%5Bobject%20Object%5D&amp;originHeight=105&amp;originWidth=925&amp;size=0&amp;status=done&amp;style=none&amp;width=925" alt></p><p>执行<code>git config --list</code>查看设置是否成功</p><h2 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h2><ul><li><a href="https://github.com/guobinhit/cg-blog/blob/master/articles/github/README.md" target="_blank" rel="noopener">GitHub 简单使用 https://github.com/guobinhit/cg-blog/blob/master/articles/github/README.md</a></li><li><a href="https://www.itrhx.com/2019/01/18/A16-deploy-two-or-more-hexo-blogs/" target="_blank" rel="noopener">多账号 https://www.itrhx.com/2019/01/18/A16-deploy-two-or-more-hexo-blogs/</a></li><li><a href="https://blog.csdn.net/u013716535/article/details/78621775" target="_blank" rel="noopener">多账号 https://blog.csdn.net/u013716535/article/details/78621775</a></li><li><a href="https://blog.csdn.net/IT_xiao_bai/article/details/88563103?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">多账号 https://blog.csdn.net/IT_xiao_bai/article/details/88563103?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Environment </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse配置Tomcat创建Servlet</title>
      <link href="blog/ro0lgm/"/>
      <url>blog/ro0lgm/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Eclipse-的下载与安装与使用"><a href="#一、Eclipse-的下载与安装与使用" class="headerlink" title="一、Eclipse 的下载与安装与使用"></a>一、Eclipse 的下载与安装与使用</h2><p><a href="https://www.eclipse.org/downloads/" target="_blank" rel="noopener">下载地址</a><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685043597-84e5ed4c-8ad9-496b-997d-fd84136d0a86.png#align=left&amp;display=inline&amp;height=441&amp;margin=%5Bobject%20Object%5D&amp;originHeight=441&amp;originWidth=1817&amp;size=0&amp;status=done&amp;style=none&amp;width=1817" alt></p><p><strong>注意不要下错版本，不然开发不了 web 环境</strong><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685043623-2432fa56-57df-4b19-bbcf-d7f803db63d3.png#align=left&amp;display=inline&amp;height=758&amp;margin=%5Bobject%20Object%5D&amp;originHeight=758&amp;originWidth=731&amp;size=0&amp;status=done&amp;style=none&amp;width=731" alt><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685043608-ed00c908-2eb3-4a07-bcd4-c93a58aed494.png#align=left&amp;display=inline&amp;height=763&amp;margin=%5Bobject%20Object%5D&amp;originHeight=763&amp;originWidth=741&amp;size=0&amp;status=done&amp;style=none&amp;width=741" alt><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685043479-aac1b3ff-f51d-4dce-8313-4e10d2e78bbb.png#align=left&amp;display=inline&amp;height=373&amp;margin=%5Bobject%20Object%5D&amp;originHeight=373&amp;originWidth=762&amp;size=0&amp;status=done&amp;style=none&amp;width=762" alt></p><h2 id="二、Tomcat-的下载与配置"><a href="#二、Tomcat-的下载与配置" class="headerlink" title="二、Tomcat 的下载与配置"></a>二、Tomcat 的下载与配置</h2><p><a href="https://tomcat.apache.org/download-90.cgi" target="_blank" rel="noopener">下载地址</a><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685043712-245a08a5-48cd-4446-ae4b-2ac442f09a44.png#align=left&amp;display=inline&amp;height=729&amp;margin=%5Bobject%20Object%5D&amp;originHeight=729&amp;originWidth=1829&amp;size=0&amp;status=done&amp;style=none&amp;width=1829" alt><br><strong>一直下一步即可</strong><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685043478-1e8b6460-5b48-424e-8f2d-db26d6bbce42.png#align=left&amp;display=inline&amp;height=485&amp;margin=%5Bobject%20Object%5D&amp;originHeight=485&amp;originWidth=623&amp;size=0&amp;status=done&amp;style=none&amp;width=623" alt><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685043417-e391db44-2cd9-4c7c-8e6b-1f131ab95769.png#align=left&amp;display=inline&amp;height=283&amp;margin=%5Bobject%20Object%5D&amp;originHeight=283&amp;originWidth=624&amp;size=0&amp;status=done&amp;style=none&amp;width=624" alt></p><p>打开浏览器 键入 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 进入页面则表示安装成功</p><p>添加环境变量，以下全在系统环境变量下配置<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685043418-feddef63-fcb3-45ce-ac5a-33dd94d77655.png#align=left&amp;display=inline&amp;height=450&amp;margin=%5Bobject%20Object%5D&amp;originHeight=450&amp;originWidth=1089&amp;size=0&amp;status=done&amp;style=none&amp;width=1089" alt><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685043499-20fddab9-abfb-4d0d-9c6d-956933ee59be.png#align=left&amp;display=inline&amp;height=24&amp;margin=%5Bobject%20Object%5D&amp;originHeight=24&amp;originWidth=704&amp;size=0&amp;status=done&amp;style=none&amp;width=704" alt></p><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">TOMCAT_HOME：C:<span class="symbol">\P</span>rogram Files<span class="symbol">\A</span>pache Software Foundation<span class="symbol">\T</span>omcat 9.0</span><br><span class="line">CATALINA_BASE：C:<span class="symbol">\P</span>rogram Files<span class="symbol">\A</span>pache Software Foundation<span class="symbol">\T</span>omcat 9.0;</span><br><span class="line">CATALINA_HOME：C:<span class="symbol">\P</span>rogram Files<span class="symbol">\A</span>pache Software Foundation<span class="symbol">\T</span>omcat 9.0;</span><br><span class="line">在classpath当中加入<span class="variable">%CATALINA_HOME%</span><span class="symbol">\c</span>ommon<span class="symbol">\l</span>ib<span class="symbol">\s</span>ervlet-api.jar;</span><br><span class="line">在path中加入<span class="variable">%CATALINA_HOME%</span><span class="symbol">\b</span>in;</span><br></pre></td></tr></table></figure><p>打开浏览器 键入 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 进入页面则表示配置成功</p><h2 id="三、Eclipse-配置-Tomcat"><a href="#三、Eclipse-配置-Tomcat" class="headerlink" title="三、Eclipse 配置 Tomcat"></a>三、Eclipse 配置 Tomcat</h2><p><strong>让 Tomcat 服务器显示在控制台上，将 Web 应用部署到 Tomcat 中</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685043589-c8022021-1185-4c41-b114-630856e16984.png#align=left&amp;display=inline&amp;height=350&amp;margin=%5Bobject%20Object%5D&amp;originHeight=350&amp;originWidth=1837&amp;size=0&amp;status=done&amp;style=none&amp;width=1837" alt><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685043661-236843dd-f3ea-433e-b23a-254cc0a41c9b.png#align=left&amp;display=inline&amp;height=958&amp;margin=%5Bobject%20Object%5D&amp;originHeight=958&amp;originWidth=1217&amp;size=0&amp;status=done&amp;style=none&amp;width=1217" alt><br>点击<code>Window</code> → <code>Show View</code> → <code>Servers</code> 也可以在控制台点击<code>Servers</code><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685043514-556e9b3f-1003-40ff-9066-70349be51101.png#align=left&amp;display=inline&amp;height=790&amp;margin=%5Bobject%20Object%5D&amp;originHeight=790&amp;originWidth=1600&amp;size=0&amp;status=done&amp;style=none&amp;width=1600" alt><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685043568-aa8984a7-e9e9-4206-a922-f3386127191d.png#align=left&amp;display=inline&amp;height=597&amp;margin=%5Bobject%20Object%5D&amp;originHeight=597&amp;originWidth=597&amp;size=0&amp;status=done&amp;style=none&amp;width=597" alt><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685043484-23195297-3636-47d7-bf44-ee0151382f87.png#align=left&amp;display=inline&amp;height=766&amp;margin=%5Bobject%20Object%5D&amp;originHeight=766&amp;originWidth=1478&amp;size=0&amp;status=done&amp;style=none&amp;width=1478" alt><br><strong>双击点击</strong><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685043403-e34d7544-8144-4516-bb7c-53adbabac167.png#align=left&amp;display=inline&amp;height=290&amp;margin=%5Bobject%20Object%5D&amp;originHeight=290&amp;originWidth=1375&amp;size=0&amp;status=done&amp;style=none&amp;width=1375" alt></p><h2 id="四、Eclipse-使用-Servlet"><a href="#四、Eclipse-使用-Servlet" class="headerlink" title="四、Eclipse 使用 Servlet"></a>四、Eclipse 使用 Servlet</h2><h3 id="创建-web-工程"><a href="#创建-web-工程" class="headerlink" title="创建 web 工程"></a>创建 web 工程</h3><p><strong>创建过程中，要记得勾选生成 web.xml 文件选项</strong><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685043545-0429f9cf-3910-4401-85da-08dd0118e9b1.png#align=left&amp;display=inline&amp;height=277&amp;margin=%5Bobject%20Object%5D&amp;originHeight=277&amp;originWidth=1838&amp;size=0&amp;status=done&amp;style=none&amp;width=1838" alt><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685043538-d98f2569-40d6-4c3a-8111-9c3d6702052a.png#align=left&amp;display=inline&amp;height=382&amp;margin=%5Bobject%20Object%5D&amp;originHeight=382&amp;originWidth=820&amp;size=0&amp;status=done&amp;style=none&amp;width=820" alt></p><h3 id="添加相关文件"><a href="#添加相关文件" class="headerlink" title="添加相关文件"></a>添加相关文件</h3><p><strong>添加下面的四个文件</strong><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685043712-c178c180-3c3a-44a2-9518-671033558337.png#align=left&amp;display=inline&amp;height=1015&amp;margin=%5Bobject%20Object%5D&amp;originHeight=1015&amp;originWidth=1831&amp;size=0&amp;status=done&amp;style=none&amp;width=1831" alt></p><blockquote><p>HelloWordServlet.java</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.firstmyapp.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWordServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">true <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">truetrue System.out.println(<span class="string">"接受了客户端的请求----------------------------------------------------"</span>);</span><br><span class="line">truetrue <span class="comment">// 设置响应类型:</span></span><br><span class="line">true        resp.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line">true        <span class="comment">// 获取输出流:</span></span><br><span class="line">true        PrintWriter pw = resp.getWriter();</span><br><span class="line">true        <span class="comment">// 写入响应:</span></span><br><span class="line">true        pw.write(<span class="string">"&lt;h1&gt;Hello, world!&lt;/h1&gt;"</span>);</span><br><span class="line">true        <span class="comment">// 最后不要忘记flush强制输出:</span></span><br><span class="line">true        pw.flush();</span><br><span class="line">true    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>web.xml<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685043517-5459e979-8525-4be9-8dab-d38f0857ef56.png#align=left&amp;display=inline&amp;height=627&amp;margin=%5Bobject%20Object%5D&amp;originHeight=627&amp;originWidth=1178&amp;size=0&amp;status=done&amp;style=none&amp;width=1178" alt></p></blockquote><h3 id="运行并查看结果"><a href="#运行并查看结果" class="headerlink" title="运行并查看结果"></a>运行并查看结果</h3><p><strong>运行</strong><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685043718-5d90186b-8040-4098-b1d4-bb1f67740382.png#align=left&amp;display=inline&amp;height=761&amp;margin=%5Bobject%20Object%5D&amp;originHeight=761&amp;originWidth=1434&amp;size=0&amp;status=done&amp;style=none&amp;width=1434" alt><br>然后查看 console 部分<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685043524-efeaf228-713b-43e1-ba15-375060ef20d2.png#align=left&amp;display=inline&amp;height=300&amp;margin=%5Bobject%20Object%5D&amp;originHeight=300&amp;originWidth=1449&amp;size=0&amp;status=done&amp;style=none&amp;width=1449" alt><br><strong>服务器响应情况</strong></p><blockquote><p>出现下图则说明成功<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685043360-fd5bb570-f56a-429a-ad0e-627646447132.png#align=left&amp;display=inline&amp;height=190&amp;margin=%5Bobject%20Object%5D&amp;originHeight=190&amp;originWidth=1318&amp;size=0&amp;status=done&amp;style=none&amp;width=1318" alt></p></blockquote><blockquote><p>还可以回到控制台查看请求成功情况<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685043568-b62922c0-c458-4c71-bd9c-800f57b356de.png#align=left&amp;display=inline&amp;height=322&amp;margin=%5Bobject%20Object%5D&amp;originHeight=322&amp;originWidth=1445&amp;size=0&amp;status=done&amp;style=none&amp;width=1445" alt></p></blockquote><h2 id="五、过程中出现的问题"><a href="#五、过程中出现的问题" class="headerlink" title="五、过程中出现的问题"></a>五、过程中出现的问题</h2><h3 id="IDEA-上的部署"><a href="#IDEA-上的部署" class="headerlink" title="IDEA 上的部署"></a>IDEA 上的部署</h3><p>一开始从 tomcat 部署是完成的，具体参考我的 csdn 一篇小文章<a href="https://blog.csdn.net/ZTlink1013/article/details/104815639" target="_blank" rel="noopener">地址</a>。但是在后面使用 Servlet 的时候，不能成功部署，具体原因【图片内容来自<a href="https://blog.csdn.net/HughGilbert/article/details/56424137" target="_blank" rel="noopener">链接</a>！！】<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685043902-5708dbdc-79d7-4e16-9e6d-d5571c5de758.png#align=left&amp;display=inline&amp;height=921&amp;margin=%5Bobject%20Object%5D&amp;originHeight=921&amp;originWidth=941&amp;size=0&amp;status=done&amp;style=none&amp;width=941" alt></p><blockquote><p>暂时分析：是和 idea 下的根目录下的某个配置文件的默认配置有关，需要更改相关内容，暂时不折腾了。先记录下，有空再折腾，先学习。还是 eclipse 好配置···</p></blockquote><h3 id="对待问题"><a href="#对待问题" class="headerlink" title="对待问题"></a>对待问题</h3><p>对待所发现的问题，第一要做的不是复制粘贴 bug 进谷歌百度，而是看待问题本身，找到问题的根源，用自己所学到的知识先加以分析理解，再想办法解决</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://blog.csdn.net/weixin_34026276/article/details/93834823?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">https://blog.csdn.net/weixin_34026276/article/details/93834823?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a></li><li><a href="https://blog.csdn.net/qq_38190185/article/details/88198794?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">https://blog.csdn.net/qq_38190185/article/details/88198794?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a></li><li><a href="https://www.yiibai.com/servlet/creating-servlet-in-eclipse-ide.html" target="_blank" rel="noopener">直接创建 Servlet</a></li><li>快捷键：<a href="https://www.open-open.com/bbs/view/1320934157953" target="_blank" rel="noopener">https://www.open-open.com/bbs/view/1320934157953</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Environment </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IDEA配置Tomcat</title>
      <link href="blog/fgh5bc/"/>
      <url>blog/fgh5bc/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Tomcat-的下载"><a href="#一、Tomcat-的下载" class="headerlink" title="一、Tomcat 的下载"></a>一、Tomcat 的下载</h2><h3 id="正常下载并安装"><a href="#正常下载并安装" class="headerlink" title="正常下载并安装"></a>正常下载并安装</h3><blockquote><p>！！！在此之前默认读者下载且配置好了 jdk 环境</p></blockquote><ul><li>进入该官网<a href="https://imgconvert.csdnimg.cn/aHR0cDovL3RvbWNhdC5hcGFjaGUub3JnLw?x-oss-process=image/format,png" target="_blank" rel="noopener">下载页面</a><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598787914511-a035ba93-0b7a-450b-b391-5d1452435ca7.png#align=left&amp;display=inline&amp;height=238&amp;margin=%5Bobject%20Object%5D&amp;originHeight=952&amp;originWidth=1842&amp;size=0&amp;status=done&amp;style=shadow&amp;width=461" alt></li><li>下载并解压到自己的相应盘区，再进入下图文件夹检验是否成功<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598787914448-2ef2e1a1-2966-4d35-8bfe-82162aa1588b.png#align=left&amp;display=inline&amp;height=273&amp;margin=%5Bobject%20Object%5D&amp;originHeight=727&amp;originWidth=1147&amp;size=0&amp;status=done&amp;style=shadow&amp;width=431" alt></li><li>点击第二个框不出现闪退情况则证明成功<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598787914507-87063aec-884a-4180-b124-568478d81bc0.png#align=left&amp;display=inline&amp;height=222&amp;margin=%5Bobject%20Object%5D&amp;originHeight=639&amp;originWidth=1223&amp;size=0&amp;status=done&amp;style=shadow&amp;width=425" alt></li><li>浏览器进入端口<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a>上述配置成功则表明成功<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598787914624-248148e3-3f5f-45ca-ad93-c063216a7aff.png#align=left&amp;display=inline&amp;height=240&amp;margin=%5Bobject%20Object%5D&amp;originHeight=1030&amp;originWidth=1838&amp;size=0&amp;status=done&amp;style=shadow&amp;width=429" alt></li></ul><h3 id="过程中可能会出现的问题"><a href="#过程中可能会出现的问题" class="headerlink" title="过程中可能会出现的问题"></a>过程中可能会出现的问题</h3><ul><li>点击 startup.bat 文件出现闪退<br>电脑中 java jdk 有无（JAVA_HOME）</li><li>端口被占用<br>进入 Tomcat 文件夹下的 conf 文件下的 server.xml 文件，用记事本查找 8080，下面复制一个新的初始端口<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598787914513-8083bc6e-4c6f-436e-b0b0-98d3d70b9dea.png#align=left&amp;display=inline&amp;height=80&amp;margin=%5Bobject%20Object%5D&amp;originHeight=80&amp;originWidth=557&amp;size=0&amp;status=done&amp;style=none&amp;width=557" alt></li></ul><h2 id="二、IDEA-配置-Tomcat"><a href="#二、IDEA-配置-Tomcat" class="headerlink" title="二、IDEA 配置 Tomcat"></a>二、IDEA 配置 Tomcat</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li>新建一个项目<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598787914503-6a4bf3f9-0e92-4bd3-bcde-e65af73510b8.png#align=left&amp;display=inline&amp;height=1060&amp;margin=%5Bobject%20Object%5D&amp;originHeight=1060&amp;originWidth=1457&amp;size=0&amp;status=done&amp;style=none&amp;width=1457" alt></li><li>编写 head/body 待会测试用<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598787914719-36f4cef3-db7c-4bd9-a43a-5c92f0afead2.png#align=left&amp;display=inline&amp;height=1080&amp;margin=%5Bobject%20Object%5D&amp;originHeight=1080&amp;originWidth=1842&amp;size=0&amp;status=done&amp;style=none&amp;width=1842" alt></li><li>相关配置<br>进入配置页面<img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598787914684-a3f47ea5-50df-450f-935d-f9ec086bc2cb.png#align=left&amp;display=inline&amp;height=1080&amp;margin=%5Bobject%20Object%5D&amp;originHeight=1080&amp;originWidth=1842&amp;size=0&amp;status=done&amp;style=none&amp;width=1842" alt><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598787914511-d1b72498-32cb-4868-8758-34fb3de3e798.png#align=left&amp;display=inline&amp;height=853&amp;margin=%5Bobject%20Object%5D&amp;originHeight=853&amp;originWidth=1343&amp;size=0&amp;status=done&amp;style=none&amp;width=1343" alt><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598787914585-5e3362d9-db50-4bdb-8640-f3a2f630bbbf.png#align=left&amp;display=inline&amp;height=932&amp;margin=%5Bobject%20Object%5D&amp;originHeight=932&amp;originWidth=1343&amp;size=0&amp;status=done&amp;style=none&amp;width=1343" alt></li></ul><h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598787914608-c71c5263-ae91-472f-b760-cc3fbd78b81c.png#align=left&amp;display=inline&amp;height=1080&amp;margin=%5Bobject%20Object%5D&amp;originHeight=1080&amp;originWidth=1842&amp;size=0&amp;status=done&amp;style=none&amp;width=1842" alt><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598787914608-14ca2925-9dd2-4cfd-9399-597c08094743.png#align=left&amp;display=inline&amp;height=285&amp;margin=%5Bobject%20Object%5D&amp;originHeight=285&amp;originWidth=1836&amp;size=0&amp;status=done&amp;style=none&amp;width=1836" alt></p>]]></content>
      
      
      <categories>
          
          <category> Environment </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse的使用总结</title>
      <link href="blog/at014v/"/>
      <url>blog/at014v/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Eclipse-的下载与安装"><a href="#一、Eclipse-的下载与安装" class="headerlink" title="一、Eclipse 的下载与安装"></a>一、Eclipse 的下载与安装</h2><p><a href="https://www.eclipse.org/downloads/" target="_blank" rel="noopener">下载地址</a><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685180944-7ec7ebc3-8c39-44a7-9bec-85fded021a40.png#align=left&amp;display=inline&amp;height=441&amp;margin=%5Bobject%20Object%5D&amp;originHeight=441&amp;originWidth=1817&amp;size=0&amp;status=done&amp;style=none&amp;width=1817" alt></p><p><strong>注意不要下错版本，不然开发不了 web 环境</strong><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685180923-a106c8c7-aebe-4f0a-bc06-d166bfc8894d.png#align=left&amp;display=inline&amp;height=758&amp;margin=%5Bobject%20Object%5D&amp;originHeight=758&amp;originWidth=731&amp;size=0&amp;status=done&amp;style=none&amp;width=731" alt><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685180948-16e05303-0d11-454e-8bbd-71a11d7a3ef7.png#align=left&amp;display=inline&amp;height=763&amp;margin=%5Bobject%20Object%5D&amp;originHeight=763&amp;originWidth=741&amp;size=0&amp;status=done&amp;style=none&amp;width=741" alt><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685180925-0262b0ea-f7af-493b-85a5-d8e7cbd12751.png#align=left&amp;display=inline&amp;height=373&amp;margin=%5Bobject%20Object%5D&amp;originHeight=373&amp;originWidth=762&amp;size=0&amp;status=done&amp;style=none&amp;width=762" alt></p><h2 id="二、插件"><a href="#二、插件" class="headerlink" title="二、插件"></a>二、插件</h2><blockquote><p>进入：<code>Help Eclipse</code> <code>MarketPlace</code></p></blockquote><ul><li>Plugin1：Waka Time</li></ul><h2 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h2><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><ul><li>字体设置</li><li>行数显示</li><li>更改工作空间的默认编码</li><li>代码增强显示，在设置中的<code>java</code>中的<code>content Assistant</code>中，将<code>.</code>改为<code>.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789</code></li></ul><h3 id="导入已存在的项目"><a href="#导入已存在的项目" class="headerlink" title="导入已存在的项目"></a>导入已存在的项目</h3>]]></content>
      
      
      <categories>
          
          <category> Environment </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb-上课笔记</title>
      <link href="blog/tb3der/"/>
      <url>blog/tb3der/</url>
      
        <content type="html"><![CDATA[<h1 id="【第二章】JavaWeb-概述"><a href="#【第二章】JavaWeb-概述" class="headerlink" title="【第二章】JavaWeb 概述"></a>【第二章】JavaWeb 概述</h1><h2 id="一、XML"><a href="#一、XML" class="headerlink" title="一、XML"></a>一、XML</h2><p><code>XML</code>  是一种标记性语言，但是不同于 <code>HTML</code> ，目的其实就是用于传输数据，但是 <code>HTML</code>  的目的可以理解为展示</p><blockquote><p>网站建好之后，需要将自己的文章链接提交到百度/谷歌，通过部署生成的<code>baidusitemap.xml</code>和<code>sitemap.xml</code>文件，sitemap 提交方式提交以达到目的。</p></blockquote><h3 id="XML-语法"><a href="#XML-语法" class="headerlink" title="XML 语法"></a>XML 语法</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598670375381-0e3b13a8-6a22-47fb-8e8f-32c203fbf25d.png#align=left&amp;display=inline&amp;height=207&amp;margin=%5Bobject%20Object%5D&amp;originHeight=388&amp;originWidth=866&amp;size=0&amp;status=done&amp;style=shadow&amp;width=461" alt></p><ul><li>文档声明：图中最上面一行</li><li>元素定义：形式相当于 <code>HTML</code>  当中的标签，但不是标签，有根元素（一般只有一个），空元素等之分</li><li>属性定义：其中值需要用双引号或者单引号括起来</li><li>注释：和 <code>HTML</code>  一样</li></ul><h3 id="DTD-和-Schema-约束"><a href="#DTD-和-Schema-约束" class="headerlink" title="DTD 和 Schema 约束"></a>DTD 和 Schema 约束</h3><p>有些时候文档内可能内容语义有歧义，所以需要对其 xml 文件内容尽可能的加以约束，DTD 和 Schema 两种方式</p><h2 id="二、HTTP-协议"><a href="#二、HTTP-协议" class="headerlink" title="二、HTTP 协议"></a>二、HTTP 协议</h2><blockquote><p>生成的 web 项目和服务器之间的传输协议</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598670375263-a1f1c0c1-0d94-4f9d-97ed-9d8e7e1d2495.png#align=left&amp;display=inline&amp;height=127&amp;margin=%5Bobject%20Object%5D&amp;originHeight=127&amp;originWidth=305&amp;size=0&amp;status=done&amp;style=shadow&amp;width=305" alt></p><blockquote><p>其中 http1.1 版本比 1.0 版本优化的是对 http 请求可以同时进行多个请求和响应</p></blockquote><h3 id="HTTP-请求消息"><a href="#HTTP-请求消息" class="headerlink" title="HTTP 请求消息"></a>HTTP 请求消息</h3><blockquote><p>客户端（web 浏览器）向服务器发送请求，通常由请求行、请求头、实体内容三部分组成</p></blockquote><ul><li>请求行：请求方式，资源路径，http 协议版本三部分组成。请求方式又有 GET（所请求内容会在资源路径后面带上参数值，会有大小限制）和 POST（安全，无大小限制）等方式</li></ul><h3 id="HTTP-响应消息"><a href="#HTTP-响应消息" class="headerlink" title="HTTP 响应消息"></a>HTTP 响应消息</h3><blockquote><p>也由三部分组成，有资源状态行、响应消息头、实体内容</p></blockquote><ul><li>资源状态行：协议版本 状态码 状态描述三部分组成。其中状态码有多种，常见的 404 就是服务器找不到相应请求的的资源</li></ul><h2 id="三、Tomcat"><a href="#三、Tomcat" class="headerlink" title="三、Tomcat"></a>三、Tomcat</h2><h3 id="关于-Tomcat"><a href="#关于-Tomcat" class="headerlink" title="关于 Tomcat"></a>关于 Tomcat</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598670375411-c8675707-4396-48f4-b181-07310231b868.png#align=left&amp;display=inline&amp;height=174&amp;margin=%5Bobject%20Object%5D&amp;originHeight=250&amp;originWidth=844&amp;size=0&amp;status=done&amp;style=shadow&amp;width=588" alt></p><h3 id="下载安装-Tomcat"><a href="#下载安装-Tomcat" class="headerlink" title="下载安装 Tomcat"></a>下载安装 Tomcat</h3><p>安装等方式参考博客 <a href="https://blog.csdn.net/ZTlink1013/article/details/104815639" target="_blank" rel="noopener">https://blog.csdn.net/ZTlink1013/article/details/104815639</a></p><h2 id="四、Web-应用"><a href="#四、Web-应用" class="headerlink" title="四、Web 应用"></a>四、Web 应用</h2><h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><blockquote><p>web 应用，就是一项工程，在编写 web 项目过程中，对文件按照“合乎规矩”的方式放置</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598670375598-ac6ece9f-6982-4a1d-a7d8-bc3c8b4ce0f7.png#align=left&amp;display=inline&amp;height=352&amp;margin=%5Bobject%20Object%5D&amp;originHeight=614&amp;originWidth=830&amp;size=0&amp;status=done&amp;style=shadow&amp;width=476" alt></p><h3 id="IDEA-配置-Tomcat"><a href="#IDEA-配置-Tomcat" class="headerlink" title="IDEA 配置 Tomcat"></a>IDEA 配置 Tomcat</h3><p>搭建 web 开发环境</p><p>资源的访问，点击请求的页面跳转设置<code>web.xml</code>中配置</p><blockquote><p>阮一峰的网站当中，有类似域名自动跳转，是否和域名解析有关呢？抑或是对 web.xml 进行了操作？</p></blockquote><p>对 idea 进行 web 开发 配置<a href="https://blog.csdn.net/ZTlink1013/article/details/104815639" target="_blank" rel="noopener">https://blog.csdn.net/ZTlink1013/article/details/104815639</a></p><h1 id="【第三章】Servlet"><a href="#【第三章】Servlet" class="headerlink" title="【第三章】Servlet"></a>【第三章】Servlet</h1><h2 id="一、什么是-Servlet"><a href="#一、什么是-Servlet" class="headerlink" title="一、什么是 Servlet"></a>一、什么是 Servlet</h2><h3 id="什么是-Servlet"><a href="#什么是-Servlet" class="headerlink" title="什么是 Servlet"></a>什么是 Servlet</h3><blockquote><p>Servlet 就是在服务器端的 Java 接口或者说是类（叫法有狭义广义之分），处理客户端传来的请求并作出相应的响应这么一个网络模块。</p></blockquote><ul><li>请求：客户端传来的调用或是一系列行为，同时也包含了请求所需要的数据。</li><li>响应：服务器根据客户端传来的请求做出响应，实时的展示给客户端。这之中 Servlet 相当于 java 类当中的一个接口，以请求来的信息作为输入，然后进行分析，做出相应。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598670486756-3febd732-e4ee-413d-8868-a406760f5a22.png#align=left&amp;display=inline&amp;height=134&amp;margin=%5Bobject%20Object%5D&amp;originHeight=222&amp;originWidth=783&amp;size=0&amp;status=done&amp;style=shadow&amp;width=472" alt></p><h3 id="JSP-和-Servlet"><a href="#JSP-和-Servlet" class="headerlink" title="JSP 和 Servlet"></a>JSP 和 Servlet</h3><blockquote><p>servlet 是控制层，jsp 转换为 servlet，用 servlet 来实现 http 请求。</p></blockquote><p>【1】JSP 第一次运行的时候会编译成 Servlet，驻留在内存中以供调用。</p><p>【2】JSP 是 web 开发技术，Servlet 是服务器端运用的小程序，我们访问一个 JSP 页面时，服务器会将这个 JSP 页面转变成 Servlet 小程序运行得到结果后，反馈给用户端的浏览器。</p><p>【3】Servlet 相当于一个控制层再去调用相应的 JavaBean 处理数据,最后把结果返回给 JSP。</p><p>【4】Servlet 主要用于转向，将请求转向到相应的 JSP 页面。</p><p>【5】JSP 更多的是进行页面显示，Servlet 更多的是处理业务，即 JSP 是页面，Servlet 是实现 JSP 的方法。</p><p>【6】Servlet 可以实现 JSP 的所有功能，但由于美工使用 Servlet 做界面非常困难，后来开发了 JSP。</p><p>【7】JSP 技术开发网站的两种模式：JSP + JavaBean；JSP + Servlet + JavaBean（一般在多层应用中, JSP 主要用作表现层,而 Servlet 则用作控制层,因为在 JSP 中放太多的代码不利于维护，而把这留给 Servlet 来实现,而大量的重复代码写在 JavaBean 中）。</p><p>【8】二者之间的差别就是，开发界面是 JSP 直接可以编写。</p><p>比如在 JSP 中写 Table 标记：<code>&lt;table&gt;[数据]&lt;/table&gt;；</code></p><p>Servlet 需要加入：<code>out.println(“&lt;table&gt;[数据]&lt;/table&gt;”)。</code></p><p>JSP 文件在被应用服务器(例如：Tomcat、Resin、Weblogic 和 Websphere),调用过之后，就被编译成为了 Servlet 文件。也就是说在网页上显示的其实是 Servlet 文件。Tomcat 下面 JSP 文件编译之后生成的 Servlet 文件被放在了 work 文件夹下，JSP 中的 HTML 代码在 Servlet 都被 out 出来，而 JSP 代码按照标签的不同会放在不同的位置。</p><p>【9】JSP 中嵌入 JAVA 代码，而 Servlet 中嵌入 HTML 代码。</p><p>【10】在一个标准的 MVC 架构中，Servlet 作为 Controller 接受用户请求并转发给相应的 Action 处理，JSP 作为 View 主要用来产生动态页面，EJB 作为 Model 实现你的业务代码。</p><h2 id="二、Servlet-基础"><a href="#二、Servlet-基础" class="headerlink" title="二、Servlet 基础"></a>二、Servlet 基础</h2><h3 id="接口及其实现类"><a href="#接口及其实现类" class="headerlink" title="接口及其实现类"></a>接口及其实现类</h3><p>就是利用其类编写相关服务器端的相关运行代码</p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>分三个阶段：初始化阶段-&gt;运行阶段-&gt;销毁阶段</p><h3 id="HttpServlet-类"><a href="#HttpServlet-类" class="headerlink" title="HttpServlet 类"></a>HttpServlet 类</h3><p>一般客户端和服务器之间都回使用 <code>HTTP协议</code> ，所以 Servlet 接口中就提供了一个抽象类<code>javax.servlet.http.HttpServlet</code>，他是 <code>GernericServlet</code>  的一个子类，专门用来处理 <code>HTTP协议</code>  的 servlet；具体程序中就是用该类</p><blockquote><p>HelloWordServlet.java</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.firstmyapp.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWordServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">true <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">truetrue System.out.println(<span class="string">"接受了客户端的请求-----------------------------"</span>);</span><br><span class="line">truetrue <span class="comment">// 设置响应类型:</span></span><br><span class="line">true        resp.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line">true        <span class="comment">// 获取输出流:</span></span><br><span class="line">true        PrintWriter pw = resp.getWriter();</span><br><span class="line">true        <span class="comment">// 写入响应:</span></span><br><span class="line">true        pw.write(<span class="string">"&lt;h1&gt;Hello, world!&lt;/h1&gt;"</span>);</span><br><span class="line">true        <span class="comment">// 最后不要忘记flush强制输出:</span></span><br><span class="line">true        pw.flush();</span><br><span class="line">true    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、Servlet-虚拟路径的映射"><a href="#三、Servlet-虚拟路径的映射" class="headerlink" title="三、Servlet 虚拟路径的映射"></a>三、Servlet 虚拟路径的映射</h2><h3 id="1-多重映射"><a href="#1-多重映射" class="headerlink" title="1. 多重映射"></a>1. 多重映射</h3><blockquote><p>就相当于多加几个自己指定的访问路径，在 web.xml 中</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598670486704-cb7b6356-6317-47d3-85c4-a27582c41121.png#align=left&amp;display=inline&amp;height=221&amp;margin=%5Bobject%20Object%5D&amp;originHeight=455&amp;originWidth=1003&amp;size=0&amp;status=done&amp;style=shadow&amp;width=487" alt></p><h3 id="2-映射路径下使用通配符"><a href="#2-映射路径下使用通配符" class="headerlink" title="2. 映射路径下使用通配符"></a>2. 映射路径下使用通配符</h3><blockquote><p>在其中使用通配符，一个目录下的所有路径都可以访问，其中有完全目录匹配，目录匹配，扩展名匹配</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598670487060-fa223535-eabd-40c6-bf7e-088fc77c9c87.png#align=left&amp;display=inline&amp;height=92&amp;margin=%5Bobject%20Object%5D&amp;originHeight=106&amp;originWidth=568&amp;size=0&amp;status=done&amp;style=shadow&amp;width=493" alt></p><h3 id="3-缺省"><a href="#3-缺省" class="headerlink" title="3. 缺省"></a>3. 缺省</h3><p>通常作用是解决请求的资源找不到的情况，（404：请求的资源找不到）</p><h2 id="四、-ServletConfig-和-ServletContext"><a href="#四、-ServletConfig-和-ServletContext" class="headerlink" title="四、 ServletConfig  和 ServletContext"></a>四、 <code>ServletConfig</code>  和 <code>ServletContext</code></h2><blockquote><p>ServletConfig 接口</p></blockquote><p>类比于 git 根文件夹<code>.ssh</code>下的 config 配置文件，它是 servlet 的配置对象，目的就是获取与 servlet 的初始化参数</p><blockquote><p>PS:会使用常用的接口方法</p></blockquote><h1 id="【第五章】会话技术"><a href="#【第五章】会话技术" class="headerlink" title="【第五章】会话技术"></a>【第五章】会话技术</h1><h2 id="一、会话技术"><a href="#一、会话技术" class="headerlink" title="一、会话技术"></a>一、会话技术</h2><p>相当于在客户端和服务器端之间，记录一些用户信息，但是不能用上一章节的，因为那只能保存暂时的信息。 <code>servlet</code>  还提供两个对象 <code>Cookie</code>  和 <code>Session</code>  可以更好地更好地保存会话数据。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598670565525-6a2b8b74-4105-447a-95ba-034020c747fe.png#align=left&amp;display=inline&amp;height=117&amp;margin=%5Bobject%20Object%5D&amp;originHeight=215&amp;originWidth=1105&amp;size=0&amp;status=done&amp;style=shadow&amp;width=601" alt></p><h1 id="【第六章】JSP-技术"><a href="#【第六章】JSP-技术" class="headerlink" title="【第六章】JSP 技术"></a>【第六章】JSP 技术</h1><h2 id="一、JSP-概述"><a href="#一、JSP-概述" class="headerlink" title="一、JSP 概述"></a>一、JSP 概述</h2><p>一种新的编写动态网页的技术，虽然本质还是调用了 <code>servlet</code> ，但是相比前者要简单很多（前者向页面写数据麻烦，复杂），其组成可以简单理解为<br><code>jsp = html + java + jsp自身</code></p><p>调用 servlet 过程：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598670585374-60fc5166-cb3c-433e-9794-bae3778a3cd8.png#align=left&amp;display=inline&amp;height=251&amp;margin=%5Bobject%20Object%5D&amp;originHeight=479&amp;originWidth=910&amp;size=0&amp;status=done&amp;style=shadow&amp;width=477" alt></p><p>其中 jsp 生成 java 文件，编译成 class 文件所在目录（本来应该在 tomcat 的 work 路径下）：<code>D:\project-java\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\work\Catalina\localhost\demo-jsp\org\apache\jsp</code><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598670585365-5f311403-0761-4643-aa17-931be713fc49.png#align=left&amp;display=inline&amp;height=71&amp;margin=%5Bobject%20Object%5D&amp;originHeight=71&amp;originWidth=468&amp;size=0&amp;status=done&amp;style=shadow&amp;width=468" alt></p><p>打开 java 文件之后可以看到相关对 sevlet 的继承</p><h2 id="二、JSP-语法"><a href="#二、JSP-语法" class="headerlink" title="二、JSP 语法"></a>二、JSP 语法</h2><h3 id="jsp-脚本元素"><a href="#jsp-脚本元素" class="headerlink" title="jsp 脚本元素"></a>jsp 脚本元素</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598670585361-957371bf-bb37-407a-90e8-8f21175d6589.png#align=left&amp;display=inline&amp;height=169&amp;margin=%5Bobject%20Object%5D&amp;originHeight=295&amp;originWidth=1117&amp;size=0&amp;status=done&amp;style=shadow&amp;width=639" alt></p><h3 id="jsp-注释"><a href="#jsp-注释" class="headerlink" title="jsp 注释"></a>jsp 注释</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598670585756-18f96e5c-8a74-4e14-8c16-55a9fd9124df.png#align=left&amp;display=inline&amp;height=118&amp;margin=%5Bobject%20Object%5D&amp;originHeight=118&amp;originWidth=643&amp;size=0&amp;status=done&amp;style=shadow&amp;width=643" alt></p><h3 id="jsp-指令"><a href="#jsp-指令" class="headerlink" title="jsp 指令"></a>jsp 指令</h3><blockquote><p>page 指令</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598670585347-a182a404-b425-4f70-80d6-712122944623.png#align=left&amp;display=inline&amp;height=146&amp;margin=%5Bobject%20Object%5D&amp;originHeight=224&amp;originWidth=1007&amp;size=0&amp;status=done&amp;style=shadow&amp;width=658" alt></p><blockquote><p>include 指令</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598670585378-bbe2df4b-013e-4531-bece-2836e4b8bde0.png#align=left&amp;display=inline&amp;height=142&amp;margin=%5Bobject%20Object%5D&amp;originHeight=185&amp;originWidth=884&amp;size=0&amp;status=done&amp;style=shadow&amp;width=677" alt></p><blockquote><p>taglib 指令</p></blockquote><h3 id="jsp-隐式对象"><a href="#jsp-隐式对象" class="headerlink" title="jsp 隐式对象"></a>jsp 隐式对象</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598670585348-c41424d0-e688-4ae6-809e-bcc33afec5e3.png#align=left&amp;display=inline&amp;height=195&amp;margin=%5Bobject%20Object%5D&amp;originHeight=274&amp;originWidth=912&amp;size=0&amp;status=done&amp;style=shadow&amp;width=650" alt></p><h1 id="【第九章】JDBC"><a href="#【第九章】JDBC" class="headerlink" title="【第九章】JDBC"></a>【第九章】JDBC</h1><h2 id="一、什么是-JDBC"><a href="#一、什么是-JDBC" class="headerlink" title="一、什么是 JDBC"></a>一、什么是 JDBC</h2><blockquote><p>使用数据库来存储和管理数据</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598670606448-7b5d3ec0-c6eb-4485-af84-34a1d99fa4a1.png#align=left&amp;display=inline&amp;height=338&amp;margin=%5Bobject%20Object%5D&amp;originHeight=778&amp;originWidth=1159&amp;size=0&amp;status=done&amp;style=shadow&amp;width=503" alt><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598670606324-93a22794-21bb-42fc-9355-64c55411ea53.png#align=left&amp;display=inline&amp;height=99&amp;margin=%5Bobject%20Object%5D&amp;originHeight=200&amp;originWidth=983&amp;size=0&amp;status=done&amp;style=shadow&amp;width=487" alt></p><h2 id="二、JDBC-常用的-API"><a href="#二、JDBC-常用的-API" class="headerlink" title="二、JDBC 常用的 API"></a>二、JDBC 常用的 API</h2><blockquote><p>五个接口一个类（唯一的类）</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598670606334-40b58ccd-ef50-4048-a17a-819885cdcf87.png#align=left&amp;display=inline&amp;height=197&amp;margin=%5Bobject%20Object%5D&amp;originHeight=282&amp;originWidth=931&amp;size=0&amp;status=done&amp;style=shadow&amp;width=649" alt><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598670606546-72057847-1b52-4b82-8f03-d2dcff6e0ed4.png#align=left&amp;display=inline&amp;height=249&amp;margin=%5Bobject%20Object%5D&amp;originHeight=392&amp;originWidth=1001&amp;size=0&amp;status=done&amp;style=shadow&amp;width=635" alt><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598670606535-2996029c-eaf0-45ee-a778-614141ceea4f.png#align=left&amp;display=inline&amp;height=112&amp;margin=%5Bobject%20Object%5D&amp;originHeight=136&amp;originWidth=755&amp;size=0&amp;status=done&amp;style=shadow&amp;width=624" alt></p><h1 id="【第十一章】JSP-开发模型"><a href="#【第十一章】JSP-开发模型" class="headerlink" title="【第十一章】JSP 开发模型"></a>【第十一章】JSP 开发模型</h1><h2 id="一、JSP-两种开发模式"><a href="#一、JSP-两种开发模式" class="headerlink" title="一、JSP 两种开发模式"></a>一、JSP 两种开发模式</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598670623021-1406c5eb-f010-4d9f-a6fe-cd104b964450.png#align=left&amp;display=inline&amp;height=54&amp;margin=%5Bobject%20Object%5D&amp;originHeight=54&amp;originWidth=998&amp;size=0&amp;status=done&amp;style=shadow&amp;width=998" alt></p><h3 id="JSP-Model1"><a href="#JSP-Model1" class="headerlink" title="JSP Model1"></a>JSP Model1</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598670623035-3dae1126-3986-4893-afbf-ce3aa250deb1.png#align=left&amp;display=inline&amp;height=178&amp;margin=%5Bobject%20Object%5D&amp;originHeight=178&amp;originWidth=1220&amp;size=0&amp;status=done&amp;style=shadow&amp;width=1220" alt><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598670623082-df4cb3b4-1eb4-4590-a68f-f18a31a31816.png#align=left&amp;display=inline&amp;height=210&amp;margin=%5Bobject%20Object%5D&amp;originHeight=469&amp;originWidth=1291&amp;size=0&amp;status=done&amp;style=shadow&amp;width=579" alt></p><h3 id="JSP-Model2"><a href="#JSP-Model2" class="headerlink" title="JSP Model2"></a>JSP Model2</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598670623814-f1853ddf-0ab6-443c-b90f-97147896aa3c.png#align=left&amp;display=inline&amp;height=242&amp;margin=%5Bobject%20Object%5D&amp;originHeight=242&amp;originWidth=1045&amp;size=0&amp;status=done&amp;style=shadow&amp;width=1045" alt><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598670623035-37842a30-2e67-40d6-9b33-fc7a90a89037.png#align=left&amp;display=inline&amp;height=208&amp;margin=%5Bobject%20Object%5D&amp;originHeight=515&amp;originWidth=1297&amp;size=0&amp;status=done&amp;style=shadow&amp;width=523" alt></p><h2 id="二、MVC-设计模式"><a href="#二、MVC-设计模式" class="headerlink" title="二、MVC 设计模式"></a>二、MVC 设计模式</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598670623024-0fbab2bd-139b-4e8e-806a-a010e86e6159.png#align=left&amp;display=inline&amp;height=204&amp;margin=%5Bobject%20Object%5D&amp;originHeight=204&amp;originWidth=1185&amp;size=0&amp;status=done&amp;style=shadow&amp;width=1185" alt><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598670623036-c1e95730-c04c-44ab-a07d-be7d3ce47970.png#align=left&amp;display=inline&amp;height=105&amp;margin=%5Bobject%20Object%5D&amp;originHeight=105&amp;originWidth=1138&amp;size=0&amp;status=done&amp;style=shadow&amp;width=1138" alt></p><h2 id="三、JavaWeb-开发中的三层架构"><a href="#三、JavaWeb-开发中的三层架构" class="headerlink" title="三、JavaWeb 开发中的三层架构"></a>三、JavaWeb 开发中的三层架构</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598670623143-02074466-5715-4efa-8b09-ee2a1489d94e.png#align=left&amp;display=inline&amp;height=153&amp;margin=%5Bobject%20Object%5D&amp;originHeight=153&amp;originWidth=1077&amp;size=0&amp;status=done&amp;style=shadow&amp;width=1077" alt><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598670623075-f2b2b6ce-ebd7-4712-86f3-61ee087aafbb.png#align=left&amp;display=inline&amp;height=198&amp;margin=%5Bobject%20Object%5D&amp;originHeight=499&amp;originWidth=1326&amp;size=0&amp;status=done&amp;style=shadow&amp;width=525" alt><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598670622943-c73fc987-bbd4-4204-9a82-6a93ea4ac8ed.png#align=left&amp;display=inline&amp;height=224&amp;margin=%5Bobject%20Object%5D&amp;originHeight=224&amp;originWidth=1066&amp;size=0&amp;status=done&amp;style=shadow&amp;width=1066" alt></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-找不到或无法加载主类</title>
      <link href="blog/qp81g3/"/>
      <url>blog/qp81g3/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/wangxiaoha/p/6293340.html" target="_blank" rel="noopener">https://www.cnblogs.com/wangxiaoha/p/6293340.html</a></p><p><a href="https://bbs.csdn.net/topics/391862656?page=1" target="_blank" rel="noopener">https://bbs.csdn.net/topics/391862656?page=1</a></p><p><a href="https://blog.csdn.net/qinshijangshan/article/details/53048342?depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-1&amp;utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-1" target="_blank" rel="noopener">https://blog.csdn.net/qinshijangshan/article/details/53048342?depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-1&amp;utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-1</a></p><p><a href="https://blog.csdn.net/lanchunhui/article/details/76339252" target="_blank" rel="noopener">https://blog.csdn.net/lanchunhui/article/details/76339252</a></p><p><a href="https://blog.csdn.net/qq_37717853/article/details/78218606?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1" target="_blank" rel="noopener">eclipse 下的输入参数方式</a></p>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>javaweb-8080端口被占用</title>
      <link href="blog/qi1md8/"/>
      <url>blog/qi1md8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、报错信息"><a href="#一、报错信息" class="headerlink" title="一、报错信息"></a>一、报错信息</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">localhost:8080 is already <span class="keyword">in</span> use</span><br><span class="line"></span><br><span class="line">Port 8080 required by Tomcat v8.0<span class="built_in"> Server </span>at localhost is already <span class="keyword">in</span> use. The<span class="built_in"> server </span>may already be running <span class="keyword">in</span> another process, <span class="keyword">or</span> a<span class="built_in"> system </span>process may be using the port. <span class="keyword">To</span> start this<span class="built_in"> server </span>you will need <span class="keyword">to</span> stop the other process <span class="keyword">or</span> change the<span class="built_in"> port </span>number(s).</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">Error</span> running Tomcat8:<span class="built_in"> Address </span>localhost:8080 is already <span class="keyword">in</span> use</span><br></pre></td></tr></table></figure><h2 id="一、分析并解决问题"><a href="#一、分析并解决问题" class="headerlink" title="一、分析并解决问题"></a>一、分析并解决问题</h2><blockquote><p>电脑中 8080 端口被占用，导致 web 项目不能运行</p></blockquote><blockquote><p>任务管理器关闭占用 8080 端口的程序</p></blockquote><h3 id="netstat-ano"><a href="#netstat-ano" class="headerlink" title="netstat -ano"></a>netstat -ano</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1602926284869-236a07ed-16de-4b45-9fb3-08aa10dd3df8.png#align=left&amp;display=inline&amp;height=600&amp;margin=%5Bobject%20Object%5D&amp;originHeight=600&amp;originWidth=1200&amp;size=0&amp;status=done&amp;style=none&amp;width=1200" alt></p><h3 id="tasklist"><a href="#tasklist" class="headerlink" title="tasklist"></a>tasklist</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1602926285001-7e1779f1-5c00-4f0d-ad38-20b653849c37.png#align=left&amp;display=inline&amp;height=221&amp;margin=%5Bobject%20Object%5D&amp;originHeight=221&amp;originWidth=1200&amp;size=0&amp;status=done&amp;style=none&amp;width=1200" alt><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1602926284877-544af23f-b422-49de-af28-86f9c7a37ce3.png#align=left&amp;display=inline&amp;height=183&amp;margin=%5Bobject%20Object%5D&amp;originHeight=183&amp;originWidth=1200&amp;size=0&amp;status=done&amp;style=none&amp;width=1200" alt></p><h3 id="任务管理器"><a href="#任务管理器" class="headerlink" title="任务管理器"></a>任务管理器</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1602926285182-6bfb20a5-33a4-4a6b-8969-eaae9b7c67e4.png#align=left&amp;display=inline&amp;height=550&amp;margin=%5Bobject%20Object%5D&amp;originHeight=550&amp;originWidth=834&amp;size=0&amp;status=done&amp;style=none&amp;width=834" alt></p>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统概论笔记</title>
      <link href="blog/gnwdxp/"/>
      <url>blog/gnwdxp/</url>
      
        <content type="html"><![CDATA[<h2 id="一、绪论"><a href="#一、绪论" class="headerlink" title="一、绪论"></a>一、绪论</h2><h3 id="DBS"><a href="#DBS" class="headerlink" title="DBS"></a>DBS</h3><ul><li>DBS 四个概念</li></ul><p>数据 Data、数据库 DataBase、数据库管理系统 DBMS、数据库系统 DBS</p><blockquote><p>结构化数据和非结构化数据，例如用 python 处理文本数据抑或是图像数据，再进行数据清洗等规整为结构化数据，</p></blockquote><ul><li>DBS 数据管理技术的发展</li></ul><p>数据管理、人工管理、文件系统管理、数据库系统管理</p><blockquote><p>第一次实验报告所使用的就是典型的文件系统管理，两者侧重点不同，数据库相对而言更加方便</p></blockquote><ul><li>DBS 特点</li></ul><p>数据结构化、数据的共享性高，冗余度低，易扩展、数据的独立性高、数据由 DBMS 统一管理和控制</p><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><blockquote><p>同时分属两个不同层次，第一个是概念模型（按用户的观点对数据建模），第二个是物理模型和逻辑模型（按计算机的观点对数据建模）</p></blockquote><ul><li><p>概念模型</p><blockquote><p>现实世界和信息世界的建模</p></blockquote></li><li><p>逻辑模型</p><blockquote><p>外模式</p></blockquote></li><li><p>物理模型</p><blockquote><p>内模式</p></blockquote></li></ul><h3 id="DBS-的结构和组成"><a href="#DBS-的结构和组成" class="headerlink" title="DBS 的结构和组成"></a>DBS 的结构和组成</h3><h2 id="二、关系数据库"><a href="#二、关系数据库" class="headerlink" title="二、关系数据库"></a>二、关系数据库</h2><h3 id="关系数据结构及形式化定义"><a href="#关系数据结构及形式化定义" class="headerlink" title="关系数据结构及形式化定义"></a>关系数据结构及形式化定义</h3><h3 id="关系操作与关系的完整性"><a href="#关系操作与关系的完整性" class="headerlink" title="关系操作与关系的完整性"></a>关系操作与关系的完整性</h3><h3 id="关系代数和关系演算"><a href="#关系代数和关系演算" class="headerlink" title="关系代数和关系演算"></a>关系代数和关系演算</h3><h2 id="三、SQL-语言"><a href="#三、SQL-语言" class="headerlink" title="三、SQL 语言"></a>三、SQL 语言</h2><p>SQL 语言是非过程化的结构化查询语言，其特点有下：</p><ol><li>综合统一</li><li>高度非过程化</li><li>面向集合操作方式</li><li>以同一种语法结构提供多种使用方式：嵌入式语言，能应用在 javaweb，C++等</li><li>语言简单：关键词不多，语法简单</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598689333441-a7d7bfa6-f118-419c-8ecf-2002edfd5ef4.png#align=left&amp;display=inline&amp;height=189&amp;margin=%5Bobject%20Object%5D&amp;originHeight=189&amp;originWidth=850&amp;size=0&amp;status=done&amp;style=shadow&amp;width=850" alt></p>]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ANN神经网络</title>
      <link href="blog/apohu8/"/>
      <url>blog/apohu8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、基本结构"><a href="#一、基本结构" class="headerlink" title="一、基本结构"></a>一、基本结构</h2><blockquote><p>神经网络基本结构<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685949882-81dbb96c-eafa-4294-aae3-242fd33fff2b.png#align=left&amp;display=inline&amp;height=324&amp;margin=%5Bobject%20Object%5D&amp;originHeight=324&amp;originWidth=858&amp;size=0&amp;status=done&amp;style=none&amp;width=858" alt> &gt; <img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685950067-4d0671d6-b294-4284-9eff-9409d230e91e.png#align=left&amp;display=inline&amp;height=470&amp;margin=%5Bobject%20Object%5D&amp;originHeight=470&amp;originWidth=768&amp;size=0&amp;status=done&amp;style=none&amp;width=768" alt></p></blockquote><blockquote><p>何为深度学习？<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685949953-b8d95ff1-6384-4e59-b3d6-1f8151f08204.png#align=left&amp;display=inline&amp;height=400&amp;margin=%5Bobject%20Object%5D&amp;originHeight=400&amp;originWidth=842&amp;size=0&amp;status=done&amp;style=none&amp;width=842" alt></p></blockquote><h2 id="二、感知器和激活函数"><a href="#二、感知器和激活函数" class="headerlink" title="二、感知器和激活函数"></a>二、感知器和激活函数</h2><blockquote><p>感知器<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685949922-e9c76c57-f1c5-4ff1-af82-25c35a4005b1.png#align=left&amp;display=inline&amp;height=514&amp;margin=%5Bobject%20Object%5D&amp;originHeight=514&amp;originWidth=802&amp;size=0&amp;status=done&amp;style=none&amp;width=802" alt></p></blockquote><blockquote><p>激活函数（其中 w 和 x 为向量点乘；b 为偏置，w0）<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685949961-18eeecb5-c82e-4f71-a543-9bd0c0f27043.png#align=left&amp;display=inline&amp;height=511&amp;margin=%5Bobject%20Object%5D&amp;originHeight=511&amp;originWidth=836&amp;size=0&amp;status=done&amp;style=none&amp;width=836" alt></p></blockquote><blockquote><p>激活函数的选择<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685950003-072268a5-122d-4340-85d5-85eeb04236fe.png#align=left&amp;display=inline&amp;height=538&amp;margin=%5Bobject%20Object%5D&amp;originHeight=538&amp;originWidth=861&amp;size=0&amp;status=done&amp;style=none&amp;width=861" alt></p></blockquote><h2 id="三、感知器的训练"><a href="#三、感知器的训练" class="headerlink" title="三、感知器的训练"></a>三、感知器的训练</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685950698-fc03bb22-76e6-4328-9a6b-ee2168250fec.png#align=left&amp;display=inline&amp;height=529&amp;margin=%5Bobject%20Object%5D&amp;originHeight=529&amp;originWidth=872&amp;size=0&amp;status=done&amp;style=none&amp;width=872" alt></p><h2 id="四、简单代码实现"><a href="#四、简单代码实现" class="headerlink" title="四、简单代码实现"></a>四、简单代码实现</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Perceptron</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    构造函数的初始化</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,input_num,activator)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        构造函数的初始化</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        self.activator = activator</span><br><span class="line">        self.weights = [<span class="number">0.0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(input_num)]</span><br><span class="line">        self.bias = <span class="number">0.0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        打印学习后的权重值和偏置项</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'weights\t:%s\nbias\t:%f\n'</span> %(self.weights,self.bias)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self,input_vec)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        输入向量，输出感知器的计算结果</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">return</span> self.activator(</span><br><span class="line">            reduce(<span class="keyword">lambda</span> a,b: a+b,</span><br><span class="line">                    list(map(<span class="keyword">lambda</span> x,w: x*w,</span><br><span class="line">                        input_vec,self.weights)</span><br><span class="line">                 ),<span class="number">0.0</span>)+self.bias)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(self,input_vecs,labels,iteration,rate)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        输入训练数据：一组向量、与每个向量对应的label；以及训练轮数、学习率</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(iteration):</span><br><span class="line">            self._one_iteration(input_vecs,labels,rate)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_one_iteration</span><span class="params">(self,input_vecs,labels,rate)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        迭代，把所有的训练数据过一遍</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        samples = zip(input_vecs,labels)</span><br><span class="line">        <span class="keyword">for</span> (input_vec,label) <span class="keyword">in</span> samples:</span><br><span class="line">            output = self.predict(input_vec)</span><br><span class="line">            self._update_weights(input_vec,output,label,rate)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_update_weights</span><span class="params">(self,input_vec,output,label,rate)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        按照感知器规则更新权重</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        delta = label - output</span><br><span class="line">        self.weights = map(</span><br><span class="line">            <span class="keyword">lambda</span> x, w:w+rate*delta*x,</span><br><span class="line">            input_vec,self.weights)</span><br><span class="line">        self.weights = list(self.weights)</span><br><span class="line">        self.bias += rate*delta</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    定义激活函数</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> x&gt;<span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_training_dataset</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    训练数据</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    input_vecs = [[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>]]</span><br><span class="line">    labels = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> input_vecs,labels</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_and_perceptron</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    训练感知器</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    p = Perceptron(<span class="number">2</span>,f)</span><br><span class="line">    input_vecs,labels = get_training_dataset()</span><br><span class="line">    p.train(input_vecs,labels,<span class="number">10</span>,<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    and_perception = train_and_perceptron()</span><br><span class="line">    print(and_perception)</span><br><span class="line">    print(<span class="string">'1 and 1 = %d'</span> % and_perception.predict([<span class="number">1</span>,<span class="number">1</span>]))</span><br><span class="line">    print(<span class="string">'0 and 0 = %d'</span> % and_perception.predict([<span class="number">0</span>,<span class="number">0</span>]))</span><br><span class="line">    print(<span class="string">'1 and 0 = %d'</span> % and_perception.predict([<span class="number">1</span>,<span class="number">0</span>]))</span><br><span class="line">    print(<span class="string">'0 and 1 = %d'</span> % and_perception.predict([<span class="number">0</span>,<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685949806-ba54dca5-89a6-474a-809c-0b0238184755.png#align=left&amp;display=inline&amp;height=261&amp;margin=%5Bobject%20Object%5D&amp;originHeight=261&amp;originWidth=536&amp;size=0&amp;status=done&amp;style=none&amp;width=536" alt></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MachingLearning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python-基本语法</title>
      <link href="blog/ewt4nc/"/>
      <url>blog/ewt4nc/</url>
      
        <content type="html"><![CDATA[<h2 id="一、基本语法"><a href="#一、基本语法" class="headerlink" title="一、基本语法"></a>一、基本语法</h2><ol><li>大事谷歌；小事百度【建立良好的编程式思维】</li><li>PEP8 中的一些良好约定【编程规范】</li><li>字符串格式化：<br>print(‘%s–%d–%s’%(‘wuzutao’,20,’尼采般地抒情’))<br>a. %i 是什么格式的那啥？‘</li><li>强制性类型转换：类 C</li><li><p>时间和日期：<br>from datetime import datetime<br>dt=datetime(2019,5,12,9,20)<br>print(dt.year,dt.month,dt.day)</p><blockquote><p>2019  5  12<br>dt.strftime(‘%Y/%m/%d %H:%M’)<br>#datetime 格式转化为字符串<br>‘2019/05/12 09:20’<br>datetime.strptime(‘20161203’, ‘%Y%m%d’) #字符串转化为 datetime 格式<br>datetime.datetime(2016, 12, 3, 0, 0)</p></blockquote></li><li><p>pass 函数<br>def f():<br>   #TODO: test pass<br>   pass</p></li><li><p>异常的处理<br>def test(x,y):<br>   try:</p><pre><code>print(y/x)</code></pre><p>   except:</p><pre><code>print(&apos;输入的信息有误！&apos;)</code></pre><blockquote><p>test(2,8)<br>test(‘e’,8)</p></blockquote></li><li><p>range 和 range 的区别！！！</p></li><li><p>对象传递和拷贝【类似 C 语言中的指针】 #变量传递、列表传递和 C 类似 #深拷贝和浅拷贝<br>import copy<br>a = [[1, 2, 3], [4, 5, 6]]<br>b = a<br>c = copy.copy(a)<br>d = copy.deepcopy(a)<br>print (‘a-id:’,id(a))#id 相当于内存里面的地址<br>print (‘b-id:’,id(b))<br>print (‘c-id:’,id(c))<br>print (‘d-id:’,id(d))<br>a.append(15)<br>a[1][2] = 10<br>print (a)<br>print (b)<br>print (c)<br>print (d)</p></li><li><p>a-id: 2171119139144<br>b-id: 2171119139144<br>c-id: 2171119848136<br>d-id: 2171119140744<br>[[1, 2, 3], [4, 5, 10], 15]<br>[[1, 2, 3], [4, 5, 10], 15]<br>[[1, 2, 3], [4, 5, 10]]<br>[[1, 2, 3], [4, 5, 6]]</p></li></ol><h2 id="二、数据结构"><a href="#二、数据结构" class="headerlink" title="二、数据结构"></a>二、数据结构</h2><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">○ <span class="comment">#转换为元组（list-&gt;tuple, string-&gt;tuple）</span></span><br><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">print (tuple(l))</span><br><span class="line">str = (<span class="string">'Hello ChinaHadoop'</span>)</span><br><span class="line">print (tuple(str))</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) (<span class="string">'H'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>, <span class="string">' '</span>, <span class="string">'C'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'n'</span>, <span class="string">'a'</span>, <span class="string">'H'</span>, <span class="string">'a'</span>, <span class="string">'d'</span>, <span class="string">'o'</span>, <span class="string">'o'</span>, <span class="string">'p'</span>)</span><br><span class="line">○ tup1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">#嵌套元组:</span></span><br><span class="line">tup2 = ((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">print (tup2)</span><br><span class="line"><span class="comment">#合并元组:</span></span><br><span class="line">tup1 + tup2</span><br><span class="line">○ <span class="comment">#拆包</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_1</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line">    r=(<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">32</span>)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">a, b, <span class="number">_</span>, f=test_1()</span><br><span class="line">print(f)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="number">32</span></span><br><span class="line">○ <span class="comment"># 元组列表迭代</span></span><br><span class="line">tuple_lst = [(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="symbol">tuple_lst:</span></span><br><span class="line">    print (x+y)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;<span class="number">3</span>   <span class="number">7</span>   <span class="number">11</span></span><br><span class="line">○ <span class="comment"># 计数器</span></span><br><span class="line">列表/元组.(<span class="string">'需要查找里面的某个对象的个数'</span>)</span><br></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">○ list里面可以有不同类型的元素</span><br><span class="line">○ #合并列表</span><br><span class="line">lst_1=[352,2352,3,556]</span><br><span class="line">lst_2=[<span class="string">'gew'</span>,<span class="string">'f'</span>]</span><br><span class="line">&gt;lst_3 = lst_1 + lst_2</span><br><span class="line">&gt;lst_1.extend(lst_2)</span><br><span class="line">○ #sort函数和sorted函数</span><br><span class="line">list_1=[23,54,346,222,4,1]</span><br><span class="line"><span class="builtin-name">print</span>(list_1.sort())     #查查版本</span><br><span class="line"><span class="builtin-name">print</span>(sorted(list_1))  #sorted是新起的一个列表</span><br><span class="line">lst_6 = [<span class="string">'Welcome'</span>, <span class="string">'to'</span>, <span class="string">'Python'</span>, <span class="string">'Data'</span>, <span class="string">'Analysis'</span>, <span class="string">'Course'</span>]</span><br><span class="line">lst_6.sort()</span><br><span class="line"><span class="builtin-name">print</span> (lst_6)【!!!!打印出来是<span class="attribute">none</span>===查查版本】</span><br><span class="line">&gt;&gt;&gt;[<span class="string">'Analysis'</span>, <span class="string">'Course'</span>, <span class="string">'Data'</span>, <span class="string">'Python'</span>, <span class="string">'Welcome'</span>, <span class="string">'to'</span>]</span><br><span class="line">lst_6.sort(key = len, <span class="attribute">reverse</span>=<span class="literal">True</span>)</span><br><span class="line"><span class="builtin-name">print</span> (lst_6)</span><br><span class="line">&gt;&gt;&gt;[<span class="string">'Analysis'</span>, <span class="string">'Welcome'</span>, <span class="string">'Course'</span>, <span class="string">'Python'</span>, <span class="string">'Data'</span>, <span class="string">'to'</span>]</span><br></pre></td></tr></table></figure><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">○ <span class="comment">#合并字典</span></span><br><span class="line">dict1 = &#123;<span class="number">1</span>:<span class="string">'huhuhu'</span>&#125;</span><br><span class="line">dict2 = &#123;<span class="number">4</span>: <span class="string">'new1'</span>, <span class="number">5</span>: <span class="string">'news'</span>&#125;</span><br><span class="line">dict1.update(dict2)</span><br><span class="line">○ <span class="comment">#通过多个列表创建字典</span></span><br><span class="line">dict_3 = &#123;&#125;</span><br><span class="line">l1 = [<span class="number">32</span>,<span class="number">543</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">4</span>]</span><br><span class="line">l2 = reversed(l1)</span><br><span class="line"><span class="keyword">for</span> i1, i2 <span class="keyword">in</span> zip(l1, l2):</span><br><span class="line">    dict_3[i1] = i2</span><br><span class="line"><span class="keyword">print</span> (dict_3)</span><br><span class="line">&gt;&gt;&gt;&#123;<span class="number">32</span>: <span class="number">4</span>, <span class="number">543</span>: <span class="number">7</span>, <span class="number">6</span>: <span class="number">2</span>, <span class="number">2</span>: <span class="number">6</span>, <span class="number">7</span>: <span class="number">543</span>, <span class="number">4</span>: <span class="number">32</span>&#125;</span><br><span class="line"><span class="string">'''hash函数来判断某个对象是否可以做键'''</span></span><br><span class="line">○ <span class="string">'''位置赋值；默认赋值；关键字赋值——format'''</span></span><br><span class="line"><span class="string">'''遍历字典的方式变了：keys，values，items'''</span></span><br><span class="line">天行九歌=&#123;<span class="string">'韩非'</span>:<span class="string">'逆鳞'</span>,<span class="string">'卫庄'</span>:<span class="string">'鲨齿'</span>,<span class="string">'盖聂'</span>:<span class="string">'渊虹'</span>&#125;</span><br><span class="line">print(天行九歌)</span><br><span class="line"><span class="keyword">for</span> ren,jian <span class="keyword">in</span> 天行九歌.items():</span><br><span class="line">    print(<span class="string">'&#123;&#125;--&#123;&#125;'</span>.format(ren,jian))</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&#123;<span class="string">'韩非'</span>: <span class="string">'逆鳞'</span>, <span class="string">'卫庄'</span>: <span class="string">'鲨齿'</span>, <span class="string">'盖聂'</span>: <span class="string">'渊虹'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">○ a1=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">35</span>,<span class="number">2352</span>,<span class="number">75</span>]</span><br><span class="line">b1=[<span class="number">3</span>,<span class="number">2352</span>,<span class="number">24354</span>,<span class="number">4332432</span>,<span class="number">54</span>]</span><br><span class="line"><span class="keyword">a</span>=<span class="built_in">set</span>(a1)</span><br><span class="line">b=<span class="built_in">set</span>(b1)</span><br><span class="line">print(<span class="keyword">a</span>)</span><br><span class="line">print(b)</span><br><span class="line"><span class="keyword">a</span> | b<span class="comment">#并；a &amp; b#交；a - b#呃。。。；a ^ b#呃。。。；</span></span><br><span class="line"><span class="keyword">a</span>.issubset(b)<span class="comment">#判断子集</span></span><br><span class="line">&gt;&gt;&gt;False</span><br><span class="line"><span class="keyword">a</span>.issuperset(b)<span class="comment">#判断父集</span></span><br><span class="line">&gt;&gt;&gt;False</span><br></pre></td></tr></table></figure><h2 id="三、高级特性"><a href="#三、高级特性" class="headerlink" title="三、高级特性"></a>三、高级特性</h2><h3 id="推导式"><a href="#推导式" class="headerlink" title="推导式"></a>推导式</h3><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">○ str_lst = [<span class="string">'Welcome'</span>, <span class="string">'to'</span>, <span class="string">'Python'</span>, <span class="string">'Data'</span>, <span class="string">'Analysis'</span>, <span class="string">'Course'</span>]</span><br><span class="line"><span class="built_in">result</span> = [x.<span class="built_in">upper</span>() <span class="keyword">for</span> x <span class="keyword">in</span> str_lst <span class="keyword">if</span> <span class="built_in">len</span>(x) &gt; <span class="number">4</span>]</span><br><span class="line">print (<span class="built_in">result</span>)</span><br><span class="line">&gt;&gt;&gt;[<span class="string">'WELCOME'</span>, <span class="string">'PYTHON'</span>, <span class="string">'ANALYSIS'</span>, <span class="string">'COURSE'</span>]</span><br></pre></td></tr></table></figure><h3 id="多函数模式"><a href="#多函数模式" class="headerlink" title="多函数模式"></a>多函数模式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">○ str_lst = [<span class="string">'$1.123'</span>, <span class="string">' $1123.454'</span>, <span class="string">'$899.12312'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_space</span><span class="params">(str)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        remove space</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    str_no_space = str.replace(<span class="string">' '</span>, <span class="string">''</span>)</span><br><span class="line">    <span class="keyword">return</span> str_no_space</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_dollar</span><span class="params">(str)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        remove $</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'$'</span> <span class="keyword">in</span> str:</span><br><span class="line">        <span class="keyword">return</span> str.replace(<span class="string">'$'</span>, <span class="string">''</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> str</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean_str_lst</span><span class="params">(str_lst, operations)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        clean string list</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> str_lst:</span><br><span class="line">        <span class="keyword">for</span> op <span class="keyword">in</span> operations:</span><br><span class="line">            item = op(item)</span><br><span class="line">        result.append(item)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">clean_operations = [remove_space, remove_dollar]</span><br><span class="line">result = clean_str_lst(str_lst, clean_operations)</span><br><span class="line"><span class="keyword">print</span> (result)</span><br><span class="line">&gt;&gt;&gt;[<span class="string">'1.123'</span>, <span class="string">'1123.454'</span>, <span class="string">'899.12312'</span>]</span><br></pre></td></tr></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">○ str_lst = [<span class="string">'Welcome'</span>, <span class="string">'to'</span>, <span class="string">'Python'</span>, <span class="string">'Data'</span>, <span class="string">'Analysis'</span>, <span class="string">'Course'</span>]</span><br><span class="line">str_lst.sort(<span class="attribute">key</span>=lambda x<span class="keyword">:len</span>(x)) # sort by length</span><br><span class="line"><span class="builtin-name">print</span> (str_lst)</span><br><span class="line"></span><br><span class="line">str_lst.sort(<span class="attribute">key</span>=lambda x:x[-1]) # sort by the last letter</span><br><span class="line"><span class="builtin-name">print</span> (str_lst)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="string">'to'</span>, <span class="string">'Data'</span>, <span class="string">'Python'</span>, <span class="string">'Course'</span>, <span class="string">'Welcome'</span>, <span class="string">'Analysis'</span>]</span><br><span class="line">[<span class="string">'Data'</span>, <span class="string">'Course'</span>, <span class="string">'Welcome'</span>, <span class="string">'Python'</span>, <span class="string">'to'</span>, <span class="string">'Analysis'</span>]</span><br></pre></td></tr></table></figure><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">○ <span class="function"><span class="keyword">def</span> <span class="title">gen_test</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>)<span class="symbol">:</span></span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line"></span><br><span class="line">gen = gen_test() <span class="comment">#此时不执行生成器</span></span><br><span class="line">type(gen)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="symbol">gen:</span></span><br><span class="line">    print(i)</span><br><span class="line"><span class="comment">#用意何在呢？？！！</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;<span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="四、常用函数"><a href="#四、常用函数" class="headerlink" title="四、常用函数"></a>四、常用函数</h2><h3 id="序列函数-amp-zip-使用"><a href="#序列函数-amp-zip-使用" class="headerlink" title="序列函数&amp;zip 使用"></a>序列函数&amp;zip 使用</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">a. enumerate函数</span><br><span class="line">list_11 = [<span class="string">'Welcome'</span>, <span class="string">'to'</span>, <span class="string">'Python'</span>, <span class="string">'Data'</span>, <span class="string">'Analysis'</span>, <span class="string">'Course'</span>]</span><br><span class="line"><span class="keyword">for</span> i, item <span class="keyword">in</span> enumerate(lst_6):</span><br><span class="line">    <span class="builtin-name">print</span> (<span class="string">'%i-%s'</span> %(i, item))</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">0-Analysis</span><br><span class="line">1-Welcome</span><br><span class="line">2-Course</span><br><span class="line">3-Python</span><br><span class="line">4-Data</span><br><span class="line">5-to</span><br><span class="line">str_dict = dict((i, item) <span class="keyword">for</span> i, item <span class="keyword">in</span> enumerate(list_11))</span><br><span class="line"><span class="builtin-name">print</span> (str_dict)</span><br><span class="line">&gt;&gt;&gt;&#123;0: <span class="string">'Welcome'</span>, 1: <span class="string">'to'</span>, 2: <span class="string">'Python'</span>, 3: <span class="string">'Data'</span>, 4: <span class="string">'Analysis'</span>, 5: <span class="string">'Course'</span>&#125;</span><br><span class="line">b. zip压缩</span><br><span class="line">lst_6 = [<span class="string">'Welcome'</span>, <span class="string">'to'</span>, <span class="string">'Python'</span>, <span class="string">'Data'</span>, <span class="string">'Analysis'</span>, <span class="string">'Course'</span>]</span><br><span class="line">lst_8 = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">zip_lst = zip(lst_6, lst_8)</span><br><span class="line"><span class="builtin-name">print</span>(list(zip_lst))</span><br><span class="line"><span class="comment">#方式一：直接转化为列表</span></span><br><span class="line"><span class="builtin-name">print</span>(dict(list(zip_lst)))</span><br><span class="line"><span class="comment">#方式二：转化为字典</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> zip_lst:</span><br><span class="line">    <span class="builtin-name">print</span> (i)</span><br><span class="line"><span class="comment">#方式三：直接遍历</span></span><br><span class="line">解压：</span><br><span class="line"><span class="builtin-name">print</span>(*zip_lst)</span><br><span class="line"><span class="builtin-name">print</span>(lst_6)</span><br><span class="line">c. reversed逆序输出</span><br></pre></td></tr></table></figure><h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a. <span class="comment">#函数可以作为变量使用;也可以将函数作为参数使用</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_add</span><span class="params">(x, y, f)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        functional addition</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> f(x) + f(y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (func_add(<span class="number">4</span>, <span class="number">25</span>, math.sqrt))</span><br><span class="line"><span class="keyword">print</span> (func_add(<span class="number">-4</span>, <span class="number">25</span>, abs))</span><br><span class="line">&gt;&gt;&gt;<span class="number">7.0</span>    <span class="number">29</span></span><br></pre></td></tr></table></figure><h3 id="map-和-reduce"><a href="#map-和-reduce" class="headerlink" title="map 和 reduce"></a>map 和 reduce</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">a. <span class="string">''</span><span class="string">'map函数'</span><span class="string">''</span></span><br><span class="line">list_1=[1,4,9]</span><br><span class="line">aaa = [x*<span class="number">*2</span> <span class="keyword">for</span> x <span class="keyword">in</span> list_1]</span><br><span class="line"><span class="builtin-name">print</span> (aaa)</span><br><span class="line"></span><br><span class="line">bbb = map(math.sqrt, aaa)</span><br><span class="line"><span class="builtin-name">print</span> (bbb)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[1, 16, 81]</span><br></pre></td></tr></table></figure><map object at 0x000002145b2b77f0><h3 id="filter-函数"><a href="#filter-函数" class="headerlink" title="filter 函数"></a>filter 函数</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">a. 天行=[<span class="string">'韩非'</span>,<span class="string">'卫庄'</span>,<span class="string">'张良'</span>,<span class="string">'盖聂'</span>,<span class="string">'逆鳞'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fx</span><span class="params">(x)</span></span><span class="symbol">:</span></span><br><span class="line">    y=[<span class="string">'逆鳞'</span>]</span><br><span class="line">    <span class="keyword">if</span> x <span class="keyword">in</span> <span class="symbol">y:</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">filtered_lst = filter(fx,天行)</span><br><span class="line">print(天行)</span><br><span class="line">print(list(filtered_lst))</span><br><span class="line"><span class="comment">#注意python2和3的区别，很多时候要区别出来列表等序列，加上list很有必要</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt;</span><br><span class="line">[<span class="string">'韩非'</span>, <span class="string">'卫庄'</span>, <span class="string">'张良'</span>, <span class="string">'盖聂'</span>, <span class="string">'逆鳞'</span>]</span><br><span class="line"> [<span class="string">'逆鳞'</span>]</span><br></pre></td></tr></table></figure></map>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java-数组越界和格式输出</title>
      <link href="blog/ggg01q/"/>
      <url>blog/ggg01q/</url>
      
        <content type="html"><![CDATA[<h2 id="一、数组越界"><a href="#一、数组越界" class="headerlink" title="一、数组越界"></a>一、数组越界</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">java</span><span class="selector-class">.lang</span><span class="selector-class">.ArrayIndexOutOfBoundsException</span></span><br></pre></td></tr></table></figure><p>在进行判断条件的时候，注意 java 当中的数组“尾巴”不要溢出，数组 arr 的合法错误范围是[0, arr.length-1]</p><blockquote><ul><li>解决办法</li><li>①debug 看数组的尾巴部分输出情况【数组空间小的情况】</li><li>② 打印出遍历数组的索引值【通法】</li></ul></blockquote><p>回顾 java 初始化数组的方式：</p><ul><li>静态初始化：初始化时由程序员显式指定每个数组元素的初始值，有系统决定数组的长度</li></ul><blockquote><p>arrayName = new type[]{element1,element2,element3…}</p></blockquote><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">int[] intArr;</span><br><span class="line">intArr = new int[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span>&#125;;</span><br><span class="line">或者</span><br><span class="line">String[] strArr = &#123;<span class="string">"one"</span>,<span class="string">"two"</span>,<span class="string">"three"</span>&#125;;</span><br></pre></td></tr></table></figure><ul><li>动态初始化：初始化时由程序员指定数组的长度，由系统初始化每个数组元素的默认值</li></ul><blockquote><p>arrayName = new type[length];</p></blockquote><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] price = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br></pre></td></tr></table></figure><h2 id="二、printf；println；print"><a href="#二、printf；println；print" class="headerlink" title="二、printf；println；print"></a>二、printf；println；print</h2><ul><li>printf：遇到浮点型数值，继承 C 语言里面的使用，<strong>格式化</strong>输出（注意，参数顺序）</li><li>print：就是一般的标准输出，但是不换行</li><li>println：比 print 多的就是最后会换行</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">double</span> j = <span class="number">5</span>;</span><br><span class="line">System.out.print(<span class="string">"用print输出i:"</span>+ i);</span><br><span class="line">System.out.println( <span class="string">"用println输出i:"</span>+ i);</span><br><span class="line">System.out.printf(<span class="string">"i的值为%d,j的值为%f"</span>, i,j);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">用print输出i:<span class="number">4</span>用println输出i:<span class="number">4</span></span><br><span class="line">i的值为<span class="number">4</span>,j的值为<span class="number">5.000000</span></span><br></pre></td></tr></table></figure><ul><li>printf 补充</li></ul><blockquote><p><code>%.2f</code>的意思是输出两位小数点<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1602926246151-1730c963-0816-46d1-bd3d-3a5cc7b30403.png#align=left&amp;display=inline&amp;height=589&amp;margin=%5Bobject%20Object%5D&amp;originHeight=589&amp;originWidth=1162&amp;size=0&amp;status=done&amp;style=none&amp;width=1162" alt></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C-C++遗忘知识</title>
      <link href="blog/uakfgc/"/>
      <url>blog/uakfgc/</url>
      
        <content type="html"><![CDATA[<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>相关概念的理解容易混淆，记住之前学习理解的一个准则！<code>*p 的理解意义就是p 所指向的那个东西</code></p><ul><li>取地址符&amp;</li><li>解引用运算符*</li></ul><blockquote><p><a href="https://blog.csdn.net/soonfly/article/details/51131141" target="_blank" rel="noopener">https://blog.csdn.net/soonfly/article/details/51131141</a></p></blockquote><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><ul><li><p>一些概念</p><blockquote><ul><li>结构体:构造（定义新的数据类型）</li><li>结构体变量:定义（两种）；结构体变量访问结构体里面的成员：<code>.</code>；指针访问成员的时候<code>-&gt;</code></li><li>结构体数组：变量很多</li><li>结构体指针：指向结构体变量的指针，定义：<code>struct Student *p</code>；指向结构体数组的指针</li></ul></blockquote></li><li><p>C 里面的<strong>结构体、共用体、枚举体</strong>根据这几类来构造新的数据类型，比如链表的初始实现，就是利用指针和结构体来实现</p></li><li><strong>typedef</strong>给结构体制定新的类型名  eg：计数专用变量<code>typedef int Count</code></li></ul><h2 id="C-相对-C"><a href="#C-相对-C" class="headerlink" title="C++相对 C"></a>C++相对 C</h2><p>C 语言是一种混合型语言（20 世纪 80 年代兴起），它保留了 C 语言所有的优点，同时又增添了面向对象的编程机制，我们可以将 C 语言视为 C 语言的改进和扩展。</p><p>基于 C 语言开发的 C 语言兼容 C 语言，因此用 C 语言编写的程序基本上可以不做改动地用于 C。相对于 C 语言，C++语言对 C 语言的功能做了一定的扩充，同时增添了面向对象编程机制。引入面向对象编程机制，主要是为了提高开发效率。</p><p>早期 C 许多的工作是对于 C 的强化和净化，并把完全兼容 C 作为强制性要求。C89、C99 中许多的改进正是从 C 中所引进。可见，Stroustrup 对 C 语言的贡献非常之大。今天不管你对 C 怎么看，C 的确扩展和进化了 C，对 C 造成了深远的影响。</p><ol><li>在 C 兼容 C 的过程中遇到了不少设计实现上的麻烦；以及守旧的 K&amp;R C 程序员对 Stroustrup 的批评。很多人说 C 的恶梦恶梦就是要去兼容于 C，这并不无道理（Java 就干的比 C++彻底得多），但这并不是 Stroustrup 考虑的，Stroustrup 一边在使尽浑身解数来兼容 C，另一方面在拼命地优化 C。</li><li>C 最大的竞争对手正是 C，他的目的就是——C 能做到的，C 也必须做到，而且要做的更好。大家觉得是不是做到了？有多少做到了，有多少还没有做到？</li><li>对于同时关注的运行效率和开发效率的程序员，Stroustrup 多次强调 C 的目标是——“在保证效率与 C 语言相当的情况下，加强程序的组织性；能保证同样功能的程序，C 更短小”，这正是浅封装的核心思想。而不是过渡设计的 OO。</li><li>《C 演化和设计》这本书中举了很多例子来回应那些批评 C 有运行性能问题的人。C 在其第二个版本中，引入了虚函数机制，这是 C 效率最大的瓶颈了，但我个人认为虚函数就是多了一次加法运算，但让我们的代码能有更好的组织，极大增加了程序的阅读和降底了维护成本。（注：Lippman 的《深入探索 C 对象模型》也说明了 C 不比 C 的程序在运行性能低。Bruce 的《Think in C++》也说 C++和 C 的性能相差只有 5%）</li><li>这本书中还讲了一些 C++的痛苦的取舍，印象最深的就是多重继承，提出，拿掉，再被提出，反复很多次，大家在得与失中不断地辩论和取舍。这个过程让我最大的收获是——a) 对于任何一种设计都有好有坏，都只能偏重一方，b) 完全否定式的批评是不好的心态，好的心态应该是建设性地批评。</li></ol><p>相对运行于虚拟机语言，C/C 直接以静态形式把源程序编译为目标平台的机器码。一般而言，C/C 程序在编译及链接时可进行的优化最丰富，启动时的速度最快，运行时的额外内存开销最少。而 C/C 相对动态语言也减少了运行时的动态类型检测。此外，C/C 的运行行为是确定的，且不会有额外行为，也不会有如垃圾收集(GC)而造成的不确定性延迟，而且 C/C 的数据结构在内存中的布局也是确定的。有时 C 的一些功能会使程序性能优于 C，当中以内联和模版最为突出，这两项功能使 C 标准库的 sort()通常比 C 标准库的 qsort()快多倍(C 可用宏或人手编码去解决此问题)。另一方面，C/C 能直接映射机器码，之间没有另一层中间语言，因此可以做底层优化，例如使用内部(intrinsic)函数和嵌入汇编语言。然而，许多 C++的性能优点并非免费午餐，代价包括较长的编译链接时间和较易出错，因而增加开发时间和成本。</p><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><p>C++模板知识</p><ul><li>函数模板</li><li>类模板<br>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<br>STL 概述当中，vector 容器，顺序容器：向量 vector、列表 list、双端队列 deque</li></ul><blockquote><p><a href="https://www.cnblogs.com/mr-wid/archive/2013/01/22/2871105.html" target="_blank" rel="noopener">https://www.cnblogs.com/mr-wid/archive/2013/01/22/2871105.html</a></p></blockquote><h2 id="C-常用字符函数"><a href="#C-常用字符函数" class="headerlink" title="C 常用字符函数"></a>C 常用字符函数</h2><p>Printf()<br>Scanf()<br>Putchar()<br>Getchar()<br>Puts(str)<br>Gets(str)<br>Strcat(str1,str2)：连接字符串<br>复制函数：将 str2 复制给 str1<br>Strcpy(str1,str2)<br>在 C++里面会报错<br>解决 ①：将函数 strcpy 改成 strcpy_s,中间加一个参数——复制的长度</p><p>Strncpy(str1,str2,n)：复制函数，将 str2 的前 n 个字符复制给 str1<br>Strlen(str)：检测 str 的字符串长度<br>Fopen(文件名，使用文件方式）<br>fclose（文件指针）</p><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><p>v I/O 流<br>scanf===cin&gt;&gt; &gt;&gt;endl;<br>Print===cout&lt;&lt; &lt;&lt;endl;<br>换行符：endl 和 “\n”<br>v 注释<br>/*  */<br>//<br>v const 定义常量<br>之前 C 语言里面用的是宏定义#define Π 3.1415927，但是宏定义有时候太“死板”</p><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p>类的形式？<br>Class wuzutao<br>{<br>private：</p><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">true<span class="keyword">public</span>：</span><br><span class="line"></span><br><span class="line">true<span class="keyword">protect</span>：</span><br><span class="line"></span><br><span class="line">&#125;；</span><br><span class="line">数据成员</span><br><span class="line">成员函数：</span><br><span class="line">true类内实现=和普通函数的实现一样</span><br><span class="line">true类外实现=<span class="literal">void</span> <span class="built_in">Date</span>：：Display（）&#123;&#125;</span><br></pre></td></tr></table></figure><p>类定义对象？<br>① 花括号内定义<br>② 花括号外定义</p><p>访问对象？<br>访问的是类内的成员<br>① 圆点访问形式<br>② 指针访问形式</p><p>this 指针？<br>每个成员函数都会有一个特殊的隐含指针——this 指针。<br>调用形式：cout&lt;&lt;this&lt;year&lt;day&lt;&lt;endl;</p><h3 id="构造函数和析构函数"><a href="#构造函数和析构函数" class="headerlink" title="构造函数和析构函数"></a>构造函数和析构函数</h3><p>构造函数的作用就是适当地给类进行初始化的作用<br>无参数的构造函数<br>带参数的构造函数</p><p>拷贝构造函数，这里不是太懂！<br>拷贝构造函数声明<br>拷贝构造函数定义和实现</p><p>析构函数<br>一般默认，如果自己写的话就是<br>析构函数的声明：<br>~类名（）；<br>析构函数的定义和实现：<br>类名：：~类名（）{……}</p><h2 id="数据的共享和保护"><a href="#数据的共享和保护" class="headerlink" title="数据的共享和保护"></a>数据的共享和保护</h2><h3 id="数据共享-static"><a href="#数据共享-static" class="headerlink" title="数据共享 static"></a>数据共享 static</h3><ol><li>静态数据成员<br>声明：static 数据类型 静态数据成员名；<br>初始化在类结束和类中函数实现的中间<br>之后访问（通过类名/对象名来访问）：<br>私有的静态成员只能通过间接的方式来访问===静态成员函数<br>对象名.公有静态成员变量名<br>对象名::公有静态成员变量名</li><li>静态成员函数<br>没有 this 指针<br>声明：static 返回值类型 静态成员函数名（形参表）<br>之后访问（通过类名/对象名来访问）：<br>类名::静态成员函数名（实参表）<br>类名.静态成员函数名（实参表）</li></ol><h3 id="数据保护-const"><a href="#数据保护-const" class="headerlink" title="数据保护 const"></a>数据保护 const</h3><ol><li>常数据成员<br>有些时候，希望不用全局变量，因为这样不好移植，所以用到 const 场数据类型，相当于每次用不同场合用到这个类，都是这些用到这些固定的数据<br>一般结合 static 来避免数据赘余<br>eg：类 Circle 中<br>定义：const double PI；<br>初始化只能在构造函数后面的初始化列表中：Circle （double r=0）：PI（3.1415926）<ol><li>常成员函数<br>只访问类中的数据而不修改类中的数据成员，最好用到常成员函数<br>eg：只访问类中的半径<br>声明：Double GetRadius（）const；<br>实现：double Circle：：GetRadius（）const{……}</li><li>常对象<br>所定义的常对象 p1 在之后就不会被改变了<br>形式：const Person p1（17，“wu”）；</li></ol></li></ol><h2 id="类和类之间的关系"><a href="#类和类之间的关系" class="headerlink" title="类和类之间的关系"></a>类和类之间的关系</h2><h3 id="类的组合"><a href="#类的组合" class="headerlink" title="类的组合"></a>类的组合</h3><p>直观：B 类中有 A 类定义的对象</p><p>构造函数的顺序：<br>对象成员的构造函数<br>自身的构造函数</p><p>构造函数有参数的时候：<br>怎么个表现形式呢？<br><strong>B 类中 B 的构造函数后面带有 A 类在 B 类中所定义的对象，这个对象的参数用做左边 B 类构造函数的参数、</strong></p><h3 id="类的依赖"><a href="#类的依赖" class="headerlink" title="类的依赖"></a>类的依赖</h3><p>赌徒和骰子，这就是一种依赖关系，如果用组合关系的话，就会影响到生命周期问题</p><p>Class 🎲{}；<br>Class 🕵️‍♂️<br>{<br>public：<br>Void play（🎲1，🎲2，🎲3）<br>{……}<br>}；</p><h3 id="类的继承和派生"><a href="#类的继承和派生" class="headerlink" title="类的继承和派生"></a>类的继承和派生</h3><p>一、派生类的定义：<br>父类 class Base{}<br>派生子类：单一继承 class Derived：public Base{}；<br>多重继承 Class Derived：public Base1，pretect Base2{}；<br>继承的类型：<br>单一继承：只有一个基类<br>多重继承：有多个基类</p><p>继承方式：<br>private 继承：所有的数据成员都为子类的的私有成员<br>public 继承：父类的数据类型怎样，在子类类型不变<br>protect 继承：所有的数据成员和成员函数都为字类的保护成员<br>ps：① 父类的 private 数据成员和成员函数不能被子类所继承<br>② 一般很少用 protect 和 private 两种继承，因为两种改变了之前基类的访问属性，限制了这些的进一步派生，所以很少使用</p><p>二、派生类的构造和析构<br>构造和析构的调用顺序：<br>① 所有虚基类的构造函数<br>② 基类的构造函数<br>③ 对象成员的构造函数<br>④ 自身派生类的构造函数<br>ps：析构函数的调用顺序则正好相反、<br>虚基类保证调用一次构造函数。两个子类都有同一个基类的虚基类继承，构造函数只调用一次<br>带参数的构造函数：<br>子类里面，构造函数的初始化要连带着基类的构造函数的初始化<br>eg：classA(int a,int b,int c):classB(a*2),classC(a,b){}</p><p>三、同名冲突和解决方案<br>解决 ① 双冒号法：：<br>基类和子类当中有相同名字的数据成员和成员函数，<br>访问的时候：相同的名字：：数据成员/成员函数<br>解决 ② 定义虚基类 virtual<br>eg：class furniture{}；<br>Class sofa ：virtual public furniture{}；<br>Class bed：virtual public furniture{}；<br>Class sofabed：public sofa，public bed{}；</p><p>四、赋值兼容规则</p>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GitHub+PicGo构建免费图床及其高效使用</title>
      <link href="blog/bzf30z/"/>
      <url>blog/bzf30z/</url>
      
        <content type="html"><![CDATA[<h2 id="一、搭建缘由"><a href="#一、搭建缘由" class="headerlink" title="一、搭建缘由"></a>一、搭建缘由</h2><p>一开始搭建博客，避免不了要用许多图片，最初使用七牛云来做博客图床，但是后来发现，七牛云只有 30 天的临时域名，hhhhhhh，果然啊，天下就没有免费的好事啊~后来就发现 GitHub 配合 PicGo 可以作图床，而且加上 jsDlivr 速度可观。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1602926956661-8671ebfe-4f99-494d-b759-a9c75cd67b41.png#align=left&amp;display=inline&amp;height=670&amp;margin=%5Bobject%20Object%5D&amp;originHeight=670&amp;originWidth=807&amp;size=0&amp;status=done&amp;style=none&amp;width=807" alt></p><h2 id="二、GitHub-相关配置"><a href="#二、GitHub-相关配置" class="headerlink" title="二、GitHub 相关配置"></a>二、GitHub 相关配置</h2><h3 id="新建-figure-图床仓库"><a href="#新建-figure-图床仓库" class="headerlink" title="新建 figure 图床仓库"></a>新建 figure 图床仓库</h3><p>常规新建仓库方式，命名 figure（可以换，下面仓库名也得跟着换）<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1602926957158-9c7f8749-4d8e-4bc9-9e1c-7d3db5a307b1.png#align=left&amp;display=inline&amp;height=241&amp;margin=%5Bobject%20Object%5D&amp;originHeight=241&amp;originWidth=1812&amp;size=0&amp;status=done&amp;style=none&amp;width=1812" alt></p><h3 id="生成一个-Token-密匙"><a href="#生成一个-Token-密匙" class="headerlink" title="生成一个 Token 密匙"></a>生成一个 Token 密匙</h3><p>点击 setting<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1602926956634-4c139fbc-0469-4749-89b8-f139226aa7d2.png#align=left&amp;display=inline&amp;height=904&amp;margin=%5Bobject%20Object%5D&amp;originHeight=904&amp;originWidth=1823&amp;size=0&amp;status=done&amp;style=shadow&amp;width=1823" alt><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1605839703428-b18e3c24-48e0-44ed-9715-81fcd822d4e8.png#align=left&amp;display=inline&amp;height=237&amp;margin=%5Bobject%20Object%5D&amp;originHeight=444&amp;originWidth=1120&amp;size=0&amp;status=done&amp;style=shadow&amp;width=599" alt><br><strong>只需要勾选第一个仓库选项就可以了！</strong></p><h2 id="三、PicGo-相关配置"><a href="#三、PicGo-相关配置" class="headerlink" title="三、PicGo 相关配置"></a>三、PicGo 相关配置</h2><h3 id="下载及注意事项"><a href="#下载及注意事项" class="headerlink" title="下载及注意事项"></a>下载及注意事项</h3><p><a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">下载地址</a></p><p>注意：下载 picgo 时候，要科学上网，谷歌插件没用，只能用小飞机或其他的软件（得开全局配置下载）</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1602926956815-db5cf455-f628-4c4d-9242-1687e15a7f03.png#align=left&amp;display=inline&amp;height=564&amp;margin=%5Bobject%20Object%5D&amp;originHeight=564&amp;originWidth=1002&amp;size=0&amp;status=done&amp;style=none&amp;width=1002" alt></p><h2 id="四、高效写博客"><a href="#四、高效写博客" class="headerlink" title="四、高效写博客"></a>四、高效写博客</h2><h3 id="Snipaste-截图软件"><a href="#Snipaste-截图软件" class="headerlink" title="Snipaste 截图软件"></a>Snipaste 截图软件</h3><blockquote><p><strong>常用</strong>快捷键【惠普 💻+非机械键盘，所以记录下】</p></blockquote><p>fn+f1：截屏（可编辑）</p><p>esc：退出</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1602926956785-4e12ba13-c4c6-4e5a-9758-5d3de27f9718.png#align=left&amp;display=inline&amp;height=446&amp;margin=%5Bobject%20Object%5D&amp;originHeight=446&amp;originWidth=553&amp;size=0&amp;status=done&amp;style=none&amp;width=553" alt></p><h3 id="结合-PicGo-使用"><a href="#结合-PicGo-使用" class="headerlink" title="结合 PicGo 使用"></a>结合 PicGo 使用</h3><ul><li>PicGo+Snipaste 快捷键结合<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1602926956619-08d5eae3-3b21-42cc-a2d8-85d6d2f8ed62.png#align=left&amp;display=inline&amp;height=220&amp;margin=%5Bobject%20Object%5D&amp;originHeight=220&amp;originWidth=847&amp;size=0&amp;status=done&amp;style=none&amp;width=847" alt></li></ul><h3 id="综合使用-SOP"><a href="#综合使用-SOP" class="headerlink" title="综合使用 SOP"></a>综合使用 SOP</h3><ol><li>按<code>fn+f1</code>截完图按<code>ctrl+c</code>将刚刚截图放到剪贴板</li><li>再按<code>ctrl+shift+p</code>使用 picgo 快捷键将剪贴板上的图片上传同时将此时图片的外链复制到剪贴板</li></ol><h2 id="五、相关补充"><a href="#五、相关补充" class="headerlink" title="五、相关补充"></a>五、相关补充</h2><h3 id="上传失败"><a href="#上传失败" class="headerlink" title="上传失败"></a>上传失败</h3><p><code>问题1：有些时候上传picgo时，会出现配置报错的情况</code></p><blockquote><p>方案 1：在 picgo 的配置中，改一下文件夹名字（相当于在仓库下新建一个文件夹），就比如本来存到 blogarticle3/文件夹下，改成 blogarticle4/就好了<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1602926956579-eafc7cfa-1e0b-41be-ae5b-c6560b8c7638.png#align=left&amp;display=inline&amp;height=186&amp;margin=%5Bobject%20Object%5D&amp;originHeight=186&amp;originWidth=1320&amp;size=0&amp;status=done&amp;style=none&amp;width=1320" alt><br>方案 2：将下图所示的<code>上传前重命名</code>打开同时<code>设置Server</code>内容开换成关，关换成开，为什么呢？玄学···<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1602926956785-fb091672-3c17-49db-a0e7-965e20c93f5c.png#align=left&amp;display=inline&amp;height=564&amp;margin=%5Bobject%20Object%5D&amp;originHeight=564&amp;originWidth=1002&amp;size=0&amp;status=done&amp;style=none&amp;width=1002" alt><br>方案 3：将 PicGo 软件叉掉重新运行。玄学····<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1602926957260-3a981036-cd74-4a90-8665-d2510470f2c9.png#align=left&amp;display=inline&amp;height=564&amp;margin=%5Bobject%20Object%5D&amp;originHeight=564&amp;originWidth=1002&amp;size=0&amp;status=done&amp;style=none&amp;width=1002" alt></p></blockquote><h3 id="关于插件"><a href="#关于插件" class="headerlink" title="关于插件"></a>关于插件</h3><p>在插件列表里面下载这三个拓展插件，其中两个国内的托管 coding 和 gitee，还有一个 github plus 版本，不过觉得国内的外链范围肯定是要小一点的应该，最好是优先使用 github 图床，coding 和 gitee 的作为文章使用，有关博客配置的使用 CDN 等。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1602926956548-b7b5ad1b-2586-42c5-8f7d-9dd17c265fcf.png#align=left&amp;display=inline&amp;height=341&amp;margin=%5Bobject%20Object%5D&amp;originHeight=341&amp;originWidth=771&amp;size=0&amp;status=done&amp;style=none&amp;width=771" alt></p><h4 id="Coding-配置"><a href="#Coding-配置" class="headerlink" title="Coding 配置"></a>Coding 配置</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1602926956265-035a546d-2ecd-48c3-8eec-c9ef7779653b.png#align=left&amp;display=inline&amp;height=486&amp;margin=%5Bobject%20Object%5D&amp;originHeight=486&amp;originWidth=739&amp;size=0&amp;status=done&amp;style=none&amp;width=739" alt></p><h4 id="gitee-配置"><a href="#gitee-配置" class="headerlink" title="gitee 配置"></a>gitee 配置</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1602926956286-859465c2-411f-4761-8921-526656b8a191.png#align=left&amp;display=inline&amp;height=568&amp;margin=%5Bobject%20Object%5D&amp;originHeight=568&amp;originWidth=778&amp;size=0&amp;status=done&amp;style=none&amp;width=778" alt></p><h4 id="GitHub-plus-配置"><a href="#GitHub-plus-配置" class="headerlink" title="GitHub plus 配置"></a>GitHub plus 配置</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1602926956274-6e705ace-8e6f-4226-9fae-ffaaa66a2aa9.png#align=left&amp;display=inline&amp;height=517&amp;margin=%5Bobject%20Object%5D&amp;originHeight=517&amp;originWidth=727&amp;size=0&amp;status=done&amp;style=none&amp;width=727" alt></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jsDelivr和Github构建免费CDN</title>
      <link href="blog/erx9hf/"/>
      <url>blog/erx9hf/</url>
      
        <content type="html"><![CDATA[<h2 id="一、搭建缘由"><a href="#一、搭建缘由" class="headerlink" title="一、搭建缘由"></a>一、搭建缘由</h2><p>CDN 的全称是 Content Delivery Network，即内容分发网络。CDN 是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN 的关键技术主要有内容存储和分发技术。——百度百科</p><p>通俗来说就是提取外链，同时加速访问的好处。Github 的资源在国内加载速度比较慢，因此需要使用 CDN 加速来优化网站打开速度，jsDelivr + Github 便是免费且好用的 CDN，非常适合博客网站使用。</p><h2 id="二、GitHub-新建-CDN-仓库"><a href="#二、GitHub-新建-CDN-仓库" class="headerlink" title="二、GitHub 新建 CDN 仓库"></a>二、GitHub 新建 CDN 仓库</h2><p>在本地电脑进行一系列 clone/pull 等一系列操作，同时发布版本（最好上传一次就发布依次版本）<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1602926808858-fcdea51e-42b2-4582-b46d-e9c105842039.png#align=left&amp;display=inline&amp;height=950&amp;margin=%5Bobject%20Object%5D&amp;originHeight=950&amp;originWidth=1844&amp;size=0&amp;status=done&amp;style=none&amp;width=1844" alt><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1602926808290-99384f86-d857-415a-83e6-9be3b5bcf279.png#align=left&amp;display=inline&amp;height=953&amp;margin=%5Bobject%20Object%5D&amp;originHeight=953&amp;originWidth=1832&amp;size=0&amp;status=done&amp;style=none&amp;width=1832" alt></p><h2 id="三、使用-jsDlivr"><a href="#三、使用-jsDlivr" class="headerlink" title="三、使用 jsDlivr"></a>三、使用 jsDlivr</h2><p><strong><code>[https://cdn.jsdelivr.net/gh/wztlink1013/CDN-Volantis@](https://cdn.jsdelivr.net/gh/wztlink1013/CDN-Volantis@)版本号/文件夹/文件名.文件后缀</code></strong></p><p><strong>举个栗子</strong></p><ul><li><a href="https://cdn.jsdelivr.net/gh/wztlink1013/CDN@2.4/Pictures/blogbackground/fengbaobao_1.jpg" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/wztlink1013/CDN@2.4/Pictures/blogbackground/fengbaobao_1.jpg</a></li><li><a href="https://cdn.jsdelivr.net/gh/moezx/cdn@3.1.3//The%20Pet%20Girl%20of%20Sakurasou.mp4" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/moezx/cdn@3.1.3//The Pet Girl of Sakurasou.mp4</a></li></ul><blockquote><p>0、具体使用教程</p></blockquote><ul><li><a href="https://blog.wztlink1013.com/2020/02/25/Hexo/jsDelivr%E5%92%8CGitHub%E6%9E%84%E5%BB%BA%E5%85%8D%E8%B4%B9CDN/" target="_blank" rel="noopener">jsDelivr 和 Github 构建免费 CDN</a></li><li><a href="https://www.jsdelivr.com/" target="_blank" rel="noopener">jsdelivr 官网网站</a></li></ul><blockquote><p>1、加载任何 Github 发布、提交或分支</p></blockquote><ul><li><a href="https://cdn.jsdelivr.net/gh/user/repo@version/file" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/user/repo@version/file</a></li></ul><blockquote><p>2、加载 jQuery v3.2.1</p></blockquote><ul><li><a href="https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js</a></li></ul><blockquote><p>3、使用版本范围而不是特定版本</p></blockquote><ul><li><a href="https://cdn.jsdelivr.net/gh/jquery/jquery@3.2/dist/jquery.min.js" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/jquery/jquery@3.2/dist/jquery.min.js</a></li><li><a href="https://cdn.jsdelivr.net/gh/jquery/jquery@3/dist/jquery.min.js" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/jquery/jquery@3/dist/jquery.min.js</a></li></ul><blockquote><p>4、完全省略该版本以获取最新版本</p></blockquote><ul><li><a href="https://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js</a></li></ul><blockquote><p>5、将“.min”添加到任何 JS/CSS 文件中以获取缩小版本，如果不存在，将为会自动生成</p></blockquote><ul><li><a href="https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/src/core.min.js" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/src/core.min.js</a></li></ul><blockquote><p>6、在末尾添加 / 以获取资源目录列表</p></blockquote><ul><li><a href="https://cdn.jsdelivr.net/gh/jquery/jquery/" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/jquery/jquery/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DOS/CMD/Windows/提高开发效率</title>
      <link href="blog/nvlr2g/"/>
      <url>blog/nvlr2g/</url>
      
        <content type="html"><![CDATA[<h2 id="一、快捷键"><a href="#一、快捷键" class="headerlink" title="一、快捷键"></a>一、快捷键</h2><blockquote><p>很多软件的快捷键使用相通，在不确定的情况下，先试试其他软件的快捷键的使用方法</p></blockquote><h3 id="Windows-电脑快捷键"><a href="#Windows-电脑快捷键" class="headerlink" title="Windows 电脑快捷键"></a>Windows 电脑快捷键</h3><blockquote><p><strong>HP 惠普笔记本</strong></p></blockquote><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">win+E                 打开文件管器</span><br><span class="line">win+D                 显示桌面</span><br><span class="line">win+L                 锁计算机</span><br><span class="line">alt+F4                关闭当前程序</span><br><span class="line">ctrl+shift+Esc/ctrl+alt+delete：任务管理器</span><br><span class="line">ctrl+F                文本或网页中查找（退出一般按ESC）</span><br><span class="line">ctrl+A                选中所有文本</span><br><span class="line">win+G录频选项</span><br><span class="line">sin+alt+G直接录频</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Onenote2016配合插件win+n快速笔记win+shift+n打开onenote</span><br><span class="line"></span><br><span class="line">Windows 键+V：打开剪贴板</span><br><span class="line">Windows 键+PgUp：在桌面选定左上角软件</span><br><span class="line">Windows 键+PgDown：在桌面选定右下角软件</span><br></pre></td></tr></table></figure><h3 id="Eclipse-快捷键"><a href="#Eclipse-快捷键" class="headerlink" title="Eclipse 快捷键"></a>Eclipse 快捷键</h3><blockquote><p>ctrl+shift+L：eclipse 所有快捷键<br><code>//</code>注释：<code>ctrl+shift+c</code>（添加和注释都是这样）或者<code>ctrl+/</code> &gt; <code>/**/</code>注释：添加<code>ctrl+shift+/</code>   取消<code>ctrl+shift+\</code></p></blockquote><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">Alt+方向键：将当前行向上或者向下移动</span><br><span class="line">ctrl+m：编辑窗口最大化（反复两次按即取消）</span><br><span class="line">ctrl+.及ctrl+<span class="number">1</span>：下一个错误及快速修改</span><br><span class="line">Control+O: 快速概要,迅速的跳到一个方法或者属性，只需要输入名字的头几个字母。</span><br><span class="line"></span><br><span class="line">shift+<span class="built_in">home</span>/<span class="built_in">end</span>：选中一行</span><br><span class="line">ctrl+pgup/pgdn：切换页面（浏览器打开的页面/编辑器的多窗口）</span><br></pre></td></tr></table></figure><h3 id="VScode-快捷键"><a href="#VScode-快捷键" class="headerlink" title="VScode 快捷键"></a>VScode 快捷键</h3><p>偶然发现：打开 vscode 的时候，直接在页面内输入<code>ctrl+shift+c</code>就会直接进入博客根目录下的 CMD 模式</p><h3 id="Pycharm-JetBrains-快捷键"><a href="#Pycharm-JetBrains-快捷键" class="headerlink" title="Pycharm/JetBrains 快捷键"></a>Pycharm/JetBrains 快捷键</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685666000-0fb595f1-51e4-4e71-8547-96aa0b938148.png#align=left&amp;display=inline&amp;height=397&amp;margin=%5Bobject%20Object%5D&amp;originHeight=397&amp;originWidth=769&amp;size=0&amp;status=done&amp;style=none&amp;width=769" alt></p><figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">Ctrl+F5（左上角）：（<span class="keyword">return</span> <span class="string">"project"</span>）重新debug该文件</span><br><span class="line">F9：（<span class="keyword">resume</span> program）一个断点接着一个断点走，不按行走（eg：有循环会随着i一步一步走完）</span><br><span class="line">F8：（<span class="keyword">step</span> over） 一行一行走代码</span><br><span class="line">F7：（<span class="keyword">step</span> <span class="keyword">into</span>） 进入函数内部</span><br><span class="line">Alt+shift+F7：（<span class="keyword">step</span> <span class="keyword">into</span> mycode）遇到自己函数  进去</span><br><span class="line">shift+F8：（<span class="keyword">step</span> out）跳出，进入函数后，跳出来</span><br><span class="line">Alt+F10：（show execution point）指针显示当前断点旁边</span><br><span class="line">**Show Python Prompt**按键,交互式调试命令</span><br></pre></td></tr></table></figure><h2 id="二、CMD-之常用命令"><a href="#二、CMD-之常用命令" class="headerlink" title="二、CMD 之常用命令"></a>二、CMD 之常用命令</h2><blockquote><ul><li>使用 help 命令，查看所有的 dos 命令</li><li>找到命令之后，使用 <code>命令+ /?</code>来查看该命令下的其他属性</li><li>DOS 不区分大小写</li></ul></blockquote><h3 id="磁盘-文件夹相关"><a href="#磁盘-文件夹相关" class="headerlink" title="磁盘/文件夹相关"></a>磁盘/文件夹相关</h3><ul><li><code>d:</code> <code>e:</code> 进入不同的盘</li><li><code>cd:</code> 进入指定文件夹。注意：只在<strong>该磁盘</strong>才有效</li><li><code>dir</code> 查看当前目录下的所有文件，使用 dir /?来查看其它用法</li><li>创建和删除目录<ul><li>md 目录名（文件夹） //创建目录</li><li>rd   目录名（文件夹） //删除目录</li></ul></li><li>cd .. 返回上一级文件夹</li><li><p>复制文件:把一个文件移动（就是剪切+复制）到另一个地方。甚至可以改后缀</p><blockquote><p>move 路径\文件名 路径\文件名</p></blockquote></li><li><p>删除文件</p><blockquote><p>//这个是专门删除文件的，不能删除文件夹<br>del 文件名</p></blockquote></li><li><p><strong>生成文件树</strong></p><blockquote><p>tree /f &gt;tree.txt</p></blockquote></li></ul><h3 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h3><ul><li><code>ipconfig</code> 查看本机 ip</li><li><code>cls</code> 清除屏幕</li><li>ping<blockquote><p>//用来测试网络是否畅通<br>ping ip(主机名)</p></blockquote></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">复制内容：右键弹出快捷菜单，选择“标记<span class="comment">(K)</span>”，然后选中所需复制的内容，然后右键即可</span><br><span class="line"></span><br><span class="line">粘贴内容：右键弹出快捷菜单，选择“粘贴<span class="comment">(P)</span>”</span><br></pre></td></tr></table></figure><ul><li>在文件夹空白处按住 Shift，然后右键弹出快捷菜单，可以看到“在此处打开命令行窗口”</li><li>tab 补齐功能！！！</li><li>文件及目录名中不能包含下列任何字符：\ / : * ? “ &lt; &gt; |</li></ul><h2 id="三、CMD-之默认非-utf-8-编码"><a href="#三、CMD-之默认非-utf-8-编码" class="headerlink" title="三、CMD 之默认非 utf-8 编码"></a>三、CMD 之默认非 utf-8 编码</h2><p>运行 java 程序时候，如果代码中有中文，会出现中文报错乱码情况/</p><h3 id="治标方法"><a href="#治标方法" class="headerlink" title="治标方法"></a>治标方法</h3><p><code>CMD</code> 中输入 <code>chcp 65001</code> 进入 utf-8 模式下的的控制台，再运行程序</p><h3 id="治本方法"><a href="#治本方法" class="headerlink" title="治本方法"></a>治本方法</h3><p><a href="https://blog.csdn.net/gulang03/article/details/81771343" target="_blank" rel="noopener">博文 1</a>  <a href="https://blog.csdn.net/runAndRun/article/details/103072938?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">博文 2</a>注意：自己已经再注册表中增加了一行 tuf-8 编码数据，以后要留意、<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685666566-625a520c-ff9d-4eea-8fba-3a8c4f8f696e.png#align=left&amp;display=inline&amp;height=24&amp;margin=%5Bobject%20Object%5D&amp;originHeight=24&amp;originWidth=660&amp;size=0&amp;status=done&amp;style=none&amp;width=660" alt></p><h2 id="四、CMD-之运行-JAVA"><a href="#四、CMD-之运行-JAVA" class="headerlink" title="四、CMD 之运行 JAVA"></a>四、CMD 之运行 JAVA</h2><h3 id="CMD-运行-java-程序"><a href="#CMD-运行-java-程序" class="headerlink" title="CMD 运行 java 程序"></a>CMD 运行 java 程序</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685666652-cb97d69b-664c-4506-a24f-1dc5b8220a02.png#align=left&amp;display=inline&amp;height=940&amp;margin=%5Bobject%20Object%5D&amp;originHeight=940&amp;originWidth=902&amp;size=0&amp;status=done&amp;style=none&amp;width=902" alt></p><h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><blockquote><p>main 主函数可以看成一个普通的方法，也可以传递实参来调用普通方法<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685666759-75d2a062-c52d-4c49-acce-7310a0280f24.png#align=left&amp;display=inline&amp;height=214&amp;margin=%5Bobject%20Object%5D&amp;originHeight=214&amp;originWidth=1070&amp;size=0&amp;status=done&amp;style=none&amp;width=1070" alt></p></blockquote><hr><blockquote><p>向 main 方法传递字符串<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685666878-98ce351e-4485-4381-bcfe-4b9121226fc9.png#align=left&amp;display=inline&amp;height=778&amp;margin=%5Bobject%20Object%5D&amp;originHeight=778&amp;originWidth=1098&amp;size=0&amp;status=done&amp;style=none&amp;width=1098" alt></p></blockquote><h3 id="CMD-下运行-Java-中文乱码"><a href="#CMD-下运行-Java-中文乱码" class="headerlink" title="CMD 下运行 Java 中文乱码"></a>CMD 下运行 Java 中文乱码</h3><p><code>javac -encoding utf-8 test.java</code></p><p>还是上面的问题，DOS 默认使用的编码是 GBK,这里需要再编译的时候制定使用的编码</p><h2 id="五、笔记本触摸板"><a href="#五、笔记本触摸板" class="headerlink" title="五、笔记本触摸板"></a>五、笔记本触摸板</h2><h3 id="笔记本触摸屏使用"><a href="#笔记本触摸屏使用" class="headerlink" title="笔记本触摸屏使用"></a>笔记本触摸屏使用</h3><ul><li><strong>单指</strong>：“确定键”<br>点击===相当于左键确定<br>先点击 不放拖动 ===拖拽</li><li><strong>双指</strong>：“右键、滑动、拉伸旋转键”<br>点击=相当于右键（鼠标）<br>先点击   不放左右拖动上下拖动=滑页功能<br>等比例拉伸或者旋转</li><li><strong>三指</strong>：“页面切换键”<br>点击=查找<br>先点击   不放   上下拖动=多页面模式、纯桌面模式切换<br>先点击   不放   左右拖动===页面切换类似 alt+tab</li><li><strong>四指</strong>：“设置键”<br>点击===设置/操作中心</li></ul><h3 id="实现手写输入功能"><a href="#实现手写输入功能" class="headerlink" title="实现手写输入功能"></a>实现手写输入功能</h3><ul><li>第一步：安装 SoftStylus 手写软件</li></ul><p>本身没有预装 SoftStylus 手写软件的，首先登录 HP 官方网站，查询并下载手写软件，然后安装手写软件。如果已预装手写软件，建议运行 Software Setup 软件，将手写软件升级到最新版本，以提高手写识别成功率。</p><ul><li>第二步：设置手写识别速度</li></ul><p>运行手写软件，点击设置图标进入“参数”界面，然后可根据需要配置识别速度。如果是初次使用手写功能，刚开始建议将识别速度降低，一旦习惯了使用手写功能，应该将识别速度调为最快，这样在 QQ 聊天或编辑文档时，以应对较快的手写输入连写。</p><ul><li>第三步：设置各种热键</li></ul><p>此外，替换选项可设置在主窗口上显示最多可选择字符，这个应该根据笔记本屏幕大小而定，例如 14 英寸屏幕可设置为 7，而 12 英寸屏幕应该设为 4，最后建议开启“汉字预览”功能，切换到“热键”选项页，然后可根据需要自定义各种热键。</p><ul><li>第四步：设置手写窗口外观</li></ul><p>如果经常使用手写功能，建议切换到“一般”选项页，勾寻操作系统起动时运行 SoftStylus”复选框，最后切换到“外观”选项页，并调节窗口透明度、画笔宽度和墨色。如果是 QQ 聊天，建议将画笔宽度调细一点，且墨色应该设为黑色。</p><ul><li>第五步：使用手写进行聊天</li></ul><p>设置完毕后，单击“确认”按钮，当你在 QQ 聊天或编辑文档时，如想使用手写输入，只需按下前面设置的快捷键，即可马上弹出手写输入界面。<br>这个时候，就可以用手指在触摸板上比划，文字就会显示在界面里，最后出现在聊天窗口中，很方便。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>W<a href="https://www.jianshu.com/p/7bd7574d94c8" target="_blank" rel="noopener">indows 常用快捷键与快捷指令</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Environment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CMD </tag>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA-面向对象</title>
      <link href="blog/eywygo/"/>
      <url>blog/eywygo/</url>
      
        <content type="html"><![CDATA[<h2 id="一、面向对象思考"><a href="#一、面向对象思考" class="headerlink" title="一、面向对象思考"></a>一、面向对象思考</h2><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><blockquote><p>就像是手工设计动态数组、链表等数据结构一样，要用<strong>设计</strong>这个字眼去面向对象思考。<br>同时还要关注类与类之间的关系有关联、聚集、组合，在设计多个类的过程中要有这些意识</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1600086611076-d83aa284-7977-447d-9b25-0a0a67a12c3f.png#align=left&amp;display=inline&amp;height=189&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=377&amp;originWidth=1003&amp;size=316078&amp;status=done&amp;style=shadow&amp;width=501.5" alt="image.png"></p><h3 id="基本数据类型值及其包装类"><a href="#基本数据类型值及其包装类" class="headerlink" title="基本数据类型值及其包装类"></a>基本数据类型值及其包装类</h3><blockquote><p>都存在 java.lang 里面</p></blockquote><p>Integer、Long、Float、Double、Boolean、Character、Short、Byte<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1600087287006-c480d8fd-a6b5-4be9-bc43-3023e9fa4a0c.png#align=left&amp;display=inline&amp;height=264&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=527&amp;originWidth=989&amp;size=482466&amp;status=done&amp;style=stroke&amp;width=494.5" alt="image.png"></p><blockquote><p>基本数据类型和其对象化之后的包装类类型之间的自动转换</p></blockquote><p><code>Integer intObject = new Integer (2);</code>  等价于 <code>Integer intObject = 2;</code></p><blockquote><p>BigInteger 类和 BigDeciml 类用于表示任意大小和精度的整数或是二进制数</p></blockquote><h2 id="二、对象和类"><a href="#二、对象和类" class="headerlink" title="二、对象和类"></a>二、对象和类</h2><h3 id="OOP-阶梯图"><a href="#OOP-阶梯图" class="headerlink" title="OOP 阶梯图"></a>OOP 阶梯图</h3><blockquote><p>“OOP 阶梯图”—— 类的多个特性，同时以对象对基础</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598686636493-3aecdbf5-1f94-4076-99dc-0ef0dac07331.png#align=left&amp;display=inline&amp;height=284&amp;margin=%5Bobject%20Object%5D&amp;originHeight=726&amp;originWidth=1328&amp;size=0&amp;status=done&amp;style=shadow&amp;width=520" alt></p><h3 id="类的组成"><a href="#类的组成" class="headerlink" title="类的组成"></a>类的组成</h3><blockquote><p>数据域、构造函数、方法（C++里面的说法是数据成员和成员函数）<br><strong>类中不能存在可执行语句</strong></p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598686636459-572d60ff-0740-4487-b3fd-9e2fa94b643f.png#align=left&amp;display=inline&amp;height=248&amp;margin=%5Bobject%20Object%5D&amp;originHeight=713&amp;originWidth=1387&amp;size=0&amp;status=done&amp;style=shadow&amp;width=482" alt></p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ul><li>和类同名、重载、没有返回值</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598686636454-ce95b4aa-9966-4024-82ae-b7cc296097db.png#align=left&amp;display=inline&amp;height=218&amp;margin=%5Bobject%20Object%5D&amp;originHeight=481&amp;originWidth=708&amp;size=0&amp;status=done&amp;style=shadow&amp;width=321" alt></p><ul><li><strong>构造函数初始化优先级</strong><blockquote><ol><li>静态成员变量初始化顺序高于非静态成员变量</li><li>成员变量的初始化顺序优于构造函数</li><li>静态成员变量只初始化一次，就是第一次被访问的时候</li><li>存在多个静态成员变量的时候，按照次序依次执行</li></ol></blockquote></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598686636495-c0c2fdf5-3919-475e-a2f7-a3888d97492d.png#align=left&amp;display=inline&amp;height=220&amp;margin=%5Bobject%20Object%5D&amp;originHeight=700&amp;originWidth=1404&amp;size=0&amp;status=done&amp;style=shadow&amp;width=441" alt></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Window(<span class="number">2</span>)</span><br><span class="line">Window(<span class="number">1</span>)</span><br><span class="line">Window(<span class="number">2</span>)</span><br><span class="line">Window(<span class="number">3</span>)</span><br><span class="line">House()</span><br><span class="line">Window(<span class="number">33</span>)</span><br><span class="line">f()</span><br></pre></td></tr></table></figure><h3 id="数据域的默认值"><a href="#数据域的默认值" class="headerlink" title="数据域的默认值"></a>数据域的默认值</h3><blockquote><p><strong>对于对象而言，不赋值也会有默认的</strong>。之前的数组就是如此</p></blockquote><p>各个数据域按照之前的基本上的默认初值，如果是其他的类型，则空</p><h3 id="对象的创建和访问"><a href="#对象的创建和访问" class="headerlink" title="对象的创建和访问"></a>对象的创建和访问</h3><blockquote><ol><li>通过引用变量来访问对象，创建的类的对象被内存分配了内存空间，可以用引用变量来访问</li><li><strong>对象类型都需要用 new 来新建</strong></li></ol></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ClassName objectRefVar = <span class="keyword">new</span> ClassName();</span><br><span class="line"></span><br><span class="line">Circle myCircle = <span class="keyword">new</span> Circle();</span><br></pre></td></tr></table></figure><p><strong>使用成员变量和成员函数</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mycircle.radius</span><br><span class="line">mycircle.getArea()</span><br></pre></td></tr></table></figure><p><strong>调用静态函数，动态函数需要在自己类下面调用自己的函数</strong></p><h3 id="“炸宿舍”"><a href="#“炸宿舍”" class="headerlink" title="“炸宿舍”"></a>“炸宿舍”</h3><blockquote><p>关于老师提出来的炸宿舍例子</p></blockquote><p><strong>对象间的赋值和基本类型的赋值，能改变的一定是基本数值类型，所谓的数组名抑或是对象名，都只是地址映射</strong></p><h3 id="垃圾回收机制和-this"><a href="#垃圾回收机制和-this" class="headerlink" title="垃圾回收机制和 this"></a>垃圾回收机制和 this</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.gc(); <span class="comment">// 提醒垃圾回收</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1600086346479-3cc546b6-dab8-4fc5-a352-8f2fb2ea8065.png#align=left&amp;display=inline&amp;height=281&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=562&amp;originWidth=960&amp;size=48667&amp;status=done&amp;style=shadow&amp;width=480" alt="image.png"></p><h3 id="静态变量、常量和方法"><a href="#静态变量、常量和方法" class="headerlink" title="静态变量、常量和方法"></a>静态变量、常量和方法</h3><blockquote><p>静态成员变量：静态成员变量可以被类的所有实例共享（比如计数变量用到）<br>静态方法：不能访问类的实例成员<br>关于静态变量、静态方法、实例变量、实例方法</p></blockquote><h3 id="可见性修饰符"><a href="#可见性修饰符" class="headerlink" title="可见性修饰符"></a>可见性修饰符</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598686637158-0b08a6a1-5cd8-4aac-9133-1ad101cc8a52.png#align=left&amp;display=inline&amp;height=302&amp;margin=%5Bobject%20Object%5D&amp;originHeight=302&amp;originWidth=491&amp;size=0&amp;status=done&amp;style=stroke&amp;width=491" alt></p><h3 id="“析构函数”"><a href="#“析构函数”" class="headerlink" title="“析构函数”"></a>“析构函数”</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> throwsable </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.finalize();</span><br><span class="line">    System.out.println(<span class="string">"Person - finalize"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>内部类只给该类使用（私有自己用，同时写静态的），就如 LinkedList 类的设计</p><p>##</p>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy使用</title>
      <link href="blog/zsvfxg/"/>
      <url>blog/zsvfxg/</url>
      
        <content type="html"><![CDATA[<p>##</p><h2 id="一、Scrapy"><a href="#一、Scrapy" class="headerlink" title="一、Scrapy"></a>一、Scrapy</h2><h3 id="Scrapy-基础"><a href="#Scrapy-基础" class="headerlink" title="Scrapy 基础"></a>Scrapy 基础</h3><ul><li>是一个爬虫框架，同时易扩展，可以添加新的模块达到自定义扩展</li><li>输出格式多样：json，csv，xml 等</li><li>自动处理编码</li></ul><h3 id="Scrapy-框架架构图"><a href="#Scrapy-框架架构图" class="headerlink" title="Scrapy 框架架构图"></a>Scrapy 框架架构图</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/webp/1484158/1598673193957-7a7456b0-3de1-4c77-b849-cc2572555ed5.webp#align=left&amp;display=inline&amp;height=281&amp;margin=%5Bobject%20Object%5D&amp;originHeight=541&amp;originWidth=801&amp;size=0&amp;status=done&amp;style=shadow&amp;width=416" alt></p><blockquote><p>下载方法以及问题，在 anaconda 博客中</p></blockquote><h2 id="二、Scrapy-使用"><a href="#二、Scrapy-使用" class="headerlink" title="二、Scrapy 使用"></a>二、Scrapy 使用</h2><h3 id="使用-SOP"><a href="#使用-SOP" class="headerlink" title="使用 SOP"></a>使用 SOP</h3><ul><li>创建工程<ul><li>键入<code>cmd</code> <code>cd</code>到需要下载的目录下</li><li>输入<code>scrapy startproject tutorial</code>（最后是项目名字）</li><li><strong>!此后所有有关命令的操作，均在下一级文件夹下，也有是有 cfg 文件后缀的文件夹下</strong></li></ul></li><li>定义 Item，构造爬取的对象</li><li>编写 spider，爬虫主体<ul><li><code>scrapy genspider amazon_spider https://……</code></li></ul></li><li>pipelines，默认 return item</li><li>编写其他配置，其中 pipeline 用于处理爬取后所得到的结果</li><li>执行爬虫<ul><li><code>scrapy crawl amazon_spider</code></li></ul></li></ul><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>查看其官方文档</li><li><a href="https://www.jianshu.com/p/8023fccd7206" target="_blank" rel="noopener">简书</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spider </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data-数据可视化综述</title>
      <link href="blog/kt0kvc/"/>
      <url>blog/kt0kvc/</url>
      
        <content type="html"><![CDATA[<h2 id="GitHub-笔记源码"><a href="#GitHub-笔记源码" class="headerlink" title="GitHub 笔记源码"></a>GitHub 笔记源码</h2><p>jupyter notebook</p><ul><li><a href="https://github.com/wztlink1013/data-analysis-mining" target="_blank" rel="noopener">https://github.com/wztlink1013/data-analysis-mining</a></li></ul><h2 id="零碎"><a href="#零碎" class="headerlink" title="零碎"></a>零碎</h2><h3 id="matplotlib-调整子图间距，调整整体空白"><a href="#matplotlib-调整子图间距，调整整体空白" class="headerlink" title="matplotlib 调整子图间距，调整整体空白"></a>matplotlib 调整子图间距，调整整体空白</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig.tight_layout() <span class="comment">#调整整体空白</span></span><br><span class="line">plt.subplots_adjust(wspace =<span class="number">0</span>, hspace =<span class="number">0</span>) <span class="comment">#调整子图间距</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://mp.weixin.qq.com/s/DaQL6bqr0wu5iYt-cVkz6g" target="_blank" rel="noopener">Matplotlib 可视化最有价值的 50 个图表</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> DataAnalysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> matplotlib </tag>
            
            <tag> pandas </tag>
            
            <tag> seaborn </tag>
            
            <tag> bokeh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas-分组聚合</title>
      <link href="blog/oq4xcx/"/>
      <url>blog/oq4xcx/</url>
      
        <content type="html"><![CDATA[<h2 id="一、分组"><a href="#一、分组" class="headerlink" title="一、分组"></a>一、分组</h2><h3 id="GroupBy-对象"><a href="#GroupBy-对象" class="headerlink" title="GroupBy 对象"></a>GroupBy 对象</h3><blockquote><p>· groupedby 函数中的参数：</p></blockquote><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">as_index的作用：控制聚合输出是否以组标签为索引值，默认为<span class="literal">True</span>，就是分层次的索引，若为<span class="literal">False</span>多加一列默认索引索引，相当于非其他数据排序好了。</span><br><span class="line">但是这两组标签索引值不同有什么作用呢？=== 作用就是，根据的一列是否为索引列。</span><br><span class="line">sort_values的作用：对选定的一列数值数据从上往下从小到大进行排序（如果传值没成功===设置本体覆盖，传值覆盖）</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict_obj = &#123;<span class="string">'key1'</span> : [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>,</span><br><span class="line">                      <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>],</span><br><span class="line">            <span class="string">'key2'</span> : [<span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>,</span><br><span class="line">                      <span class="string">'two'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>, <span class="string">'three'</span>],</span><br><span class="line">            <span class="string">'data1'</span>: np.random.randn(<span class="number">8</span>),</span><br><span class="line">            <span class="string">'data2'</span>: np.random.randn(<span class="number">8</span>)&#125;</span><br><span class="line">df_obj = pd.DataFrame(dict_obj)</span><br><span class="line"><span class="keyword">print</span> (df_obj)</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">  key1   key2     data1     data2</span><br><span class="line"><span class="number">0</span>    a    one <span class="number">-0.147612</span> <span class="number">-0.348087</span></span><br><span class="line"><span class="number">1</span>    b    one <span class="number">-0.992986</span>  <span class="number">0.902458</span></span><br><span class="line"><span class="number">2</span>    a    two  <span class="number">0.547541</span> <span class="number">-0.310040</span></span><br><span class="line"><span class="number">3</span>    b  three  <span class="number">0.458871</span> <span class="number">-1.895392</span></span><br><span class="line"><span class="number">4</span>    a    two  <span class="number">1.224041</span>  <span class="number">0.220150</span></span><br><span class="line"><span class="number">5</span>    b    two <span class="number">-0.200124</span> <span class="number">-1.562237</span></span><br><span class="line"><span class="number">6</span>    a    one  <span class="number">1.539144</span> <span class="number">-0.758716</span></span><br><span class="line"><span class="number">7</span>    a  three  <span class="number">0.385845</span>  <span class="number">0.074309</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''1. dataframe根据key2进行分组'''</span></span><br><span class="line">print(df_obj.groupby(<span class="string">'key2'</span>)[<span class="string">'key1'</span>].count())</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (type(df_obj.groupby(<span class="string">'key1'</span>)))</span><br><span class="line"><span class="comment">#没有可视化的输出</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">key2</span></span><br><span class="line"><span class="string">one</span>      <span class="number">3</span></span><br><span class="line"><span class="string">three</span>    <span class="number">2</span></span><br><span class="line"><span class="string">two</span>      <span class="number">3</span></span><br><span class="line"><span class="attr">Name:</span> <span class="string">key1,</span> <span class="attr">dtype:</span> <span class="string">int64</span></span><br><span class="line"><span class="string">&lt;class</span> <span class="string">'pandas.core.groupby.generic.DataFrameGroupBy'</span><span class="string">&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''2. 指定列根据key1进行分组'''</span></span><br><span class="line"><span class="keyword">print</span> (type(df_obj[<span class="string">'data1'</span>].groupby(df_obj[<span class="string">'key1'</span>])))</span><br></pre></td></tr></table></figure><figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">class</span> <span class="string">'pandas.core.groupby.generic.SeriesGroupBy'</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分组运算</span></span><br><span class="line">grouped1 = df_obj.groupby(<span class="string">'key1'</span>,as_index=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">print</span> (grouped1.mean())</span><br><span class="line"></span><br><span class="line">grouped2 = df_obj[<span class="string">'data1'</span>].groupby(df_obj[<span class="string">'key1'</span>])<span class="comment">#指定某一列的数据在该索引下进行分组并且加以聚合</span></span><br><span class="line"><span class="keyword">print</span> (grouped2.mean())</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">  <span class="string">key1</span>     <span class="string">data1</span>     <span class="string">data2</span></span><br><span class="line"><span class="number">0</span>    <span class="string">a</span>  <span class="number">0.709792</span> <span class="number">-0.224477</span></span><br><span class="line"><span class="number">1</span>    <span class="string">b</span> <span class="number">-0.244746</span> <span class="number">-0.851723</span></span><br><span class="line"><span class="string">key1</span></span><br><span class="line"><span class="string">a</span>    <span class="number">0.709792</span></span><br><span class="line"><span class="string">b</span>   <span class="number">-0.244746</span></span><br><span class="line"><span class="attr">Name:</span> <span class="string">data1,</span> <span class="attr">dtype:</span> <span class="string">float64</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''3. 按自定义key分组，列表'''</span></span><br><span class="line">self_def_key = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">df_obj.groupby(self_def_key).mean()</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>data1</th><th>data2</th></tr></thead><tbody><tr><td>1</td><td>0.116853</td><td>-0.338455</td></tr><tr><td>2</td><td>0.743484</td><td>-0.661761</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_obj</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>key1</th><th>key2</th><th>data1</th><th>data2</th></tr></thead><tbody><tr><td>0</td><td>a</td><td>one</td><td>-0.147612</td><td>-0.348087</td></tr><tr><td>1</td><td>b</td><td>one</td><td>-0.992986</td><td>0.902458</td></tr><tr><td>2</td><td>a</td><td>two</td><td>0.547541</td><td>-0.310040</td></tr><tr><td>3</td><td>b</td><td>three</td><td>0.458871</td><td>-1.895392</td></tr><tr><td>4</td><td>a</td><td>two</td><td>1.224041</td><td>0.220150</td></tr><tr><td>5</td><td>b</td><td>two</td><td>-0.200124</td><td>-1.562237</td></tr><tr><td>6</td><td>a</td><td>one</td><td>1.539144</td><td>-0.758716</td></tr><tr><td>7</td><td>a</td><td>three</td><td>0.385845</td><td>0.074309</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''4. 按多个列多层分组 = = = 通过列表'''</span></span><br><span class="line">grouped2 = df_obj.groupby([<span class="string">'key1'</span>, <span class="string">'key2'</span>],as_index=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">print</span> (grouped2.mean())</span><br><span class="line">print(<span class="string">'--------比较asindex的差异-------'</span>)</span><br><span class="line">grouped2 = df_obj.groupby([<span class="string">'key1'</span>, <span class="string">'key2'</span>],as_index=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">print</span> (grouped2.mean())</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">  key1   key2     data1     data2</span><br><span class="line"><span class="number">0</span>    a    one  <span class="number">0.695766</span> <span class="number">-0.553401</span></span><br><span class="line"><span class="number">1</span>    a  three  <span class="number">0.385845</span>  <span class="number">0.074309</span></span><br><span class="line"><span class="number">2</span>    a    two  <span class="number">0.885791</span> <span class="number">-0.044945</span></span><br><span class="line"><span class="number">3</span>    b    one <span class="number">-0.992986</span>  <span class="number">0.902458</span></span><br><span class="line"><span class="number">4</span>    b  three  <span class="number">0.458871</span> <span class="number">-1.895392</span></span><br><span class="line"><span class="number">5</span>    b    two <span class="number">-0.200124</span> <span class="number">-1.562237</span></span><br><span class="line">--------比较asindex的差异-------</span><br><span class="line">               data1     data2</span><br><span class="line">key1 key2</span><br><span class="line">a    one    <span class="number">0.695766</span> <span class="number">-0.553401</span></span><br><span class="line">     three  <span class="number">0.385845</span>  <span class="number">0.074309</span></span><br><span class="line">     two    <span class="number">0.885791</span> <span class="number">-0.044945</span></span><br><span class="line">b    one   <span class="number">-0.992986</span>  <span class="number">0.902458</span></span><br><span class="line">     three  <span class="number">0.458871</span> <span class="number">-1.895392</span></span><br><span class="line">     two   <span class="number">-0.200124</span> <span class="number">-1.562237</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多层分组按key的顺序进行===和上面的asindex作用一样，把所选取的列数据当成索引，这才是区别之处</span></span><br><span class="line">grouped3 = df_obj.groupby([<span class="string">'key2'</span>, <span class="string">'key1'</span>])</span><br><span class="line"><span class="keyword">print</span> (grouped3.mean())</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'============================================='</span>)</span><br><span class="line"><span class="string">'''PS：如果想按照列进行分组聚合运算 === unstack===也可以通过转置'''</span></span><br><span class="line"><span class="keyword">print</span> (grouped3.mean().unstack())</span><br></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">               data1     data2</span><br><span class="line">key2  key1</span><br><span class="line">one   a     <span class="number">0.695766</span> -<span class="number">0.553401</span></span><br><span class="line">      b    -<span class="number">0.992986</span>  <span class="number">0.902458</span></span><br><span class="line">three a     <span class="number">0.385845</span>  <span class="number">0.074309</span></span><br><span class="line">      b     <span class="number">0.458871</span> -<span class="number">1.895392</span></span><br><span class="line">two   a     <span class="number">0.885791</span> -<span class="number">0.044945</span></span><br><span class="line">      b    -<span class="number">0.200124</span> -<span class="number">1.562237</span></span><br><span class="line">=============================================</span><br><span class="line">          data1               data2</span><br><span class="line">key1          a         b         a         b</span><br><span class="line">key2</span><br><span class="line">one    <span class="number">0.695766</span> -<span class="number">0.992986</span> -<span class="number">0.553401</span>  <span class="number">0.902458</span></span><br><span class="line">three  <span class="number">0.385845</span>  <span class="number">0.458871</span>  <span class="number">0.074309</span> -<span class="number">1.895392</span></span><br><span class="line">two    <span class="number">0.885791</span> -<span class="number">0.200124</span> -<span class="number">0.044945</span> -<span class="number">1.562237</span></span><br></pre></td></tr></table></figure><h3 id="GroupBy-对象遍历迭代"><a href="#GroupBy-对象遍历迭代" class="headerlink" title="GroupBy 对象遍历迭代"></a>GroupBy 对象遍历迭代</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">grouped1</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;pandas<span class="selector-class">.core</span><span class="selector-class">.groupby</span><span class="selector-class">.generic</span><span class="selector-class">.DataFrameGroupBy</span> <span class="selector-tag">object</span> at <span class="number">0</span>x000001AF5B5F9088&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单层分组</span></span><br><span class="line">print(grouped1.head(<span class="number">5</span>))</span><br><span class="line">print(<span class="string">"------------------------------------分割线------------------------------------------"</span>)</span><br><span class="line"><span class="keyword">for</span> group_name, group_data <span class="keyword">in</span> grouped1:</span><br><span class="line">    <span class="keyword">print</span> (group_name)</span><br><span class="line">    <span class="keyword">print</span> (group_data[<span class="string">'data1'</span>])</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">  <span class="string">key1</span>   <span class="string">key2</span>     <span class="string">data1</span>     <span class="string">data2</span></span><br><span class="line"><span class="number">0</span>    <span class="string">a</span>    <span class="string">one</span> <span class="number">-0.147612</span> <span class="number">-0.348087</span></span><br><span class="line"><span class="number">1</span>    <span class="string">b</span>    <span class="string">one</span> <span class="number">-0.992986</span>  <span class="number">0.902458</span></span><br><span class="line"><span class="number">2</span>    <span class="string">a</span>    <span class="string">two</span>  <span class="number">0.547541</span> <span class="number">-0.310040</span></span><br><span class="line"><span class="number">3</span>    <span class="string">b</span>  <span class="string">three</span>  <span class="number">0.458871</span> <span class="number">-1.895392</span></span><br><span class="line"><span class="number">4</span>    <span class="string">a</span>    <span class="string">two</span>  <span class="number">1.224041</span>  <span class="number">0.220150</span></span><br><span class="line"><span class="number">5</span>    <span class="string">b</span>    <span class="string">two</span> <span class="number">-0.200124</span> <span class="number">-1.562237</span></span><br><span class="line"><span class="number">6</span>    <span class="string">a</span>    <span class="string">one</span>  <span class="number">1.539144</span> <span class="number">-0.758716</span></span><br><span class="line"><span class="number">7</span>    <span class="string">a</span>  <span class="string">three</span>  <span class="number">0.385845</span>  <span class="number">0.074309</span></span><br><span class="line"><span class="string">------------------------------------分割线------------------------------------------</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="number">0</span>   <span class="number">-0.147612</span></span><br><span class="line"><span class="number">2</span>    <span class="number">0.547541</span></span><br><span class="line"><span class="number">4</span>    <span class="number">1.224041</span></span><br><span class="line"><span class="number">6</span>    <span class="number">1.539144</span></span><br><span class="line"><span class="number">7</span>    <span class="number">0.385845</span></span><br><span class="line"><span class="attr">Name:</span> <span class="string">data1,</span> <span class="attr">dtype:</span> <span class="string">float64</span></span><br><span class="line"><span class="string">b</span></span><br><span class="line"><span class="number">1</span>   <span class="number">-0.992986</span></span><br><span class="line"><span class="number">3</span>    <span class="number">0.458871</span></span><br><span class="line"><span class="number">5</span>   <span class="number">-0.200124</span></span><br><span class="line"><span class="attr">Name:</span> <span class="string">data1,</span> <span class="attr">dtype:</span> <span class="string">float64</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多层分组</span></span><br><span class="line"><span class="keyword">for</span> group_name, group_data <span class="keyword">in</span> grouped2:</span><br><span class="line">    <span class="keyword">print</span> (group_name)</span><br><span class="line">    <span class="keyword">print</span> (group_data)</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">(<span class="string">'a'</span>, <span class="string">'one'</span>)</span><br><span class="line">  key1 key2     data1     data2</span><br><span class="line"><span class="number">0</span>    <span class="keyword">a</span>  <span class="literal">one</span> <span class="number">-0.147612</span> <span class="number">-0.348087</span></span><br><span class="line"><span class="number">6</span>    <span class="keyword">a</span>  <span class="literal">one</span>  <span class="number">1.539144</span> <span class="number">-0.758716</span></span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'three'</span>)</span><br><span class="line">  key1   key2     data1     data2</span><br><span class="line"><span class="number">7</span>    <span class="keyword">a</span>  <span class="literal">three</span>  <span class="number">0.385845</span>  <span class="number">0.074309</span></span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'two'</span>)</span><br><span class="line">  key1 key2     data1    data2</span><br><span class="line"><span class="number">2</span>    <span class="keyword">a</span>  <span class="literal">two</span>  <span class="number">0.547541</span> <span class="number">-0.31004</span></span><br><span class="line"><span class="number">4</span>    <span class="keyword">a</span>  <span class="literal">two</span>  <span class="number">1.224041</span>  <span class="number">0.22015</span></span><br><span class="line">(<span class="string">'b'</span>, <span class="string">'one'</span>)</span><br><span class="line">  key1 key2     data1     data2</span><br><span class="line"><span class="number">1</span>    b  <span class="literal">one</span> <span class="number">-0.992986</span>  <span class="number">0.902458</span></span><br><span class="line">(<span class="string">'b'</span>, <span class="string">'three'</span>)</span><br><span class="line">  key1   key2     data1     data2</span><br><span class="line"><span class="number">3</span>    b  <span class="literal">three</span>  <span class="number">0.458871</span> <span class="number">-1.895392</span></span><br><span class="line">(<span class="string">'b'</span>, <span class="string">'two'</span>)</span><br><span class="line">  key1 key2     data1     data2</span><br><span class="line"><span class="number">5</span>    b  <span class="literal">two</span> <span class="number">-0.200124</span> <span class="number">-1.562237</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GroupBy对象转换list</span></span><br><span class="line">print(grouped1.mean())</span><br><span class="line">list(grouped1)</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">  key1     data1     data2</span><br><span class="line"><span class="number">0</span>    a  <span class="number">0.709792</span> <span class="number">-0.224477</span></span><br><span class="line"><span class="number">1</span>    b <span class="number">-0.244746</span> <span class="number">-0.851723</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[('a',   key1   key2     data1     data2</span><br><span class="line">  <span class="number">0</span>    a    one <span class="number">-0.147612</span> <span class="number">-0.348087</span></span><br><span class="line">  <span class="number">2</span>    a    two  <span class="number">0.547541</span> <span class="number">-0.310040</span></span><br><span class="line">  <span class="number">4</span>    a    two  <span class="number">1.224041</span>  <span class="number">0.220150</span></span><br><span class="line">  <span class="number">6</span>    a    one  <span class="number">1.539144</span> <span class="number">-0.758716</span></span><br><span class="line">  <span class="number">7</span>    a  three  <span class="number">0.385845</span>  <span class="number">0.074309</span>), ('b',   key1   key2     data1     data2</span><br><span class="line">  <span class="number">1</span>    b    one <span class="number">-0.992986</span>  <span class="number">0.902458</span></span><br><span class="line">  <span class="number">3</span>    b  three  <span class="number">0.458871</span> <span class="number">-1.895392</span></span><br><span class="line">  <span class="number">5</span>    b    two <span class="number">-0.200124</span> <span class="number">-1.562237</span>)]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GroupBy对象转换dict</span></span><br><span class="line">dict(list(grouped1))</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&#123;'a':</span>   <span class="string">key1</span>   <span class="string">key2</span>     <span class="string">data1</span>     <span class="string">data2</span></span><br><span class="line"> <span class="number">0</span>    <span class="string">a</span>    <span class="string">one</span> <span class="number">-0.147612</span> <span class="number">-0.348087</span></span><br><span class="line"> <span class="number">2</span>    <span class="string">a</span>    <span class="string">two</span>  <span class="number">0.547541</span> <span class="number">-0.310040</span></span><br><span class="line"> <span class="number">4</span>    <span class="string">a</span>    <span class="string">two</span>  <span class="number">1.224041</span>  <span class="number">0.220150</span></span><br><span class="line"> <span class="number">6</span>    <span class="string">a</span>    <span class="string">one</span>  <span class="number">1.539144</span> <span class="number">-0.758716</span></span><br><span class="line"> <span class="number">7</span>    <span class="string">a</span>  <span class="string">three</span>  <span class="number">0.385845</span>  <span class="number">0.074309</span><span class="string">,</span> <span class="attr">'b':</span>   <span class="string">key1</span>   <span class="string">key2</span>     <span class="string">data1</span>     <span class="string">data2</span></span><br><span class="line"> <span class="number">1</span>    <span class="string">b</span>    <span class="string">one</span> <span class="number">-0.992986</span>  <span class="number">0.902458</span></span><br><span class="line"> <span class="number">3</span>    <span class="string">b</span>  <span class="string">three</span>  <span class="number">0.458871</span> <span class="number">-1.895392</span></span><br><span class="line"> <span class="number">5</span>    <span class="string">b</span>    <span class="string">two</span> <span class="number">-0.200124</span> <span class="number">-1.562237</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按列分组</span></span><br><span class="line"><span class="keyword">print</span> (df_obj.dtypes)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按数据类型分组</span></span><br><span class="line">df_obj.groupby(df_obj.dtypes, axis=<span class="number">1</span>).size()</span><br><span class="line">df_obj.groupby(df_obj.dtypes, axis=<span class="number">1</span>).sum()</span><br></pre></td></tr></table></figure><figure class="highlight nimrod"><table><tr><td class="code"><pre><span class="line">key1      <span class="keyword">object</span></span><br><span class="line">key2      <span class="keyword">object</span></span><br><span class="line">data1    <span class="built_in">float64</span></span><br><span class="line">data2    <span class="built_in">float64</span></span><br><span class="line">dtype: <span class="keyword">object</span></span><br></pre></td></tr></table></figure><h3 id="其他分组方法"><a href="#其他分组方法" class="headerlink" title="其他分组方法"></a>其他分组方法</h3><ol><li>其实列表也是分组的一种方式<br>===用到列表时候，一般都是多层索引了</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_obj2 = pd.DataFrame(np.random.randint(<span class="number">1</span>, <span class="number">10</span>, (<span class="number">5</span>,<span class="number">5</span>)),</span><br><span class="line">                       columns=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>],</span><br><span class="line">                       index=[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>])</span><br><span class="line">df_obj2.ix[<span class="number">1</span>, <span class="number">1</span>:<span class="number">4</span>] = np.NaN</span><br><span class="line">df_obj2</span><br></pre></td></tr></table></figure><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="symbol">C:</span>\Users\wztli\Anaconda3\<span class="class"><span class="keyword">lib</span>\<span class="title">site</span>-<span class="title">packages</span>\<span class="title">ipykernel_launcher</span>.<span class="title">py</span>:4: <span class="title">FutureWarning</span>:</span></span><br><span class="line">.ix is deprecated. Please use</span><br><span class="line">.loc <span class="keyword">for</span> label based indexing or</span><br><span class="line">.iloc <span class="keyword">for</span> positional indexing</span><br><span class="line"></span><br><span class="line">See the documentation <span class="symbol">here:</span></span><br><span class="line"><span class="symbol">http:</span>/<span class="regexp">/pandas.pydata.org/pandas</span>-docs/stable/user_guide/indexing.html<span class="comment">#ix-indexer-is-deprecated</span></span><br><span class="line">  after removing the cwd from sys.path.</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>a</th><th>b</th><th>c</th><th>d</th><th>e</th></tr></thead><tbody><tr><td>A</td><td>4</td><td>2.0</td><td>6.0</td><td>5.0</td><td>9</td></tr><tr><td>B</td><td>5</td><td>NaN</td><td>NaN</td><td>NaN</td><td>6</td></tr><tr><td>C</td><td>2</td><td>3.0</td><td>8.0</td><td>6.0</td><td>3</td></tr><tr><td>D</td><td>9</td><td>5.0</td><td>6.0</td><td>5.0</td><td>9</td></tr><tr><td>E</td><td>4</td><td>1.0</td><td>6.0</td><td>2.0</td><td>1</td></tr></tbody></table><ol><li>通过字典分组</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过字典分组</span></span><br><span class="line">mapping_dict = &#123;<span class="string">'A'</span>:<span class="string">'python'</span>, <span class="string">'B'</span>:<span class="string">'python'</span>, <span class="string">'C'</span>:<span class="string">'java'</span>, <span class="string">'D'</span>:<span class="string">'C'</span>, <span class="string">'E'</span>:<span class="string">'java'</span>&#125;</span><br><span class="line"><span class="comment">#df_obj2.groupby(mapping_dict, axis=1).size()</span></span><br><span class="line"><span class="comment">#df_obj2.groupby(mapping_dict, axis=1).count() # 非NaN的个数</span></span><br><span class="line">print(df_obj2.groupby(mapping_dict, axis=<span class="number">0</span>).sum())</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">        a    b     c    d   e</span><br><span class="line">C       <span class="number">9</span>  <span class="number">5.0</span>   <span class="number">6.0</span>  <span class="number">5.0</span>   <span class="number">9</span></span><br><span class="line">java    <span class="number">6</span>  <span class="number">4.0</span>  <span class="number">14.0</span>  <span class="number">8.0</span>   <span class="number">4</span></span><br><span class="line">python  <span class="number">9</span>  <span class="number">2.0</span>   <span class="number">6.0</span>  <span class="number">5.0</span>  <span class="number">15</span></span><br></pre></td></tr></table></figure><ol start="2"><li>通过函数分组</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过函数分组</span></span><br><span class="line">df_obj3 = pd.DataFrame(np.random.randint(<span class="number">1</span>, <span class="number">10</span>, (<span class="number">5</span>,<span class="number">5</span>)),</span><br><span class="line">                       columns=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>],</span><br><span class="line">                       index=[<span class="string">'AA'</span>, <span class="string">'BBB'</span>, <span class="string">'CC'</span>, <span class="string">'D'</span>, <span class="string">'EE'</span>])</span><br><span class="line"><span class="comment">#df_obj3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">group_key</span><span class="params">(idx)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        idx 为列索引或行索引</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment">#return idx</span></span><br><span class="line">    <span class="keyword">return</span> len(idx)</span><br><span class="line"></span><br><span class="line">df_obj3.groupby(group_key).size()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以上自定义函数等价于</span></span><br><span class="line"><span class="comment">#df_obj3.groupby(len).size()</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>    <span class="number">1</span></span><br><span class="line"><span class="number">2</span>    <span class="number">3</span></span><br><span class="line"><span class="number">3</span>    <span class="number">1</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">int64</span></span><br></pre></td></tr></table></figure><ol start="3"><li>通过层级索引级别分组</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过索引级别分组</span></span><br><span class="line">columns = pd.MultiIndex.from_arrays([[<span class="string">'Python'</span>, <span class="string">'Java'</span>, <span class="string">'Python'</span>, <span class="string">'Java'</span>, <span class="string">'Python'</span>],</span><br><span class="line">                                     [<span class="string">'A'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'B'</span>]], names=[<span class="string">'language'</span>, <span class="string">'index'</span>])</span><br><span class="line">df_obj4 = pd.DataFrame(np.random.randint(<span class="number">1</span>, <span class="number">10</span>, (<span class="number">5</span>, <span class="number">5</span>)), columns=columns)</span><br><span class="line">df_obj4</span><br></pre></td></tr></table></figure><table><thead><tr><th>language</th><th>Python</th><th>Java</th><th>Python</th><th>Java</th><th>Python</th></tr></thead><tbody><tr><td>index</td><td>A</td><td>A</td><td>B</td><td>C</td><td>B</td></tr><tr><td>0</td><td>4</td><td>6</td><td>8</td><td>8</td><td>4</td></tr><tr><td>1</td><td>1</td><td>3</td><td>2</td><td>3</td><td>5</td></tr><tr><td>2</td><td>3</td><td>1</td><td>1</td><td>5</td><td>6</td></tr><tr><td>3</td><td>2</td><td>9</td><td>3</td><td>1</td><td>9</td></tr><tr><td>4</td><td>4</td><td>1</td><td>5</td><td>6</td><td>6</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根据language进行分组</span></span><br><span class="line">df_obj4.groupby(level=<span class="string">'language'</span>, axis=<span class="number">1</span>).sum()</span><br><span class="line">df_obj4.groupby(level=<span class="string">'index'</span>, axis=<span class="number">1</span>).sum()</span><br></pre></td></tr></table></figure><table><thead><tr><th>index</th><th>A</th><th>B</th><th>C</th></tr></thead><tbody><tr><td>0</td><td>10</td><td>12</td><td>8</td></tr><tr><td>1</td><td>4</td><td>7</td><td>3</td></tr><tr><td>2</td><td>4</td><td>7</td><td>5</td></tr><tr><td>3</td><td>11</td><td>12</td><td>1</td></tr><tr><td>4</td><td>5</td><td>11</td><td>6</td></tr></tbody></table><h2 id="二、聚合"><a href="#二、聚合" class="headerlink" title="二、聚合"></a>二、聚合</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict_obj = &#123;<span class="string">'key1'</span> : [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>,</span><br><span class="line">                      <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>],</span><br><span class="line">            <span class="string">'key2'</span> : [<span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>,</span><br><span class="line">                      <span class="string">'two'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>, <span class="string">'three'</span>],</span><br><span class="line">            <span class="string">'data1'</span>: np.random.randint(<span class="number">1</span>,<span class="number">10</span>, <span class="number">8</span>),</span><br><span class="line">            <span class="string">'data2'</span>: np.random.randint(<span class="number">1</span>,<span class="number">10</span>, <span class="number">8</span>)&#125;</span><br><span class="line">df_obj5 = pd.DataFrame(dict_obj)</span><br><span class="line"><span class="keyword">print</span> (df_obj5)</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">  key1   key2  data1  data2</span><br><span class="line"><span class="number">0</span>    a    one      <span class="number">9</span>      <span class="number">4</span></span><br><span class="line"><span class="number">1</span>    b    one      <span class="number">6</span>      <span class="number">7</span></span><br><span class="line"><span class="number">2</span>    a    two      <span class="number">9</span>      <span class="number">4</span></span><br><span class="line"><span class="number">3</span>    b  three      <span class="number">9</span>      <span class="number">6</span></span><br><span class="line"><span class="number">4</span>    a    two      <span class="number">6</span>      <span class="number">2</span></span><br><span class="line"><span class="number">5</span>    b    two      <span class="number">3</span>      <span class="number">3</span></span><br><span class="line"><span class="number">6</span>    a    one      <span class="number">1</span>      <span class="number">1</span></span><br><span class="line"><span class="number">7</span>    a  three      <span class="number">2</span>      <span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="内置的聚合函数"><a href="#内置的聚合函数" class="headerlink" title="内置的聚合函数"></a>内置的聚合函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_obj5</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>key1</th><th>key2</th><th>data1</th><th>data2</th></tr></thead><tbody><tr><td>0</td><td>a</td><td>one</td><td>9</td><td>4</td></tr><tr><td>1</td><td>b</td><td>one</td><td>6</td><td>7</td></tr><tr><td>2</td><td>a</td><td>two</td><td>9</td><td>4</td></tr><tr><td>3</td><td>b</td><td>three</td><td>9</td><td>6</td></tr><tr><td>4</td><td>a</td><td>two</td><td>6</td><td>2</td></tr><tr><td>5</td><td>b</td><td>two</td><td>3</td><td>3</td></tr><tr><td>6</td><td>a</td><td>one</td><td>1</td><td>1</td></tr><tr><td>7</td><td>a</td><td>three</td><td>2</td><td>6</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 内置的聚合函数</span></span><br><span class="line"><span class="comment">#print (df_obj5.groupby('key1').sum())</span></span><br><span class="line"><span class="comment">#print (df_obj5.groupby('key1').max())</span></span><br><span class="line"><span class="comment">#print (df_obj5.groupby('key1').min())</span></span><br><span class="line"><span class="keyword">print</span> (df_obj5.groupby(<span class="string">'key1'</span>).mean())</span><br><span class="line"><span class="comment">#print (df_obj5.groupby('key1').size())</span></span><br><span class="line"><span class="comment">#print (df_obj5.groupby('key1').count())</span></span><br><span class="line"><span class="comment">#print (df_obj5.groupby('key1').describe())</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">count：分组中非NA的值</span></span><br><span class="line"><span class="string">std：标准差</span></span><br><span class="line"><span class="string">var：方差</span></span><br><span class="line"><span class="string">median：非NA中的中位数</span></span><br><span class="line"><span class="string">mean：非NA的平均值</span></span><br><span class="line"><span class="string">25%||50%||75%是什么意思==不造？</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">      data1     data2</span><br><span class="line">key1</span><br><span class="line">a       5.4  3.400000</span><br><span class="line">b       6.0  5.333333</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">'<span class="symbol">\n</span>count：分组中非NA的值<span class="symbol">\n</span>std：标准差<span class="symbol">\n</span>var：方差<span class="symbol">\n</span>median：非NA中的中位数<span class="symbol">\n</span>mean：非NA的平均值<span class="symbol">\n</span>25<span class="variable">%||50%</span>||75<span class="variable">%是什么意思==不造？\n'</span></span><br></pre></td></tr></table></figure><h3 id="自定义聚合函数"><a href="#自定义聚合函数" class="headerlink" title="自定义聚合函数"></a>自定义聚合函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义聚合函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">peak_range</span><span class="params">(df)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        返回数值范围</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment">#print type(df) #参数为索引所对应的记录</span></span><br><span class="line">    <span class="keyword">return</span> df.max() - df.min()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (df_obj5.groupby(<span class="string">'key1'</span>).agg(peak_range))</span><br><span class="line"><span class="comment">#print df_obj.groupby('key1').agg(lambda df : df.max() - df.min())</span></span><br><span class="line"><span class="comment">#默认列名就是函数名。</span></span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">      data1  data2</span><br><span class="line">key1</span><br><span class="line">a         <span class="number">8</span>      <span class="number">5</span></span><br><span class="line">b         <span class="number">6</span>      <span class="number">4</span></span><br></pre></td></tr></table></figure><ol start="3"><li>同时应用多个聚合函数：agg</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 同时应用多个聚合函数：agg</span></span><br><span class="line"><span class="keyword">print</span> (df_obj.groupby(<span class="string">'key1'</span>).agg([<span class="string">'mean'</span>, <span class="string">'std'</span>, <span class="string">'count'</span>]))</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">         data1                     data2</span><br><span class="line">          mean       std count      mean       std count</span><br><span class="line">key1</span><br><span class="line">a     <span class="number">0.709792</span>  <span class="number">0.674293</span>     <span class="number">5</span> <span class="number">-0.224477</span>  <span class="number">0.385674</span>     <span class="number">5</span></span><br><span class="line">b    <span class="number">-0.244746</span>  <span class="number">0.726957</span>     <span class="number">3</span> <span class="number">-0.851723</span>  <span class="number">1.528271</span>     <span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">print</span> (df_obj.groupby(<span class="string">'key1'</span>).agg([<span class="string">'mean'</span>, <span class="string">'std'</span>, <span class="string">'count'</span>, (<span class="string">'range'</span>, peak_range)])) <span class="comment"># 通过元组提供新的列名</span></span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">         data1                               data2</span><br><span class="line">          mean       std count     range      mean       std count     range</span><br><span class="line">key1</span><br><span class="line">a     <span class="number">0.709792</span>  <span class="number">0.674293</span>     <span class="number">5</span>  <span class="number">1.686756</span> <span class="number">-0.224477</span>  <span class="number">0.385674</span>     <span class="number">5</span>  <span class="number">0.978865</span></span><br><span class="line">b    <span class="number">-0.244746</span>  <span class="number">0.726957</span>     <span class="number">3</span>  <span class="number">1.451857</span> <span class="number">-0.851723</span>  <span class="number">1.528271</span>     <span class="number">3</span>  <span class="number">2.797850</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 每列作用不同的聚合函数</span></span><br><span class="line">dict_mapping = &#123;<span class="string">'data1'</span>:<span class="string">'mean'</span>,</span><br><span class="line">                <span class="string">'data2'</span>:<span class="string">'sum'</span>&#125;</span><br><span class="line"><span class="keyword">print</span> (df_obj.groupby(<span class="string">'key1'</span>).agg(dict_mapping))</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">         <span class="selector-tag">data1</span>     <span class="selector-tag">data2</span></span><br><span class="line"><span class="selector-tag">key1</span></span><br><span class="line"><span class="selector-tag">a</span>     0<span class="selector-class">.709792</span> <span class="selector-tag">-1</span><span class="selector-class">.122384</span></span><br><span class="line"><span class="selector-tag">b</span>    <span class="selector-tag">-0</span><span class="selector-class">.244746</span> <span class="selector-tag">-2</span><span class="selector-class">.555170</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict_mapping = &#123;<span class="string">'data1'</span>:[<span class="string">'mean'</span>,<span class="string">'max'</span>],</span><br><span class="line">                <span class="string">'data2'</span>:<span class="string">'sum'</span>&#125;</span><br><span class="line"><span class="keyword">print</span> (df_obj.groupby(<span class="string">'key1'</span>).agg(dict_mapping))</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">         <span class="selector-tag">data1</span>               <span class="selector-tag">data2</span></span><br><span class="line">          <span class="selector-tag">mean</span>       <span class="selector-tag">max</span>       <span class="selector-tag">sum</span></span><br><span class="line"><span class="selector-tag">key1</span></span><br><span class="line"><span class="selector-tag">a</span>     0<span class="selector-class">.709792</span>  1<span class="selector-class">.539144</span> <span class="selector-tag">-1</span><span class="selector-class">.122384</span></span><br><span class="line"><span class="selector-tag">b</span>    <span class="selector-tag">-0</span><span class="selector-class">.244746</span>  0<span class="selector-class">.458871</span> <span class="selector-tag">-2</span><span class="selector-class">.555170</span></span><br></pre></td></tr></table></figure><h2 id="三、分组运算"><a href="#三、分组运算" class="headerlink" title="三、分组运算"></a>三、分组运算</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><h3 id="分组和对齐"><a href="#分组和对齐" class="headerlink" title="分组和对齐"></a>分组和对齐</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = pd.Series(range(<span class="number">10</span>, <span class="number">20</span>), index = range(<span class="number">10</span>))</span><br><span class="line">s2 = pd.Series(range(<span class="number">20</span>, <span class="number">25</span>), index = range(<span class="number">5</span>))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'s1: '</span> )</span><br><span class="line"><span class="keyword">print</span> (s1)</span><br><span class="line">print(<span class="string">'==========================='</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'s2: '</span>)</span><br><span class="line"><span class="keyword">print</span> (s2)</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">s1:</span></span><br><span class="line"><span class="number">0</span>    <span class="number">10</span></span><br><span class="line"><span class="number">1</span>    <span class="number">11</span></span><br><span class="line"><span class="number">2</span>    <span class="number">12</span></span><br><span class="line"><span class="number">3</span>    <span class="number">13</span></span><br><span class="line"><span class="number">4</span>    <span class="number">14</span></span><br><span class="line"><span class="number">5</span>    <span class="number">15</span></span><br><span class="line"><span class="number">6</span>    <span class="number">16</span></span><br><span class="line"><span class="number">7</span>    <span class="number">17</span></span><br><span class="line"><span class="number">8</span>    <span class="number">18</span></span><br><span class="line"><span class="number">9</span>    <span class="number">19</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">int64</span></span><br><span class="line"><span class="string">===========================</span></span><br><span class="line"><span class="attr">s2:</span></span><br><span class="line"><span class="number">0</span>    <span class="number">20</span></span><br><span class="line"><span class="number">1</span>    <span class="number">21</span></span><br><span class="line"><span class="number">2</span>    <span class="number">22</span></span><br><span class="line"><span class="number">3</span>    <span class="number">23</span></span><br><span class="line"><span class="number">4</span>    <span class="number">24</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">int64</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Series 对齐运算</span></span><br><span class="line">s1 + s2</span><br><span class="line">print(s1+s2)</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>    <span class="number">30.0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">32.0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">34.0</span></span><br><span class="line"><span class="number">3</span>    <span class="number">36.0</span></span><br><span class="line"><span class="number">4</span>    <span class="number">38.0</span></span><br><span class="line"><span class="number">5</span>     <span class="string">NaN</span></span><br><span class="line"><span class="number">6</span>     <span class="string">NaN</span></span><br><span class="line"><span class="number">7</span>     <span class="string">NaN</span></span><br><span class="line"><span class="number">8</span>     <span class="string">NaN</span></span><br><span class="line"><span class="number">9</span>     <span class="string">NaN</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">float64</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1 = pd.DataFrame(np.ones((<span class="number">2</span>,<span class="number">2</span>)), columns = [<span class="string">'a'</span>, <span class="string">'b'</span>])</span><br><span class="line">df2 = pd.DataFrame(np.ones((<span class="number">3</span>,<span class="number">3</span>)), columns = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'df1: '</span>)</span><br><span class="line"><span class="keyword">print</span> (df1)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'================='</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'df2: '</span>)</span><br><span class="line"><span class="keyword">print</span> (df2)</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">df1:</span></span><br><span class="line">     <span class="string">a</span>    <span class="string">b</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1.0</span>  <span class="number">1.0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1.0</span>  <span class="number">1.0</span></span><br><span class="line"><span class="string">=================</span></span><br><span class="line"><span class="attr">df2:</span></span><br><span class="line">     <span class="string">a</span>    <span class="string">b</span>    <span class="string">c</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1.0</span>  <span class="number">1.0</span>  <span class="number">1.0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1.0</span>  <span class="number">1.0</span>  <span class="number">1.0</span></span><br><span class="line"><span class="number">2</span>  <span class="number">1.0</span>  <span class="number">1.0</span>  <span class="number">1.0</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># DataFrame对齐操作</span></span><br><span class="line">print(df1 + df2)</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">     a    b   c</span><br><span class="line"><span class="number">0</span>  <span class="number">2.0</span>  <span class="number">2.0</span> NaN</span><br><span class="line"><span class="number">1</span>  <span class="number">2.0</span>  <span class="number">2.0</span> NaN</span><br><span class="line"><span class="number">2</span>  NaN  NaN NaN</span><br></pre></td></tr></table></figure><p>① 常用运算函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 填充未对齐的数据进行运算</span></span><br><span class="line">print(s1.add(s2, fill_value = <span class="number">-1</span>))</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>    <span class="number">30.0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">32.0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">34.0</span></span><br><span class="line"><span class="number">3</span>    <span class="number">36.0</span></span><br><span class="line"><span class="number">4</span>    <span class="number">38.0</span></span><br><span class="line"><span class="number">5</span>    <span class="number">14.0</span></span><br><span class="line"><span class="number">6</span>    <span class="number">15.0</span></span><br><span class="line"><span class="number">7</span>    <span class="number">16.0</span></span><br><span class="line"><span class="number">8</span>    <span class="number">17.0</span></span><br><span class="line"><span class="number">9</span>    <span class="number">18.0</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">float64</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1.sub(df2, fill_value = <span class="number">2.</span>)</span><br><span class="line"><span class="comment">#sub函数</span></span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>a</th><th>b</th><th>c</th></tr></thead><tbody><tr><td>0</td><td>0.0</td><td>0.0</td><td>1.0</td></tr><tr><td>1</td><td>0.0</td><td>0.0</td><td>1.0</td></tr><tr><td>2</td><td>1.0</td><td>1.0</td><td>1.0</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 填充NaN</span></span><br><span class="line">s3 = s1 + s2</span><br><span class="line"><span class="keyword">print</span> (s3)</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>    <span class="number">30.0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">32.0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">34.0</span></span><br><span class="line"><span class="number">3</span>    <span class="number">36.0</span></span><br><span class="line"><span class="number">4</span>    <span class="number">38.0</span></span><br><span class="line"><span class="number">5</span>     <span class="string">NaN</span></span><br><span class="line"><span class="number">6</span>     <span class="string">NaN</span></span><br><span class="line"><span class="number">7</span>     <span class="string">NaN</span></span><br><span class="line"><span class="number">8</span>     <span class="string">NaN</span></span><br><span class="line"><span class="number">9</span>     <span class="string">NaN</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">float64</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s3_filled = s3.fillna(<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">print</span> (s3)</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>    <span class="number">30.0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">32.0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">34.0</span></span><br><span class="line"><span class="number">3</span>    <span class="number">36.0</span></span><br><span class="line"><span class="number">4</span>    <span class="number">38.0</span></span><br><span class="line"><span class="number">5</span>     <span class="string">NaN</span></span><br><span class="line"><span class="number">6</span>     <span class="string">NaN</span></span><br><span class="line"><span class="number">7</span>     <span class="string">NaN</span></span><br><span class="line"><span class="number">8</span>     <span class="string">NaN</span></span><br><span class="line"><span class="number">9</span>     <span class="string">NaN</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">float64</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df3 = df1 + df2</span><br><span class="line"><span class="keyword">print</span> (df3)</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">     a    b   c</span><br><span class="line"><span class="number">0</span>  <span class="number">2.0</span>  <span class="number">2.0</span> NaN</span><br><span class="line"><span class="number">1</span>  <span class="number">2.0</span>  <span class="number">2.0</span> NaN</span><br><span class="line"><span class="number">2</span>  NaN  NaN NaN</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df3.fillna(<span class="number">100</span>, inplace = <span class="literal">True</span>)</span><br><span class="line"><span class="keyword">print</span> (df3)</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">       a      b      c</span><br><span class="line"><span class="number">0</span>    <span class="number">2.0</span>    <span class="number">2.0</span>  <span class="number">100.0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">2.0</span>    <span class="number">2.0</span>  <span class="number">100.0</span></span><br><span class="line"><span class="number">2</span>  <span class="number">100.0</span>  <span class="number">100.0</span>  <span class="number">100.0</span></span><br></pre></td></tr></table></figure><h3 id="统计计算-VS-聚合运算"><a href="#统计计算-VS-聚合运算" class="headerlink" title="统计计算 VS 聚合运算"></a>统计计算 VS 聚合运算</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_obj1 = pd.DataFrame(np.random.randn(<span class="number">5</span>,<span class="number">4</span>), columns = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line">print(df_obj1)</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">          a         b         c         d</span><br><span class="line"><span class="number">0</span> <span class="number">-0.542708</span>  <span class="number">0.201376</span>  <span class="number">1.111431</span>  <span class="number">1.784324</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0.583422</span>  <span class="number">0.231096</span> <span class="number">-2.801967</span>  <span class="number">0.568497</span></span><br><span class="line"><span class="number">2</span> <span class="number">-0.577329</span> <span class="number">-1.668581</span> <span class="number">-0.842126</span>  <span class="number">1.803080</span></span><br><span class="line"><span class="number">3</span> <span class="number">-0.128431</span> <span class="number">-1.769619</span>  <span class="number">2.089983</span>  <span class="number">0.209761</span></span><br><span class="line"><span class="number">4</span>  <span class="number">0.493981</span> <span class="number">-1.571405</span>  <span class="number">0.690019</span> <span class="number">-0.215292</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df_obj1.sum(axis=<span class="number">1</span>))</span><br><span class="line">print(<span class="string">'====================================='</span>)</span><br><span class="line">print(df_obj1.max())</span><br><span class="line">print(<span class="string">'====================================='</span>)</span><br><span class="line">print(df_obj1.min(axis=<span class="number">1</span>))</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>    <span class="number">2.554423</span></span><br><span class="line"><span class="number">1</span>   <span class="number">-1.418952</span></span><br><span class="line"><span class="number">2</span>   <span class="number">-1.284956</span></span><br><span class="line"><span class="number">3</span>    <span class="number">0.401694</span></span><br><span class="line"><span class="number">4</span>   <span class="number">-0.602698</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">float64</span></span><br><span class="line"><span class="string">=====================================</span></span><br><span class="line"><span class="string">a</span>    <span class="number">0.583422</span></span><br><span class="line"><span class="string">b</span>    <span class="number">0.231096</span></span><br><span class="line"><span class="string">c</span>    <span class="number">2.089983</span></span><br><span class="line"><span class="string">d</span>    <span class="number">1.803080</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">float64</span></span><br><span class="line"><span class="string">=====================================</span></span><br><span class="line"><span class="number">0</span>   <span class="number">-0.542708</span></span><br><span class="line"><span class="number">1</span>   <span class="number">-2.801967</span></span><br><span class="line"><span class="number">2</span>   <span class="number">-1.668581</span></span><br><span class="line"><span class="number">3</span>   <span class="number">-1.769619</span></span><br><span class="line"><span class="number">4</span>   <span class="number">-1.571405</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">float64</span></span><br></pre></td></tr></table></figure><h3 id="数据分组运算"><a href="#数据分组运算" class="headerlink" title="数据分组运算"></a>数据分组运算</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分组运算后保持shape</span></span><br><span class="line">dict_obj = &#123;<span class="string">'key1'</span> : [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>,</span><br><span class="line">                      <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>],</span><br><span class="line">            <span class="string">'key2'</span> : [<span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>,</span><br><span class="line">                      <span class="string">'two'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>, <span class="string">'three'</span>],</span><br><span class="line">            <span class="string">'data1'</span>: np.random.randint(<span class="number">1</span>, <span class="number">10</span>, <span class="number">8</span>),</span><br><span class="line">            <span class="string">'data2'</span>: np.random.randint(<span class="number">1</span>, <span class="number">10</span>, <span class="number">8</span>)&#125;</span><br><span class="line">df_obj = pd.DataFrame(dict_obj)</span><br><span class="line">df_obj</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>key1</th><th>key2</th><th>data1</th><th>data2</th></tr></thead><tbody><tr><td>0</td><td>a</td><td>one</td><td>4</td><td>3</td></tr><tr><td>1</td><td>b</td><td>one</td><td>4</td><td>4</td></tr><tr><td>2</td><td>a</td><td>two</td><td>9</td><td>6</td></tr><tr><td>3</td><td>b</td><td>three</td><td>8</td><td>2</td></tr><tr><td>4</td><td>a</td><td>two</td><td>3</td><td>3</td></tr><tr><td>5</td><td>b</td><td>two</td><td>6</td><td>2</td></tr><tr><td>6</td><td>a</td><td>one</td><td>4</td><td>1</td></tr><tr><td>7</td><td>a</td><td>three</td><td>2</td><td>2</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按key1分组后，计算data1，data2的统计信息======并附加到原始表格中</span></span><br><span class="line">k1_sum = df_obj.groupby(<span class="string">'key1'</span>).sum().add_prefix(<span class="string">'sum_'</span>)</span><br><span class="line">print(k1_sum)</span><br><span class="line">print(<span class="string">'================================'</span>)</span><br><span class="line">print(df_obj)</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">      sum_data1  sum_data2</span><br><span class="line">key1</span><br><span class="line">a            <span class="number">22</span>         <span class="number">15</span></span><br><span class="line">b            <span class="number">18</span>          <span class="number">8</span></span><br><span class="line">================================</span><br><span class="line">  key1   key2  data1  data2</span><br><span class="line"><span class="number">0</span>    a    one      <span class="number">4</span>      <span class="number">3</span></span><br><span class="line"><span class="number">1</span>    b    one      <span class="number">4</span>      <span class="number">4</span></span><br><span class="line"><span class="number">2</span>    a    two      <span class="number">9</span>      <span class="number">6</span></span><br><span class="line"><span class="number">3</span>    b  three      <span class="number">8</span>      <span class="number">2</span></span><br><span class="line"><span class="number">4</span>    a    two      <span class="number">3</span>      <span class="number">3</span></span><br><span class="line"><span class="number">5</span>    b    two      <span class="number">6</span>      <span class="number">2</span></span><br><span class="line"><span class="number">6</span>    a    one      <span class="number">4</span>      <span class="number">1</span></span><br><span class="line"><span class="number">7</span>    a  three      <span class="number">2</span>      <span class="number">2</span></span><br></pre></td></tr></table></figure><ol><li>merge 方法</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法1，使用merge</span></span><br><span class="line">pd.merge(df_obj, k1_sum, left_on=<span class="string">'key1'</span>, right_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>key1</th><th>key2</th><th>data1</th><th>data2</th><th>sum_data1</th><th>sum_data2</th></tr></thead><tbody><tr><td>0</td><td>a</td><td>one</td><td>4</td><td>3</td><td>22</td><td>15</td></tr><tr><td>2</td><td>a</td><td>two</td><td>9</td><td>6</td><td>22</td><td>15</td></tr><tr><td>4</td><td>a</td><td>two</td><td>3</td><td>3</td><td>22</td><td>15</td></tr><tr><td>6</td><td>a</td><td>one</td><td>4</td><td>1</td><td>22</td><td>15</td></tr><tr><td>7</td><td>a</td><td>three</td><td>2</td><td>2</td><td>22</td><td>15</td></tr><tr><td>1</td><td>b</td><td>one</td><td>4</td><td>4</td><td>18</td><td>8</td></tr><tr><td>3</td><td>b</td><td>three</td><td>8</td><td>2</td><td>18</td><td>8</td></tr><tr><td>5</td><td>b</td><td>two</td><td>6</td><td>2</td><td>18</td><td>8</td></tr></tbody></table><ol start="2"><li>transform 方法</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法2，使用transform</span></span><br><span class="line">k1_sum_tf = df_obj.groupby(<span class="string">'key1'</span>).transform(np.sum).add_prefix(<span class="string">'sum_'</span>)</span><br><span class="line">df_obj[k1_sum_tf.columns] = k1_sum_tf</span><br><span class="line">df_obj</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>key1</th><th>key2</th><th>data1</th><th>data2</th><th>sum_key2</th><th>sum_data1</th><th>sum_data2</th></tr></thead><tbody><tr><td>0</td><td>a</td><td>one</td><td>4</td><td>3</td><td>onetwotwoonethree</td><td>22</td><td>15</td></tr><tr><td>1</td><td>b</td><td>one</td><td>4</td><td>4</td><td>onethreetwo</td><td>18</td><td>8</td></tr><tr><td>2</td><td>a</td><td>two</td><td>9</td><td>6</td><td>onetwotwoonethree</td><td>22</td><td>15</td></tr><tr><td>3</td><td>b</td><td>three</td><td>8</td><td>2</td><td>onethreetwo</td><td>18</td><td>8</td></tr><tr><td>4</td><td>a</td><td>two</td><td>3</td><td>3</td><td>onetwotwoonethree</td><td>22</td><td>15</td></tr><tr><td>5</td><td>b</td><td>two</td><td>6</td><td>2</td><td>onethreetwo</td><td>18</td><td>8</td></tr><tr><td>6</td><td>a</td><td>one</td><td>4</td><td>1</td><td>onetwotwoonethree</td><td>22</td><td>15</td></tr><tr><td>7</td><td>a</td><td>three</td><td>2</td><td>2</td><td>onetwotwoonethree</td><td>22</td><td>15</td></tr></tbody></table><ol start="3"><li>自定义函数</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义函数传入transform</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">diff_mean</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        返回数据与均值的差值</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> s - s.mean()</span><br><span class="line"></span><br><span class="line">df_obj.groupby(<span class="string">'key1'</span>).transform(diff_mean)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>data1</th><th>data2</th><th>sum_data1</th><th>sum_data2</th></tr></thead><tbody><tr><td>0</td><td>-0.4</td><td>0.000000</td><td>0</td><td>0</td></tr><tr><td>1</td><td>-2.0</td><td>1.333333</td><td>0</td><td>0</td></tr><tr><td>2</td><td>4.6</td><td>3.000000</td><td>0</td><td>0</td></tr><tr><td>3</td><td>2.0</td><td>-0.666667</td><td>0</td><td>0</td></tr><tr><td>4</td><td>-1.4</td><td>0.000000</td><td>0</td><td>0</td></tr><tr><td>5</td><td>0.0</td><td>-0.666667</td><td>0</td><td>0</td></tr><tr><td>6</td><td>-0.4</td><td>-2.000000</td><td>0</td><td>0</td></tr><tr><td>7</td><td>-2.4</td><td>-1.000000</td><td>0</td><td>0</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dataset_path = <span class="string">'./data/starcraft.csv'</span></span><br><span class="line">df_data = pd.read_csv(dataset_path, usecols=[<span class="string">'LeagueIndex'</span>, <span class="string">'Age'</span>, <span class="string">'HoursPerWeek'</span>,</span><br><span class="line">                                             <span class="string">'TotalHours'</span>, <span class="string">'APM'</span>])</span><br></pre></td></tr></table></figure><ul><li>apply</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">top_n</span><span class="params">(df, n=<span class="number">3</span>, column=<span class="string">'APM'</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        返回每个分组按 column 的 top n 数据</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> df.sort_values(by=column, ascending=<span class="literal">False</span>)[:n]</span><br><span class="line"></span><br><span class="line">df_data.groupby(<span class="string">'LeagueIndex'</span>).apply(top_n)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th></th><th>LeagueIndex</th><th>Age</th><th>HoursPerWeek</th><th>TotalHours</th><th>APM</th></tr></thead><tbody><tr><td>LeagueIndex</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>1</td><td>2214</td><td>1</td><td>20.0</td><td>12.0</td><td>730.0</td><td>172.9530</td></tr><tr><td></td><td>2246</td><td>1</td><td>27.0</td><td>8.0</td><td>250.0</td><td>141.6282</td></tr><tr><td></td><td>1753</td><td>1</td><td>20.0</td><td>28.0</td><td>100.0</td><td>139.6362</td></tr><tr><td>2</td><td>3062</td><td>2</td><td>20.0</td><td>6.0</td><td>100.0</td><td>179.6250</td></tr><tr><td></td><td>3229</td><td>2</td><td>16.0</td><td>24.0</td><td>110.0</td><td>156.7380</td></tr><tr><td></td><td>1520</td><td>2</td><td>29.0</td><td>6.0</td><td>250.0</td><td>151.6470</td></tr><tr><td>3</td><td>1557</td><td>3</td><td>22.0</td><td>6.0</td><td>200.0</td><td>226.6554</td></tr><tr><td></td><td>484</td><td>3</td><td>19.0</td><td>42.0</td><td>450.0</td><td>220.0692</td></tr><tr><td></td><td>2883</td><td>3</td><td>16.0</td><td>8.0</td><td>800.0</td><td>208.9500</td></tr><tr><td>4</td><td>2688</td><td>4</td><td>26.0</td><td>24.0</td><td>990.0</td><td>249.0210</td></tr><tr><td></td><td>1759</td><td>4</td><td>16.0</td><td>6.0</td><td>75.0</td><td>229.9122</td></tr><tr><td></td><td>2637</td><td>4</td><td>23.0</td><td>24.0</td><td>650.0</td><td>227.2272</td></tr><tr><td>5</td><td>3277</td><td>5</td><td>18.0</td><td>16.0</td><td>950.0</td><td>372.6426</td></tr><tr><td></td><td>93</td><td>5</td><td>17.0</td><td>36.0</td><td>720.0</td><td>335.4990</td></tr><tr><td></td><td>202</td><td>5</td><td>37.0</td><td>14.0</td><td>800.0</td><td>327.7218</td></tr><tr><td>6</td><td>734</td><td>6</td><td>16.0</td><td>28.0</td><td>730.0</td><td>389.8314</td></tr><tr><td></td><td>2746</td><td>6</td><td>16.0</td><td>28.0</td><td>4000.0</td><td>350.4114</td></tr><tr><td></td><td>1810</td><td>6</td><td>21.0</td><td>14.0</td><td>730.0</td><td>323.2506</td></tr><tr><td>7</td><td>3127</td><td>7</td><td>23.0</td><td>42.0</td><td>2000.0</td><td>298.7952</td></tr><tr><td></td><td>104</td><td>7</td><td>21.0</td><td>24.0</td><td>1000.0</td><td>286.4538</td></tr><tr><td></td><td>1654</td><td>7</td><td>18.0</td><td>98.0</td><td>700.0</td><td>236.0316</td></tr><tr><td>8</td><td>3393</td><td>8</td><td>NaN</td><td>NaN</td><td>NaN</td><td>375.8664</td></tr><tr><td></td><td>3373</td><td>8</td><td>NaN</td><td>NaN</td><td>NaN</td><td>364.8504</td></tr><tr><td></td><td>3372</td><td>8</td><td>NaN</td><td>NaN</td><td>NaN</td><td>355.3518</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># apply函数接收的参数会传入自定义的函数中</span></span><br><span class="line">df_data.groupby(<span class="string">'LeagueIndex'</span>).apply(top_n, n=<span class="number">2</span>, column=<span class="string">'Age'</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th></th><th>LeagueIndex</th><th>Age</th><th>HoursPerWeek</th><th>TotalHours</th><th>APM</th></tr></thead><tbody><tr><td>LeagueIndex</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>1</td><td>3146</td><td>1</td><td>40.0</td><td>12.0</td><td>150.0</td><td>38.5590</td></tr><tr><td></td><td>3040</td><td>1</td><td>39.0</td><td>10.0</td><td>500.0</td><td>29.8764</td></tr><tr><td>2</td><td>920</td><td>2</td><td>43.0</td><td>10.0</td><td>730.0</td><td>86.0586</td></tr><tr><td></td><td>2437</td><td>2</td><td>41.0</td><td>4.0</td><td>200.0</td><td>54.2166</td></tr><tr><td>3</td><td>1258</td><td>3</td><td>41.0</td><td>14.0</td><td>800.0</td><td>77.6472</td></tr><tr><td></td><td>2972</td><td>3</td><td>40.0</td><td>10.0</td><td>500.0</td><td>60.5970</td></tr><tr><td>4</td><td>1696</td><td>4</td><td>44.0</td><td>6.0</td><td>500.0</td><td>89.5266</td></tr><tr><td></td><td>1729</td><td>4</td><td>39.0</td><td>8.0</td><td>500.0</td><td>86.7246</td></tr><tr><td>5</td><td>202</td><td>5</td><td>37.0</td><td>14.0</td><td>800.0</td><td>327.7218</td></tr><tr><td></td><td>2745</td><td>5</td><td>37.0</td><td>18.0</td><td>1000.0</td><td>123.4098</td></tr><tr><td>6</td><td>3069</td><td>6</td><td>31.0</td><td>8.0</td><td>800.0</td><td>133.1790</td></tr><tr><td></td><td>2706</td><td>6</td><td>31.0</td><td>8.0</td><td>700.0</td><td>66.9918</td></tr><tr><td>7</td><td>2813</td><td>7</td><td>26.0</td><td>36.0</td><td>1300.0</td><td>188.5512</td></tr><tr><td></td><td>1992</td><td>7</td><td>26.0</td><td>24.0</td><td>1000.0</td><td>219.6690</td></tr><tr><td>8</td><td>3340</td><td>8</td><td>NaN</td><td>NaN</td><td>NaN</td><td>189.7404</td></tr><tr><td></td><td>3341</td><td>8</td><td>NaN</td><td>NaN</td><td>NaN</td><td>287.8128</td></tr></tbody></table><ul><li>禁止分组 group_keys=False</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_data.groupby(<span class="string">'LeagueIndex'</span>, group_keys=<span class="literal">False</span>).apply(top_n)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>LeagueIndex</th><th>Age</th><th>HoursPerWeek</th><th>TotalHours</th><th>APM</th></tr></thead><tbody><tr><td>2214</td><td>1</td><td>20.0</td><td>12.0</td><td>730.0</td><td>172.9530</td></tr><tr><td>2246</td><td>1</td><td>27.0</td><td>8.0</td><td>250.0</td><td>141.6282</td></tr><tr><td>1753</td><td>1</td><td>20.0</td><td>28.0</td><td>100.0</td><td>139.6362</td></tr><tr><td>3062</td><td>2</td><td>20.0</td><td>6.0</td><td>100.0</td><td>179.6250</td></tr><tr><td>3229</td><td>2</td><td>16.0</td><td>24.0</td><td>110.0</td><td>156.7380</td></tr><tr><td>1520</td><td>2</td><td>29.0</td><td>6.0</td><td>250.0</td><td>151.6470</td></tr><tr><td>1557</td><td>3</td><td>22.0</td><td>6.0</td><td>200.0</td><td>226.6554</td></tr><tr><td>484</td><td>3</td><td>19.0</td><td>42.0</td><td>450.0</td><td>220.0692</td></tr><tr><td>2883</td><td>3</td><td>16.0</td><td>8.0</td><td>800.0</td><td>208.9500</td></tr><tr><td>2688</td><td>4</td><td>26.0</td><td>24.0</td><td>990.0</td><td>249.0210</td></tr><tr><td>1759</td><td>4</td><td>16.0</td><td>6.0</td><td>75.0</td><td>229.9122</td></tr><tr><td>2637</td><td>4</td><td>23.0</td><td>24.0</td><td>650.0</td><td>227.2272</td></tr><tr><td>3277</td><td>5</td><td>18.0</td><td>16.0</td><td>950.0</td><td>372.6426</td></tr><tr><td>93</td><td>5</td><td>17.0</td><td>36.0</td><td>720.0</td><td>335.4990</td></tr><tr><td>202</td><td>5</td><td>37.0</td><td>14.0</td><td>800.0</td><td>327.7218</td></tr><tr><td>734</td><td>6</td><td>16.0</td><td>28.0</td><td>730.0</td><td>389.8314</td></tr><tr><td>2746</td><td>6</td><td>16.0</td><td>28.0</td><td>4000.0</td><td>350.4114</td></tr><tr><td>1810</td><td>6</td><td>21.0</td><td>14.0</td><td>730.0</td><td>323.2506</td></tr><tr><td>3127</td><td>7</td><td>23.0</td><td>42.0</td><td>2000.0</td><td>298.7952</td></tr><tr><td>104</td><td>7</td><td>21.0</td><td>24.0</td><td>1000.0</td><td>286.4538</td></tr><tr><td>1654</td><td>7</td><td>18.0</td><td>98.0</td><td>700.0</td><td>236.0316</td></tr><tr><td>3393</td><td>8</td><td>NaN</td><td>NaN</td><td>NaN</td><td>375.8664</td></tr><tr><td>3373</td><td>8</td><td>NaN</td><td>NaN</td><td>NaN</td><td>364.8504</td></tr><tr><td>3372</td><td>8</td><td>NaN</td><td>NaN</td><td>NaN</td><td>355.3518</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> DataAnalysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas-索引</title>
      <link href="blog/nfqdqf/"/>
      <url>blog/nfqdqf/</url>
      
        <content type="html"><![CDATA[<h2 id="一、基本索引"><a href="#一、基本索引" class="headerlink" title="一、基本索引"></a>一、基本索引</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><h3 id="Series-索引"><a href="#Series-索引" class="headerlink" title="Series 索引"></a>Series 索引</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser_obj1 = pd.Series(range(<span class="number">5</span>), index = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>])</span><br><span class="line"><span class="keyword">print</span> (ser_obj1.head())</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">a</span>    <span class="number">0</span></span><br><span class="line"><span class="string">b</span>    <span class="number">1</span></span><br><span class="line"><span class="string">c</span>    <span class="number">2</span></span><br><span class="line"><span class="string">d</span>    <span class="number">3</span></span><br><span class="line"><span class="string">e</span>    <span class="number">4</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">int64</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''1. 行索引'''</span></span><br><span class="line">print(<span class="string">'行索引===================================================================='</span>)</span><br><span class="line"><span class="keyword">print</span> (ser_obj1[<span class="string">'b'</span>])</span><br><span class="line"><span class="keyword">print</span> (ser_obj1[<span class="number">0</span>])</span><br><span class="line">print(<span class="string">'切片索引===================================================================='</span>)</span><br><span class="line"><span class="string">'''2. 切片索引'''</span></span><br><span class="line"><span class="keyword">print</span> (ser_obj1[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"><span class="keyword">print</span> (ser_obj1[<span class="string">'b'</span>:<span class="string">'d'</span>])</span><br><span class="line">print(<span class="string">'不连续索引索引===================================================================='</span>)</span><br><span class="line"><span class="comment">#注意会不会包含尾巴。。</span></span><br><span class="line"><span class="string">'''3. 不连续索引'''</span></span><br><span class="line"><span class="keyword">print</span> (ser_obj1[[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>]])</span><br><span class="line"><span class="keyword">print</span> (ser_obj1[[<span class="string">'a'</span>, <span class="string">'e'</span>]])</span><br><span class="line">print(<span class="string">'布尔索引===================================================================='</span>)</span><br><span class="line"><span class="string">'''4. 布尔索引'''</span></span><br><span class="line"><span class="comment">#是对里面的值进行判断，不是对索引</span></span><br><span class="line">ser_bool = ser_obj1 &gt; <span class="number">2</span></span><br><span class="line"><span class="keyword">print</span> (ser_bool)</span><br><span class="line"><span class="keyword">print</span> (ser_obj1[ser_bool])<span class="comment">#运用的方式</span></span><br><span class="line"><span class="keyword">print</span> (ser_obj1[ser_obj1 &gt; <span class="number">2</span>])</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">行索引====================================================================</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="string">切片索引====================================================================</span></span><br><span class="line"><span class="string">b</span>    <span class="number">1</span></span><br><span class="line"><span class="string">c</span>    <span class="number">2</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">int64</span></span><br><span class="line"><span class="string">b</span>    <span class="number">1</span></span><br><span class="line"><span class="string">c</span>    <span class="number">2</span></span><br><span class="line"><span class="string">d</span>    <span class="number">3</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">int64</span></span><br><span class="line"><span class="string">不连续索引索引====================================================================</span></span><br><span class="line"><span class="string">a</span>    <span class="number">0</span></span><br><span class="line"><span class="string">c</span>    <span class="number">2</span></span><br><span class="line"><span class="string">e</span>    <span class="number">4</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">int64</span></span><br><span class="line"><span class="string">a</span>    <span class="number">0</span></span><br><span class="line"><span class="string">e</span>    <span class="number">4</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">int64</span></span><br><span class="line"><span class="string">布尔索引====================================================================</span></span><br><span class="line"><span class="string">a</span>    <span class="literal">False</span></span><br><span class="line"><span class="string">b</span>    <span class="literal">False</span></span><br><span class="line"><span class="string">c</span>    <span class="literal">False</span></span><br><span class="line"><span class="string">d</span>     <span class="literal">True</span></span><br><span class="line"><span class="string">e</span>     <span class="literal">True</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">bool</span></span><br><span class="line"><span class="string">d</span>    <span class="number">3</span></span><br><span class="line"><span class="string">e</span>    <span class="number">4</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">int64</span></span><br><span class="line"><span class="string">d</span>    <span class="number">3</span></span><br><span class="line"><span class="string">e</span>    <span class="number">4</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">int64</span></span><br></pre></td></tr></table></figure><h3 id="Dataframe-索引"><a href="#Dataframe-索引" class="headerlink" title="Dataframe 索引"></a>Dataframe 索引</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_obj1 = pd.DataFrame(np.random.randn(<span class="number">5</span>,<span class="number">4</span>), columns = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line"><span class="keyword">print</span> (df_obj1.head())</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">          a         b         c         d</span><br><span class="line"><span class="number">0</span> <span class="number">-0.720611</span> <span class="number">-0.002543</span> <span class="number">-0.084255</span> <span class="number">-0.583719</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0.174715</span>  <span class="number">0.288090</span> <span class="number">-0.254462</span> <span class="number">-1.669668</span></span><br><span class="line"><span class="number">2</span> <span class="number">-1.872654</span> <span class="number">-0.466842</span> <span class="number">-0.481040</span> <span class="number">-1.735558</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1.147668</span>  <span class="number">1.205686</span>  <span class="number">0.625582</span> <span class="number">-2.111863</span></span><br><span class="line"><span class="number">4</span>  <span class="number">1.177882</span>  <span class="number">0.049581</span> <span class="number">-0.404098</span> <span class="number">-0.497125</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''0. 转换成行索引的话===方式一：transpose或者T'''</span></span><br><span class="line">bb=df_obj1.transpose()</span><br><span class="line">print(df_obj1.T)</span><br><span class="line">print(bb)</span><br><span class="line"><span class="string">'''0. 转换成行索引的话===方式二：重构'''</span></span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span>         <span class="number">3</span>         <span class="number">4</span></span><br><span class="line">a <span class="number">-0.720611</span>  <span class="number">0.174715</span> <span class="number">-1.872654</span>  <span class="number">1.147668</span>  <span class="number">1.177882</span></span><br><span class="line">b <span class="number">-0.002543</span>  <span class="number">0.288090</span> <span class="number">-0.466842</span>  <span class="number">1.205686</span>  <span class="number">0.049581</span></span><br><span class="line">c <span class="number">-0.084255</span> <span class="number">-0.254462</span> <span class="number">-0.481040</span>  <span class="number">0.625582</span> <span class="number">-0.404098</span></span><br><span class="line">d <span class="number">-0.583719</span> <span class="number">-1.669668</span> <span class="number">-1.735558</span> <span class="number">-2.111863</span> <span class="number">-0.497125</span></span><br><span class="line">          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span>         <span class="number">3</span>         <span class="number">4</span></span><br><span class="line">a <span class="number">-0.720611</span>  <span class="number">0.174715</span> <span class="number">-1.872654</span>  <span class="number">1.147668</span>  <span class="number">1.177882</span></span><br><span class="line">b <span class="number">-0.002543</span>  <span class="number">0.288090</span> <span class="number">-0.466842</span>  <span class="number">1.205686</span>  <span class="number">0.049581</span></span><br><span class="line">c <span class="number">-0.084255</span> <span class="number">-0.254462</span> <span class="number">-0.481040</span>  <span class="number">0.625582</span> <span class="number">-0.404098</span></span><br><span class="line">d <span class="number">-0.583719</span> <span class="number">-1.669668</span> <span class="number">-1.735558</span> <span class="number">-2.111863</span> <span class="number">-0.497125</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">'<span class="number">0.</span> 转换成行索引的话===方式二：重构/重塑===还没有完全明白'</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''1. 列索引=====默认为列索引来操作'''</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'列索引'</span>)</span><br><span class="line">print(df_obj1.b)<span class="comment">#当成属性来获取值</span></span><br><span class="line">print(<span class="string">'==================='</span>)</span><br><span class="line"><span class="keyword">print</span> (df_obj1[<span class="string">'a'</span>]) <span class="comment"># 返回Series类型</span></span><br><span class="line"><span class="keyword">print</span> (type(df_obj1[<span class="string">'a'</span>]))</span><br><span class="line"><span class="keyword">print</span> (df_obj1[[<span class="string">'a'</span>]]) <span class="comment"># 返回DataFrame类型</span></span><br><span class="line"><span class="keyword">print</span> (type(df_obj1[[<span class="string">'a'</span>]]))</span><br><span class="line"><span class="string">'''2. 不连续索引'''</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'不连续索引'</span>)</span><br><span class="line"><span class="keyword">print</span> (df_obj1[[<span class="string">'a'</span>,<span class="string">'c'</span>]])</span><br><span class="line"><span class="keyword">print</span> (df_obj1[[<span class="string">'a'</span>,<span class="string">'c'</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">列索引</span></span><br><span class="line"><span class="number">0</span>   <span class="number">-0.002543</span></span><br><span class="line"><span class="number">1</span>    <span class="number">0.288090</span></span><br><span class="line"><span class="number">2</span>   <span class="number">-0.466842</span></span><br><span class="line"><span class="number">3</span>    <span class="number">1.205686</span></span><br><span class="line"><span class="number">4</span>    <span class="number">0.049581</span></span><br><span class="line"><span class="attr">Name:</span> <span class="string">b,</span> <span class="attr">dtype:</span> <span class="string">float64</span></span><br><span class="line"><span class="string">===================</span></span><br><span class="line"><span class="number">0</span>   <span class="number">-0.720611</span></span><br><span class="line"><span class="number">1</span>    <span class="number">0.174715</span></span><br><span class="line"><span class="number">2</span>   <span class="number">-1.872654</span></span><br><span class="line"><span class="number">3</span>    <span class="number">1.147668</span></span><br><span class="line"><span class="number">4</span>    <span class="number">1.177882</span></span><br><span class="line"><span class="attr">Name:</span> <span class="string">a,</span> <span class="attr">dtype:</span> <span class="string">float64</span></span><br><span class="line"><span class="string">&lt;class</span> <span class="string">'pandas.core.series.Series'</span><span class="string">&gt;</span></span><br><span class="line">          <span class="string">a</span></span><br><span class="line"><span class="number">0</span> <span class="number">-0.720611</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0.174715</span></span><br><span class="line"><span class="number">2</span> <span class="number">-1.872654</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1.147668</span></span><br><span class="line"><span class="number">4</span>  <span class="number">1.177882</span></span><br><span class="line"><span class="string">&lt;class</span> <span class="string">'pandas.core.frame.DataFrame'</span><span class="string">&gt;</span></span><br><span class="line"><span class="string">不连续索引</span></span><br><span class="line">          <span class="string">a</span>         <span class="string">c</span></span><br><span class="line"><span class="number">0</span> <span class="number">-0.720611</span> <span class="number">-0.084255</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0.174715</span> <span class="number">-0.254462</span></span><br><span class="line"><span class="number">2</span> <span class="number">-1.872654</span> <span class="number">-0.481040</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1.147668</span>  <span class="number">0.625582</span></span><br><span class="line"><span class="number">4</span>  <span class="number">1.177882</span> <span class="number">-0.404098</span></span><br><span class="line">          <span class="string">a</span>         <span class="string">c</span></span><br><span class="line"><span class="number">0</span> <span class="number">-0.720611</span> <span class="number">-0.084255</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0.174715</span> <span class="number">-0.254462</span></span><br><span class="line"><span class="number">2</span> <span class="number">-1.872654</span> <span class="number">-0.481040</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1.147668</span>  <span class="number">0.625582</span></span><br><span class="line"><span class="number">4</span>  <span class="number">1.177882</span> <span class="number">-0.404098</span></span><br></pre></td></tr></table></figure><h3 id="三种索引方式"><a href="#三种索引方式" class="headerlink" title="三种索引方式"></a>三种索引方式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(ser_obj1)</span><br><span class="line">print(<span class="string">'============================'</span>)</span><br><span class="line">print(df_obj1)</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">a</span>    <span class="number">0</span></span><br><span class="line"><span class="string">b</span>    <span class="number">1</span></span><br><span class="line"><span class="string">c</span>    <span class="number">2</span></span><br><span class="line"><span class="string">d</span>    <span class="number">3</span></span><br><span class="line"><span class="string">e</span>    <span class="number">4</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">int64</span></span><br><span class="line"><span class="string">============================</span></span><br><span class="line">          <span class="string">a</span>         <span class="string">b</span>         <span class="string">c</span>         <span class="string">d</span></span><br><span class="line"><span class="number">0</span> <span class="number">-0.720611</span> <span class="number">-0.002543</span> <span class="number">-0.084255</span> <span class="number">-0.583719</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0.174715</span>  <span class="number">0.288090</span> <span class="number">-0.254462</span> <span class="number">-1.669668</span></span><br><span class="line"><span class="number">2</span> <span class="number">-1.872654</span> <span class="number">-0.466842</span> <span class="number">-0.481040</span> <span class="number">-1.735558</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1.147668</span>  <span class="number">1.205686</span>  <span class="number">0.625582</span> <span class="number">-2.111863</span></span><br><span class="line"><span class="number">4</span>  <span class="number">1.177882</span>  <span class="number">0.049581</span> <span class="number">-0.404098</span> <span class="number">-0.497125</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''1. 标签索引 loc===用的是index和column的值索引【标签索引】'''</span></span><br><span class="line"><span class="comment"># Series</span></span><br><span class="line"><span class="keyword">print</span> (ser_obj1[<span class="string">'b'</span>:<span class="string">'d'</span>])</span><br><span class="line"><span class="keyword">print</span> (ser_obj1.loc[<span class="string">'b'</span>:<span class="string">'d'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># DataFrame</span></span><br><span class="line"><span class="keyword">print</span> (df_obj1[[<span class="string">'a'</span>]])</span><br><span class="line"><span class="keyword">print</span> (df_obj1.loc[<span class="number">0</span>:<span class="number">2</span>,<span class="string">'a'</span>:<span class="string">'c'</span>])</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">b</span>    <span class="number">1</span></span><br><span class="line"><span class="string">c</span>    <span class="number">2</span></span><br><span class="line"><span class="string">d</span>    <span class="number">3</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">int64</span></span><br><span class="line"><span class="string">b</span>    <span class="number">1</span></span><br><span class="line"><span class="string">c</span>    <span class="number">2</span></span><br><span class="line"><span class="string">d</span>    <span class="number">3</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">int64</span></span><br><span class="line">          <span class="string">a</span></span><br><span class="line"><span class="number">0</span> <span class="number">-0.720611</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0.174715</span></span><br><span class="line"><span class="number">2</span> <span class="number">-1.872654</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1.147668</span></span><br><span class="line"><span class="number">4</span>  <span class="number">1.177882</span></span><br><span class="line">          <span class="string">a</span>         <span class="string">b</span>         <span class="string">c</span></span><br><span class="line"><span class="number">0</span> <span class="number">-0.720611</span> <span class="number">-0.002543</span> <span class="number">-0.084255</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0.174715</span>  <span class="number">0.288090</span> <span class="number">-0.254462</span></span><br><span class="line"><span class="number">2</span> <span class="number">-1.872654</span> <span class="number">-0.466842</span> <span class="number">-0.481040</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''2. 位置索引 iloc====用的是index和column的默认0，1，2，3···的值索引【位置索引】'''</span></span><br><span class="line"><span class="keyword">print</span> (ser_obj1[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"><span class="keyword">print</span> (ser_obj1.iloc[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># DataFrame</span></span><br><span class="line"><span class="keyword">print</span> (df_obj1.iloc[<span class="number">0</span>:<span class="number">2</span>, <span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line"><span class="comment"># 注意和df_obj.loc[0:2, 'a']的区别 = = = 行和列：都不包括尾巴</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">b</span>    <span class="number">1</span></span><br><span class="line"><span class="string">c</span>    <span class="number">2</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">int64</span></span><br><span class="line"><span class="string">b</span>    <span class="number">1</span></span><br><span class="line"><span class="string">c</span>    <span class="number">2</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">int64</span></span><br><span class="line">          <span class="string">a</span>         <span class="string">b</span></span><br><span class="line"><span class="number">0</span> <span class="number">-0.720611</span> <span class="number">-0.002543</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0.174715</span>  <span class="number">0.288090</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''3. 混合索引 ix===先按标签索引loc尝试操作，然后再按位置索引iloc尝试操作'''</span></span><br><span class="line"><span class="keyword">print</span> (ser_obj1.ix[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"><span class="keyword">print</span> (ser_obj1.ix[<span class="string">'b'</span>:<span class="string">'c'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># DataFrame</span></span><br><span class="line"><span class="keyword">print</span> (df_obj1.ix[<span class="number">0</span>:<span class="number">2</span>, <span class="number">0</span>:<span class="number">3</span>])</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">b</span>    <span class="number">1</span></span><br><span class="line"><span class="string">c</span>    <span class="number">2</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">int64</span></span><br><span class="line"><span class="string">b</span>    <span class="number">1</span></span><br><span class="line"><span class="string">c</span>    <span class="number">2</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">int64</span></span><br><span class="line">          <span class="string">a</span>         <span class="string">b</span>         <span class="string">c</span></span><br><span class="line"><span class="number">0</span> <span class="number">-0.720611</span> <span class="number">-0.002543</span> <span class="number">-0.084255</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0.174715</span>  <span class="number">0.288090</span> <span class="number">-0.254462</span></span><br><span class="line"><span class="number">2</span> <span class="number">-1.872654</span> <span class="number">-0.466842</span> <span class="number">-0.481040</span></span><br></pre></td></tr></table></figure><h2 id="二、Pandas-层级索引"><a href="#二、Pandas-层级索引" class="headerlink" title="二、Pandas 层级索引"></a>二、Pandas 层级索引</h2><h3 id="构造层级索引"><a href="#构造层级索引" class="headerlink" title="构造层级索引"></a>构造层级索引</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser_obj = pd.Series(np.random.randn(<span class="number">12</span>),</span><br><span class="line">                    index=[[<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'c'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'d'</span>, <span class="string">'d'</span>],</span><br><span class="line">                           [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]])</span><br><span class="line"><span class="comment">#列表里面的列表</span></span><br><span class="line"><span class="keyword">print</span> (ser_obj)</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">a</span>  <span class="number">0</span>   <span class="number">-0.373441</span></span><br><span class="line">   <span class="number">1</span>    <span class="number">0.615976</span></span><br><span class="line">   <span class="number">2</span>    <span class="number">0.959092</span></span><br><span class="line"><span class="string">b</span>  <span class="number">0</span>    <span class="number">1.743670</span></span><br><span class="line">   <span class="number">1</span>   <span class="number">-0.791517</span></span><br><span class="line">   <span class="number">2</span>   <span class="number">-0.774013</span></span><br><span class="line"><span class="string">c</span>  <span class="number">0</span>    <span class="number">1.271094</span></span><br><span class="line">   <span class="number">1</span>   <span class="number">-0.723264</span></span><br><span class="line">   <span class="number">2</span>    <span class="number">0.253038</span></span><br><span class="line"><span class="string">d</span>  <span class="number">0</span>   <span class="number">-0.767791</span></span><br><span class="line">   <span class="number">1</span>    <span class="number">0.419253</span></span><br><span class="line">   <span class="number">2</span>   <span class="number">-0.691644</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">float64</span></span><br></pre></td></tr></table></figure><ul><li>MultiIndex 索引对象</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">print</span> (type(ser_obj.index))</span><br><span class="line"><span class="keyword">print</span> (ser_obj.index)</span><br></pre></td></tr></table></figure><figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">class</span> <span class="comment">'pandas.core.indexes.multi.MultiIndex'&gt;</span></span><br><span class="line">MultiIndex([(<span class="comment">'a', 0),</span></span><br><span class="line">            (<span class="comment">'a', 1),</span></span><br><span class="line">            (<span class="comment">'a', 2),</span></span><br><span class="line">            (<span class="comment">'b', 0),</span></span><br><span class="line">            (<span class="comment">'b', 1),</span></span><br><span class="line">            (<span class="comment">'b', 2),</span></span><br><span class="line">            (<span class="comment">'c', 0),</span></span><br><span class="line">            (<span class="comment">'c', 1),</span></span><br><span class="line">            (<span class="comment">'c', 2),</span></span><br><span class="line">            (<span class="comment">'d', 0),</span></span><br><span class="line">            (<span class="comment">'d', 1),</span></span><br><span class="line">            (<span class="comment">'d', 2)],</span></span><br><span class="line">           )</span><br></pre></td></tr></table></figure><h3 id="选取子集"><a href="#选取子集" class="headerlink" title="选取子集"></a>选取子集</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 外层选取</span></span><br><span class="line"><span class="keyword">print</span> (ser_obj[<span class="string">'c'</span>])</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>    <span class="number">1.271094</span></span><br><span class="line"><span class="number">1</span>   <span class="number">-0.723264</span></span><br><span class="line"><span class="number">2</span>    <span class="number">0.253038</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">float64</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 内层选取</span></span><br><span class="line"><span class="keyword">print</span> (ser_obj[:, <span class="number">2</span>])</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">a</span>    <span class="number">0.959092</span></span><br><span class="line"><span class="string">b</span>   <span class="number">-0.774013</span></span><br><span class="line"><span class="string">c</span>    <span class="number">0.253038</span></span><br><span class="line"><span class="string">d</span>   <span class="number">-0.691644</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">float64</span></span><br></pre></td></tr></table></figure><h3 id="交换分层顺序"><a href="#交换分层顺序" class="headerlink" title="交换分层顺序"></a>交换分层顺序</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_obj2 = pd.DataFrame(np.random.randn(<span class="number">6</span>,<span class="number">4</span>), columns = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>],index=[[<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>,<span class="string">'b'</span>],[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>]])</span><br><span class="line"><span class="comment">#print (df_obj1.swaplevel())</span></span><br><span class="line"><span class="keyword">print</span> (df_obj2)</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">            a         b         c         d</span><br><span class="line">a <span class="number">1</span>  <span class="number">0.273776</span> <span class="number">-0.018659</span>  <span class="number">1.512727</span> <span class="number">-0.088091</span></span><br><span class="line">  <span class="number">2</span> <span class="number">-0.410883</span> <span class="number">-1.488943</span>  <span class="number">0.917268</span>  <span class="number">1.179941</span></span><br><span class="line">  <span class="number">3</span> <span class="number">-0.237532</span> <span class="number">-0.823717</span>  <span class="number">0.189495</span>  <span class="number">1.060476</span></span><br><span class="line">b <span class="number">1</span>  <span class="number">0.727872</span>  <span class="number">0.323352</span>  <span class="number">0.443786</span>  <span class="number">0.780510</span></span><br><span class="line">  <span class="number">2</span> <span class="number">-1.407645</span> <span class="number">-0.059689</span>  <span class="number">1.439843</span> <span class="number">-1.700740</span></span><br><span class="line">  <span class="number">3</span> <span class="number">-0.377628</span> <span class="number">-0.137348</span> <span class="number">-0.739980</span>  <span class="number">0.122528</span></span><br></pre></td></tr></table></figure><h3 id="交换并排序分层"><a href="#交换并排序分层" class="headerlink" title="交换并排序分层"></a>交换并排序分层</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">print</span> (df_obj2.swaplevel().sortvalues(by=<span class="string">'a'</span>))</span><br><span class="line"><span class="comment">#Series没有这个内置函数sortlevel===dataframe有</span></span><br></pre></td></tr></table></figure><h2 id="三、透视表和交叉表"><a href="#三、透视表和交叉表" class="headerlink" title="三、透视表和交叉表"></a>三、透视表和交叉表</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dataset_path = <span class="string">'./data/starcraft.csv'</span></span><br><span class="line">df_data = pd.read_csv(dataset_path, usecols=[<span class="string">'LeagueIndex'</span>, <span class="string">'Age'</span>, <span class="string">'HoursPerWeek'</span>,</span><br><span class="line">                                             <span class="string">'TotalHours'</span>, <span class="string">'APM'</span>])</span><br><span class="line">print(df_data.head())</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">   LeagueIndex   Age  HoursPerWeek  TotalHours       APM</span><br><span class="line"><span class="number">0</span>            <span class="number">5</span>  <span class="number">27.0</span>          <span class="number">10.0</span>      <span class="number">3000.0</span>  <span class="number">143.7180</span></span><br><span class="line"><span class="number">1</span>            <span class="number">5</span>  <span class="number">23.0</span>          <span class="number">10.0</span>      <span class="number">5000.0</span>  <span class="number">129.2322</span></span><br><span class="line"><span class="number">2</span>            <span class="number">4</span>  <span class="number">30.0</span>          <span class="number">10.0</span>       <span class="number">200.0</span>   <span class="number">69.9612</span></span><br><span class="line"><span class="number">3</span>            <span class="number">3</span>  <span class="number">19.0</span>          <span class="number">20.0</span>       <span class="number">400.0</span>  <span class="number">107.6016</span></span><br><span class="line"><span class="number">4</span>            <span class="number">3</span>  <span class="number">32.0</span>          <span class="number">10.0</span>       <span class="number">500.0</span>  <span class="number">122.8908</span></span><br></pre></td></tr></table></figure><h3 id="透视表"><a href="#透视表" class="headerlink" title="透视表"></a>透视表</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.pivot_table(df_data,</span><br><span class="line">               index=[<span class="string">'Age'</span>],</span><br><span class="line">               columns=[<span class="string">'LeagueIndex'</span>],</span><br><span class="line">               aggfunc=np.sum)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>APM</th><th>HoursPerWeek</th><th>TotalHours</th></tr></thead><tbody><tr><td>LeagueIndex</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>1</td><td>2</td><td>3</td><td>…</td><td>5</td><td>6</td><td>7</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td></tr><tr><td>Age</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>16.0</td><td>1062.44754</td><td>2919.70434</td><td>4851.9222</td><td>5149.7310</td><td>7787.37780</td><td>9042.1722</td><td>386.7774</td><td>324.0</td><td>720.0</td><td>778.0</td><td>…</td><td>1220.0</td><td>1280.0</td><td>56.0</td><td>4307.0</td><td>13143.0</td><td>29211.0</td><td>23581.0</td><td>49233.0</td><td>51320.0</td><td>3000.0</td></tr><tr><td>17.0</td><td>655.67280</td><td>1661.01540</td><td>4181.8920</td><td>5525.3586</td><td>10052.72100</td><td>8310.0858</td><td>573.8286</td><td>184.0</td><td>378.0</td><td>664.0</td><td>…</td><td>1460.0</td><td>1116.0</td><td>104.0</td><td>2044.0</td><td>7423.0</td><td>16602.0</td><td>24005.0</td><td>53375.0</td><td>45421.0</td><td>12700.0</td></tr><tr><td>18.0</td><td>704.47680</td><td>3300.41040</td><td>4847.2152</td><td>8763.0783</td><td>10988.66100</td><td>9134.7240</td><td>618.5790</td><td>204.0</td><td>548.0</td><td>886.0</td><td>…</td><td>1644.0</td><td>1194.0</td><td>164.0</td><td>3570.0</td><td>11471.0</td><td>21037.0</td><td>46034.0</td><td>1056486.0</td><td>50378.0</td><td>3200.0</td></tr><tr><td>19.0</td><td>734.55600</td><td>2216.81880</td><td>5183.7888</td><td>8030.1960</td><td>9271.09260</td><td>11955.6030</td><td>696.7770</td><td>126.0</td><td>458.0</td><td>950.0</td><td>…</td><td>962.0</td><td>1642.0</td><td>168.0</td><td>2355.0</td><td>8467.0</td><td>31861.0</td><td>39705.0</td><td>44697.0</td><td>70331.0</td><td>4166.0</td></tr><tr><td>20.0</td><td>1624.89660</td><td>2147.23200</td><td>4211.5686</td><td>10596.2070</td><td>10871.65440</td><td>14291.8692</td><td>NaN</td><td>328.0</td><td>288.0</td><td>654.0</td><td>…</td><td>1290.0</td><td>1816.0</td><td>NaN</td><td>7212.0</td><td>6325.0</td><td>20174.0</td><td>55083.0</td><td>64170.0</td><td>105131.0</td><td>NaN</td></tr><tr><td>21.0</td><td>780.67950</td><td>1578.02880</td><td>3949.3062</td><td>8689.8804</td><td>11954.91660</td><td>13165.7649</td><td>867.3474</td><td>162.0</td><td>270.0</td><td>580.0</td><td>…</td><td>1446.0</td><td>1858.0</td><td>62.0</td><td>3377.0</td><td>7673.0</td><td>19095.0</td><td>42296.0</td><td>68739.0</td><td>82061.0</td><td>3180.0</td></tr><tr><td>22.0</td><td>674.59860</td><td>2147.50980</td><td>4379.3424</td><td>7818.7302</td><td>10473.28380</td><td>10165.8672</td><td>493.1586</td><td>146.0</td><td>372.0</td><td>680.0</td><td>…</td><td>1304.0</td><td>1448.0</td><td>112.0</td><td>4225.0</td><td>10861.0</td><td>23030.0</td><td>57996.0</td><td>84330.0</td><td>67069.0</td><td>6950.0</td></tr><tr><td>23.0</td><td>359.65980</td><td>1575.06120</td><td>4602.7416</td><td>7616.9298</td><td>8292.86160</td><td>6131.1936</td><td>1799.6520</td><td>46.0</td><td>320.0</td><td>598.0</td><td>…</td><td>998.0</td><td>726.0</td><td>296.0</td><td>896.0</td><td>12350.0</td><td>23081.0</td><td>40025.0</td><td>56097.0</td><td>43176.0</td><td>14290.0</td></tr><tr><td>24.0</td><td>439.43040</td><td>1717.55340</td><td>2876.8572</td><td>5503.7736</td><td>7292.32740</td><td>7240.4076</td><td>428.6538</td><td>116.0</td><td>344.0</td><td>406.0</td><td>…</td><td>668.0</td><td>1048.0</td><td>36.0</td><td>2070.0</td><td>9543.0</td><td>25421.0</td><td>35384.0</td><td>36147.0</td><td>43114.0</td><td>2250.0</td></tr><tr><td>25.0</td><td>572.61420</td><td>1178.02440</td><td>2201.6388</td><td>4710.9924</td><td>6168.19260</td><td>2200.6362</td><td>361.4550</td><td>124.0</td><td>166.0</td><td>268.0</td><td>…</td><td>682.0</td><td>256.0</td><td>52.0</td><td>2440.0</td><td>5846.0</td><td>11270.0</td><td>26610.0</td><td>40681.0</td><td>14890.0</td><td>3300.0</td></tr><tr><td>26.0</td><td>418.70874</td><td>1165.96680</td><td>1794.1890</td><td>3139.2852</td><td>4016.67060</td><td>3301.8498</td><td>408.2202</td><td>96.0</td><td>148.0</td><td>272.0</td><td>…</td><td>418.0</td><td>354.0</td><td>60.0</td><td>1608.0</td><td>3417.0</td><td>10548.0</td><td>16839.0</td><td>20100.0</td><td>17663.0</td><td>2300.0</td></tr><tr><td>27.0</td><td>359.17320</td><td>1164.15960</td><td>1426.4550</td><td>2850.1320</td><td>3498.30300</td><td>2040.8454</td><td>NaN</td><td>40.0</td><td>152.0</td><td>226.0</td><td>…</td><td>340.0</td><td>164.0</td><td>NaN</td><td>1100.0</td><td>3615.0</td><td>7525.0</td><td>15935.0</td><td>19770.0</td><td>11796.0</td><td>NaN</td></tr><tr><td>28.0</td><td>333.84240</td><td>479.34000</td><td>1152.5958</td><td>2205.8778</td><td>1992.60540</td><td>521.7666</td><td>NaN</td><td>28.0</td><td>90.0</td><td>220.0</td><td>…</td><td>186.0</td><td>44.0</td><td>NaN</td><td>466.0</td><td>1860.0</td><td>7901.0</td><td>15370.0</td><td>10872.0</td><td>2500.0</td><td>NaN</td></tr><tr><td>29.0</td><td>236.74020</td><td>695.88480</td><td>568.2594</td><td>1447.5906</td><td>1398.78540</td><td>715.9404</td><td>NaN</td><td>54.0</td><td>56.0</td><td>80.0</td><td>…</td><td>180.0</td><td>106.0</td><td>NaN</td><td>2490.0</td><td>2000.0</td><td>3816.0</td><td>8220.0</td><td>10292.0</td><td>5950.0</td><td>NaN</td></tr><tr><td>30.0</td><td>125.53740</td><td>441.14160</td><td>733.6416</td><td>743.4468</td><td>578.32020</td><td>123.3774</td><td>NaN</td><td>14.0</td><td>54.0</td><td>76.0</td><td>…</td><td>90.0</td><td>28.0</td><td>NaN</td><td>210.0</td><td>2440.0</td><td>4370.0</td><td>6310.0</td><td>3440.0</td><td>1500.0</td><td>NaN</td></tr><tr><td>31.0</td><td>41.58600</td><td>314.92980</td><td>659.2626</td><td>1166.7606</td><td>315.53460</td><td>200.1708</td><td>NaN</td><td>12.0</td><td>36.0</td><td>68.0</td><td>…</td><td>12.0</td><td>16.0</td><td>NaN</td><td>200.0</td><td>1300.0</td><td>3500.0</td><td>8710.0</td><td>1050.0</td><td>1500.0</td><td>NaN</td></tr><tr><td>32.0</td><td>179.14380</td><td>315.54180</td><td>457.5174</td><td>541.8996</td><td>66.19740</td><td>NaN</td><td>NaN</td><td>40.0</td><td>56.0</td><td>68.0</td><td>…</td><td>10.0</td><td>NaN</td><td>NaN</td><td>1600.0</td><td>860.0</td><td>2300.0</td><td>6040.0</td><td>800.0</td><td>NaN</td><td>NaN</td></tr><tr><td>33.0</td><td>198.77880</td><td>153.34680</td><td>284.8218</td><td>116.7516</td><td>245.45166</td><td>NaN</td><td>NaN</td><td>32.0</td><td>12.0</td><td>42.0</td><td>…</td><td>60.0</td><td>NaN</td><td>NaN</td><td>1200.0</td><td>220.0</td><td>2065.0</td><td>1130.0</td><td>2050.0</td><td>NaN</td><td>NaN</td></tr><tr><td>34.0</td><td>49.11360</td><td>276.88260</td><td>268.4100</td><td>340.7124</td><td>174.54540</td><td>NaN</td><td>NaN</td><td>12.0</td><td>56.0</td><td>28.0</td><td>…</td><td>14.0</td><td>NaN</td><td>NaN</td><td>150.0</td><td>3380.0</td><td>1150.0</td><td>2400.0</td><td>2764.0</td><td>NaN</td><td>NaN</td></tr><tr><td>35.0</td><td>229.31280</td><td>54.04680</td><td>170.4930</td><td>634.7688</td><td>115.06440</td><td>NaN</td><td>NaN</td><td>54.0</td><td>8.0</td><td>26.0</td><td>…</td><td>12.0</td><td>NaN</td><td>NaN</td><td>1350.0</td><td>500.0</td><td>1950.0</td><td>3800.0</td><td>800.0</td><td>NaN</td><td>NaN</td></tr><tr><td>36.0</td><td>NaN</td><td>150.13140</td><td>333.6474</td><td>73.6980</td><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td><td>16.0</td><td>40.0</td><td>…</td><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td><td>500.0</td><td>1950.0</td><td>400.0</td><td>NaN</td><td>NaN</td><td>NaN</td></tr><tr><td>37.0</td><td>22.05960</td><td>49.89600</td><td>44.9682</td><td>NaN</td><td>451.13160</td><td>NaN</td><td>NaN</td><td>12.0</td><td>30.0</td><td>6.0</td><td>…</td><td>32.0</td><td>NaN</td><td>NaN</td><td>300.0</td><td>125.0</td><td>600.0</td><td>NaN</td><td>1800.0</td><td>NaN</td><td>NaN</td></tr><tr><td>38.0</td><td>71.59500</td><td>NaN</td><td>334.6878</td><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td><td>16.0</td><td>NaN</td><td>46.0</td><td>…</td><td>NaN</td><td>NaN</td><td>NaN</td><td>300.0</td><td>NaN</td><td>2280.0</td><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td></tr><tr><td>39.0</td><td>29.87640</td><td>NaN</td><td>53.7690</td><td>86.7246</td><td>NaN</td><td>NaN</td><td>NaN</td><td>10.0</td><td>NaN</td><td>12.0</td><td>…</td><td>NaN</td><td>NaN</td><td>NaN</td><td>500.0</td><td>NaN</td><td>450.0</td><td>500.0</td><td>NaN</td><td>NaN</td><td>NaN</td></tr><tr><td>40.0</td><td>38.55900</td><td>51.83580</td><td>107.4684</td><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td><td>12.0</td><td>14.0</td><td>26.0</td><td>…</td><td>NaN</td><td>NaN</td><td>NaN</td><td>150.0</td><td>500.0</td><td>1080.0</td><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td></tr><tr><td>41.0</td><td>NaN</td><td>108.45720</td><td>77.6472</td><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td><td>12.0</td><td>14.0</td><td>…</td><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td><td>450.0</td><td>800.0</td><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td></tr><tr><td>43.0</td><td>NaN</td><td>86.05860</td><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td><td>10.0</td><td>NaN</td><td>…</td><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td><td>730.0</td><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td></tr><tr><td>44.0</td><td>NaN</td><td>NaN</td><td>NaN</td><td>89.5266</td><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td><td>…</td><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td><td>500.0</td><td>NaN</td><td>NaN</td><td>NaN</td></tr></tbody></table><p>28 rows × 21 columns</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.pivot_table(df_data,</span><br><span class="line">               index=[<span class="string">'Age'</span>],</span><br><span class="line">               columns=[<span class="string">'LeagueIndex'</span>],</span><br><span class="line">               aggfunc=np.sum,</span><br><span class="line">               fill_value=<span class="number">-100.</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>APM</th><th>HoursPerWeek</th><th>TotalHours</th></tr></thead><tbody><tr><td>LeagueIndex</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>1</td><td>2</td><td>3</td><td>…</td><td>5</td><td>6</td><td>7</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td></tr><tr><td>Age</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>16.0</td><td>1062.44754</td><td>2919.70434</td><td>4851.9222</td><td>5149.7310</td><td>7787.37780</td><td>9042.1722</td><td>386.7774</td><td>324</td><td>720</td><td>778</td><td>…</td><td>1220</td><td>1280</td><td>56</td><td>4307</td><td>13143</td><td>29211</td><td>23581</td><td>49233</td><td>51320</td><td>3000</td></tr><tr><td>17.0</td><td>655.67280</td><td>1661.01540</td><td>4181.8920</td><td>5525.3586</td><td>10052.72100</td><td>8310.0858</td><td>573.8286</td><td>184</td><td>378</td><td>664</td><td>…</td><td>1460</td><td>1116</td><td>104</td><td>2044</td><td>7423</td><td>16602</td><td>24005</td><td>53375</td><td>45421</td><td>12700</td></tr><tr><td>18.0</td><td>704.47680</td><td>3300.41040</td><td>4847.2152</td><td>8763.0783</td><td>10988.66100</td><td>9134.7240</td><td>618.5790</td><td>204</td><td>548</td><td>886</td><td>…</td><td>1644</td><td>1194</td><td>164</td><td>3570</td><td>11471</td><td>21037</td><td>46034</td><td>1056486</td><td>50378</td><td>3200</td></tr><tr><td>19.0</td><td>734.55600</td><td>2216.81880</td><td>5183.7888</td><td>8030.1960</td><td>9271.09260</td><td>11955.6030</td><td>696.7770</td><td>126</td><td>458</td><td>950</td><td>…</td><td>962</td><td>1642</td><td>168</td><td>2355</td><td>8467</td><td>31861</td><td>39705</td><td>44697</td><td>70331</td><td>4166</td></tr><tr><td>20.0</td><td>1624.89660</td><td>2147.23200</td><td>4211.5686</td><td>10596.2070</td><td>10871.65440</td><td>14291.8692</td><td>-100.0000</td><td>328</td><td>288</td><td>654</td><td>…</td><td>1290</td><td>1816</td><td>-100</td><td>7212</td><td>6325</td><td>20174</td><td>55083</td><td>64170</td><td>105131</td><td>-100</td></tr><tr><td>21.0</td><td>780.67950</td><td>1578.02880</td><td>3949.3062</td><td>8689.8804</td><td>11954.91660</td><td>13165.7649</td><td>867.3474</td><td>162</td><td>270</td><td>580</td><td>…</td><td>1446</td><td>1858</td><td>62</td><td>3377</td><td>7673</td><td>19095</td><td>42296</td><td>68739</td><td>82061</td><td>3180</td></tr><tr><td>22.0</td><td>674.59860</td><td>2147.50980</td><td>4379.3424</td><td>7818.7302</td><td>10473.28380</td><td>10165.8672</td><td>493.1586</td><td>146</td><td>372</td><td>680</td><td>…</td><td>1304</td><td>1448</td><td>112</td><td>4225</td><td>10861</td><td>23030</td><td>57996</td><td>84330</td><td>67069</td><td>6950</td></tr><tr><td>23.0</td><td>359.65980</td><td>1575.06120</td><td>4602.7416</td><td>7616.9298</td><td>8292.86160</td><td>6131.1936</td><td>1799.6520</td><td>46</td><td>320</td><td>598</td><td>…</td><td>998</td><td>726</td><td>296</td><td>896</td><td>12350</td><td>23081</td><td>40025</td><td>56097</td><td>43176</td><td>14290</td></tr><tr><td>24.0</td><td>439.43040</td><td>1717.55340</td><td>2876.8572</td><td>5503.7736</td><td>7292.32740</td><td>7240.4076</td><td>428.6538</td><td>116</td><td>344</td><td>406</td><td>…</td><td>668</td><td>1048</td><td>36</td><td>2070</td><td>9543</td><td>25421</td><td>35384</td><td>36147</td><td>43114</td><td>2250</td></tr><tr><td>25.0</td><td>572.61420</td><td>1178.02440</td><td>2201.6388</td><td>4710.9924</td><td>6168.19260</td><td>2200.6362</td><td>361.4550</td><td>124</td><td>166</td><td>268</td><td>…</td><td>682</td><td>256</td><td>52</td><td>2440</td><td>5846</td><td>11270</td><td>26610</td><td>40681</td><td>14890</td><td>3300</td></tr><tr><td>26.0</td><td>418.70874</td><td>1165.96680</td><td>1794.1890</td><td>3139.2852</td><td>4016.67060</td><td>3301.8498</td><td>408.2202</td><td>96</td><td>148</td><td>272</td><td>…</td><td>418</td><td>354</td><td>60</td><td>1608</td><td>3417</td><td>10548</td><td>16839</td><td>20100</td><td>17663</td><td>2300</td></tr><tr><td>27.0</td><td>359.17320</td><td>1164.15960</td><td>1426.4550</td><td>2850.1320</td><td>3498.30300</td><td>2040.8454</td><td>-100.0000</td><td>40</td><td>152</td><td>226</td><td>…</td><td>340</td><td>164</td><td>-100</td><td>1100</td><td>3615</td><td>7525</td><td>15935</td><td>19770</td><td>11796</td><td>-100</td></tr><tr><td>28.0</td><td>333.84240</td><td>479.34000</td><td>1152.5958</td><td>2205.8778</td><td>1992.60540</td><td>521.7666</td><td>-100.0000</td><td>28</td><td>90</td><td>220</td><td>…</td><td>186</td><td>44</td><td>-100</td><td>466</td><td>1860</td><td>7901</td><td>15370</td><td>10872</td><td>2500</td><td>-100</td></tr><tr><td>29.0</td><td>236.74020</td><td>695.88480</td><td>568.2594</td><td>1447.5906</td><td>1398.78540</td><td>715.9404</td><td>-100.0000</td><td>54</td><td>56</td><td>80</td><td>…</td><td>180</td><td>106</td><td>-100</td><td>2490</td><td>2000</td><td>3816</td><td>8220</td><td>10292</td><td>5950</td><td>-100</td></tr><tr><td>30.0</td><td>125.53740</td><td>441.14160</td><td>733.6416</td><td>743.4468</td><td>578.32020</td><td>123.3774</td><td>-100.0000</td><td>14</td><td>54</td><td>76</td><td>…</td><td>90</td><td>28</td><td>-100</td><td>210</td><td>2440</td><td>4370</td><td>6310</td><td>3440</td><td>1500</td><td>-100</td></tr><tr><td>31.0</td><td>41.58600</td><td>314.92980</td><td>659.2626</td><td>1166.7606</td><td>315.53460</td><td>200.1708</td><td>-100.0000</td><td>12</td><td>36</td><td>68</td><td>…</td><td>12</td><td>16</td><td>-100</td><td>200</td><td>1300</td><td>3500</td><td>8710</td><td>1050</td><td>1500</td><td>-100</td></tr><tr><td>32.0</td><td>179.14380</td><td>315.54180</td><td>457.5174</td><td>541.8996</td><td>66.19740</td><td>-100.0000</td><td>-100.0000</td><td>40</td><td>56</td><td>68</td><td>…</td><td>10</td><td>-100</td><td>-100</td><td>1600</td><td>860</td><td>2300</td><td>6040</td><td>800</td><td>-100</td><td>-100</td></tr><tr><td>33.0</td><td>198.77880</td><td>153.34680</td><td>284.8218</td><td>116.7516</td><td>245.45166</td><td>-100.0000</td><td>-100.0000</td><td>32</td><td>12</td><td>42</td><td>…</td><td>60</td><td>-100</td><td>-100</td><td>1200</td><td>220</td><td>2065</td><td>1130</td><td>2050</td><td>-100</td><td>-100</td></tr><tr><td>34.0</td><td>49.11360</td><td>276.88260</td><td>268.4100</td><td>340.7124</td><td>174.54540</td><td>-100.0000</td><td>-100.0000</td><td>12</td><td>56</td><td>28</td><td>…</td><td>14</td><td>-100</td><td>-100</td><td>150</td><td>3380</td><td>1150</td><td>2400</td><td>2764</td><td>-100</td><td>-100</td></tr><tr><td>35.0</td><td>229.31280</td><td>54.04680</td><td>170.4930</td><td>634.7688</td><td>115.06440</td><td>-100.0000</td><td>-100.0000</td><td>54</td><td>8</td><td>26</td><td>…</td><td>12</td><td>-100</td><td>-100</td><td>1350</td><td>500</td><td>1950</td><td>3800</td><td>800</td><td>-100</td><td>-100</td></tr><tr><td>36.0</td><td>-100.00000</td><td>150.13140</td><td>333.6474</td><td>73.6980</td><td>-100.00000</td><td>-100.0000</td><td>-100.0000</td><td>-100</td><td>16</td><td>40</td><td>…</td><td>-100</td><td>-100</td><td>-100</td><td>-100</td><td>500</td><td>1950</td><td>400</td><td>-100</td><td>-100</td><td>-100</td></tr><tr><td>37.0</td><td>22.05960</td><td>49.89600</td><td>44.9682</td><td>-100.0000</td><td>451.13160</td><td>-100.0000</td><td>-100.0000</td><td>12</td><td>30</td><td>6</td><td>…</td><td>32</td><td>-100</td><td>-100</td><td>300</td><td>125</td><td>600</td><td>-100</td><td>1800</td><td>-100</td><td>-100</td></tr><tr><td>38.0</td><td>71.59500</td><td>-100.00000</td><td>334.6878</td><td>-100.0000</td><td>-100.00000</td><td>-100.0000</td><td>-100.0000</td><td>16</td><td>-100</td><td>46</td><td>…</td><td>-100</td><td>-100</td><td>-100</td><td>300</td><td>-100</td><td>2280</td><td>-100</td><td>-100</td><td>-100</td><td>-100</td></tr><tr><td>39.0</td><td>29.87640</td><td>-100.00000</td><td>53.7690</td><td>86.7246</td><td>-100.00000</td><td>-100.0000</td><td>-100.0000</td><td>10</td><td>-100</td><td>12</td><td>…</td><td>-100</td><td>-100</td><td>-100</td><td>500</td><td>-100</td><td>450</td><td>500</td><td>-100</td><td>-100</td><td>-100</td></tr><tr><td>40.0</td><td>38.55900</td><td>51.83580</td><td>107.4684</td><td>-100.0000</td><td>-100.00000</td><td>-100.0000</td><td>-100.0000</td><td>12</td><td>14</td><td>26</td><td>…</td><td>-100</td><td>-100</td><td>-100</td><td>150</td><td>500</td><td>1080</td><td>-100</td><td>-100</td><td>-100</td><td>-100</td></tr><tr><td>41.0</td><td>-100.00000</td><td>108.45720</td><td>77.6472</td><td>-100.0000</td><td>-100.00000</td><td>-100.0000</td><td>-100.0000</td><td>-100</td><td>12</td><td>14</td><td>…</td><td>-100</td><td>-100</td><td>-100</td><td>-100</td><td>450</td><td>800</td><td>-100</td><td>-100</td><td>-100</td><td>-100</td></tr><tr><td>43.0</td><td>-100.00000</td><td>86.05860</td><td>-100.0000</td><td>-100.0000</td><td>-100.00000</td><td>-100.0000</td><td>-100.0000</td><td>-100</td><td>10</td><td>-100</td><td>…</td><td>-100</td><td>-100</td><td>-100</td><td>-100</td><td>730</td><td>-100</td><td>-100</td><td>-100</td><td>-100</td><td>-100</td></tr><tr><td>44.0</td><td>-100.00000</td><td>-100.00000</td><td>-100.0000</td><td>89.5266</td><td>-100.00000</td><td>-100.0000</td><td>-100.0000</td><td>-100</td><td>-100</td><td>-100</td><td>…</td><td>-100</td><td>-100</td><td>-100</td><td>-100</td><td>-100</td><td>-100</td><td>500</td><td>-100</td><td>-100</td><td>-100</td></tr></tbody></table><p>28 rows × 21 columns</p><h3 id="交叉表"><a href="#交叉表" class="headerlink" title="交叉表"></a>交叉表</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.crosstab(df_data[<span class="string">'LeagueIndex'</span>],</span><br><span class="line">            df_data[<span class="string">'Age'</span>])</span><br></pre></td></tr></table></figure><table><thead><tr><th>Age</th><th>16.0</th><th>17.0</th><th>18.0</th><th>19.0</th><th>20.0</th><th>21.0</th><th>22.0</th><th>23.0</th><th>24.0</th><th>25.0</th><th>…</th><th>34.0</th><th>35.0</th><th>36.0</th><th>37.0</th><th>38.0</th><th>39.0</th><th>40.0</th><th>41.0</th><th>43.0</th><th>44.0</th></tr></thead><tbody><tr><td>LeagueIndex</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>1</td><td>18</td><td>9</td><td>13</td><td>12</td><td>22</td><td>12</td><td>12</td><td>6</td><td>9</td><td>11</td><td>…</td><td>1</td><td>5</td><td>0</td><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td><td>0</td><td>0</td></tr><tr><td>2</td><td>38</td><td>22</td><td>38</td><td>32</td><td>25</td><td>23</td><td>28</td><td>24</td><td>24</td><td>18</td><td>…</td><td>5</td><td>1</td><td>2</td><td>1</td><td>0</td><td>0</td><td>1</td><td>2</td><td>1</td><td>0</td></tr><tr><td>3</td><td>48</td><td>43</td><td>56</td><td>53</td><td>47</td><td>44</td><td>47</td><td>47</td><td>32</td><td>26</td><td>…</td><td>3</td><td>3</td><td>5</td><td>1</td><td>4</td><td>1</td><td>2</td><td>1</td><td>0</td><td>0</td></tr><tr><td>4</td><td>45</td><td>49</td><td>78</td><td>71</td><td>97</td><td>81</td><td>75</td><td>72</td><td>52</td><td>45</td><td>…</td><td>4</td><td>7</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>1</td></tr><tr><td>5</td><td>55</td><td>71</td><td>81</td><td>68</td><td>80</td><td>96</td><td>81</td><td>59</td><td>58</td><td>51</td><td>…</td><td>2</td><td>1</td><td>0</td><td>2</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>6</td><td>50</td><td>51</td><td>56</td><td>73</td><td>86</td><td>83</td><td>68</td><td>42</td><td>48</td><td>15</td><td>…</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>7</td><td>2</td><td>3</td><td>3</td><td>4</td><td>0</td><td>5</td><td>3</td><td>9</td><td>2</td><td>2</td><td>…</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr></tbody></table><p>7 rows × 28 columns</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.crosstab(df_data[<span class="string">'LeagueIndex'</span>],</span><br><span class="line">            [df_data[<span class="string">'Age'</span>], df_data[<span class="string">'HoursPerWeek'</span>]])</span><br></pre></td></tr></table></figure><table><thead><tr><th>Age</th><th>16.0</th><th>…</th><th>39.0</th><th>40.0</th><th>41.0</th><th>43.0</th><th>44.0</th></tr></thead><tbody><tr><td>HoursPerWeek</td><td>0.0</td><td>2.0</td><td>4.0</td><td>6.0</td><td>8.0</td><td>10.0</td><td>12.0</td><td>14.0</td><td>16.0</td><td>20.0</td><td>…</td><td>12.0</td><td>10.0</td><td>12.0</td><td>14.0</td><td>16.0</td><td>4.0</td><td>8.0</td><td>14.0</td><td>10.0</td><td>6.0</td></tr><tr><td>LeagueIndex</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>1</td><td>0</td><td>0</td><td>0</td><td>1</td><td>3</td><td>1</td><td>1</td><td>2</td><td>3</td><td>3</td><td>…</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>2</td><td>0</td><td>0</td><td>2</td><td>1</td><td>0</td><td>9</td><td>4</td><td>4</td><td>3</td><td>3</td><td>…</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td><td>1</td><td>0</td><td>1</td><td>0</td></tr><tr><td>3</td><td>0</td><td>0</td><td>1</td><td>6</td><td>7</td><td>6</td><td>6</td><td>7</td><td>2</td><td>1</td><td>…</td><td>1</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td></tr><tr><td>4</td><td>0</td><td>2</td><td>5</td><td>1</td><td>6</td><td>4</td><td>3</td><td>6</td><td>3</td><td>1</td><td>…</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td></tr><tr><td>5</td><td>0</td><td>1</td><td>2</td><td>1</td><td>3</td><td>8</td><td>3</td><td>6</td><td>3</td><td>6</td><td>…</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>6</td><td>1</td><td>1</td><td>4</td><td>2</td><td>1</td><td>1</td><td>4</td><td>3</td><td>1</td><td>7</td><td>…</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>7</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>…</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr></tbody></table><p>7 rows × 325 columns</p>]]></content>
      
      
      <categories>
          
          <category> DataAnalysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas-基本知识</title>
      <link href="blog/li8bkt/"/>
      <url>blog/li8bkt/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Pandas-数据结构"><a href="#一、Pandas-数据结构" class="headerlink" title="一、Pandas 数据结构"></a>一、Pandas 数据结构</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><h3 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h3><blockquote><ol><li>通过 list 构建 Series</li></ol></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser_obj = pd.Series(range(<span class="number">10</span>, <span class="number">20</span>,<span class="number">2</span>))</span><br><span class="line"><span class="keyword">print</span> (type(ser_obj))</span><br><span class="line">print(ser_obj)</span><br></pre></td></tr></table></figure><figure class="highlight ocaml"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">class</span> <span class="symbol">'pandas</span>.core.series.<span class="type">Series'</span>&gt;</span><br><span class="line"><span class="number">0</span>    <span class="number">10</span></span><br><span class="line"><span class="number">1</span>    <span class="number">12</span></span><br><span class="line"><span class="number">2</span>    <span class="number">14</span></span><br><span class="line"><span class="number">3</span>    <span class="number">16</span></span><br><span class="line"><span class="number">4</span>    <span class="number">18</span></span><br><span class="line">dtype: <span class="built_in">int64</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line"><span class="keyword">print</span> (ser_obj.values)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取索引</span></span><br><span class="line"><span class="keyword">print</span> (ser_obj.index)</span><br><span class="line"><span class="comment">#范围索引数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预览数据</span></span><br><span class="line"><span class="keyword">print</span> (ser_obj.head(<span class="number">3</span>))</span><br><span class="line"><span class="comment">#默认输出五行</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">[10</span> <span class="number">12</span> <span class="number">14</span> <span class="number">16</span> <span class="number">18</span><span class="string">]</span></span><br><span class="line"><span class="string">RangeIndex(start=0,</span> <span class="string">stop=5,</span> <span class="string">step=1)</span></span><br><span class="line"><span class="number">0</span>    <span class="number">10</span></span><br><span class="line"><span class="number">1</span>    <span class="number">12</span></span><br><span class="line"><span class="number">2</span>    <span class="number">14</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">int64</span></span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>通过 dict 构建 Series</li></ol></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">year_data = &#123;<span class="number">2001</span>: <span class="number">17.8</span>, <span class="number">2002</span>: <span class="number">20.1</span>, <span class="number">2003</span>: <span class="number">16.5</span>,<span class="number">2004</span>:<span class="number">324</span>,<span class="number">2423</span>:<span class="number">243</span>&#125;</span><br><span class="line">ser_obj2 = pd.Series(year_data)</span><br><span class="line"><span class="keyword">print</span> (ser_obj2.head(<span class="number">2</span>))</span><br><span class="line"><span class="keyword">print</span> (ser_obj2.index)</span><br><span class="line">print(ser_obj2)</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">2001</span>    <span class="number">17.8</span></span><br><span class="line"><span class="number">2002</span>    <span class="number">20.1</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">float64</span></span><br><span class="line"><span class="string">Int64Index([2001,</span> <span class="number">2002</span><span class="string">,</span> <span class="number">2003</span><span class="string">,</span> <span class="number">2004</span><span class="string">,</span> <span class="number">2423</span><span class="string">],</span> <span class="string">dtype='int64')</span></span><br><span class="line"><span class="number">2001</span>     <span class="number">17.8</span></span><br><span class="line"><span class="number">2002</span>     <span class="number">20.1</span></span><br><span class="line"><span class="number">2003</span>     <span class="number">16.5</span></span><br><span class="line"><span class="number">2004</span>    <span class="number">324.0</span></span><br><span class="line"><span class="number">2423</span>    <span class="number">243.0</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">float64</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># name属性【【【【【出问题了！！！】】】】】</span></span><br><span class="line">ser_obj2.name = <span class="string">'钱'</span></span><br><span class="line">ser_obj2.index.name = <span class="string">'year'</span></span><br><span class="line"><span class="keyword">print</span> (ser_obj2.head())</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">year</span></span><br><span class="line"><span class="number">2001</span>     <span class="number">17.8</span></span><br><span class="line"><span class="number">2002</span>     <span class="number">20.1</span></span><br><span class="line"><span class="number">2003</span>     <span class="number">16.5</span></span><br><span class="line"><span class="number">2004</span>    <span class="number">324.0</span></span><br><span class="line"><span class="number">2423</span>    <span class="number">243.0</span></span><br><span class="line"><span class="attr">Name:</span> <span class="string">钱,</span> <span class="attr">dtype:</span> <span class="string">float64</span></span><br></pre></td></tr></table></figure><h3 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h3><blockquote><ol><li>通过 ndarray 构建 DataFrame</li></ol></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.random.rand(<span class="number">5</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">print</span> (array)</span><br><span class="line"></span><br><span class="line">df_obj = pd.DataFrame(array,columns=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</span><br><span class="line"><span class="keyword">print</span> (df_obj.head())</span><br><span class="line">print(df_obj.sort_values(by=<span class="string">'a'</span>, ascending=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[[<span class="number">0.23496522</span> <span class="number">0.92258429</span> <span class="number">0.36447462</span> <span class="number">0.52634697</span>]</span><br><span class="line"> [<span class="number">0.73743514</span> <span class="number">0.88175941</span> <span class="number">0.48944212</span> <span class="number">0.4173522</span> ]</span><br><span class="line"> [<span class="number">0.21214568</span> <span class="number">0.57148666</span> <span class="number">0.59496072</span> <span class="number">0.49490723</span>]</span><br><span class="line"> [<span class="number">0.7458542</span>  <span class="number">0.74743907</span> <span class="number">0.70475157</span> <span class="number">0.28130394</span>]</span><br><span class="line"> [<span class="number">0.43805937</span> <span class="number">0.90300134</span> <span class="number">0.00730653</span> <span class="number">0.68203725</span>]]</span><br><span class="line">          a         b         c         d</span><br><span class="line"><span class="number">0</span>  <span class="number">0.234965</span>  <span class="number">0.922584</span>  <span class="number">0.364475</span>  <span class="number">0.526347</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0.737435</span>  <span class="number">0.881759</span>  <span class="number">0.489442</span>  <span class="number">0.417352</span></span><br><span class="line"><span class="number">2</span>  <span class="number">0.212146</span>  <span class="number">0.571487</span>  <span class="number">0.594961</span>  <span class="number">0.494907</span></span><br><span class="line"><span class="number">3</span>  <span class="number">0.745854</span>  <span class="number">0.747439</span>  <span class="number">0.704752</span>  <span class="number">0.281304</span></span><br><span class="line"><span class="number">4</span>  <span class="number">0.438059</span>  <span class="number">0.903001</span>  <span class="number">0.007307</span>  <span class="number">0.682037</span></span><br><span class="line">          a         b         c         d</span><br><span class="line"><span class="number">3</span>  <span class="number">0.745854</span>  <span class="number">0.747439</span>  <span class="number">0.704752</span>  <span class="number">0.281304</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0.737435</span>  <span class="number">0.881759</span>  <span class="number">0.489442</span>  <span class="number">0.417352</span></span><br><span class="line"><span class="number">4</span>  <span class="number">0.438059</span>  <span class="number">0.903001</span>  <span class="number">0.007307</span>  <span class="number">0.682037</span></span><br><span class="line"><span class="number">0</span>  <span class="number">0.234965</span>  <span class="number">0.922584</span>  <span class="number">0.364475</span>  <span class="number">0.526347</span></span><br><span class="line"><span class="number">2</span>  <span class="number">0.212146</span>  <span class="number">0.571487</span>  <span class="number">0.594961</span>  <span class="number">0.494907</span></span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>通过 dict 构建 DataFrame</li></ol></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#一个键值对就相当于一列！！但是具体到字典里面的值所用到的一些函数还是不能很清楚</span></span><br><span class="line">dict_data = &#123;<span class="string">'A'</span>: <span class="number">1.</span>,</span><br><span class="line">             <span class="string">'B'</span>: pd.Timestamp(<span class="string">'20161217'</span>),</span><br><span class="line">             <span class="string">'C'</span>: pd.Series(<span class="number">1</span>, index=list(range(<span class="number">4</span>)),dtype=<span class="string">'float32'</span>),</span><br><span class="line">             <span class="string">'D'</span>: np.array([<span class="number">3</span>] * <span class="number">4</span>,dtype=<span class="string">'int32'</span>),</span><br><span class="line">             <span class="string">'E'</span> : pd.Categorical([<span class="string">"Python"</span>,<span class="string">"Java"</span>,<span class="string">"C++"</span>,<span class="string">"C#"</span>]),</span><br><span class="line">             <span class="string">'F'</span> : <span class="string">'ChinaHadoop'</span> &#125;</span><br><span class="line">df_obj2 = pd.DataFrame(dict_data)</span><br><span class="line"><span class="keyword">print</span> (df_obj2.head())</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">     A          B    C  D       E            F</span><br><span class="line"><span class="number">0</span>  <span class="number">1.0</span> <span class="number">2016</span><span class="number">-12</span><span class="number">-17</span>  <span class="number">1.0</span>  <span class="number">3</span>  Python  ChinaHadoop</span><br><span class="line"><span class="number">1</span>  <span class="number">1.0</span> <span class="number">2016</span><span class="number">-12</span><span class="number">-17</span>  <span class="number">1.0</span>  <span class="number">3</span>    Java  ChinaHadoop</span><br><span class="line"><span class="number">2</span>  <span class="number">1.0</span> <span class="number">2016</span><span class="number">-12</span><span class="number">-17</span>  <span class="number">1.0</span>  <span class="number">3</span>     C++  ChinaHadoop</span><br><span class="line"><span class="number">3</span>  <span class="number">1.0</span> <span class="number">2016</span><span class="number">-12</span><span class="number">-17</span>  <span class="number">1.0</span>  <span class="number">3</span>      C#  ChinaHadoop</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 增加列</span></span><br><span class="line">df_obj2[<span class="string">'G'</span>] = df_obj2[<span class="string">'D'</span>] + <span class="number">4</span></span><br><span class="line"><span class="keyword">print</span> (df_obj2.head())</span><br><span class="line">xxx = pd.DataFrame(df_obj2,columns=[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>,<span class="string">'F'</span>,<span class="string">'G'</span>,<span class="string">'H'</span>],index=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">print(xxx)</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">     A          B    C  D       E            F  G</span><br><span class="line"><span class="number">0</span>  <span class="number">1.0</span> <span class="number">2016</span><span class="number">-12</span><span class="number">-17</span>  <span class="number">1.0</span>  <span class="number">3</span>  Python  ChinaHadoop  <span class="number">7</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1.0</span> <span class="number">2016</span><span class="number">-12</span><span class="number">-17</span>  <span class="number">1.0</span>  <span class="number">3</span>    Java  ChinaHadoop  <span class="number">7</span></span><br><span class="line"><span class="number">2</span>  <span class="number">1.0</span> <span class="number">2016</span><span class="number">-12</span><span class="number">-17</span>  <span class="number">1.0</span>  <span class="number">3</span>     C++  ChinaHadoop  <span class="number">7</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1.0</span> <span class="number">2016</span><span class="number">-12</span><span class="number">-17</span>  <span class="number">1.0</span>  <span class="number">3</span>      C#  ChinaHadoop  <span class="number">7</span></span><br><span class="line">     A          B    C    D       E            F    G   H</span><br><span class="line"><span class="number">0</span>  <span class="number">1.0</span> <span class="number">2016</span><span class="number">-12</span><span class="number">-17</span>  <span class="number">1.0</span>  <span class="number">3.0</span>  Python  ChinaHadoop  <span class="number">7.0</span> NaN</span><br><span class="line"><span class="number">1</span>  <span class="number">1.0</span> <span class="number">2016</span><span class="number">-12</span><span class="number">-17</span>  <span class="number">1.0</span>  <span class="number">3.0</span>    Java  ChinaHadoop  <span class="number">7.0</span> NaN</span><br><span class="line"><span class="number">2</span>  <span class="number">1.0</span> <span class="number">2016</span><span class="number">-12</span><span class="number">-17</span>  <span class="number">1.0</span>  <span class="number">3.0</span>     C++  ChinaHadoop  <span class="number">7.0</span> NaN</span><br><span class="line"><span class="number">3</span>  <span class="number">1.0</span> <span class="number">2016</span><span class="number">-12</span><span class="number">-17</span>  <span class="number">1.0</span>  <span class="number">3.0</span>      C#  ChinaHadoop  <span class="number">7.0</span> NaN</span><br><span class="line"><span class="number">4</span>  NaN        NaT  NaN  NaN     NaN          NaN  NaN NaN</span><br></pre></td></tr></table></figure><h3 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">print</span> (type(ser_obj.index))</span><br><span class="line"><span class="keyword">print</span> (type(df_obj2.index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (df_obj2.index)</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;class <span class="string">'pandas.core.indexes.range.RangeIndex'</span>&gt;</span><br><span class="line">&lt;class <span class="string">'pandas.core.indexes.numeric.Int64Index'</span>&gt;</span><br><span class="line"><span class="function"><span class="title">Int64Index</span><span class="params">([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=<span class="string">'int64'</span>)</span></span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 索引对象不可变</span></span><br><span class="line">df_obj2.index[<span class="number">0</span>] = <span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">---------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">TypeError                                 Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>)</span><br><span class="line"></span><br><span class="line">&lt;ipython-<span class="keyword">input</span><span class="number">-10</span><span class="number">-6367894e76</span>d8&gt; <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">      <span class="number">1</span> <span class="comment"># 索引对象不可变</span></span><br><span class="line"><span class="comment">----&gt; 2 df_obj2.index[0] = 2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~\Anaconda3\lib\site-packages\pandas\core\<span class="keyword">indexes</span>\base.py <span class="keyword">in</span> __setitem__(<span class="keyword">self</span>, <span class="keyword">key</span>, <span class="keyword">value</span>)</span><br><span class="line">   <span class="number">4258</span></span><br><span class="line">   <span class="number">4259</span>     <span class="keyword">def</span> __setitem__(<span class="keyword">self</span>, <span class="keyword">key</span>, <span class="keyword">value</span>):</span><br><span class="line">-&gt; <span class="number">4260</span>         <span class="keyword">raise</span> TypeError(<span class="string">"Index does not support mutable operations"</span>)</span><br><span class="line">   <span class="number">4261</span></span><br><span class="line">   <span class="number">4262</span>     <span class="keyword">def</span> __getitem__(<span class="keyword">self</span>, <span class="keyword">key</span>):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TypeError: <span class="keyword">Index</span> does <span class="keyword">not</span> support mutable <span class="keyword">operations</span></span><br></pre></td></tr></table></figure><h2 id="二、Pandas-数据操作"><a href="#二、Pandas-数据操作" class="headerlink" title="二、Pandas 数据操作"></a>二、Pandas 数据操作</h2><h3 id="常用函数总结"><a href="#常用函数总结" class="headerlink" title="常用函数总结"></a>常用函数总结</h3><blockquote><p>·shape   获取数据的尺寸</p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">获得<span class="selector-tag">df</span>的<span class="selector-tag">size</span>：<span class="selector-tag">df</span><span class="selector-class">.shape</span></span><br><span class="line">获得<span class="selector-tag">df</span>中的行数：<span class="selector-tag">df</span><span class="selector-class">.shape</span><span class="selector-attr">[0]</span></span><br><span class="line">获得<span class="selector-tag">df</span>中的列数： <span class="selector-tag">df</span><span class="selector-class">.shape</span><span class="selector-attr">[1]</span></span><br><span class="line">获得行索引信息：<span class="selector-tag">df</span><span class="selector-class">.index</span></span><br><span class="line">获得列索引信息：<span class="selector-tag">df</span><span class="selector-class">.colomns</span></span><br></pre></td></tr></table></figure><blockquote><p>·values   获得 df 中的值===中文没用</p></blockquote><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">df.values</span> === 以列表的形式展现出来，去除了索引===dataframe类型数据转换成array类型</span><br></pre></td></tr></table></figure><blockquote><p>·setindex 和 resetindex</p></blockquote><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">reset_index可以还原索引，从新变为默认的整型索引</span><br><span class="line">    DataFrame.reset_index(<span class="attribute">level</span>=None, <span class="attribute">drop</span>=<span class="literal">False</span>, <span class="attribute">inplace</span>=<span class="literal">False</span>, <span class="attribute">col_level</span>=0, <span class="attribute">col_fill</span>=”)</span><br><span class="line">    level控制了具体要还原的那个等级的索引</span><br><span class="line">    drop为<span class="literal">False</span>则索引列会被还原为普通列，否则会丢失</span><br><span class="line">set_index方法，设置单索引和复合索引抑或是添加索引。</span><br><span class="line">    DataFrame.set_index(keys, <span class="attribute">drop</span>=<span class="literal">True</span>, <span class="attribute">append</span>=<span class="literal">False</span>, <span class="attribute">inplace</span>=<span class="literal">False</span>, <span class="attribute">verify_integrity</span>=<span class="literal">False</span>)</span><br><span class="line">    append添加新索引，drop为<span class="literal">False</span>，inplace为<span class="literal">True</span>时，索引将会还原为列</span><br></pre></td></tr></table></figure><blockquote><p>·iterrows（）遍历 DataFrame 中的数据</p></blockquote><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">for <span class="built_in">index</span>,<span class="built_in">row</span> in df.iterrows()<span class="symbol">:</span></span><br></pre></td></tr></table></figure><blockquote><p>·split(sep,n,expand=false)</p></blockquote><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">sep表示用于分割的字符；n表格分割成多少列；expand表示是否展开为数据款，<span class="keyword">True</span>输出<span class="keyword">Series</span>，<span class="keyword">False</span>输出Dataframe。</span><br><span class="line">字段拆分：是指按照固定的字符，拆分已有字符串</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><h3 id="匿名函数应用"><a href="#匿名函数应用" class="headerlink" title="匿名函数应用"></a>匿名函数应用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Numpy ufunc 函数</span></span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">5</span>,<span class="number">4</span>) - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span> (df)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (np.abs(df))</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span>         <span class="number">3</span></span><br><span class="line"><span class="number">0</span>  <span class="number">0.624016</span> <span class="number">-2.695175</span> <span class="number">-1.211426</span> <span class="number">-0.386151</span></span><br><span class="line"><span class="number">1</span> <span class="number">-1.335385</span> <span class="number">-1.315232</span> <span class="number">-0.305902</span> <span class="number">-0.361348</span></span><br><span class="line"><span class="number">2</span> <span class="number">-0.349443</span> <span class="number">-2.032110</span>  <span class="number">0.075995</span> <span class="number">-0.966725</span></span><br><span class="line"><span class="number">3</span> <span class="number">-1.631192</span> <span class="number">-1.051390</span> <span class="number">-1.767981</span> <span class="number">-0.366663</span></span><br><span class="line"><span class="number">4</span> <span class="number">-0.786178</span> <span class="number">-0.335846</span> <span class="number">-0.797992</span> <span class="number">-0.931216</span></span><br><span class="line">          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span>         <span class="number">3</span></span><br><span class="line"><span class="number">0</span>  <span class="number">0.624016</span>  <span class="number">2.695175</span>  <span class="number">1.211426</span>  <span class="number">0.386151</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1.335385</span>  <span class="number">1.315232</span>  <span class="number">0.305902</span>  <span class="number">0.361348</span></span><br><span class="line"><span class="number">2</span>  <span class="number">0.349443</span>  <span class="number">2.032110</span>  <span class="number">0.075995</span>  <span class="number">0.966725</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1.631192</span>  <span class="number">1.051390</span>  <span class="number">1.767981</span>  <span class="number">0.366663</span></span><br><span class="line"><span class="number">4</span>  <span class="number">0.786178</span>  <span class="number">0.335846</span>  <span class="number">0.797992</span>  <span class="number">0.931216</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用apply应用行或列数据</span></span><br><span class="line">f = <span class="keyword">lambda</span> x : x.max()</span><br><span class="line"><span class="keyword">print</span> (df.apply(f))</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>    <span class="number">0.624016</span></span><br><span class="line"><span class="number">1</span>   <span class="number">-0.335846</span></span><br><span class="line"><span class="number">2</span>    <span class="number">0.075995</span></span><br><span class="line"><span class="number">3</span>   <span class="number">-0.361348</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">float64</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定轴方向</span></span><br><span class="line"><span class="keyword">print</span> (df.apply(f, axis=<span class="number">1</span>))</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>    <span class="number">0.624016</span></span><br><span class="line"><span class="number">1</span>   <span class="number">-0.305902</span></span><br><span class="line"><span class="number">2</span>    <span class="number">0.075995</span></span><br><span class="line"><span class="number">3</span>   <span class="number">-0.366663</span></span><br><span class="line"><span class="number">4</span>   <span class="number">-0.335846</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">float64</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用applymap应用到每个数据</span></span><br><span class="line">f2 = <span class="keyword">lambda</span> x : <span class="string">'%.2f'</span> % x</span><br><span class="line"><span class="keyword">print</span> (df.applymap(f2))</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">       <span class="number">0</span>      <span class="number">1</span>      <span class="number">2</span>      <span class="number">3</span></span><br><span class="line"><span class="number">0</span>   <span class="number">0.62</span>  <span class="number">-2.70</span>  <span class="number">-1.21</span>  <span class="number">-0.39</span></span><br><span class="line"><span class="number">1</span>  <span class="number">-1.34</span>  <span class="number">-1.32</span>  <span class="number">-0.31</span>  <span class="number">-0.36</span></span><br><span class="line"><span class="number">2</span>  <span class="number">-0.35</span>  <span class="number">-2.03</span>   <span class="number">0.08</span>  <span class="number">-0.97</span></span><br><span class="line"><span class="number">3</span>  <span class="number">-1.63</span>  <span class="number">-1.05</span>  <span class="number">-1.77</span>  <span class="number">-0.37</span></span><br><span class="line"><span class="number">4</span>  <span class="number">-0.79</span>  <span class="number">-0.34</span>  <span class="number">-0.80</span>  <span class="number">-0.93</span></span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s4 = pd.Series(range(<span class="number">10</span>, <span class="number">15</span>), index = np.random.randint(<span class="number">5</span>, size=<span class="number">5</span>))</span><br><span class="line"><span class="keyword">print</span> (s4)</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span>    <span class="number">10</span></span><br><span class="line"><span class="number">1</span>    <span class="number">11</span></span><br><span class="line"><span class="number">4</span>    <span class="number">12</span></span><br><span class="line"><span class="number">1</span>    <span class="number">13</span></span><br><span class="line"><span class="number">1</span>    <span class="number">14</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">int64</span></span><br></pre></td></tr></table></figure><blockquote><ol><li>索引排序</li></ol></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">s4.sort_index()</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>    <span class="number">11</span></span><br><span class="line"><span class="number">1</span>    <span class="number">13</span></span><br><span class="line"><span class="number">1</span>    <span class="number">14</span></span><br><span class="line"><span class="number">4</span>    <span class="number">10</span></span><br><span class="line"><span class="number">4</span>    <span class="number">12</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">int64</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df4 = pd.DataFrame(np.random.randn(<span class="number">3</span>, <span class="number">4</span>),</span><br><span class="line">                   index=np.random.randint(<span class="number">3</span>, size=<span class="number">3</span>),</span><br><span class="line">                   columns=np.random.randint(<span class="number">4</span>, size=<span class="number">4</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df4</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>2</th><th>1</th><th>3</th><th>1</th></tr></thead><tbody><tr><td>0</td><td>0.007031</td><td>1.261990</td><td>-1.647929</td><td>0.176549</td></tr><tr><td>1</td><td>-2.510698</td><td>-0.207659</td><td>0.628221</td><td>0.441352</td></tr><tr><td>0</td><td>-0.367051</td><td>1.536606</td><td>0.167158</td><td>-0.236129</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#df4.sort_index(ascending=False)</span></span><br><span class="line">df4.sort_index(axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>1</th><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td>0</td><td>1.261990</td><td>0.176549</td><td>0.007031</td><td>-1.647929</td></tr><tr><td>1</td><td>-0.207659</td><td>0.441352</td><td>-2.510698</td><td>0.628221</td></tr><tr><td>0</td><td>1.536606</td><td>-0.236129</td><td>-0.367051</td><td>0.167158</td></tr></tbody></table><blockquote><ol start="2"><li>按值排序</li></ol></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#df.sortvalues(by='a', ascending=False) === 通过a的值</span></span><br><span class="line"><span class="comment">#    作用是对选定的一列数值（'a'）数据从上往下从小到大进行排序（如果传值没成功===设置本体覆盖，传值覆盖）</span></span><br><span class="line">df4.sort_values(by=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">---------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">ValueError                                Traceback (most recent call last)</span><br><span class="line"></span><br><span class="line">&lt;ipython-input-<span class="number">22</span>-<span class="number">36</span>ffa8ddd07d&gt; in &lt;<span class="class"><span class="keyword">module</span>&gt;</span></span><br><span class="line">      <span class="number">2</span> <span class="comment">#df.sortvalues(by='a', ascending=False) === 通过a的值</span></span><br><span class="line">      <span class="number">3</span> <span class="comment">#    作用是对选定的一列数值（'a'）数据从上往下从小到大进行排序（如果传值没成功===设置本体覆盖，传值覆盖）</span></span><br><span class="line">----&gt; <span class="number">4</span> df4.sort_values(by=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~\Anaconda3\<span class="class"><span class="keyword">lib</span>\<span class="title">site</span>-<span class="title">packages</span>\<span class="title">pandas</span>\<span class="title">core</span>\<span class="title">frame</span>.<span class="title">py</span> <span class="title">in</span> <span class="title">sort_values</span>(<span class="title">self</span>, <span class="title">by</span>, <span class="title">axis</span>, <span class="title">ascending</span>, <span class="title">inplace</span>, <span class="title">kind</span>, <span class="title">na_position</span>)</span></span><br><span class="line">   <span class="number">4991</span></span><br><span class="line">   <span class="number">4992</span>             by = by[<span class="number">0</span>]</span><br><span class="line">-&gt; <span class="number">4993</span>             k = <span class="keyword">self</span>._get_label_or_level_values(by, axis=axis)</span><br><span class="line">   <span class="number">4994</span></span><br><span class="line">   <span class="number">4995</span>             <span class="keyword">if</span> isinstance(ascending, (tuple, list)):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~\Anaconda3\<span class="class"><span class="keyword">lib</span>\<span class="title">site</span>-<span class="title">packages</span>\<span class="title">pandas</span>\<span class="title">core</span>\<span class="title">generic</span>.<span class="title">py</span> <span class="title">in</span> <span class="title">_get_label_or_level_values</span>(<span class="title">self</span>, <span class="title">key</span>, <span class="title">axis</span>)</span></span><br><span class="line">   <span class="number">1795</span>                     key=key,</span><br><span class="line">   <span class="number">1796</span>                     label_axis_name=label_axis_name,</span><br><span class="line">-&gt; <span class="number">1797</span>                     multi_message=multi_message,</span><br><span class="line">   <span class="number">1798</span>                 )</span><br><span class="line">   <span class="number">1799</span>             )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="symbol">ValueError:</span> The column label <span class="string">'1'</span> is not unique.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DataAnalysis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>numpy-使用总结</title>
      <link href="blog/mk2z96/"/>
      <url>blog/mk2z96/</url>
      
        <content type="html"><![CDATA[<h2 id="一、NumPy"><a href="#一、NumPy" class="headerlink" title="一、NumPy"></a>一、NumPy</h2><h3 id="ndarray-理解多维数组"><a href="#ndarray-理解多维数组" class="headerlink" title="ndarray 理解多维数组"></a>ndarray 理解多维数组</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成指定维度的随机多维数据</span></span><br><span class="line"><span class="comment">#数学建模应该用不到</span></span><br><span class="line">data = np.random.rand(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">print</span> (data)</span><br><span class="line"><span class="keyword">print</span> (type(data))</span><br><span class="line"><span class="comment">#type是显示数据类型；shape显示维度；ndim维度个数;type另外的作用</span></span><br></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">[[<span class="number">0.46686682</span> <span class="number">0.68844304</span> <span class="number">0.76663872</span>]</span><br><span class="line"> [<span class="number">0.70747721</span> <span class="number">0.47887587</span> <span class="number">0.25943412</span>]]</span><br><span class="line">&lt;class 'numpy.ndarray'&gt;</span><br></pre></td></tr></table></figure><blockquote><p>ndim, shape 和 dtype 属性</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">print</span> (<span class="string">'维度个数'</span>, data.ndim)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'各维度大小: '</span>, data.shape)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'数据类型: '</span>, data.dtype)</span><br></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">维度个数 2</span><br><span class="line"><span class="section">各维度大小:  (2, 3)</span></span><br><span class="line"><span class="section">数据类型:  float64</span></span><br></pre></td></tr></table></figure><h3 id="创建-ndarray"><a href="#创建-ndarray" class="headerlink" title="创建 ndarray"></a>创建 ndarray</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''1. array创建'''</span></span><br><span class="line"><span class="comment"># list转换为 ndarray</span></span><br><span class="line">l = range(<span class="number">10</span>)</span><br><span class="line">data = np.array(l)</span><br><span class="line"><span class="keyword">print</span> (data)</span><br><span class="line"><span class="keyword">print</span> (data.shape)</span><br><span class="line"><span class="keyword">print</span> (data.ndim)</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line">(<span class="number">10</span>,)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 嵌套序列转换为ndarray</span></span><br><span class="line">l2 = [range(<span class="number">10</span>), range(<span class="number">10</span>)]</span><br><span class="line"><span class="comment">#就这样形成了一个数组</span></span><br><span class="line">data = np.array(l2)</span><br><span class="line"><span class="keyword">print</span> (data)</span><br><span class="line"><span class="keyword">print</span> (data.shape)</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]]</span><br><span class="line">(<span class="number">2</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''2. zeros;ones;empty创建'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># np.zeros</span></span><br><span class="line">zeros_arr = np.zeros((<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="comment">#注意元组，这里经常报错</span></span><br><span class="line"><span class="comment"># np.ones</span></span><br><span class="line">ones_arr = np.ones((<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># np.empty[不全为零，而且是随机的一些数字]</span></span><br><span class="line">empty_arr = np.empty((<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># np.empty 指定数据类型</span></span><br><span class="line">empty_int_arr = np.empty((<span class="number">3</span>, <span class="number">3</span>), int)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (zeros_arr)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'-------------'</span>)</span><br><span class="line"><span class="keyword">print</span> (ones_arr)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'-------------'</span>)</span><br><span class="line"><span class="keyword">print</span> (empty_arr)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'-------------'</span>)</span><br><span class="line"><span class="keyword">print</span> (empty_int_arr)</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[[<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]]</span><br><span class="line">-------------</span><br><span class="line">[[<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br><span class="line"> [<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]]</span><br><span class="line">-------------</span><br><span class="line">[[<span class="number">0.000e+000</span> <span class="number">0.000e+000</span> <span class="number">0.000e+000</span>]</span><br><span class="line"> [<span class="number">0.000e+000</span> <span class="number">0.000e+000</span> <span class="number">2.174e-321</span>]</span><br><span class="line"> [<span class="number">0.000e+000</span> <span class="number">0.000e+000</span> <span class="number">0.000e+000</span>]]</span><br><span class="line">-------------</span><br><span class="line">[[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># np.arange()</span></span><br><span class="line"><span class="comment">#创建一系列连续的数算是numpy里面类似python里面range的功能</span></span><br><span class="line"><span class="keyword">print</span> (np.arange(<span class="number">10</span>))</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br></pre></td></tr></table></figure><h2 id="二、操作-nddarray"><a href="#二、操作-nddarray" class="headerlink" title="二、操作 nddarray"></a>二、操作 nddarray</h2><h3 id="矢量化-vectorization"><a href="#矢量化-vectorization" class="headerlink" title="矢量化 (vectorization)"></a>矢量化 (vectorization)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 矢量与矢量运算</span></span><br><span class="line">arr = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">                [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"元素之间相乘："</span>)</span><br><span class="line"><span class="comment">#注意区分矩阵之间的运算。这里的矢量原酸相当于是广播式的运算</span></span><br><span class="line"><span class="keyword">print</span> (arr * arr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"矩阵相加："</span>)</span><br><span class="line"><span class="keyword">print</span> (arr + arr)</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">元素之间相乘：</span><br><span class="line">[[ <span class="number">1</span>  <span class="number">4</span>  <span class="number">9</span>]</span><br><span class="line"> [<span class="number">16</span> <span class="number">25</span> <span class="number">36</span>]]</span><br><span class="line">矩阵相加：</span><br><span class="line">[[ <span class="number">2</span>  <span class="number">4</span>  <span class="number">6</span>]</span><br><span class="line"> [ <span class="number">8</span> <span class="number">10</span> <span class="number">12</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 矢量与标量运算</span></span><br><span class="line"><span class="keyword">print</span> (<span class="number">1.</span> / arr)</span><br><span class="line"><span class="keyword">print</span> (<span class="number">2.</span> * arr)</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[[<span class="number">1.</span>         <span class="number">0.5</span>        <span class="number">0.33333333</span>]</span><br><span class="line"> [<span class="number">0.25</span>       <span class="number">0.2</span>        <span class="number">0.16666667</span>]]</span><br><span class="line">[[ <span class="number">2.</span>  <span class="number">4.</span>  <span class="number">6.</span>]</span><br><span class="line"> [ <span class="number">8.</span> <span class="number">10.</span> <span class="number">12.</span>]]</span><br></pre></td></tr></table></figure><h3 id="索引与切片"><a href="#索引与切片" class="headerlink" title="索引与切片"></a>索引与切片</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一维数组</span></span><br><span class="line">arr1 = np.arange(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">print</span> (arr1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (arr1[<span class="number">2</span>:<span class="number">5</span>])</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line">[<span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多维数组</span></span><br><span class="line">arr2 = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="comment">#要学会定义多维数组，arange是形成12个随机数，之后的reshape是形成维数</span></span><br><span class="line"><span class="comment">#多维数组的空间含义就是比如：3.4.5=长4宽5高3</span></span><br><span class="line"><span class="comment">#还有点数就是应用函数</span></span><br><span class="line"><span class="keyword">print</span> (arr2)</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">print</span> (arr2[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (arr2[<span class="number">0</span>:<span class="number">2</span>, <span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (arr2[:, <span class="number">1</span>:<span class="number">3</span>])</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[<span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span>]</span><br><span class="line">[[<span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">6</span> <span class="number">7</span>]]</span><br><span class="line">[[ <span class="number">1</span>  <span class="number">2</span>]</span><br><span class="line"> [ <span class="number">5</span>  <span class="number">6</span>]</span><br><span class="line"> [ <span class="number">9</span> <span class="number">10</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 条件索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出 data_arr 中 2015年后的数据</span></span><br><span class="line">data_arr = np.random.rand(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line"><span class="keyword">print</span> (data_arr)</span><br><span class="line"></span><br><span class="line">year_arr = np.array([[<span class="number">2000</span>, <span class="number">2001</span>, <span class="number">2000</span>],</span><br><span class="line">                     [<span class="number">2005</span>, <span class="number">2002</span>, <span class="number">2009</span>],</span><br><span class="line">                     [<span class="number">2001</span>, <span class="number">2003</span>, <span class="number">2010</span>]])</span><br><span class="line"></span><br><span class="line">is_year_after_2005 = year_arr &gt;= <span class="number">2005</span></span><br><span class="line"><span class="comment">#:他会扩展成同类型的数组</span></span><br><span class="line"><span class="keyword">print</span> (is_year_after_2005, is_year_after_2005.dtype)</span><br><span class="line"></span><br><span class="line">filtered_arr = data_arr[is_year_after_2005]</span><br><span class="line"></span><br><span class="line">filtered_arr = data_arr[year_arr &gt;= <span class="number">2005</span>]</span><br><span class="line"><span class="keyword">print</span> (filtered_arr)</span><br><span class="line"><span class="comment">#中间的一些语句可以删除</span></span><br><span class="line"><span class="comment">#最后生成得是一维数组，进行数据过滤的时候很有用</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">[[0.61482194</span> <span class="number">0.0249229</span>  <span class="number">0.28525661</span><span class="string">]</span></span><br><span class="line"> <span class="string">[0.05121173</span> <span class="number">0.37672803</span> <span class="number">0.86259463</span><span class="string">]</span></span><br><span class="line"> <span class="string">[0.22648329</span> <span class="number">0.4581513</span>  <span class="number">0.18620441</span><span class="string">]]</span></span><br><span class="line"><span class="string">[[False</span> <span class="literal">False</span> <span class="literal">False</span><span class="string">]</span></span><br><span class="line"> <span class="string">[</span> <span class="literal">True</span> <span class="literal">False</span>  <span class="literal">True</span><span class="string">]</span></span><br><span class="line"> <span class="string">[False</span> <span class="literal">False</span>  <span class="literal">True</span><span class="string">]]</span> <span class="string">bool</span></span><br><span class="line"><span class="string">[0.05121173</span> <span class="number">0.86259463</span> <span class="number">0.18620441</span><span class="string">]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多个条件&amp; |</span></span><br><span class="line">filtered_arr = data_arr[(year_arr &lt;= <span class="number">2005</span>) &amp; (year_arr % <span class="number">2</span> == <span class="number">0</span>)]</span><br><span class="line"><span class="keyword">print</span> (filtered_arr)</span><br></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">[<span class="number">0.61482194</span> <span class="number">0.28525661</span> <span class="number">0.37672803</span>]</span><br></pre></td></tr></table></figure><h3 id="转置-transpose"><a href="#转置-transpose" class="headerlink" title="转置 === transpose"></a>转置 === transpose</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.random.rand(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="keyword">print</span> (arr)</span><br><span class="line"><span class="keyword">print</span> (arr.transpose())</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[[<span class="number">0.01538974</span> <span class="number">0.47573964</span> <span class="number">0.90684253</span>]</span><br><span class="line"> [<span class="number">0.93683601</span> <span class="number">0.64306611</span> <span class="number">0.63846634</span>]]</span><br><span class="line">[[<span class="number">0.01538974</span> <span class="number">0.93683601</span>]</span><br><span class="line"> [<span class="number">0.47573964</span> <span class="number">0.64306611</span>]</span><br><span class="line"> [<span class="number">0.90684253</span> <span class="number">0.63846634</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#高维数组的转换(图像里面会用得到转换维度)</span></span><br><span class="line"></span><br><span class="line">arr3d = np.random.rand(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">print</span> (arr3d)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'----------------------'</span>)</span><br><span class="line"><span class="keyword">print</span> (arr3d.transpose((<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>))) <span class="comment"># 多维数组的转置和定义不会</span></span><br></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">[[[<span class="number">0.18074837</span> <span class="number">0.64652003</span> <span class="number">0.80527972</span> <span class="number">0.67800268</span>]</span><br><span class="line">  [<span class="number">0.95766577</span> <span class="number">0.2498768</span>  <span class="number">0.00304503</span> <span class="number">0.7058178</span> ]</span><br><span class="line">  [<span class="number">0.12523549</span> <span class="number">0.18796252</span> <span class="number">0.72463798</span> <span class="number">0.15352211</span>]]</span><br><span class="line"></span><br><span class="line"> [[<span class="number">0.38808013</span> <span class="number">0.31075033</span> <span class="number">0.53082474</span> <span class="number">0.32254431</span>]</span><br><span class="line">  [<span class="number">0.6861262</span>  <span class="number">0.02999367</span> <span class="number">0.70980993</span> <span class="number">0.09099878</span>]</span><br><span class="line">  [<span class="number">0.14987301</span> <span class="number">0.78237398</span> <span class="number">0.90159408</span> <span class="number">0.82897071</span>]]]</span><br><span class="line">----------------------</span><br><span class="line">[[[<span class="number">0.18074837</span> <span class="number">0.64652003</span> <span class="number">0.80527972</span> <span class="number">0.67800268</span>]</span><br><span class="line">  [<span class="number">0.38808013</span> <span class="number">0.31075033</span> <span class="number">0.53082474</span> <span class="number">0.32254431</span>]]</span><br><span class="line"></span><br><span class="line"> [[<span class="number">0.95766577</span> <span class="number">0.2498768</span>  <span class="number">0.00304503</span> <span class="number">0.7058178</span> ]</span><br><span class="line">  [<span class="number">0.6861262</span>  <span class="number">0.02999367</span> <span class="number">0.70980993</span> <span class="number">0.09099878</span>]]</span><br><span class="line"></span><br><span class="line"> [[<span class="number">0.12523549</span> <span class="number">0.18796252</span> <span class="number">0.72463798</span> <span class="number">0.15352211</span>]</span><br><span class="line">  [<span class="number">0.14987301</span> <span class="number">0.78237398</span> <span class="number">0.90159408</span> <span class="number">0.82897071</span>]]]</span><br></pre></td></tr></table></figure><h3 id="ndarray-数据类型转化-astype"><a href="#ndarray-数据类型转化-astype" class="headerlink" title="ndarray 数据类型转化 === astype"></a>ndarray 数据类型转化 === astype</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">zeros_float_arr = np.zeros((<span class="number">3</span>, <span class="number">4</span>), dtype=np.float64)</span><br><span class="line"><span class="keyword">print</span> (zeros_float_arr)</span><br><span class="line"><span class="keyword">print</span> (zeros_float_arr.dtype)</span><br><span class="line"></span><br><span class="line"><span class="comment"># astype转换数据类型</span></span><br><span class="line">zeros_int_arr = zeros_float_arr.astype(np.int32)</span><br><span class="line"><span class="keyword">print</span> (zeros_int_arr)</span><br><span class="line"><span class="keyword">print</span> (zeros_int_arr.dtype)</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[[<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]]</span><br><span class="line">float64</span><br><span class="line">[[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]]</span><br><span class="line">int32</span><br></pre></td></tr></table></figure><h3 id="文本文件的读取"><a href="#文本文件的读取" class="headerlink" title="文本文件的读取"></a>文本文件的读取</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># loadtxt</span></span><br><span class="line">filename = <span class="string">'./presidential_polls.csv'</span></span><br><span class="line">data_array = np.loadtxt(filename,      <span class="comment"># 文件名</span></span><br><span class="line">                        delimiter=<span class="string">','</span>, <span class="comment"># 指定里面的元素分隔符</span></span><br><span class="line">                        dtype=str,     <span class="comment"># 指定数据类型</span></span><br><span class="line">                        usecols=(<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>)) <span class="comment"># 指定读取的列索引号</span></span><br><span class="line"><span class="keyword">print</span> (data_array, data_array.shape)</span><br></pre></td></tr></table></figure><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">[[<span class="symbol">'cycle</span>' <span class="symbol">'type</span>' <span class="symbol">'matchup</span>']</span><br><span class="line"> [<span class="symbol">'2016</span>' '<span class="string">"polls-plus"</span>' '<span class="string">"Clinton vs. Trump vs. Johnson"</span>']</span><br><span class="line"> [<span class="symbol">'2016</span>' '<span class="string">"polls-plus"</span>' '<span class="string">"Clinton vs. Trump vs. Johnson"</span>']</span><br><span class="line"> ...</span><br><span class="line"> [<span class="symbol">'2016</span>' '<span class="string">"polls-only"</span>' '<span class="string">"Clinton vs. Trump vs. Johnson"</span>']</span><br><span class="line"> [<span class="symbol">'2016</span>' '<span class="string">"polls-only"</span>' '<span class="string">"Clinton vs. Trump vs. Johnson"</span>']</span><br><span class="line"> [<span class="symbol">'2016</span>' '<span class="string">"polls-only"</span>' '<span class="string">"Clinton vs. Trump vs. Johnson"</span>']] (<span class="name">10237</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># loadtxt, 明确指定每列数据的类型</span></span><br><span class="line">filename = <span class="string">'./presidential_polls.csv'</span></span><br><span class="line">data_array = np.loadtxt(filename,      <span class="comment"># 文件名</span></span><br><span class="line">                        delimiter=<span class="string">','</span>, <span class="comment"># 分隔符</span></span><br><span class="line">                        skiprows=<span class="number">1</span>,</span><br><span class="line">                        dtype=&#123;<span class="string">'names'</span>:(<span class="string">'cycle'</span>, <span class="string">'type'</span>, <span class="string">'matchup'</span>),</span><br><span class="line">                               <span class="string">'formats'</span>:(<span class="string">'i4'</span>, <span class="string">'S15'</span>, <span class="string">'S50'</span>)&#125;,     <span class="comment"># 数据类型</span></span><br><span class="line">                        usecols=(<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>)) <span class="comment"># 指定读取的列索引号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (data_array, data_array.shape) <span class="comment"># 读取的结果是一维的数组，每个元素是一个元组</span></span><br></pre></td></tr></table></figure><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">[(<span class="name">2016</span>, b'<span class="string">"polls-plus"</span>', b'<span class="string">"Clinton vs. Trump vs. Johnson"</span>')</span><br><span class="line"> (<span class="name">2016</span>, b'<span class="string">"polls-plus"</span>', b'<span class="string">"Clinton vs. Trump vs. Johnson"</span>')</span><br><span class="line"> (<span class="name">2016</span>, b'<span class="string">"polls-plus"</span>', b'<span class="string">"Clinton vs. Trump vs. Johnson"</span>') ...</span><br><span class="line"> (<span class="name">2016</span>, b'<span class="string">"polls-only"</span>', b'<span class="string">"Clinton vs. Trump vs. Johnson"</span>')</span><br><span class="line"> (<span class="name">2016</span>, b'<span class="string">"polls-only"</span>', b'<span class="string">"Clinton vs. Trump vs. Johnson"</span>')</span><br><span class="line"> (<span class="name">2016</span>, b'<span class="string">"polls-only"</span>', b'<span class="string">"Clinton vs. Trump vs. Johnson"</span>')] (<span class="name">10236</span>,)</span><br></pre></td></tr></table></figure><h2 id="三、np-的常用函数"><a href="#三、np-的常用函数" class="headerlink" title="三、np 的常用函数"></a>三、np 的常用函数</h2><h3 id="转置-transpose-1"><a href="#转置-transpose-1" class="headerlink" title="转置 transpose"></a>转置 transpose</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.random.rand(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="keyword">print</span> (arr)</span><br><span class="line"><span class="keyword">print</span> (arr.transpose())</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[[<span class="number">0.78485041</span> <span class="number">0.88817969</span> <span class="number">0.34809014</span>]</span><br><span class="line"> [<span class="number">0.32744286</span> <span class="number">0.97539301</span> <span class="number">0.94401872</span>]]</span><br><span class="line">[[<span class="number">0.78485041</span> <span class="number">0.32744286</span>]</span><br><span class="line"> [<span class="number">0.88817969</span> <span class="number">0.97539301</span>]</span><br><span class="line"> [<span class="number">0.34809014</span> <span class="number">0.94401872</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#高维数组的转换(图像里面会用得到转换维度)</span></span><br><span class="line"><span class="comment">#不懂这里！！！</span></span><br><span class="line">arr3d = np.random.rand(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">print</span> (arr3d)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'----------------------'</span>)</span><br><span class="line"><span class="keyword">print</span> (arr3d.transpose((<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>))) <span class="comment"># 多维数组的转置和定义不会</span></span><br></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">[[[<span class="number">0.28492549</span> <span class="number">0.60197236</span> <span class="number">0.45582367</span> <span class="number">0.21992479</span>]</span><br><span class="line">  [<span class="number">0.1747163</span>  <span class="number">0.69201365</span> <span class="number">0.85460359</span> <span class="number">0.65311699</span>]</span><br><span class="line">  [<span class="number">0.62189644</span> <span class="number">0.25217555</span> <span class="number">0.16347156</span> <span class="number">0.29831219</span>]]</span><br><span class="line"></span><br><span class="line"> [[<span class="number">0.42826733</span> <span class="number">0.81396165</span> <span class="number">0.187138</span>   <span class="number">0.560564</span>  ]</span><br><span class="line">  [<span class="number">0.10162186</span> <span class="number">0.66419751</span> <span class="number">0.03261665</span> <span class="number">0.06969256</span>]</span><br><span class="line">  [<span class="number">0.55461652</span> <span class="number">0.55020586</span> <span class="number">0.50693591</span> <span class="number">0.31741807</span>]]]</span><br><span class="line">----------------------</span><br><span class="line">[[[<span class="number">0.28492549</span> <span class="number">0.60197236</span> <span class="number">0.45582367</span> <span class="number">0.21992479</span>]</span><br><span class="line">  [<span class="number">0.42826733</span> <span class="number">0.81396165</span> <span class="number">0.187138</span>   <span class="number">0.560564</span>  ]]</span><br><span class="line"></span><br><span class="line"> [[<span class="number">0.1747163</span>  <span class="number">0.69201365</span> <span class="number">0.85460359</span> <span class="number">0.65311699</span>]</span><br><span class="line">  [<span class="number">0.10162186</span> <span class="number">0.66419751</span> <span class="number">0.03261665</span> <span class="number">0.06969256</span>]]</span><br><span class="line"></span><br><span class="line"> [[<span class="number">0.62189644</span> <span class="number">0.25217555</span> <span class="number">0.16347156</span> <span class="number">0.29831219</span>]</span><br><span class="line">  [<span class="number">0.55461652</span> <span class="number">0.55020586</span> <span class="number">0.50693591</span> <span class="number">0.31741807</span>]]]</span><br></pre></td></tr></table></figure><h3 id="ceil-和-floor-和-rint-和-isnan"><a href="#ceil-和-floor-和-rint-和-isnan" class="headerlink" title="ceil 和 floor 和 rint 和 isnan"></a>ceil 和 floor 和 rint 和 isnan</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.random.randn(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (arr)</span><br><span class="line"><span class="keyword">print</span> (np.ceil(arr))</span><br><span class="line"><span class="comment">#向上最接近的整数</span></span><br><span class="line"><span class="keyword">print</span> (np.floor(arr))</span><br><span class="line"><span class="comment">#向下最接近的整数</span></span><br><span class="line"><span class="keyword">print</span> (np.rint(arr))</span><br><span class="line"><span class="comment">#四舍五入</span></span><br><span class="line"><span class="keyword">print</span> (np.isnan(arr))</span><br><span class="line"><span class="comment">#判断元素是否为NaN</span></span><br><span class="line"><span class="comment">#笔记上还有其他的函数</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">[[</span> <span class="number">0.262106</span>   <span class="number">-1.33680008</span> <span class="number">-1.08562543</span><span class="string">]</span></span><br><span class="line"> <span class="string">[</span> <span class="number">0.3990978</span>   <span class="number">0.1410074</span>   <span class="number">0.64278274</span><span class="string">]]</span></span><br><span class="line"><span class="string">[[</span> <span class="number">1</span><span class="string">.</span> <span class="number">-1</span><span class="string">.</span> <span class="number">-1</span><span class="string">.]</span></span><br><span class="line"> <span class="string">[</span> <span class="number">1</span><span class="string">.</span>  <span class="number">1</span><span class="string">.</span>  <span class="number">1</span><span class="string">.]]</span></span><br><span class="line"><span class="string">[[</span> <span class="number">0</span><span class="string">.</span> <span class="number">-2</span><span class="string">.</span> <span class="number">-2</span><span class="string">.]</span></span><br><span class="line"> <span class="string">[</span> <span class="number">0</span><span class="string">.</span>  <span class="number">0</span><span class="string">.</span>  <span class="number">0</span><span class="string">.]]</span></span><br><span class="line"><span class="string">[[</span> <span class="number">0</span><span class="string">.</span> <span class="number">-1</span><span class="string">.</span> <span class="number">-1</span><span class="string">.]</span></span><br><span class="line"> <span class="string">[</span> <span class="number">0</span><span class="string">.</span>  <span class="number">0</span><span class="string">.</span>  <span class="number">1</span><span class="string">.]]</span></span><br><span class="line"><span class="string">[[False</span> <span class="literal">False</span> <span class="literal">False</span><span class="string">]</span></span><br><span class="line"> <span class="string">[False</span> <span class="literal">False</span> <span class="literal">False</span><span class="string">]]</span></span><br></pre></td></tr></table></figure><h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.random.randn(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">print</span> (arr)</span><br><span class="line"></span><br><span class="line">np.where(arr &gt; <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>)</span><br><span class="line"><span class="comment">#（条件，满足输出，不满足输出）</span></span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[[ <span class="number">2.04688394</span>  <span class="number">0.48063737</span>  <span class="number">1.20876913</span> <span class="number">-0.93412937</span>]</span><br><span class="line"> [<span class="number">-0.43427472</span> <span class="number">-1.47755481</span>  <span class="number">0.36882256</span> <span class="number">-0.08943138</span>]</span><br><span class="line"> [<span class="number">-0.2847686</span>   <span class="number">0.96915893</span>  <span class="number">0.32641235</span>  <span class="number">0.28346922</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">array([[ <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>, <span class="number">-1</span>],</span><br><span class="line">       [<span class="number">-1</span>, <span class="number">-1</span>,  <span class="number">1</span>, <span class="number">-1</span>],</span><br><span class="line">       [<span class="number">-1</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">1</span>]])</span><br></pre></td></tr></table></figure><h3 id="sum"><a href="#sum" class="headerlink" title="sum"></a>sum</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.arange(<span class="number">10</span>).reshape(<span class="number">5</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span> (arr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (np.sum(arr))</span><br><span class="line"><span class="keyword">print</span> (np.sum(arr, axis=<span class="number">0</span>))</span><br><span class="line"><span class="keyword">print</span> (np.sum(arr, axis=<span class="number">1</span>))</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[[<span class="number">0</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span>]</span><br><span class="line"> [<span class="number">6</span> <span class="number">7</span>]</span><br><span class="line"> [<span class="number">8</span> <span class="number">9</span>]]</span><br><span class="line"><span class="number">45</span></span><br><span class="line">[<span class="number">20</span> <span class="number">25</span>]</span><br><span class="line">[ <span class="number">1</span>  <span class="number">5</span>  <span class="number">9</span> <span class="number">13</span> <span class="number">17</span>]</span><br></pre></td></tr></table></figure><h3 id="all-和-any"><a href="#all-和-any" class="headerlink" title="all 和 any"></a>all 和 any</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">arr = np.random.randn(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="keyword">print</span> (arr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (np.any(arr &gt; <span class="number">0</span>))</span><br><span class="line"><span class="comment">#有一个就对</span></span><br><span class="line"><span class="keyword">print</span> (np.all(arr &gt; <span class="number">0</span>))</span><br><span class="line"><span class="comment">#全部对才对</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">·用处就是判断一组数据当中，是否===有点类似布尔类型的</span></span><br><span class="line"><span class="string">·这个也可以应用在pandas中的DataFrame中</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">[[-1.020184</span>   <span class="number">-0.48466272</span> <span class="number">-0.8496271</span> <span class="string">]</span></span><br><span class="line"> <span class="string">[</span> <span class="number">0.88815825</span> <span class="number">-0.81911857</span>  <span class="number">0.64570539</span><span class="string">]]</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'\n·用处就是判断一组数据当中，是否===有点类似布尔类型的\n·这个也可以应用在pandas中的DataFrame中\n'</span></span><br></pre></td></tr></table></figure><h3 id="unique"><a href="#unique" class="headerlink" title="unique"></a>unique</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"><span class="keyword">print</span> (arr)</span><br><span class="line"><span class="keyword">print</span> (np.unique(arr))</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]]</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DataAnalysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data-清洗和规整</title>
      <link href="blog/gvi1hn/"/>
      <url>blog/gvi1hn/</url>
      
        <content type="html"><![CDATA[<h2 id="一、删除指定行列数据"><a href="#一、删除指定行列数据" class="headerlink" title="一、删除指定行列数据"></a>一、删除指定行列数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict_data = &#123;<span class="string">'A'</span>: <span class="number">1.</span>,</span><br><span class="line">             <span class="string">'B'</span>: pd.Timestamp(<span class="string">'20161217'</span>),</span><br><span class="line">             <span class="string">'C'</span>: pd.Series(<span class="number">1</span>, index=list(range(<span class="number">4</span>)),dtype=<span class="string">'float32'</span>),</span><br><span class="line">             <span class="string">'D'</span>: np.array([<span class="number">3</span>] * <span class="number">4</span>,dtype=<span class="string">'int32'</span>),</span><br><span class="line">             <span class="string">'E'</span> : pd.Categorical([<span class="string">"Python"</span>,<span class="string">"Java"</span>,<span class="string">"C++"</span>,<span class="string">"C#"</span>]),</span><br><span class="line">             <span class="string">'F'</span> : <span class="string">'ChinaHadoop'</span> &#125;</span><br><span class="line">df_obj2 = pd.DataFrame(dict_data)</span><br><span class="line">print(df_obj2)</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">     A          B    C  D       E            F</span><br><span class="line"><span class="number">0</span>  <span class="number">1.0</span> <span class="number">2016</span><span class="number">-12</span><span class="number">-17</span>  <span class="number">1.0</span>  <span class="number">3</span>  Python  ChinaHadoop</span><br><span class="line"><span class="number">1</span>  <span class="number">1.0</span> <span class="number">2016</span><span class="number">-12</span><span class="number">-17</span>  <span class="number">1.0</span>  <span class="number">3</span>    Java  ChinaHadoop</span><br><span class="line"><span class="number">2</span>  <span class="number">1.0</span> <span class="number">2016</span><span class="number">-12</span><span class="number">-17</span>  <span class="number">1.0</span>  <span class="number">3</span>     C++  ChinaHadoop</span><br><span class="line"><span class="number">3</span>  <span class="number">1.0</span> <span class="number">2016</span><span class="number">-12</span><span class="number">-17</span>  <span class="number">1.0</span>  <span class="number">3</span>      C#  ChinaHadoop</span><br></pre></td></tr></table></figure><h3 id="del"><a href="#del" class="headerlink" title="del"></a>del</h3><blockquote><p>删除列</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> df_obj2[<span class="string">'A'</span>]</span><br><span class="line"><span class="keyword">print</span> (df_obj2.head())</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">           B    C  D       E            F</span><br><span class="line"><span class="number">0</span> <span class="number">2016</span><span class="number">-12</span><span class="number">-17</span>  <span class="number">1.0</span>  <span class="number">3</span>  Python  ChinaHadoop</span><br><span class="line"><span class="number">1</span> <span class="number">2016</span><span class="number">-12</span><span class="number">-17</span>  <span class="number">1.0</span>  <span class="number">3</span>    Java  ChinaHadoop</span><br><span class="line"><span class="number">2</span> <span class="number">2016</span><span class="number">-12</span><span class="number">-17</span>  <span class="number">1.0</span>  <span class="number">3</span>     C++  ChinaHadoop</span><br><span class="line"><span class="number">3</span> <span class="number">2016</span><span class="number">-12</span><span class="number">-17</span>  <span class="number">1.0</span>  <span class="number">3</span>      C#  ChinaHadoop</span><br></pre></td></tr></table></figure><h3 id="drop"><a href="#drop" class="headerlink" title="drop"></a>drop</h3><blockquote><p>删除行/列数据</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict_data = &#123;<span class="string">'A'</span>: <span class="number">1.</span>,</span><br><span class="line">             <span class="string">'B'</span>: pd.Timestamp(<span class="string">'20161217'</span>),</span><br><span class="line">             <span class="string">'C'</span>: pd.Series(<span class="number">1</span>, index=list(range(<span class="number">4</span>)),dtype=<span class="string">'float32'</span>),</span><br><span class="line">             <span class="string">'D'</span>: np.array([<span class="number">3</span>] * <span class="number">4</span>,dtype=<span class="string">'int32'</span>),</span><br><span class="line">             <span class="string">'E'</span> : pd.Categorical([<span class="string">"Python"</span>,<span class="string">"Java"</span>,<span class="string">"C++"</span>,<span class="string">"C#"</span>]),</span><br><span class="line">             <span class="string">'F'</span> : <span class="string">'ChinaHadoop'</span> &#125;</span><br><span class="line">df_obj3 = pd.DataFrame(dict_data,index = [<span class="string">'sfd'</span>,<span class="string">'sdfd'</span>,<span class="string">'wer'</span>,<span class="string">'rwer'</span>])</span><br><span class="line"><span class="keyword">print</span> (df_obj3.head(<span class="number">7</span>))</span><br><span class="line">print(df_obj3.drop(<span class="string">'wer'</span>))<span class="comment">#删除行</span></span><br><span class="line">print(df_obj3.drop(<span class="string">'F'</span>,axis=<span class="number">1</span>))<span class="comment">#删除列</span></span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">        A          B   C  D       E            F</span><br><span class="line">sfd   <span class="number">1.0</span> <span class="number">2016</span><span class="number">-12</span><span class="number">-17</span> NaN  <span class="number">3</span>  Python  ChinaHadoop</span><br><span class="line">sdfd  <span class="number">1.0</span> <span class="number">2016</span><span class="number">-12</span><span class="number">-17</span> NaN  <span class="number">3</span>    Java  ChinaHadoop</span><br><span class="line">wer   <span class="number">1.0</span> <span class="number">2016</span><span class="number">-12</span><span class="number">-17</span> NaN  <span class="number">3</span>     C++  ChinaHadoop</span><br><span class="line">rwer  <span class="number">1.0</span> <span class="number">2016</span><span class="number">-12</span><span class="number">-17</span> NaN  <span class="number">3</span>      C#  ChinaHadoop</span><br><span class="line">        A          B   C  D       E            F</span><br><span class="line">sfd   <span class="number">1.0</span> <span class="number">2016</span><span class="number">-12</span><span class="number">-17</span> NaN  <span class="number">3</span>  Python  ChinaHadoop</span><br><span class="line">sdfd  <span class="number">1.0</span> <span class="number">2016</span><span class="number">-12</span><span class="number">-17</span> NaN  <span class="number">3</span>    Java  ChinaHadoop</span><br><span class="line">rwer  <span class="number">1.0</span> <span class="number">2016</span><span class="number">-12</span><span class="number">-17</span> NaN  <span class="number">3</span>      C#  ChinaHadoop</span><br><span class="line">        A          B   C  D       E</span><br><span class="line">sfd   <span class="number">1.0</span> <span class="number">2016</span><span class="number">-12</span><span class="number">-17</span> NaN  <span class="number">3</span>  Python</span><br><span class="line">sdfd  <span class="number">1.0</span> <span class="number">2016</span><span class="number">-12</span><span class="number">-17</span> NaN  <span class="number">3</span>    Java</span><br><span class="line">wer   <span class="number">1.0</span> <span class="number">2016</span><span class="number">-12</span><span class="number">-17</span> NaN  <span class="number">3</span>     C++</span><br><span class="line">rwer  <span class="number">1.0</span> <span class="number">2016</span><span class="number">-12</span><span class="number">-17</span> NaN  <span class="number">3</span>      C#</span><br></pre></td></tr></table></figure><h2 id="二、处理缺失数据"><a href="#二、处理缺失数据" class="headerlink" title="二、处理缺失数据"></a>二、处理缺失数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_data = pd.DataFrame([np.random.randn(<span class="number">3</span>), [<span class="number">1.</span>, np.nan, np.nan],</span><br><span class="line">                       [<span class="number">4.</span>, np.nan, np.nan], [<span class="number">1.</span>, np.nan, <span class="number">2.</span>]])</span><br><span class="line">df_data.head()</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>0</th><th>1</th><th>2</th></tr></thead><tbody><tr><td>0</td><td>-0.702713</td><td>-0.991383</td><td>-1.058464</td></tr><tr><td>1</td><td>1.000000</td><td>NaN</td><td>NaN</td></tr><tr><td>2</td><td>4.000000</td><td>NaN</td><td>NaN</td></tr><tr><td>3</td><td>1.000000</td><td>NaN</td><td>2.000000</td></tr></tbody></table><h3 id="判断是否存在缺失值"><a href="#判断是否存在缺失值" class="headerlink" title="判断是否存在缺失值"></a>判断是否存在缺失值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_data.isnull()</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>0</th><th>1</th><th>2</th></tr></thead><tbody><tr><td>0</td><td>False</td><td>False</td><td>False</td></tr><tr><td>1</td><td>False</td><td>True</td><td>True</td></tr><tr><td>2</td><td>False</td><td>True</td><td>True</td></tr><tr><td>3</td><td>False</td><td>True</td><td>False</td></tr></tbody></table><h3 id="丢弃缺失数据"><a href="#丢弃缺失数据" class="headerlink" title="丢弃缺失数据"></a>丢弃缺失数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df_data.dropna(axis=<span class="number">0</span>))</span><br><span class="line"><span class="comment">#0是行；1是列</span></span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">-0.702713</span> <span class="number">-0.991383</span> <span class="number">-1.058464</span></span><br></pre></td></tr></table></figure><h3 id="填充缺失数据"><a href="#填充缺失数据" class="headerlink" title="填充缺失数据"></a>填充缺失数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_data.fillna(<span class="number">-100.</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>0</th><th>1</th><th>2</th></tr></thead><tbody><tr><td>0</td><td>-0.702713</td><td>-0.991383</td><td>-1.058464</td></tr><tr><td>1</td><td>1.000000</td><td>-100.000000</td><td>-100.000000</td></tr><tr><td>2</td><td>4.000000</td><td>-100.000000</td><td>-100.000000</td></tr><tr><td>3</td><td>1.000000</td><td>-100.000000</td><td>2.000000</td></tr></tbody></table><h2 id="三、数据规整-连接-含索引"><a href="#三、数据规整-连接-含索引" class="headerlink" title="三、数据规整-连接-含索引"></a>三、数据规整-连接-含索引</h2><ul><li>数据连接 merge</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_obj1 = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>],</span><br><span class="line">                        <span class="string">'data1'</span> : [<span class="string">'sfd'</span>,<span class="string">'fdsf'</span>,<span class="string">'we'</span>,<span class="number">24</span>,<span class="number">3253</span>,<span class="number">234</span>,<span class="number">23</span>]&#125;)</span><br><span class="line">df_obj2 = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>],</span><br><span class="line">                        <span class="string">'data2'</span> : np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">3</span>)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (df_obj1)</span><br><span class="line"><span class="keyword">print</span> (df_obj2)</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">  <span class="type">key</span> data1</span><br><span class="line"><span class="number">0</span>   b   sfd</span><br><span class="line"><span class="number">1</span>   b  fdsf</span><br><span class="line"><span class="number">2</span>   a    we</span><br><span class="line"><span class="number">3</span>   c    <span class="number">24</span></span><br><span class="line"><span class="number">4</span>   a  <span class="number">3253</span></span><br><span class="line"><span class="number">5</span>   a   <span class="number">234</span></span><br><span class="line"><span class="number">6</span>   b    <span class="number">23</span></span><br><span class="line">  <span class="type">key</span>  data2</span><br><span class="line"><span class="number">0</span>   a      <span class="number">0</span></span><br><span class="line"><span class="number">1</span>   b      <span class="number">6</span></span><br><span class="line"><span class="number">2</span>   d      <span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="merge-和-on"><a href="#merge-和-on" class="headerlink" title="merge 和 on"></a>merge 和 on</h3><blockquote><p>默认将重叠列的列名作为“外键”进行连接</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.merge(df_obj1, df_obj2)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>key</th><th>data1</th><th>data2</th></tr></thead><tbody><tr><td>0</td><td>b</td><td>sfd</td><td>6</td></tr><tr><td>1</td><td>b</td><td>fdsf</td><td>6</td></tr><tr><td>2</td><td>b</td><td>23</td><td>6</td></tr><tr><td>3</td><td>a</td><td>we</td><td>0</td></tr><tr><td>4</td><td>a</td><td>3253</td><td>0</td></tr><tr><td>5</td><td>a</td><td>234</td><td>0</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># on显示指定“外键”</span></span><br><span class="line">pd.merge(df_obj1, df_obj2, on=<span class="string">'key'</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>key</th><th>data1</th><th>data2</th></tr></thead><tbody><tr><td>0</td><td>b</td><td>sfd</td><td>6</td></tr><tr><td>1</td><td>b</td><td>fdsf</td><td>6</td></tr><tr><td>2</td><td>b</td><td>23</td><td>6</td></tr><tr><td>3</td><td>a</td><td>we</td><td>0</td></tr><tr><td>4</td><td>a</td><td>3253</td><td>0</td></tr><tr><td>5</td><td>a</td><td>234</td><td>0</td></tr></tbody></table><h3 id="left-on-和-right-on"><a href="#left-on-和-right-on" class="headerlink" title="left-on 和 right-on"></a>left-on 和 right-on</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># left_on，right_on分别指定左侧数据和右侧数据的“外键”</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改列名</span></span><br><span class="line">df_obj1 = df_obj1.rename(columns=&#123;<span class="string">'key'</span>:<span class="string">'key1'</span>&#125;)</span><br><span class="line">df_obj2 = df_obj2.rename(columns=&#123;<span class="string">'key'</span>:<span class="string">'key2'</span>&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df_obj1)</span><br><span class="line">print(df_obj2)</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">  key1 data1</span><br><span class="line"><span class="number">0</span>    b   sfd</span><br><span class="line"><span class="number">1</span>    b  fdsf</span><br><span class="line"><span class="number">2</span>    a    we</span><br><span class="line"><span class="number">3</span>    c    <span class="number">24</span></span><br><span class="line"><span class="number">4</span>    a  <span class="number">3253</span></span><br><span class="line"><span class="number">5</span>    a   <span class="number">234</span></span><br><span class="line"><span class="number">6</span>    b    <span class="number">23</span></span><br><span class="line">  key2  data2</span><br><span class="line"><span class="number">0</span>    a      <span class="number">0</span></span><br><span class="line"><span class="number">1</span>    b      <span class="number">6</span></span><br><span class="line"><span class="number">2</span>    d      <span class="number">6</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.merge(df_obj1, df_obj2, left_on=<span class="string">'key1'</span>, right_on=<span class="string">'key2'</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>key1</th><th>data1</th><th>key2</th><th>data2</th></tr></thead><tbody><tr><td>0</td><td>b</td><td>sfd</td><td>b</td><td>6</td></tr><tr><td>1</td><td>b</td><td>fdsf</td><td>b</td><td>6</td></tr><tr><td>2</td><td>b</td><td>23</td><td>b</td><td>6</td></tr><tr><td>3</td><td>a</td><td>we</td><td>a</td><td>0</td></tr><tr><td>4</td><td>a</td><td>3253</td><td>a</td><td>0</td></tr><tr><td>5</td><td>a</td><td>234</td><td>a</td><td>0</td></tr></tbody></table><h3 id="how"><a href="#how" class="headerlink" title="how"></a>how</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># “外连接”</span></span><br><span class="line">pd.merge(df_obj1, df_obj2, left_on=<span class="string">'key1'</span>, right_on=<span class="string">'key2'</span>, how=<span class="string">'outer'</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>key1</th><th>data1</th><th>key2</th><th>data2</th></tr></thead><tbody><tr><td>0</td><td>b</td><td>sfd</td><td>b</td><td>6.0</td></tr><tr><td>1</td><td>b</td><td>fdsf</td><td>b</td><td>6.0</td></tr><tr><td>2</td><td>b</td><td>23</td><td>b</td><td>6.0</td></tr><tr><td>3</td><td>a</td><td>we</td><td>a</td><td>0.0</td></tr><tr><td>4</td><td>a</td><td>3253</td><td>a</td><td>0.0</td></tr><tr><td>5</td><td>a</td><td>234</td><td>a</td><td>0.0</td></tr><tr><td>6</td><td>c</td><td>24</td><td>NaN</td><td>NaN</td></tr><tr><td>7</td><td>NaN</td><td>NaN</td><td>d</td><td>6.0</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 左连接</span></span><br><span class="line">pd.merge(df_obj1, df_obj2, left_on=<span class="string">'key1'</span>, right_on=<span class="string">'key2'</span>, how=<span class="string">'left'</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>key1</th><th>data1</th><th>key2</th><th>data2</th></tr></thead><tbody><tr><td>0</td><td>b</td><td>sfd</td><td>b</td><td>6.0</td></tr><tr><td>1</td><td>b</td><td>fdsf</td><td>b</td><td>6.0</td></tr><tr><td>2</td><td>a</td><td>we</td><td>a</td><td>0.0</td></tr><tr><td>3</td><td>c</td><td>24</td><td>NaN</td><td>NaN</td></tr><tr><td>4</td><td>a</td><td>3253</td><td>a</td><td>0.0</td></tr><tr><td>5</td><td>a</td><td>234</td><td>a</td><td>0.0</td></tr><tr><td>6</td><td>b</td><td>23</td><td>b</td><td>6.0</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 右连接</span></span><br><span class="line">pd.merge(df_obj1, df_obj2, left_on=<span class="string">'key1'</span>, right_on=<span class="string">'key2'</span>, how=<span class="string">'right'</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>key1</th><th>data1</th><th>key2</th><th>data2</th></tr></thead><tbody><tr><td>0</td><td>b</td><td>sfd</td><td>b</td><td>6</td></tr><tr><td>1</td><td>b</td><td>fdsf</td><td>b</td><td>6</td></tr><tr><td>2</td><td>b</td><td>23</td><td>b</td><td>6</td></tr><tr><td>3</td><td>a</td><td>we</td><td>a</td><td>0</td></tr><tr><td>4</td><td>a</td><td>3253</td><td>a</td><td>0</td></tr><tr><td>5</td><td>a</td><td>234</td><td>a</td><td>0</td></tr><tr><td>6</td><td>NaN</td><td>NaN</td><td>d</td><td>6</td></tr></tbody></table><h3 id="处理重复列名-suffixes"><a href="#处理重复列名-suffixes" class="headerlink" title="处理重复列名 suffixes"></a>处理重复列名 suffixes</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 处理重复列名</span></span><br><span class="line">df_obj1 = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>],</span><br><span class="line">                        <span class="string">'data'</span> : np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">7</span>)&#125;)</span><br><span class="line">df_obj2 = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>],</span><br><span class="line">                        <span class="string">'data'</span> : np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">3</span>)&#125;)</span><br><span class="line"></span><br><span class="line">pd.merge(df_obj1, df_obj2, on=<span class="string">'key'</span>, suffixes=(<span class="string">'_left'</span>, <span class="string">'_right'</span>))</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>key</th><th>data_left</th><th>data_right</th></tr></thead><tbody><tr><td>0</td><td>b</td><td>9</td><td>1</td></tr><tr><td>1</td><td>b</td><td>1</td><td>1</td></tr><tr><td>2</td><td>b</td><td>6</td><td>1</td></tr><tr><td>3</td><td>a</td><td>7</td><td>1</td></tr><tr><td>4</td><td>a</td><td>3</td><td>1</td></tr><tr><td>5</td><td>a</td><td>4</td><td>1</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按索引连接</span></span><br><span class="line">df_obj3 = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>],</span><br><span class="line">                        <span class="string">'data1'</span> : np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">7</span>)&#125;)</span><br><span class="line">df_obj4 = pd.DataFrame(&#123;<span class="string">'data2'</span> : np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">3</span>)&#125;, index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df_obj3)</span><br><span class="line">print(df_obj4)</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">  <span class="type">key</span>  data1</span><br><span class="line"><span class="number">0</span>   b      <span class="number">7</span></span><br><span class="line"><span class="number">1</span>   b      <span class="number">4</span></span><br><span class="line"><span class="number">2</span>   a      <span class="number">1</span></span><br><span class="line"><span class="number">3</span>   c      <span class="number">9</span></span><br><span class="line"><span class="number">4</span>   a      <span class="number">2</span></span><br><span class="line"><span class="number">5</span>   a      <span class="number">9</span></span><br><span class="line"><span class="number">6</span>   b      <span class="number">7</span></span><br><span class="line">   data2</span><br><span class="line">a      <span class="number">9</span></span><br><span class="line">b      <span class="number">4</span></span><br><span class="line">d      <span class="number">0</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.merge(df_obj3, df_obj4, left_on=<span class="string">'key'</span>, right_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>key</th><th>data1</th><th>data2</th></tr></thead><tbody><tr><td>0</td><td>b</td><td>7</td><td>4</td></tr><tr><td>1</td><td>b</td><td>4</td><td>4</td></tr><tr><td>6</td><td>b</td><td>7</td><td>4</td></tr><tr><td>2</td><td>a</td><td>1</td><td>9</td></tr><tr><td>4</td><td>a</td><td>2</td><td>9</td></tr><tr><td>5</td><td>a</td><td>9</td><td>9</td></tr></tbody></table><h3 id="按索引连接-right-index"><a href="#按索引连接-right-index" class="headerlink" title="按索引连接 right_index"></a>按索引连接 right_index</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按索引连接</span></span><br><span class="line">df_obj1 = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>],</span><br><span class="line">                        <span class="string">'data1'</span> : np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">7</span>)&#125;)</span><br><span class="line">df_obj2 = pd.DataFrame(&#123;<span class="string">'data2'</span> : np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">3</span>)&#125;, index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df_obj1)</span><br><span class="line">print(df_obj2)</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">  <span class="type">key</span>  data1</span><br><span class="line"><span class="number">0</span>   b      <span class="number">0</span></span><br><span class="line"><span class="number">1</span>   b      <span class="number">2</span></span><br><span class="line"><span class="number">2</span>   a      <span class="number">7</span></span><br><span class="line"><span class="number">3</span>   c      <span class="number">3</span></span><br><span class="line"><span class="number">4</span>   a      <span class="number">1</span></span><br><span class="line"><span class="number">5</span>   a      <span class="number">1</span></span><br><span class="line"><span class="number">6</span>   b      <span class="number">6</span></span><br><span class="line">   data2</span><br><span class="line">a      <span class="number">2</span></span><br><span class="line">b      <span class="number">1</span></span><br><span class="line">d      <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.merge(df_obj1, df_obj2, left_on=<span class="string">'key'</span>, right_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>key</th><th>data1</th><th>data2</th></tr></thead><tbody><tr><td>0</td><td>b</td><td>0</td><td>1</td></tr><tr><td>1</td><td>b</td><td>2</td><td>1</td></tr><tr><td>6</td><td>b</td><td>6</td><td>1</td></tr><tr><td>2</td><td>a</td><td>7</td><td>2</td></tr><tr><td>4</td><td>a</td><td>1</td><td>2</td></tr><tr><td>5</td><td>a</td><td>1</td><td>2</td></tr></tbody></table><h2 id="四、数据合并"><a href="#四、数据合并" class="headerlink" title="四、数据合并"></a>四、数据合并</h2><ul><li>数据合并 concat</li><li>按索引连接===right_index</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><h3 id="numpy-的-concat"><a href="#numpy-的-concat" class="headerlink" title="numpy 的 concat"></a>numpy 的 concat</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr1 = np.random.randint(<span class="number">0</span>, <span class="number">10</span>, (<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">arr2 = np.random.randint(<span class="number">0</span>, <span class="number">10</span>, (<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (arr1)</span><br><span class="line"><span class="keyword">print</span> (arr2)</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">[[<span class="number">6</span> <span class="number">0</span> <span class="number">3</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">7</span> <span class="number">9</span> <span class="number">8</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">8</span> <span class="number">0</span> <span class="number">3</span>]]</span><br><span class="line">[[<span class="number">6</span> <span class="number">5</span> <span class="number">7</span> <span class="number">9</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">7</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.concatenate([arr1, arr2])</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">array([[<span class="number">6</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">8</span>],</span><br><span class="line">       [<span class="number">5</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">6</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">7</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.concatenate([arr1, arr2], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">array([[<span class="number">6</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>],</span><br><span class="line">       [<span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">       [<span class="number">5</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">7</span>]])</span><br></pre></td></tr></table></figure><h3 id="series-上的-concat"><a href="#series-上的-concat" class="headerlink" title="series 上的 concat"></a>series 上的 concat</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># index 没有重复的情况</span></span><br><span class="line">ser_obj1 = pd.Series(np.random.randint(<span class="number">0</span>, <span class="number">10</span>, <span class="number">5</span>), index=range(<span class="number">0</span>,<span class="number">5</span>))</span><br><span class="line">ser_obj2 = pd.Series(np.random.randint(<span class="number">0</span>, <span class="number">10</span>, <span class="number">4</span>), index=range(<span class="number">5</span>,<span class="number">9</span>))</span><br><span class="line">ser_obj3 = pd.Series(np.random.randint(<span class="number">0</span>, <span class="number">10</span>, <span class="number">3</span>), index=range(<span class="number">9</span>,<span class="number">12</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.concat([ser_obj1, ser_obj2, ser_obj3])</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>     <span class="number">0</span></span><br><span class="line"><span class="number">1</span>     <span class="number">4</span></span><br><span class="line"><span class="number">2</span>     <span class="number">5</span></span><br><span class="line"><span class="number">3</span>     <span class="number">1</span></span><br><span class="line"><span class="number">4</span>     <span class="number">9</span></span><br><span class="line"><span class="number">5</span>     <span class="number">7</span></span><br><span class="line"><span class="number">6</span>     <span class="number">8</span></span><br><span class="line"><span class="number">7</span>     <span class="number">5</span></span><br><span class="line"><span class="number">8</span>     <span class="number">0</span></span><br><span class="line"><span class="number">9</span>     <span class="number">5</span></span><br><span class="line"><span class="number">10</span>    <span class="number">9</span></span><br><span class="line"><span class="number">11</span>    <span class="number">0</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">int32</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.concat([ser_obj1, ser_obj2, ser_obj3], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>0</th><th>1</th><th>2</th></tr></thead><tbody><tr><td>0</td><td>0.0</td><td>NaN</td><td>NaN</td></tr><tr><td>1</td><td>4.0</td><td>NaN</td><td>NaN</td></tr><tr><td>2</td><td>5.0</td><td>NaN</td><td>NaN</td></tr><tr><td>3</td><td>1.0</td><td>NaN</td><td>NaN</td></tr><tr><td>4</td><td>9.0</td><td>NaN</td><td>NaN</td></tr><tr><td>5</td><td>NaN</td><td>7.0</td><td>NaN</td></tr><tr><td>6</td><td>NaN</td><td>8.0</td><td>NaN</td></tr><tr><td>7</td><td>NaN</td><td>5.0</td><td>NaN</td></tr><tr><td>8</td><td>NaN</td><td>0.0</td><td>NaN</td></tr><tr><td>9</td><td>NaN</td><td>NaN</td><td>5.0</td></tr><tr><td>10</td><td>NaN</td><td>NaN</td><td>9.0</td></tr><tr><td>11</td><td>NaN</td><td>NaN</td><td>0.0</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># index 有重复的情况</span></span><br><span class="line">ser_obj1 = pd.Series(np.random.randint(<span class="number">0</span>, <span class="number">10</span>, <span class="number">5</span>), index=range(<span class="number">5</span>))</span><br><span class="line">ser_obj2 = pd.Series(np.random.randint(<span class="number">0</span>, <span class="number">10</span>, <span class="number">4</span>), index=range(<span class="number">4</span>))</span><br><span class="line">ser_obj3 = pd.Series(np.random.randint(<span class="number">0</span>, <span class="number">10</span>, <span class="number">3</span>), index=range(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (ser_obj1)</span><br><span class="line"><span class="keyword">print</span> (ser_obj2)</span><br><span class="line"><span class="keyword">print</span> (ser_obj3)</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>    <span class="number">5</span></span><br><span class="line"><span class="number">1</span>    <span class="number">3</span></span><br><span class="line"><span class="number">2</span>    <span class="number">0</span></span><br><span class="line"><span class="number">3</span>    <span class="number">8</span></span><br><span class="line"><span class="number">4</span>    <span class="number">3</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">int32</span></span><br><span class="line"><span class="number">0</span>    <span class="number">5</span></span><br><span class="line"><span class="number">1</span>    <span class="number">3</span></span><br><span class="line"><span class="number">2</span>    <span class="number">2</span></span><br><span class="line"><span class="number">3</span>    <span class="number">1</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">int32</span></span><br><span class="line"><span class="number">0</span>    <span class="number">5</span></span><br><span class="line"><span class="number">1</span>    <span class="number">8</span></span><br><span class="line"><span class="number">2</span>    <span class="number">6</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">int32</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.concat([ser_obj1, ser_obj2, ser_obj3])</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>    <span class="number">5</span></span><br><span class="line"><span class="number">1</span>    <span class="number">3</span></span><br><span class="line"><span class="number">2</span>    <span class="number">0</span></span><br><span class="line"><span class="number">3</span>    <span class="number">8</span></span><br><span class="line"><span class="number">4</span>    <span class="number">3</span></span><br><span class="line"><span class="number">0</span>    <span class="number">5</span></span><br><span class="line"><span class="number">1</span>    <span class="number">3</span></span><br><span class="line"><span class="number">2</span>    <span class="number">2</span></span><br><span class="line"><span class="number">3</span>    <span class="number">1</span></span><br><span class="line"><span class="number">0</span>    <span class="number">5</span></span><br><span class="line"><span class="number">1</span>    <span class="number">8</span></span><br><span class="line"><span class="number">2</span>    <span class="number">6</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">int32</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.concat([ser_obj1, ser_obj2, ser_obj3], axis=<span class="number">1</span>, join=<span class="string">'inner'</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>0</th><th>1</th><th>2</th></tr></thead><tbody><tr><td>0</td><td>5</td><td>5</td><td>5</td></tr><tr><td>1</td><td>3</td><td>3</td><td>8</td></tr><tr><td>2</td><td>0</td><td>2</td><td>6</td></tr></tbody></table><h3 id="dataframe-上的-concat"><a href="#dataframe-上的-concat" class="headerlink" title="dataframe 上的 concat"></a>dataframe 上的 concat</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_obj1 = pd.DataFrame(np.random.randint(<span class="number">0</span>, <span class="number">10</span>, (<span class="number">3</span>, <span class="number">2</span>)), index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>],</span><br><span class="line">                       columns=[<span class="string">'A'</span>, <span class="string">'B'</span>])</span><br><span class="line">df_obj2 = pd.DataFrame(np.random.randint(<span class="number">0</span>, <span class="number">10</span>, (<span class="number">2</span>, <span class="number">2</span>)), index=[<span class="string">'a'</span>, <span class="string">'b'</span>],</span><br><span class="line">                       columns=[<span class="string">'C'</span>, <span class="string">'D'</span>])</span><br><span class="line"><span class="keyword">print</span> (df_obj1)</span><br><span class="line"><span class="keyword">print</span> (df_obj2)</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">   A  B</span><br><span class="line">a  <span class="number">4</span>  <span class="number">3</span></span><br><span class="line">b  <span class="number">8</span>  <span class="number">1</span></span><br><span class="line">c  <span class="number">6</span>  <span class="number">3</span></span><br><span class="line">   C  D</span><br><span class="line">a  <span class="number">1</span>  <span class="number">3</span></span><br><span class="line">b  <span class="number">8</span>  <span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.concat([df_obj1, df_obj2])</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">C:\Users\wztli\Anaconda3\lib\site-packages\ipykernel_launcher.py:1: FutureWarning: Sorting because non-concatenation axis is not aligned. A future version</span><br><span class="line">of pandas will <span class="keyword">change</span> <span class="keyword">to</span> <span class="keyword">not</span> <span class="keyword">sort</span> <span class="keyword">by</span> default.</span><br><span class="line"></span><br><span class="line"><span class="keyword">To</span> <span class="keyword">accept</span> the future behavior, pass <span class="string">'sort=False'</span>.</span><br><span class="line"></span><br><span class="line"><span class="keyword">To</span> retain the <span class="keyword">current</span> behavior <span class="keyword">and</span> silence the <span class="keyword">warning</span>, pass <span class="string">'sort=True'</span>.</span><br><span class="line"></span><br><span class="line">  <span class="string">"""Entry point for launching an IPython kernel.</span></span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>A</th><th>B</th><th>C</th><th>D</th></tr></thead><tbody><tr><td>a</td><td>4.0</td><td>3.0</td><td>NaN</td><td>NaN</td></tr><tr><td>b</td><td>8.0</td><td>1.0</td><td>NaN</td><td>NaN</td></tr><tr><td>c</td><td>6.0</td><td>3.0</td><td>NaN</td><td>NaN</td></tr><tr><td>a</td><td>NaN</td><td>NaN</td><td>1.0</td><td>3.0</td></tr><tr><td>b</td><td>NaN</td><td>NaN</td><td>8.0</td><td>2.0</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.concat([df_obj1, df_obj2], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">C:\Users\wztli\Anaconda3\lib\site-packages\ipykernel_launcher.py:1: FutureWarning: Sorting because non-concatenation axis is not aligned. A future version</span><br><span class="line">of pandas will <span class="keyword">change</span> <span class="keyword">to</span> <span class="keyword">not</span> <span class="keyword">sort</span> <span class="keyword">by</span> default.</span><br><span class="line"></span><br><span class="line"><span class="keyword">To</span> <span class="keyword">accept</span> the future behavior, pass <span class="string">'sort=False'</span>.</span><br><span class="line"></span><br><span class="line"><span class="keyword">To</span> retain the <span class="keyword">current</span> behavior <span class="keyword">and</span> silence the <span class="keyword">warning</span>, pass <span class="string">'sort=True'</span>.</span><br><span class="line"></span><br><span class="line">  <span class="string">"""Entry point for launching an IPython kernel.</span></span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>A</th><th>B</th><th>C</th><th>D</th></tr></thead><tbody><tr><td>a</td><td>4</td><td>3</td><td>1.0</td><td>3.0</td></tr><tr><td>b</td><td>8</td><td>1</td><td>8.0</td><td>2.0</td></tr><tr><td>c</td><td>6</td><td>3</td><td>NaN</td><td>NaN</td></tr></tbody></table><h2 id="五、数据重构"><a href="#五、数据重构" class="headerlink" title="五、数据重构"></a>五、数据重构</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_obj = pd.DataFrame(np.random.randint(<span class="number">0</span>,<span class="number">10</span>, (<span class="number">5</span>,<span class="number">2</span>)), columns=[<span class="string">'data1'</span>, <span class="string">'data2'</span>])</span><br><span class="line">df_obj</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>data1</th><th>data2</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>4</td></tr><tr><td>1</td><td>6</td><td>2</td></tr><tr><td>2</td><td>9</td><td>8</td></tr><tr><td>3</td><td>7</td><td>0</td></tr><tr><td>4</td><td>3</td><td>1</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">stacked = df_obj.stack()</span><br><span class="line"><span class="keyword">print</span> (stacked)</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>  <span class="string">data1</span>    <span class="number">0</span></span><br><span class="line">   <span class="string">data2</span>    <span class="number">4</span></span><br><span class="line"><span class="number">1</span>  <span class="string">data1</span>    <span class="number">6</span></span><br><span class="line">   <span class="string">data2</span>    <span class="number">2</span></span><br><span class="line"><span class="number">2</span>  <span class="string">data1</span>    <span class="number">9</span></span><br><span class="line">   <span class="string">data2</span>    <span class="number">8</span></span><br><span class="line"><span class="number">3</span>  <span class="string">data1</span>    <span class="number">7</span></span><br><span class="line">   <span class="string">data2</span>    <span class="number">0</span></span><br><span class="line"><span class="number">4</span>  <span class="string">data1</span>    <span class="number">3</span></span><br><span class="line">   <span class="string">data2</span>    <span class="number">1</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">int32</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">print</span> (type(stacked))</span><br><span class="line"><span class="keyword">print</span> (type(stacked.index))</span><br></pre></td></tr></table></figure><figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">class</span> <span class="string">'pandas.core.series.Series'</span>&gt;</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">'pandas.core.indexes.multi.MultiIndex'</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="unstack"><a href="#unstack" class="headerlink" title="unstack"></a>unstack</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认操作内层索引</span></span><br><span class="line">stacked.unstack()</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>data1</th><th>data2</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>4</td></tr><tr><td>1</td><td>6</td><td>2</td></tr><tr><td>2</td><td>9</td><td>8</td></tr><tr><td>3</td><td>7</td><td>0</td></tr><tr><td>4</td><td>3</td><td>1</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过level指定操作索引的级别</span></span><br><span class="line">stacked.unstack(level=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>data1</td><td>0</td><td>6</td><td>9</td><td>7</td><td>3</td></tr><tr><td>data2</td><td>4</td><td>2</td><td>8</td><td>0</td><td>1</td></tr></tbody></table><h2 id="六、数据转换"><a href="#六、数据转换" class="headerlink" title="六、数据转换"></a>六、数据转换</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><h3 id="重复数据-duplicates-函数"><a href="#重复数据-duplicates-函数" class="headerlink" title="重复数据 duplicates 函数"></a>重复数据 duplicates 函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_obj = pd.DataFrame(&#123;<span class="string">'data1'</span> : [<span class="string">'a'</span>] * <span class="number">4</span> + [<span class="string">'b'</span>] * <span class="number">4</span>,</span><br><span class="line">                       <span class="string">'data2'</span> : np.random.randint(<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>)&#125;)</span><br><span class="line">df_obj</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>data1</th><th>data2</th></tr></thead><tbody><tr><td>0</td><td>a</td><td>3</td></tr><tr><td>1</td><td>a</td><td>2</td></tr><tr><td>2</td><td>a</td><td>2</td></tr><tr><td>3</td><td>a</td><td>1</td></tr><tr><td>4</td><td>b</td><td>0</td></tr><tr><td>5</td><td>b</td><td>2</td></tr><tr><td>6</td><td>b</td><td>2</td></tr><tr><td>7</td><td>b</td><td>1</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_obj.duplicated()</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>    <span class="literal">False</span></span><br><span class="line"><span class="number">1</span>    <span class="literal">False</span></span><br><span class="line"><span class="number">2</span>     <span class="literal">True</span></span><br><span class="line"><span class="number">3</span>    <span class="literal">False</span></span><br><span class="line"><span class="number">4</span>    <span class="literal">False</span></span><br><span class="line"><span class="number">5</span>    <span class="literal">False</span></span><br><span class="line"><span class="number">6</span>     <span class="literal">True</span></span><br><span class="line"><span class="number">7</span>    <span class="literal">False</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">bool</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_obj.drop_duplicates()</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>data1</th><th>data2</th></tr></thead><tbody><tr><td>0</td><td>a</td><td>3</td></tr><tr><td>1</td><td>a</td><td>2</td></tr><tr><td>3</td><td>a</td><td>1</td></tr><tr><td>4</td><td>b</td><td>0</td></tr><tr><td>5</td><td>b</td><td>2</td></tr><tr><td>7</td><td>b</td><td>1</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_obj.drop_duplicates(<span class="string">'data2'</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>data1</th><th>data2</th></tr></thead><tbody><tr><td>0</td><td>a</td><td>3</td></tr><tr><td>1</td><td>a</td><td>2</td></tr><tr><td>3</td><td>a</td><td>1</td></tr><tr><td>4</td><td>b</td><td>0</td></tr></tbody></table><h3 id="map-函数"><a href="#map-函数" class="headerlink" title="map 函数"></a>map 函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser_obj = pd.Series(np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line">ser_obj</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>    <span class="number">1</span></span><br><span class="line"><span class="number">1</span>    <span class="number">9</span></span><br><span class="line"><span class="number">2</span>    <span class="number">1</span></span><br><span class="line"><span class="number">3</span>    <span class="number">2</span></span><br><span class="line"><span class="number">4</span>    <span class="number">7</span></span><br><span class="line"><span class="number">5</span>    <span class="number">2</span></span><br><span class="line"><span class="number">6</span>    <span class="number">4</span></span><br><span class="line"><span class="number">7</span>    <span class="number">5</span></span><br><span class="line"><span class="number">8</span>    <span class="number">4</span></span><br><span class="line"><span class="number">9</span>    <span class="number">6</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">int32</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser_obj.map(<span class="keyword">lambda</span> x : x ** <span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>     <span class="number">1</span></span><br><span class="line"><span class="number">1</span>    <span class="number">81</span></span><br><span class="line"><span class="number">2</span>     <span class="number">1</span></span><br><span class="line"><span class="number">3</span>     <span class="number">4</span></span><br><span class="line"><span class="number">4</span>    <span class="number">49</span></span><br><span class="line"><span class="number">5</span>     <span class="number">4</span></span><br><span class="line"><span class="number">6</span>    <span class="number">16</span></span><br><span class="line"><span class="number">7</span>    <span class="number">25</span></span><br><span class="line"><span class="number">8</span>    <span class="number">16</span></span><br><span class="line"><span class="number">9</span>    <span class="number">36</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">int64</span></span><br></pre></td></tr></table></figure><h3 id="数据替换-repalce"><a href="#数据替换-repalce" class="headerlink" title="数据替换 repalce"></a>数据替换 repalce</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 替换单个值</span></span><br><span class="line">ser_obj.replace(<span class="number">0</span>, <span class="number">-100</span>)</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>    <span class="number">1</span></span><br><span class="line"><span class="number">1</span>    <span class="number">9</span></span><br><span class="line"><span class="number">2</span>    <span class="number">1</span></span><br><span class="line"><span class="number">3</span>    <span class="number">2</span></span><br><span class="line"><span class="number">4</span>    <span class="number">7</span></span><br><span class="line"><span class="number">5</span>    <span class="number">2</span></span><br><span class="line"><span class="number">6</span>    <span class="number">4</span></span><br><span class="line"><span class="number">7</span>    <span class="number">5</span></span><br><span class="line"><span class="number">8</span>    <span class="number">4</span></span><br><span class="line"><span class="number">9</span>    <span class="number">6</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">int32</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 替换多个值</span></span><br><span class="line">ser_obj.replace([<span class="number">0</span>, <span class="number">2</span>], <span class="number">-100</span>)</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>      <span class="number">1</span></span><br><span class="line"><span class="number">1</span>      <span class="number">9</span></span><br><span class="line"><span class="number">2</span>      <span class="number">1</span></span><br><span class="line"><span class="number">3</span>   <span class="number">-100</span></span><br><span class="line"><span class="number">4</span>      <span class="number">7</span></span><br><span class="line"><span class="number">5</span>   <span class="number">-100</span></span><br><span class="line"><span class="number">6</span>      <span class="number">4</span></span><br><span class="line"><span class="number">7</span>      <span class="number">5</span></span><br><span class="line"><span class="number">8</span>      <span class="number">4</span></span><br><span class="line"><span class="number">9</span>      <span class="number">6</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">int32</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 替换多个值</span></span><br><span class="line">ser_obj.replace([<span class="number">0</span>, <span class="number">2</span>], [<span class="number">-100</span>, <span class="number">-200</span>])</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>      <span class="number">1</span></span><br><span class="line"><span class="number">1</span>      <span class="number">9</span></span><br><span class="line"><span class="number">2</span>      <span class="number">1</span></span><br><span class="line"><span class="number">3</span>   <span class="number">-200</span></span><br><span class="line"><span class="number">4</span>      <span class="number">7</span></span><br><span class="line"><span class="number">5</span>   <span class="number">-200</span></span><br><span class="line"><span class="number">6</span>      <span class="number">4</span></span><br><span class="line"><span class="number">7</span>      <span class="number">5</span></span><br><span class="line"><span class="number">8</span>      <span class="number">4</span></span><br><span class="line"><span class="number">9</span>      <span class="number">6</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">int64</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ser_obj.map(<span class="keyword">lambda</span> x : x ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 3. 数据替换repalce</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换单个值</span></span><br><span class="line">ser_obj.replace(<span class="number">0</span>, <span class="number">-100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换多个值</span></span><br><span class="line">ser_obj.replace([<span class="number">0</span>, <span class="number">2</span>], <span class="number">-100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换多个值</span></span><br><span class="line">ser_obj.replace([<span class="number">0</span>, <span class="number">2</span>], [<span class="number">-100</span>, <span class="number">-200</span>])</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>      <span class="number">1</span></span><br><span class="line"><span class="number">1</span>      <span class="number">9</span></span><br><span class="line"><span class="number">2</span>      <span class="number">1</span></span><br><span class="line"><span class="number">3</span>   <span class="number">-200</span></span><br><span class="line"><span class="number">4</span>      <span class="number">7</span></span><br><span class="line"><span class="number">5</span>   <span class="number">-200</span></span><br><span class="line"><span class="number">6</span>      <span class="number">4</span></span><br><span class="line"><span class="number">7</span>      <span class="number">5</span></span><br><span class="line"><span class="number">8</span>      <span class="number">4</span></span><br><span class="line"><span class="number">9</span>      <span class="number">6</span></span><br><span class="line"><span class="attr">dtype:</span> <span class="string">int64</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DataAnalysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DataAnalysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data-描述数据</title>
      <link href="blog/dggm37/"/>
      <url>blog/dggm37/</url>
      
        <content type="html"><![CDATA[<h2 id="一、数据预览：tail（）；head（）"><a href="#一、数据预览：tail（）；head（）" class="headerlink" title="一、数据预览：tail（）；head（）"></a>一、数据预览：tail（）；head（）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df_obj = pd.DataFrame(np.random.randn(<span class="number">5</span>,<span class="number">4</span>), columns = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line">print(df_obj.tail())<span class="comment"># 数据预览尾巴</span></span><br><span class="line">print(df_obj.head())<span class="comment"># 数据预览头部</span></span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">          a         b         c         d</span><br><span class="line"><span class="number">0</span> <span class="number">-0.507788</span>  <span class="number">0.213237</span>  <span class="number">0.003150</span> <span class="number">-0.777312</span></span><br><span class="line"><span class="number">1</span> <span class="number">-0.896653</span> <span class="number">-2.188016</span> <span class="number">-0.114848</span>  <span class="number">0.167057</span></span><br><span class="line"><span class="number">2</span> <span class="number">-1.131242</span> <span class="number">-0.142287</span> <span class="number">-1.027330</span>  <span class="number">1.861814</span></span><br><span class="line"><span class="number">3</span>  <span class="number">0.369608</span>  <span class="number">0.823453</span>  <span class="number">1.030830</span> <span class="number">-0.041778</span></span><br><span class="line"><span class="number">4</span> <span class="number">-0.647625</span>  <span class="number">0.056791</span> <span class="number">-0.394078</span> <span class="number">-1.347718</span></span><br><span class="line">          a         b         c         d</span><br><span class="line"><span class="number">0</span> <span class="number">-0.507788</span>  <span class="number">0.213237</span>  <span class="number">0.003150</span> <span class="number">-0.777312</span></span><br><span class="line"><span class="number">1</span> <span class="number">-0.896653</span> <span class="number">-2.188016</span> <span class="number">-0.114848</span>  <span class="number">0.167057</span></span><br><span class="line"><span class="number">2</span> <span class="number">-1.131242</span> <span class="number">-0.142287</span> <span class="number">-1.027330</span>  <span class="number">1.861814</span></span><br><span class="line"><span class="number">3</span>  <span class="number">0.369608</span>  <span class="number">0.823453</span>  <span class="number">1.030830</span> <span class="number">-0.041778</span></span><br><span class="line"><span class="number">4</span> <span class="number">-0.647625</span>  <span class="number">0.056791</span> <span class="number">-0.394078</span> <span class="number">-1.347718</span></span><br></pre></td></tr></table></figure><h2 id="二、数据描述：shape；info"><a href="#二、数据描述：shape；info" class="headerlink" title="二、数据描述：shape；info()"></a>二、数据描述：shape；info()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">print</span> (<span class="string">'数据集有%i行，%i列'</span> %(df_obj.shape[<span class="number">0</span>], df_obj.shape[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">数据集有<span class="number">5</span>行，<span class="number">4</span>列</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df_obj.info())</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">&lt;class <span class="string">'pandas.core.frame.DataFrame'</span>&gt;</span><br><span class="line">RangeIndex: <span class="number">5</span> entries, <span class="number">0</span> <span class="built_in">to</span> <span class="number">4</span></span><br><span class="line">Data columns (total <span class="number">4</span> columns):</span><br><span class="line"><span class="keyword">a</span>    <span class="number">5</span> non-<span class="literal">null</span> float64</span><br><span class="line">b    <span class="number">5</span> non-<span class="literal">null</span> float64</span><br><span class="line">c    <span class="number">5</span> non-<span class="literal">null</span> float64</span><br><span class="line">d    <span class="number">5</span> non-<span class="literal">null</span> float64</span><br><span class="line">dtypes: float64(<span class="number">4</span>)</span><br><span class="line">memory usage: <span class="number">288.0</span> <span class="keyword">bytes</span></span><br><span class="line">None</span><br></pre></td></tr></table></figure><h2 id="三、数据统计：describe"><a href="#三、数据统计：describe" class="headerlink" title="三、数据统计：describe()"></a>三、数据统计：describe()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df_obj.describe())</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">              a         b         c         d</span><br><span class="line">count  <span class="number">5.000000</span>  <span class="number">5.000000</span>  <span class="number">5.000000</span>  <span class="number">5.000000</span></span><br><span class="line">mean  <span class="number">-0.562740</span> <span class="number">-0.247365</span> <span class="number">-0.100455</span> <span class="number">-0.027587</span></span><br><span class="line">std    <span class="number">0.573191</span>  <span class="number">1.143294</span>  <span class="number">0.747673</span>  <span class="number">1.215808</span></span><br><span class="line">min   <span class="number">-1.131242</span> <span class="number">-2.188016</span> <span class="number">-1.027330</span> <span class="number">-1.347718</span></span><br><span class="line"><span class="number">25</span>%   <span class="number">-0.896653</span> <span class="number">-0.142287</span> <span class="number">-0.394078</span> <span class="number">-0.777312</span></span><br><span class="line"><span class="number">50</span>%   <span class="number">-0.647625</span>  <span class="number">0.056791</span> <span class="number">-0.114848</span> <span class="number">-0.041778</span></span><br><span class="line"><span class="number">75</span>%   <span class="number">-0.507788</span>  <span class="number">0.213237</span>  <span class="number">0.003150</span>  <span class="number">0.167057</span></span><br><span class="line">max    <span class="number">0.369608</span>  <span class="number">0.823453</span>  <span class="number">1.030830</span>  <span class="number">1.861814</span></span><br></pre></td></tr></table></figure><h2 id="四、pandas-不完全显示行列"><a href="#四、pandas-不完全显示行列" class="headerlink" title="四、pandas 不完全显示行列"></a>四、pandas 不完全显示行列</h2><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">pd</span><span class="selector-class">.set_option</span>(<span class="string">'display.max_rows'</span>, <span class="number">100</span>)        <span class="comment">//显示的最大行数（避免只显示部分行数据）</span></span><br><span class="line"><span class="selector-tag">pd</span><span class="selector-class">.set_option</span>(<span class="string">'display.max_columns'</span>, <span class="number">1000</span>)    <span class="comment">//显示的最大列数（避免列显示不全）</span></span><br><span class="line"><span class="selector-tag">pd</span><span class="selector-class">.set_option</span>(<span class="string">"display.max_colwidth"</span>, <span class="number">1000</span>)   <span class="comment">//每一列最大的宽度（避免属性值或列名显示不全）</span></span><br><span class="line"><span class="selector-tag">pd</span><span class="selector-class">.set_option</span>(<span class="string">'display.width'</span>, <span class="number">1000</span>)          <span class="comment">//每一行的宽度（避免换行）</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DataAnalysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DataAnalysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读取本地数据</title>
      <link href="blog/lb8ugs/"/>
      <url>blog/lb8ugs/</url>
      
        <content type="html"><![CDATA[<p>##</p><h2 id="一、TXT-文件操作"><a href="#一、TXT-文件操作" class="headerlink" title="一、TXT 文件操作"></a>一、TXT 文件操作</h2><h3 id="读取全部内容"><a href="#读取全部内容" class="headerlink" title="读取全部内容"></a>读取全部内容</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">txt_filename = <span class="string">'./files/python_wiki.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">file_obj = open(txt_filename,<span class="string">'r'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取整个文件内容</span></span><br><span class="line">all_content = file_obj.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">file_obj.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (all_content)</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Python is a widely used high-level, general-purpose, interpreted, dynamic programming language.[<span class="string">24</span>][<span class="symbol">25</span>] Its design philosophy emphasizes code readability, and its syntax allows programmers to express concepts in fewer lines of code than possible in languages such as C++ or Java.[<span class="string">26</span>][<span class="symbol">27</span>] The language provides constructs intended to enable writing clear programs on both a small and large scale.[28]</span><br><span class="line">Python supports multiple programming paradigms, including object-oriented, imperative and functional programming or procedural styles. It features a dynamic type system and automatic memory management and has a large and comprehensive standard library.[29]</span><br><span class="line">Python interpreters are available for many operating systems, allowing Python code to run on a wide variety of systems. CPython, the reference implementation of Python, is open source software[30] and has a community-based development model, as do nearly all of its variant implementations. CPython is managed by the non-profit Python Software Foundation.</span><br></pre></td></tr></table></figure><h3 id="逐行读取"><a href="#逐行读取" class="headerlink" title="逐行读取"></a>逐行读取</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">txt_filename = <span class="string">'./files/python_wiki.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">file_obj = open(txt_filename, <span class="string">'r'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逐行读取</span></span><br><span class="line">line1 = file_obj.readline()</span><br><span class="line"><span class="keyword">print</span> (line1)</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Python is a widely used high-level, general-purpose, interpreted, dynamic programming language.[<span class="string">24</span>][<span class="symbol">25</span>] Its design philosophy emphasizes code readability, and its syntax allows programmers to express concepts in fewer lines of code than possible in languages such as C++ or Java.[<span class="string">26</span>][<span class="symbol">27</span>] The language provides constructs intended to enable writing clear programs on both a small and large scale.[28]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 继续读下一行【不会全部读完】</span></span><br><span class="line">line2 = file_obj.readline()</span><br><span class="line"><span class="keyword">print</span> (line2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">file_obj.close()</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Python supports multiple programming paradigms, including object-oriented, imperative <span class="keyword">and</span> functional programming <span class="keyword">or</span> procedural styles. It features a dynamic<span class="built_in"> type system </span><span class="keyword">and</span> automatic memory management <span class="keyword">and</span> has a large <span class="keyword">and</span> comprehensive standard library.[29]</span><br></pre></td></tr></table></figure><h3 id="读取全部内容，返回列表"><a href="#读取全部内容，返回列表" class="headerlink" title="读取全部内容，返回列表"></a>读取全部内容，返回列表</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">txt_filename = <span class="string">'./files/python_wiki.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">file_obj = open(txt_filename, <span class="string">'r'</span>)</span><br><span class="line"></span><br><span class="line">lines = file_obj.readlines()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, line <span class="keyword">in</span> enumerate(lines):</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'%i: %s'</span> %(i, line))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">file_obj.close()</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">0: Python is a widely used high-level, general-purpose, interpreted, dynamic programming language.[<span class="string">24</span>][<span class="symbol">25</span>] Its design philosophy emphasizes code readability, and its syntax allows programmers to express concepts in fewer lines of code than possible in languages such as C++ or Java.[<span class="string">26</span>][<span class="symbol">27</span>] The language provides constructs intended to enable writing clear programs on both a small and large scale.[28]</span><br><span class="line"></span><br><span class="line">1: Python supports multiple programming paradigms, including object-oriented, imperative and functional programming or procedural styles. It features a dynamic type system and automatic memory management and has a large and comprehensive standard library.[29]</span><br><span class="line"></span><br><span class="line">2: Python interpreters are available for many operating systems, allowing Python code to run on a wide variety of systems. CPython, the reference implementation of Python, is open source software[30] and has a community-based development model, as do nearly all of its variant implementations. CPython is managed by the non-profit Python Software Foundation.</span><br></pre></td></tr></table></figure><h3 id="写操作"><a href="#写操作" class="headerlink" title="写操作"></a>写操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">txt_filename = <span class="string">'./files/test_write.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">file_obj = open(txt_filename, <span class="string">'w'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入全部内容</span></span><br><span class="line">file_obj.write(<span class="string">"《Python数据分析》"</span>)</span><br><span class="line">file_obj.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">txt_filename = <span class="string">'./files/test_write.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">file_obj = open(txt_filename, <span class="string">'w'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入字符串列表</span></span><br><span class="line">lines = [<span class="string">'这是第%i行\n'</span> %n <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">file_obj.writelines(lines)</span><br><span class="line">file_obj.close()</span><br></pre></td></tr></table></figure><h3 id="with-语句"><a href="#with-语句" class="headerlink" title="with 语句"></a>with 语句</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">txt_filename = <span class="string">'./files/test_write.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(txt_filename, <span class="string">'r'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    <span class="keyword">print</span> (f_obj.read())</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">这是第<span class="number">0</span>行</span><br><span class="line">这是第<span class="number">1</span>行</span><br><span class="line">这是第<span class="number">2</span>行</span><br><span class="line">这是第<span class="number">3</span>行</span><br><span class="line">这是第<span class="number">4</span>行</span><br><span class="line">这是第<span class="number">5</span>行</span><br><span class="line">这是第<span class="number">6</span>行</span><br><span class="line">这是第<span class="number">7</span>行</span><br><span class="line">这是第<span class="number">8</span>行</span><br><span class="line">这是第<span class="number">9</span>行</span><br></pre></td></tr></table></figure><h2 id="二、CSV-文件操作"><a href="#二、CSV-文件操作" class="headerlink" title="二、CSV 文件操作"></a>二、CSV 文件操作</h2><h3 id="pandas-读-csv-文件"><a href="#pandas-读-csv-文件" class="headerlink" title="pandas 读 csv 文件"></a>pandas 读 csv 文件</h3><blockquote><p>根据路径导入数据以及指定的列</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">filename = <span class="string">'./files/presidential_polls.csv'</span></span><br><span class="line">df = pd.read_csv(filename, usecols=[<span class="string">'cycle'</span>, <span class="string">'type'</span>, <span class="string">'startdate'</span>])<span class="comment">#导入指定列</span></span><br><span class="line"><span class="keyword">print</span> (type(df))</span><br><span class="line"><span class="keyword">print</span> (df.head())</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">&lt;class 'pandas.core.frame.DataFrame'&gt;</span><br><span class="line">   cycle        type   startdate</span><br><span class="line"><span class="number">0</span>   <span class="number">2016</span>  polls-plus  <span class="number">10</span>/<span class="number">25</span>/<span class="number">2016</span></span><br><span class="line"><span class="number">1</span>   <span class="number">2016</span>  polls-plus  <span class="number">10</span>/<span class="number">27</span>/<span class="number">2016</span></span><br><span class="line"><span class="number">2</span>   <span class="number">2016</span>  polls-plus  <span class="number">10</span>/<span class="number">27</span>/<span class="number">2016</span></span><br><span class="line"><span class="number">3</span>   <span class="number">2016</span>  polls-plus  <span class="number">10</span>/<span class="number">20</span>/<span class="number">2016</span></span><br><span class="line"><span class="number">4</span>   <span class="number">2016</span>  polls-plus  <span class="number">10</span>/<span class="number">20</span>/<span class="number">2016</span></span><br></pre></td></tr></table></figure><blockquote><p>引用指定的列</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cycle_se = df[<span class="string">'cycle'</span>]</span><br><span class="line"><span class="keyword">print</span> (type(cycle_se))</span><br><span class="line"><span class="keyword">print</span> (cycle_se.head())</span><br></pre></td></tr></table></figure><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">class</span> <span class="string">'pandas.core.series.Series'</span>&gt;</span><br><span class="line"><span class="number">0</span>    <span class="number">2016</span></span><br><span class="line"><span class="number">1</span>    <span class="number">2016</span></span><br><span class="line"><span class="number">2</span>    <span class="number">2016</span></span><br><span class="line"><span class="number">3</span>    <span class="number">2016</span></span><br><span class="line"><span class="number">4</span>    <span class="number">2016</span></span><br><span class="line"><span class="keyword">Name</span>: cycle, dtype: int64</span><br></pre></td></tr></table></figure><blockquote><p>多层索引成 dataframe 类型</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">'./files/presidential_polls.csv'</span></span><br><span class="line">df1 = pd.read_csv(filename,usecols=[<span class="string">'cycle'</span>, <span class="string">'type'</span>, <span class="string">'startdate'</span>,<span class="string">'state'</span>,<span class="string">'grade'</span>],index_col = [<span class="string">'state'</span>,<span class="string">'grade'</span>])</span><br><span class="line">print(df1.head())</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">                cycle        type   startdate</span><br><span class="line"><span class="section">state</span>    grade</span><br><span class="line">U.S.     B       <span class="number">2016</span>  polls-plus  <span class="number">10</span>/<span class="number">25</span>/<span class="number">2016</span></span><br><span class="line">         A+      <span class="number">2016</span>  polls-plus  <span class="number">10</span>/<span class="number">27</span>/<span class="number">2016</span></span><br><span class="line">Virginia A+      <span class="number">2016</span>  polls-plus  <span class="number">10</span>/<span class="number">27</span>/<span class="number">2016</span></span><br><span class="line">Florida  A       <span class="number">2016</span>  polls-plus  <span class="number">10</span>/<span class="number">20</span>/<span class="number">2016</span></span><br><span class="line">U.S.     B+      <span class="number">2016</span>  polls-plus  <span class="number">10</span>/<span class="number">20</span>/<span class="number">2016</span></span><br></pre></td></tr></table></figure><blockquote><p>跳过指定的行</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">'./files/presidential_polls.csv'</span></span><br><span class="line">df2 = pd.read_csv(filename,usecols=[<span class="string">'cycle'</span>, <span class="string">'type'</span>, <span class="string">'startdate'</span>,<span class="string">'state'</span>,<span class="string">'grade'</span>],skiprows=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">print(df2.head())</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">   cycle        type         <span class="section">state</span>   startdate grade</span><br><span class="line"><span class="number">0</span>   <span class="number">2016</span>  polls-plus       Florida  <span class="number">10</span>/<span class="number">20</span>/<span class="number">2016</span>     A</span><br><span class="line"><span class="number">1</span>   <span class="number">2016</span>  polls-plus          U.S.  <span class="number">10</span>/<span class="number">20</span>/<span class="number">2016</span>    B+</span><br><span class="line"><span class="number">2</span>   <span class="number">2016</span>  polls-plus          U.S.  <span class="number">10</span>/<span class="number">22</span>/<span class="number">2016</span>     A</span><br><span class="line"><span class="number">3</span>   <span class="number">2016</span>  polls-plus          U.S.  <span class="number">10</span>/<span class="number">26</span>/<span class="number">2016</span>    A-</span><br><span class="line"><span class="number">4</span>   <span class="number">2016</span>  polls-plus  Pennsylvania  <span class="number">10</span>/<span class="number">25</span>/<span class="number">2016</span>    B-</span><br></pre></td></tr></table></figure><h3 id="pandas-写-csv-文件"><a href="#pandas-写-csv-文件" class="headerlink" title="pandas 写 csv 文件"></a>pandas 写 csv 文件</h3><blockquote><p>·to_csv 里面的 index 参数作用？===可能是不要索引的意思。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">'./files/pandas_output.csv'</span></span><br><span class="line">df.to_csv(filename, index=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><h2 id="三、JSON-文件操作"><a href="#三、JSON-文件操作" class="headerlink" title="三、JSON 文件操作"></a>三、JSON 文件操作</h2><h3 id="json-读操作"><a href="#json-读操作" class="headerlink" title="json 读操作"></a>json 读操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'./files/global_temperature.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename, <span class="string">'r'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    json_data = json.load(f_obj)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回值是dict类型</span></span><br><span class="line"><span class="keyword">print</span> (type(json_data))</span><br></pre></td></tr></table></figure><figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">class</span> <span class="string">'dict'</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">print</span> (json_data.keys())</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">dict_keys</span><span class="params">([<span class="string">'description'</span>, <span class="string">'data'</span>])</span></span></span><br></pre></td></tr></table></figure><h3 id="json-转-CSV"><a href="#json-转-CSV" class="headerlink" title="json 转 CSV"></a>json 转 CSV</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#print json_data['data'].keys()</span></span><br><span class="line"><span class="keyword">print</span> (json_data[<span class="string">'data'</span>].values())</span><br></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">dict_values(['-0.<span class="number">1247</span>', '-0.<span class="number">0707</span>', '-0.<span class="number">0710</span>', '-0.<span class="number">1481</span>', '-0.<span class="number">2099</span>', '-0.<span class="number">2220</span>', '-0.<span class="number">2101</span>', '-0.<span class="number">2559</span>', '-0.<span class="number">1541</span>', '-0.<span class="number">1032</span>', '-0.<span class="number">3233</span>', '-0.<span class="number">2552</span>', '-0.<span class="number">3079</span>', '-0.<span class="number">3221</span>', '-0.<span class="number">2828</span>', '-0.<span class="number">2279</span>', '-0.<span class="number">0971</span>', '-0.<span class="number">1232</span>', '-0.<span class="number">2578</span>', '-0.<span class="number">1172</span>', '-0.<span class="number">0704</span>', '-0.<span class="number">1471</span>', '-0.<span class="number">2535</span>', '-0.<span class="number">3442</span>', '-0.<span class="number">4240</span>', '-0.<span class="number">2967</span>', '-0.<span class="number">2208</span>', '-0.<span class="number">3767</span>', '-0.<span class="number">4441</span>', '-0.<span class="number">4332</span>', '-0.<span class="number">3862</span>', '-0.<span class="number">4367</span>', '-0.<span class="number">3318</span>', '-0.<span class="number">3205</span>', '-0.<span class="number">1444</span>', '-0.<span class="number">0747</span>', '-0.<span class="number">2979</span>', '-0.<span class="number">3193</span>', '-0.<span class="number">2118</span>', '-0.<span class="number">2082</span>', '-0.<span class="number">2152</span>', '-0.<span class="number">1517</span>', '-0.<span class="number">2318</span>', '-0.<span class="number">2161</span>', '-0.<span class="number">2510</span>', '-0.<span class="number">1464</span>', '-0.<span class="number">0618</span>', '-0.<span class="number">1506</span>', '-0.<span class="number">1749</span>', '-0.<span class="number">2982</span>', '-0.<span class="number">1016</span>', '-0.<span class="number">0714</span>', '-0.<span class="number">1214</span>', '-0.<span class="number">2481</span>', '-0.<span class="number">1075</span>', '-0.<span class="number">1445</span>', '-0.<span class="number">1173</span>', '-0.<span class="number">0204</span>', '-0.<span class="number">0318</span>', '-0.<span class="number">0157</span>', '0.<span class="number">0927</span>', '0.<span class="number">1974</span>', '0.<span class="number">1549</span>', '0.<span class="number">1598</span>', '0.<span class="number">2948</span>', '0.<span class="number">1754</span>', '-0.<span class="number">0013</span>', '-0.<span class="number">0455</span>', '-0.<span class="number">0471</span>', '-0.<span class="number">0550</span>', '-0.<span class="number">1579</span>', '-0.<span class="number">0095</span>', '0.<span class="number">0288</span>', '0.<span class="number">0997</span>', '-0.<span class="number">1118</span>', '-0.<span class="number">1305</span>', '-0.<span class="number">1945</span>', '0.<span class="number">0538</span>', '0.<span class="number">1145</span>', '0.<span class="number">0640</span>', '0.<span class="number">0252</span>', '0.<span class="number">0818</span>', '0.<span class="number">0924</span>', '0.<span class="number">1100</span>', '-0.<span class="number">1461</span>', '-0.<span class="number">0752</span>', '-0.<span class="number">0204</span>', '-0.<span class="number">0112</span>', '-0.<span class="number">0282</span>', '0.<span class="number">0937</span>', '0.<span class="number">0383</span>', '-0.<span class="number">0775</span>', '0.<span class="number">0280</span>', '0.<span class="number">1654</span>', '-0.<span class="number">0698</span>', '0.<span class="number">0060</span>', '-0.<span class="number">0769</span>', '0.<span class="number">1996</span>', '0.<span class="number">1139</span>', '0.<span class="number">2288</span>', '0.<span class="number">2651</span>', '0.<span class="number">3024</span>', '0.<span class="number">1836</span>', '0.<span class="number">3429</span>', '0.<span class="number">1510</span>', '0.<span class="number">1357</span>', '0.<span class="number">2308</span>', '0.<span class="number">3710</span>', '0.<span class="number">3770</span>', '0.<span class="number">2982</span>', '0.<span class="number">4350</span>', '0.<span class="number">4079</span>', '0.<span class="number">2583</span>', '0.<span class="number">2857</span>', '0.<span class="number">3420</span>', '0.<span class="number">4593</span>', '0.<span class="number">3225</span>', '0.<span class="number">5185</span>', '0.<span class="number">6335</span>', '0.<span class="number">4427</span>', '0.<span class="number">4255</span>', '0.<span class="number">5455</span>', '0.<span class="number">6018</span>', '0.<span class="number">6145</span>', '0.<span class="number">5806</span>', '0.<span class="number">6583</span>', '0.<span class="number">6139</span>', '0.<span class="number">6113</span>', '0.<span class="number">5415</span>', '0.<span class="number">6354</span>', '0.<span class="number">7008</span>', '0.<span class="number">5759</span>', '0.<span class="number">6219</span>', '0.<span class="number">6687</span>', '0.<span class="number">7402</span>', '0.<span class="number">8990</span>'])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 转换key</span></span><br><span class="line">year_str_lst = json_data[<span class="string">'data'</span>].keys()</span><br><span class="line">year_lst = [int(year_str) <span class="keyword">for</span> year_str <span class="keyword">in</span> year_str_lst]</span><br><span class="line"><span class="keyword">print</span> (year_lst)</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[<span class="number">1880</span>, <span class="number">1881</span>, <span class="number">1882</span>, <span class="number">1883</span>, <span class="number">1884</span>, <span class="number">1885</span>, <span class="number">1886</span>, <span class="number">1887</span>, <span class="number">1888</span>, <span class="number">1889</span>, <span class="number">1890</span>, <span class="number">1891</span>, <span class="number">1892</span>, <span class="number">1893</span>, <span class="number">1894</span>, <span class="number">1895</span>, <span class="number">1896</span>, <span class="number">1897</span>, <span class="number">1898</span>, <span class="number">1899</span>, <span class="number">1900</span>, <span class="number">1901</span>, <span class="number">1902</span>, <span class="number">1903</span>, <span class="number">1904</span>, <span class="number">1905</span>, <span class="number">1906</span>, <span class="number">1907</span>, <span class="number">1908</span>, <span class="number">1909</span>, <span class="number">1910</span>, <span class="number">1911</span>, <span class="number">1912</span>, <span class="number">1913</span>, <span class="number">1914</span>, <span class="number">1915</span>, <span class="number">1916</span>, <span class="number">1917</span>, <span class="number">1918</span>, <span class="number">1919</span>, <span class="number">1920</span>, <span class="number">1921</span>, <span class="number">1922</span>, <span class="number">1923</span>, <span class="number">1924</span>, <span class="number">1925</span>, <span class="number">1926</span>, <span class="number">1927</span>, <span class="number">1928</span>, <span class="number">1929</span>, <span class="number">1930</span>, <span class="number">1931</span>, <span class="number">1932</span>, <span class="number">1933</span>, <span class="number">1934</span>, <span class="number">1935</span>, <span class="number">1936</span>, <span class="number">1937</span>, <span class="number">1938</span>, <span class="number">1939</span>, <span class="number">1940</span>, <span class="number">1941</span>, <span class="number">1942</span>, <span class="number">1943</span>, <span class="number">1944</span>, <span class="number">1945</span>, <span class="number">1946</span>, <span class="number">1947</span>, <span class="number">1948</span>, <span class="number">1949</span>, <span class="number">1950</span>, <span class="number">1951</span>, <span class="number">1952</span>, <span class="number">1953</span>, <span class="number">1954</span>, <span class="number">1955</span>, <span class="number">1956</span>, <span class="number">1957</span>, <span class="number">1958</span>, <span class="number">1959</span>, <span class="number">1960</span>, <span class="number">1961</span>, <span class="number">1962</span>, <span class="number">1963</span>, <span class="number">1964</span>, <span class="number">1965</span>, <span class="number">1966</span>, <span class="number">1967</span>, <span class="number">1968</span>, <span class="number">1969</span>, <span class="number">1970</span>, <span class="number">1971</span>, <span class="number">1972</span>, <span class="number">1973</span>, <span class="number">1974</span>, <span class="number">1975</span>, <span class="number">1976</span>, <span class="number">1977</span>, <span class="number">1978</span>, <span class="number">1979</span>, <span class="number">1980</span>, <span class="number">1981</span>, <span class="number">1982</span>, <span class="number">1983</span>, <span class="number">1984</span>, <span class="number">1985</span>, <span class="number">1986</span>, <span class="number">1987</span>, <span class="number">1988</span>, <span class="number">1989</span>, <span class="number">1990</span>, <span class="number">1991</span>, <span class="number">1992</span>, <span class="number">1993</span>, <span class="number">1994</span>, <span class="number">1995</span>, <span class="number">1996</span>, <span class="number">1997</span>, <span class="number">1998</span>, <span class="number">1999</span>, <span class="number">2000</span>, <span class="number">2001</span>, <span class="number">2002</span>, <span class="number">2003</span>, <span class="number">2004</span>, <span class="number">2005</span>, <span class="number">2006</span>, <span class="number">2007</span>, <span class="number">2008</span>, <span class="number">2009</span>, <span class="number">2010</span>, <span class="number">2011</span>, <span class="number">2012</span>, <span class="number">2013</span>, <span class="number">2014</span>, <span class="number">2015</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 转换value</span></span><br><span class="line">temp_str_lst = json_data[<span class="string">'data'</span>].values()</span><br><span class="line">temp_lst = [float(temp_str) <span class="keyword">for</span> temp_str <span class="keyword">in</span> temp_str_lst]</span><br><span class="line"><span class="keyword">print</span> (temp_lst)</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[<span class="number">-0.1247</span>, <span class="number">-0.0707</span>, <span class="number">-0.071</span>, <span class="number">-0.1481</span>, <span class="number">-0.2099</span>, <span class="number">-0.222</span>, <span class="number">-0.2101</span>, <span class="number">-0.2559</span>, <span class="number">-0.1541</span>, <span class="number">-0.1032</span>, <span class="number">-0.3233</span>, <span class="number">-0.2552</span>, <span class="number">-0.3079</span>, <span class="number">-0.3221</span>, <span class="number">-0.2828</span>, <span class="number">-0.2279</span>, <span class="number">-0.0971</span>, <span class="number">-0.1232</span>, <span class="number">-0.2578</span>, <span class="number">-0.1172</span>, <span class="number">-0.0704</span>, <span class="number">-0.1471</span>, <span class="number">-0.2535</span>, <span class="number">-0.3442</span>, <span class="number">-0.424</span>, <span class="number">-0.2967</span>, <span class="number">-0.2208</span>, <span class="number">-0.3767</span>, <span class="number">-0.4441</span>, <span class="number">-0.4332</span>, <span class="number">-0.3862</span>, <span class="number">-0.4367</span>, <span class="number">-0.3318</span>, <span class="number">-0.3205</span>, <span class="number">-0.1444</span>, <span class="number">-0.0747</span>, <span class="number">-0.2979</span>, <span class="number">-0.3193</span>, <span class="number">-0.2118</span>, <span class="number">-0.2082</span>, <span class="number">-0.2152</span>, <span class="number">-0.1517</span>, <span class="number">-0.2318</span>, <span class="number">-0.2161</span>, <span class="number">-0.251</span>, <span class="number">-0.1464</span>, <span class="number">-0.0618</span>, <span class="number">-0.1506</span>, <span class="number">-0.1749</span>, <span class="number">-0.2982</span>, <span class="number">-0.1016</span>, <span class="number">-0.0714</span>, <span class="number">-0.1214</span>, <span class="number">-0.2481</span>, <span class="number">-0.1075</span>, <span class="number">-0.1445</span>, <span class="number">-0.1173</span>, <span class="number">-0.0204</span>, <span class="number">-0.0318</span>, <span class="number">-0.0157</span>, <span class="number">0.0927</span>, <span class="number">0.1974</span>, <span class="number">0.1549</span>, <span class="number">0.1598</span>, <span class="number">0.2948</span>, <span class="number">0.1754</span>, <span class="number">-0.0013</span>, <span class="number">-0.0455</span>, <span class="number">-0.0471</span>, <span class="number">-0.055</span>, <span class="number">-0.1579</span>, <span class="number">-0.0095</span>, <span class="number">0.0288</span>, <span class="number">0.0997</span>, <span class="number">-0.1118</span>, <span class="number">-0.1305</span>, <span class="number">-0.1945</span>, <span class="number">0.0538</span>, <span class="number">0.1145</span>, <span class="number">0.064</span>, <span class="number">0.0252</span>, <span class="number">0.0818</span>, <span class="number">0.0924</span>, <span class="number">0.11</span>, <span class="number">-0.1461</span>, <span class="number">-0.0752</span>, <span class="number">-0.0204</span>, <span class="number">-0.0112</span>, <span class="number">-0.0282</span>, <span class="number">0.0937</span>, <span class="number">0.0383</span>, <span class="number">-0.0775</span>, <span class="number">0.028</span>, <span class="number">0.1654</span>, <span class="number">-0.0698</span>, <span class="number">0.006</span>, <span class="number">-0.0769</span>, <span class="number">0.1996</span>, <span class="number">0.1139</span>, <span class="number">0.2288</span>, <span class="number">0.2651</span>, <span class="number">0.3024</span>, <span class="number">0.1836</span>, <span class="number">0.3429</span>, <span class="number">0.151</span>, <span class="number">0.1357</span>, <span class="number">0.2308</span>, <span class="number">0.371</span>, <span class="number">0.377</span>, <span class="number">0.2982</span>, <span class="number">0.435</span>, <span class="number">0.4079</span>, <span class="number">0.2583</span>, <span class="number">0.2857</span>, <span class="number">0.342</span>, <span class="number">0.4593</span>, <span class="number">0.3225</span>, <span class="number">0.5185</span>, <span class="number">0.6335</span>, <span class="number">0.4427</span>, <span class="number">0.4255</span>, <span class="number">0.5455</span>, <span class="number">0.6018</span>, <span class="number">0.6145</span>, <span class="number">0.5806</span>, <span class="number">0.6583</span>, <span class="number">0.6139</span>, <span class="number">0.6113</span>, <span class="number">0.5415</span>, <span class="number">0.6354</span>, <span class="number">0.7008</span>, <span class="number">0.5759</span>, <span class="number">0.6219</span>, <span class="number">0.6687</span>, <span class="number">0.7402</span>, <span class="number">0.899</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建 dataframe</span></span><br><span class="line">year_se = pd.Series(year_lst, name = <span class="string">'year'</span>)</span><br><span class="line">temp_se = pd.Series(temp_lst, name = <span class="string">'temperature'</span>)</span><br><span class="line">result_df = pd.concat([year_se, temp_se], axis = <span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span> (result_df.head())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存csv</span></span><br><span class="line">result_df.to_csv(<span class="string">'./files/json_to_csv.csv'</span>, index = <span class="literal">None</span>)</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">   year  temperature</span><br><span class="line"><span class="number">0</span>  <span class="number">1880</span>      <span class="number">-0.1247</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1881</span>      <span class="number">-0.0707</span></span><br><span class="line"><span class="number">2</span>  <span class="number">1882</span>      <span class="number">-0.0710</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1883</span>      <span class="number">-0.1481</span></span><br><span class="line"><span class="number">4</span>  <span class="number">1884</span>      <span class="number">-0.2099</span></span><br></pre></td></tr></table></figure><h3 id="写-json-操作"><a href="#写-json-操作" class="headerlink" title="写 json 操作"></a>写 json 操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book_dict = [&#123;<span class="string">'书名'</span>:<span class="string">'无声告白'</span>, <span class="string">'作者'</span>:<span class="string">'伍绮诗'</span>&#125;, &#123;<span class="string">'书名'</span>:<span class="string">'我不是潘金莲'</span>, <span class="string">'作者'</span>:<span class="string">'刘震云'</span>&#125;, &#123;<span class="string">'书名'</span>:<span class="string">'沉默的大多数 (王小波集)'</span>, <span class="string">'作者'</span>:<span class="string">'王小波'</span>&#125;]</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'./files/json_output.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename, <span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    f_obj.write(json.dumps(book_dict, ensure_ascii=<span class="literal">False</span>))</span><br><span class="line"><span class="comment"># 不需要加, encoding='utf-8'参数</span></span><br></pre></td></tr></table></figure><h2 id="四、SQLite-基本操作"><a href="#四、SQLite-基本操作" class="headerlink" title="四、SQLite 基本操作"></a>四、SQLite 基本操作</h2><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">db_path = <span class="string">'./files/test.sqlite'</span></span><br><span class="line"></span><br><span class="line">conn = sqlite3.connect(db_path)</span><br><span class="line">cur = conn.cursor()</span><br><span class="line">conn.text_factory = str  <span class="comment"># 处理中文</span></span><br></pre></td></tr></table></figure><h3 id="获取基本信息"><a href="#获取基本信息" class="headerlink" title="获取基本信息"></a>获取基本信息</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cur.execute(<span class="string">'SELECT SQLITE_VERSION()'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'SQLite版本：%s'</span> %str(cur.fetchone()[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">SQLite</span>版本：3<span class="selector-class">.30</span><span class="selector-class">.0</span></span><br></pre></td></tr></table></figure><h3 id="逐条插入数据"><a href="#逐条插入数据" class="headerlink" title="逐条插入数据"></a>逐条插入数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cur.execute(<span class="string">"DROP TABLE IF EXISTS book"</span>)</span><br><span class="line">cur.execute(<span class="string">"CREATE TABLE book(id INT, name TEXT, price DOUBLE)"</span>)</span><br><span class="line">cur.execute(<span class="string">"INSERT INTO book VALUES(1,'肖秀荣考研书系列:肖秀荣(2017)考研政治命题人终极预测4套卷',14.40)"</span>)</span><br><span class="line">cur.execute(<span class="string">"INSERT INTO book VALUES(2,'法医秦明作品集:幸存者+清道夫+尸语者+无声的证词+第十一根手指(套装共5册) (两种封面随机发货)',100.00)"</span>)</span><br><span class="line">cur.execute(<span class="string">"INSERT INTO book VALUES(3,'活着本来单纯:丰子恺散文漫画精品集(收藏本)',30.90)"</span>)</span><br><span class="line">cur.execute(<span class="string">"INSERT INTO book VALUES(4,'自在独行:贾平凹的独行世界',26.80)"</span>)</span><br><span class="line">cur.execute(<span class="string">"INSERT INTO book VALUES(5,'当你的才华还撑不起你的梦想时',23.00)"</span>)</span><br><span class="line">cur.execute(<span class="string">"INSERT INTO book VALUES(6,'巨人的陨落(套装共3册)',84.90)"</span>)</span><br><span class="line">cur.execute(<span class="string">"INSERT INTO book VALUES(7,'孤独深处(收录雨果奖获奖作品《北京折叠》)',21.90)"</span>)</span><br><span class="line">cur.execute(<span class="string">"INSERT INTO book VALUES(8,'世界知名企业员工指定培训教材:所谓情商高,就是会说话',22.00)"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">&lt;sqlite3<span class="number">.</span>Cursor <span class="meta">at</span> <span class="number">0x2d2d64e7c00</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="批量插入数据"><a href="#批量插入数据" class="headerlink" title="批量插入数据"></a>批量插入数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">books = (</span><br><span class="line">    (<span class="number">9</span>, <span class="string">'人间草木'</span>, <span class="number">30.00</span>),</span><br><span class="line">    (<span class="number">10</span>,<span class="string">'你的善良必须有点锋芒'</span>, <span class="number">20.50</span>),</span><br><span class="line">    (<span class="number">11</span>, <span class="string">'这么慢,那么美'</span>, <span class="number">24.80</span>),</span><br><span class="line">    (<span class="number">12</span>, <span class="string">'考拉小巫的英语学习日记:写给为梦想而奋斗的人(全新修订版)'</span>, <span class="number">23.90</span>)</span><br><span class="line">)</span><br><span class="line">cur.executemany(<span class="string">"INSERT INTO book VALUES(?, ?, ?)"</span>, books)</span><br></pre></td></tr></table></figure><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">&lt;sqlite3<span class="number">.</span>Cursor <span class="meta">at</span> <span class="number">0x2d2d64e7c00</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conn.commit()</span><br></pre></td></tr></table></figure><h3 id="查找数据"><a href="#查找数据" class="headerlink" title="查找数据"></a>查找数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cur.execute(<span class="string">'SELECT * FROM book'</span>)</span><br><span class="line">rows = cur.fetchall()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过索引号访问</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'序号: %i, 书名: %s, 价格: %.2f'</span> %(row[<span class="number">0</span>], row[<span class="number">1</span>], row[<span class="number">2</span>]))</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">序号:</span> <span class="number">1</span><span class="string">,</span> <span class="string">书名:</span> <span class="string">肖秀荣考研书系列:肖秀荣(2017)考研政治命题人终极预测4套卷,</span> <span class="string">价格:</span> <span class="number">14.40</span></span><br><span class="line"><span class="string">序号:</span> <span class="number">2</span><span class="string">,</span> <span class="string">书名:</span> <span class="string">法医秦明作品集:幸存者+清道夫+尸语者+无声的证词+第十一根手指(套装共5册)</span> <span class="string">(两种封面随机发货),</span> <span class="string">价格:</span> <span class="number">100.00</span></span><br><span class="line"><span class="string">序号:</span> <span class="number">3</span><span class="string">,</span> <span class="string">书名:</span> <span class="string">活着本来单纯:丰子恺散文漫画精品集(收藏本),</span> <span class="string">价格:</span> <span class="number">30.90</span></span><br><span class="line"><span class="string">序号:</span> <span class="number">4</span><span class="string">,</span> <span class="string">书名:</span> <span class="string">自在独行:贾平凹的独行世界,</span> <span class="string">价格:</span> <span class="number">26.80</span></span><br><span class="line"><span class="string">序号:</span> <span class="number">5</span><span class="string">,</span> <span class="string">书名:</span> <span class="string">当你的才华还撑不起你的梦想时,</span> <span class="string">价格:</span> <span class="number">23.00</span></span><br><span class="line"><span class="string">序号:</span> <span class="number">6</span><span class="string">,</span> <span class="string">书名:</span> <span class="string">巨人的陨落(套装共3册),</span> <span class="string">价格:</span> <span class="number">84.90</span></span><br><span class="line"><span class="string">序号:</span> <span class="number">7</span><span class="string">,</span> <span class="string">书名:</span> <span class="string">孤独深处(收录雨果奖获奖作品《北京折叠》),</span> <span class="string">价格:</span> <span class="number">21.90</span></span><br><span class="line"><span class="string">序号:</span> <span class="number">8</span><span class="string">,</span> <span class="string">书名:</span> <span class="string">世界知名企业员工指定培训教材:所谓情商高,就是会说话,</span> <span class="string">价格:</span> <span class="number">22.00</span></span><br><span class="line"><span class="string">序号:</span> <span class="number">9</span><span class="string">,</span> <span class="string">书名:</span> <span class="string">人间草木,</span> <span class="string">价格:</span> <span class="number">30.00</span></span><br><span class="line"><span class="string">序号:</span> <span class="number">10</span><span class="string">,</span> <span class="string">书名:</span> <span class="string">你的善良必须有点锋芒,</span> <span class="string">价格:</span> <span class="number">20.50</span></span><br><span class="line"><span class="string">序号:</span> <span class="number">11</span><span class="string">,</span> <span class="string">书名:</span> <span class="string">这么慢,那么美,</span> <span class="string">价格:</span> <span class="number">24.80</span></span><br><span class="line"><span class="string">序号:</span> <span class="number">12</span><span class="string">,</span> <span class="string">书名:</span> <span class="string">考拉小巫的英语学习日记:写给为梦想而奋斗的人(全新修订版),</span> <span class="string">价格:</span> <span class="number">23.90</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conn.row_factory = sqlite3.Row</span><br><span class="line">cur = conn.cursor()</span><br><span class="line">cur.execute(<span class="string">'SELECT * FROM book'</span>)</span><br><span class="line">rows = cur.fetchall()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过列名访问</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'序号: %i, 书名: %s, 价格: %.2f'</span> %(row[<span class="string">'id'</span>], row[<span class="string">'name'</span>], row[<span class="string">'price'</span>]))</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">序号:</span> <span class="number">1</span><span class="string">,</span> <span class="string">书名:</span> <span class="string">肖秀荣考研书系列:肖秀荣(2017)考研政治命题人终极预测4套卷,</span> <span class="string">价格:</span> <span class="number">14.40</span></span><br><span class="line"><span class="string">序号:</span> <span class="number">2</span><span class="string">,</span> <span class="string">书名:</span> <span class="string">法医秦明作品集:幸存者+清道夫+尸语者+无声的证词+第十一根手指(套装共5册)</span> <span class="string">(两种封面随机发货),</span> <span class="string">价格:</span> <span class="number">100.00</span></span><br><span class="line"><span class="string">序号:</span> <span class="number">3</span><span class="string">,</span> <span class="string">书名:</span> <span class="string">活着本来单纯:丰子恺散文漫画精品集(收藏本),</span> <span class="string">价格:</span> <span class="number">30.90</span></span><br><span class="line"><span class="string">序号:</span> <span class="number">4</span><span class="string">,</span> <span class="string">书名:</span> <span class="string">自在独行:贾平凹的独行世界,</span> <span class="string">价格:</span> <span class="number">26.80</span></span><br><span class="line"><span class="string">序号:</span> <span class="number">5</span><span class="string">,</span> <span class="string">书名:</span> <span class="string">当你的才华还撑不起你的梦想时,</span> <span class="string">价格:</span> <span class="number">23.00</span></span><br><span class="line"><span class="string">序号:</span> <span class="number">6</span><span class="string">,</span> <span class="string">书名:</span> <span class="string">巨人的陨落(套装共3册),</span> <span class="string">价格:</span> <span class="number">84.90</span></span><br><span class="line"><span class="string">序号:</span> <span class="number">7</span><span class="string">,</span> <span class="string">书名:</span> <span class="string">孤独深处(收录雨果奖获奖作品《北京折叠》),</span> <span class="string">价格:</span> <span class="number">21.90</span></span><br><span class="line"><span class="string">序号:</span> <span class="number">8</span><span class="string">,</span> <span class="string">书名:</span> <span class="string">世界知名企业员工指定培训教材:所谓情商高,就是会说话,</span> <span class="string">价格:</span> <span class="number">22.00</span></span><br><span class="line"><span class="string">序号:</span> <span class="number">9</span><span class="string">,</span> <span class="string">书名:</span> <span class="string">人间草木,</span> <span class="string">价格:</span> <span class="number">30.00</span></span><br><span class="line"><span class="string">序号:</span> <span class="number">10</span><span class="string">,</span> <span class="string">书名:</span> <span class="string">你的善良必须有点锋芒,</span> <span class="string">价格:</span> <span class="number">20.50</span></span><br><span class="line"><span class="string">序号:</span> <span class="number">11</span><span class="string">,</span> <span class="string">书名:</span> <span class="string">这么慢,那么美,</span> <span class="string">价格:</span> <span class="number">24.80</span></span><br><span class="line"><span class="string">序号:</span> <span class="number">12</span><span class="string">,</span> <span class="string">书名:</span> <span class="string">考拉小巫的英语学习日记:写给为梦想而奋斗的人(全新修订版),</span> <span class="string">价格:</span> <span class="number">23.90</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h2 id="五、SQLite-json-操作"><a href="#五、SQLite-json-操作" class="headerlink" title="五、SQLite_json 操作"></a>五、SQLite_json 操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">db_path = <span class="string">'./files/test_join.sqlite'</span></span><br><span class="line"></span><br><span class="line">conn = sqlite3.connect(db_path)</span><br><span class="line">cur = conn.cursor()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建 depaetment 表，并插入数据</span></span><br><span class="line">cur.execute(<span class="string">"DROP TABLE IF EXISTS department"</span>)</span><br><span class="line">cur.execute(<span class="string">"CREATE TABLE department(\</span></span><br><span class="line"><span class="string">                id INT PRIMARY KEY NOT NULL, \</span></span><br><span class="line"><span class="string">                dept CHAR(50) NOT NULL, \</span></span><br><span class="line"><span class="string">                emp_id INT NOT NULL)"</span>)</span><br><span class="line">depts = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">'IT Builing'</span>, <span class="number">1</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">'Engineerin'</span>, <span class="number">2</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">'Finance'</span>, <span class="number">7</span>)</span><br><span class="line">)</span><br><span class="line">cur.executemany(<span class="string">"INSERT INTO department VALUES(?, ?, ?)"</span>, depts)</span><br></pre></td></tr></table></figure><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">&lt;sqlite3<span class="number">.</span>Cursor <span class="meta">at</span> <span class="number">0x2d2d64f70a0</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conn.commit()</span><br></pre></td></tr></table></figure><h3 id="CROSS-JOIN-交叉连接"><a href="#CROSS-JOIN-交叉连接" class="headerlink" title="CROSS JOIN 交叉连接"></a>CROSS JOIN 交叉连接</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cur.execute(<span class="string">"SELECT emp_id, name, dept FROM company CROSS JOIN department;"</span>)</span><br><span class="line">rows = cur.fetchall()</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">    <span class="keyword">print</span> (row)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建 company 表，并插入数据</span></span><br><span class="line">cur.execute(<span class="string">"DROP TABLE IF EXISTS company"</span>)</span><br><span class="line">cur.execute(<span class="string">"CREATE TABLE company(\</span></span><br><span class="line"><span class="string">                    id INT PRIMARY KEY NOT NULL, \</span></span><br><span class="line"><span class="string">                    name CHAR(50) NOT NULL, \</span></span><br><span class="line"><span class="string">                    age INT NOT NULL, \</span></span><br><span class="line"><span class="string">                    address CHAR(50) NOT NULL,\</span></span><br><span class="line"><span class="string">                    salary DOUBLE NOT NULL)"</span>)</span><br><span class="line">companies = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">'Paul'</span>, <span class="number">32</span>, <span class="string">'California'</span>, <span class="number">20000.0</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">'Allen'</span>, <span class="number">25</span>, <span class="string">'Texas'</span>, <span class="number">15000.0</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">'Teddy'</span>, <span class="number">23</span>, <span class="string">'Norway'</span>, <span class="number">20000.0</span>),</span><br><span class="line">        (<span class="number">4</span>, <span class="string">'Mark'</span>, <span class="number">25</span>, <span class="string">'Rich-Mond'</span>, <span class="number">65000.0</span>),</span><br><span class="line">        (<span class="number">5</span>, <span class="string">'David'</span>, <span class="number">27</span>, <span class="string">'Texas'</span>, <span class="number">85000.0</span>),</span><br><span class="line">        (<span class="number">6</span>, <span class="string">'Kim'</span>, <span class="number">22</span>, <span class="string">'South-Hall'</span>, <span class="number">45000.0</span>),</span><br><span class="line">        (<span class="number">7</span>, <span class="string">'James'</span>, <span class="number">24</span>, <span class="string">'Houston'</span>, <span class="number">10000.0</span>)</span><br><span class="line">)</span><br><span class="line">cur.executemany(<span class="string">"INSERT INTO company VALUES (?, ?, ?, ?, ?)"</span>, companies)</span><br></pre></td></tr></table></figure><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">&lt;sqlite3<span class="number">.</span>Cursor <span class="meta">at</span> <span class="number">0x2d2d64f70a0</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="INNER-JOIN-内连接"><a href="#INNER-JOIN-内连接" class="headerlink" title="INNER JOIN 内连接"></a>INNER JOIN 内连接</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cur.execute(<span class="string">"SELECT emp_id, name, dept FROM company INNER JOIN department \</span></span><br><span class="line"><span class="string">            ON company.id = department.emp_id;"</span>)</span><br><span class="line">rows = cur.fetchall()</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">    <span class="keyword">print</span> (row)</span><br></pre></td></tr></table></figure><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">1</span>, <span class="symbol">'Paul</span>', <span class="symbol">'IT</span> Builing')</span><br><span class="line">(<span class="name">2</span>, <span class="symbol">'Allen</span>', <span class="symbol">'Engineerin</span>')</span><br><span class="line">(<span class="name">7</span>, <span class="symbol">'James</span>', <span class="symbol">'Finance</span>')</span><br></pre></td></tr></table></figure><h3 id="OUTER-JOIN-外连接"><a href="#OUTER-JOIN-外连接" class="headerlink" title="OUTER JOIN 外连接"></a>OUTER JOIN 外连接</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 左连接</span></span><br><span class="line">cur.execute(<span class="string">"SELECT emp_id, name, dept FROM company LEFT OUTER JOIN department \</span></span><br><span class="line"><span class="string">            ON company.id = department.emp_id;"</span>)</span><br><span class="line">rows = cur.fetchall()</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">    <span class="keyword">print</span> (row)</span><br></pre></td></tr></table></figure><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">1</span>, <span class="symbol">'Paul</span>', <span class="symbol">'IT</span> Builing')</span><br><span class="line">(<span class="name">2</span>, <span class="symbol">'Allen</span>', <span class="symbol">'Engineerin</span>')</span><br><span class="line">(<span class="name">None</span>, <span class="symbol">'Teddy</span>', None)</span><br><span class="line">(<span class="name">None</span>, <span class="symbol">'Mark</span>', None)</span><br><span class="line">(<span class="name">None</span>, <span class="symbol">'David</span>', None)</span><br><span class="line">(<span class="name">None</span>, <span class="symbol">'Kim</span>', None)</span><br><span class="line">(<span class="name">7</span>, <span class="symbol">'James</span>', <span class="symbol">'Finance</span>')</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 右连接 （目前不支持）</span></span><br><span class="line">cur.execute(<span class="string">"SELECT emp_id, name, dept FROM company RIGHT OUTER JOIN department \</span></span><br><span class="line"><span class="string">            ON company.id = department.emp_id;"</span>)</span><br><span class="line">rows = cur.fetchall()</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">    <span class="keyword">print</span> (row)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">---------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">OperationalError                          Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>)</span><br><span class="line"></span><br><span class="line">&lt;ipython-<span class="keyword">input</span><span class="number">-41</span>-ce0fc573748b&gt; <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">      <span class="number">1</span> <span class="comment"># 右连接 （目前不支持）</span></span><br><span class="line">      <span class="number">2</span> cur.execute(<span class="string">"SELECT emp_id, name, dept FROM company RIGHT OUTER JOIN department \</span></span><br><span class="line"><span class="string">----&gt; 3             ON company.id = department.emp_id;"</span>)</span><br><span class="line">      <span class="number">4</span> <span class="keyword">rows</span> = cur.fetchall()</span><br><span class="line">      <span class="number">5</span> <span class="keyword">for</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">rows</span>:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">OperationalError: <span class="keyword">RIGHT</span> <span class="keyword">and</span> <span class="keyword">FULL</span> <span class="keyword">OUTER</span> JOINs <span class="keyword">are</span> <span class="keyword">not</span> currently supported</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 右连接，交换两张表</span></span><br><span class="line">cur.execute(<span class="string">"SELECT emp_id, name, dept FROM department LEFT OUTER JOIN company \</span></span><br><span class="line"><span class="string">            ON company.id = department.emp_id;"</span>)</span><br><span class="line">rows = cur.fetchall()</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">    <span class="keyword">print</span> (row)</span><br></pre></td></tr></table></figure><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">1</span>, <span class="symbol">'Paul</span>', <span class="symbol">'IT</span> Builing')</span><br><span class="line">(<span class="name">2</span>, <span class="symbol">'Allen</span>', <span class="symbol">'Engineerin</span>')</span><br><span class="line">(<span class="name">7</span>, <span class="symbol">'James</span>', <span class="symbol">'Finance</span>')</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sqlite&gt; SELECT EMP_ID, NAME, DEPT FROM COMPANY LEFT OUTER JOIN DEPARTMENT</span><br><span class="line">      ON COMPANY.ID = DEPARTMENT.EMP_ID;</span><br></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">  File "&lt;ipython-input-43-a0833b733075&gt;", line 1</span><br><span class="line">    sqlite&gt; <span class="keyword">SELECT</span> EMP_ID, NAME, DEPT <span class="keyword">FROM</span> COMPANY <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> DEPARTMENT</span><br><span class="line">                        ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><h2 id="六、Excel-文件操作"><a href="#六、Excel-文件操作" class="headerlink" title="六、Excel 文件操作"></a>六、Excel 文件操作</h2><p>pandas.read_excel(io, sheet_name=0, header=0, names=None, index_col=None, usecols=None, squeeze=False, dtype=None, engine=None, converters=None, true_values=None, false_values=None, skiprows=None, nrows=None, na_values=None, keep_default_na=True, verbose=False, parse_dates=False, date_parser=None, thousands=None, comment=None, skipfooter=0, convert_float=True, mangle_dupe_cols=True, **kwds)</p><p>df_fujian = pd.read_excel(“./datafiles/fujian.xlsx”,sheet_name=’日数据’)</p>]]></content>
      
      
      <categories>
          
          <category> DataAnalysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DataAnalysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫框架</title>
      <link href="blog/ozvhfb/"/>
      <url>blog/ozvhfb/</url>
      
        <content type="html"><![CDATA[<h2 id="一、爬虫基本架构"><a href="#一、爬虫基本架构" class="headerlink" title="一、爬虫基本架构"></a>一、爬虫基本架构</h2><h3 id="url-管理模块"><a href="#url-管理模块" class="headerlink" title="url 管理模块"></a>url 管理模块</h3><ul><li>就是管理自己爬取的的网页不要重复爬取，避免爬取进入死循环</li><li>使用 python 当中的 set 数据结构</li></ul><h3 id="网页下载模块"><a href="#网页下载模块" class="headerlink" title="网页下载模块"></a>网页下载模块</h3><blockquote><p>将对应的 url 模块下载到本地或者读入内存</p></blockquote><blockquote><p>实现方式</p></blockquote><ul><li>通过 url 下载</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line">test_url = <span class="string">"https://wztlink1013.github.io"</span></span><br><span class="line">response = urlopen(test_url)</span><br><span class="line"><span class="keyword">print</span> (response.getcode()) <span class="comment"># 200 表示访问成功</span></span><br><span class="line"><span class="keyword">print</span> (response.read())</span><br></pre></td></tr></table></figure><ul><li>通过 Request 访问</li><li>通过 cookie 访问</li></ul><h3 id="网页解析模块"><a href="#网页解析模块" class="headerlink" title="网页解析模块"></a>网页解析模块</h3><blockquote><p>从已经下载的网页中爬取数据，实现方式有：</p></blockquote><ol><li>正则表达式</li><li>html.parser</li><li><strong>BeautifulSoup：结构化解析网页</strong></li><li>lxml</li><li>结构化解析</li><li>DOM（Document Object Model），树形结构，就是 html 的基本骨架</li></ol><h2 id="二、BeautifulSoup-解析网页"><a href="#二、BeautifulSoup-解析网页" class="headerlink" title="二、BeautifulSoup 解析网页"></a>二、BeautifulSoup 解析网页</h2>]]></content>
      
      
      <categories>
          
          <category> Spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spider </tag>
            
            <tag> beautifulsoup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-apply函数和入口函数</title>
      <link href="blog/hy14ic/"/>
      <url>blog/hy14ic/</url>
      
        <content type="html"><![CDATA[<h2 id="pandas-之-apply-函数"><a href="#pandas-之-apply-函数" class="headerlink" title="pandas 之 apply 函数"></a>pandas 之 apply 函数</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">DataFrame.apply(func, <span class="attribute">axis</span>=0, <span class="attribute">broadcast</span>=<span class="literal">False</span>, <span class="attribute">raw</span>=<span class="literal">False</span>, <span class="attribute">reduce</span>=None, args=(), **kwds)</span><br></pre></td></tr></table></figure><p>第一个参数，这个参数是函数，相当于 C/C++的函数指针。</p><p>这个函数需要自己实现，函数的传入参数根据 axis 来定，比如 axis = 1，就会把一行数据作为 Series 的数据<br>结构传入给自己实现的函数中，我们在函数中实现对 Series 不同属性之间的计算，返回一个结果，则 apply 函数<br>会自动遍历每一行 DataFrame 的数据，最后将所有结果组合成一个 Series 数据结构并返回。</p><h2 id="if-name-‘main’"><a href="#if-name-‘main’" class="headerlink" title="if name == ‘main’"></a>if <strong>name</strong> == ‘main’</h2><p><a href="https://zhuanlan.zhihu.com/p/34112508" target="_blank" rel="noopener">参考：知乎用户</a></p>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DataAnalysis-SOP</title>
      <link href="blog/lli6u1/"/>
      <url>blog/lli6u1/</url>
      
        <content type="html"><![CDATA[<h2 id="一、关于数据分析"><a href="#一、关于数据分析" class="headerlink" title="一、关于数据分析"></a>一、关于数据分析</h2><ul><li>[x] 互联网最热职位：研发工程师、产品经理、人力资源、市场营销、运营、数据分析（供不应求）</li><li>[x] 数据分析的步骤：明确目的/思路、数据收集、数据处理、数据分析、数据展现</li><li><p>[x] 数据分析工具对比</p><blockquote><p>Python||R||Matlab||Scala||Sas||Spss<br>python 做数据分析是因为库比较多</p></blockquote></li><li><p>[x] 什么是数据分析？：数据分析是一个检查 Inspecting、清理 Cleansing、转换 Tranforming、和建模数据 Modeling 的过程，其目标是发现有用的信息，提出结论和支持决策。统计、计算、可视化和数据挖掘是数据分析师工作描述的各个方面。数据分析师，一般执行相同的功能，在一定程度上具有相同的资格。然而，特定的企业或行业可以塑造工作职责、技能、资格以及就业和晋升前景。</p></li></ul><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">职位概述：数据分析师专业人员做什么？数据分析师获取、组装并帮助其他人解释和理解数据。要做到这一点，分析师必须培养分析、沟通、计算机、数学和统计方面等的技能。</span><br><span class="line"></span><br><span class="line">具体的经济部门可以指导分析人员使用的数据类型。例如，医疗数据分析师的工作描述需要处理不同的信息，如实验室数据、保险索赔、处方记录、办公室或医院访问。在市场营销中，他们处理的是处理客户偏好、销售和统计数据分析中重要部分的客户。</span><br><span class="line"></span><br><span class="line">数据分析师工作职责：</span><br><span class="line">使用统计公式计算和分析数据。</span><br><span class="line">验证数据的准确性、完整性和可靠性。</span><br><span class="line">使用记录、报告和调查等资源编译统计信息。</span><br><span class="line">将数据和其他信息输入计算机。</span><br><span class="line">在研究或调查中采访参与者，跟踪或记录他们的回答。</span><br><span class="line">收集或准备图表、图表、表格和其他对数据、调查和发现的描述。</span><br><span class="line">寻找和识别新的数据收集源和方法。</span><br><span class="line">获取客户数据收集需求</span><br><span class="line">数据分析师工作基本技能：</span><br><span class="line">分析能力。数据分析师的工作描述包括识别模式和基于数据呈现其他结论的能力。通过分析技能，数据分析师还可以确定数据、来源和物料的可靠性。</span><br><span class="line">计算机技能。数据分析人员依靠数据库、文字处理器和其他计算机应用程序来计算数据、概率和其他统计数据，并准备显示数据。事实上，软件应用程序包括结构化查询语言<span class="comment">(SQL)</span>和其他数据库用户查询产品，以及面向分析或科学方法的查询产品。</span><br><span class="line">数学能力。要分析和计算数据，分析人员必须具备数学技能，例如乘法、除法和使用其他数学操作。计算比率、分数、百分比和各种公式的能力可以帮助数据分析师准备有用的图表、报告和图表。</span><br><span class="line">沟通技巧。倾听和理解参与者的回答有助于确保可靠的调查和结果。沟通还包括清晰而直接地向主管、团队成员以及第三方用户展示结果、结论和其他信息。</span><br><span class="line">成为一名数据分析师</span><br><span class="line">在数据分析师的工作描述中包含了数学、统计学和计算机方面的背景知识，这取决于企业或行业，潜在的数据分析师包括与行业相关的课程和获得资格的工作经验。</span><br><span class="line">工作经验</span><br><span class="line">数据分析师可以从需要使用电子表格、数据库和其他计算机应用程序的工作中获得经验。对于某些公司，数据分析师职位描述要求应聘者具有SQL服务器和其他数据库系统的经验。那些有数据挖掘经验的人也可以提高就业前景。</span><br><span class="line">与教育和培训一样，企业可能更青睐具有特定行业经验的求职者。例如，财产保险公司的数据分析师可能曾为其他保险公司、抵押贷款公司、银行或保险机构工作。在学校环境中，申请人通常会带着以前的工作经历来学习或衡量学生的表现和教学方法。</span><br><span class="line">数据分析师的潜在短缺，就业机会比比皆是。随着公司寻求提高市场份额，寻找客户或控制成本，对数据分析师的需求应该会增加，特别是在营销，销售和医疗保健方面。总而言之，为了帮助组织实现这些目标和其他目标，数据分析师必须确保获取它们的数据和方法可靠且清晰地传达。</span><br></pre></td></tr></table></figure><h2 id="二、工作环境准备"><a href="#二、工作环境准备" class="headerlink" title="二、工作环境准备"></a>二、工作环境准备</h2><figure class="highlight leaf"><table><tr><td class="code"><pre><span class="line">a. python2和python3的差异、2.7和3版本的选用</span><br><span class="line">true'''bytes和str的相互应用'''</span><br><span class="line">truech_str='python的新特性'</span><br><span class="line">true<span class="function"><span class="keyword">#</span><span class="title">print</span><span class="params">(<span class="variable">ch_str</span>+'\<span class="variable">n</span>')</span></span></span><br><span class="line">true<span class="function"><span class="keyword">#</span><span class="title">print</span><span class="params">(<span class="variable">type</span>(<span class="variable">ch_str</span>)</span></span>)</span><br><span class="line">trueb_str=ch_str.encode('utf-8')#字符型转化为字节型</span><br><span class="line">true<span class="function"><span class="keyword">#</span><span class="title">print</span><span class="params">(<span class="variable">b_str</span>)</span></span></span><br><span class="line">true<span class="function"><span class="keyword">#</span><span class="title">print</span><span class="params">(<span class="variable">type</span>(<span class="variable">b_str</span>)</span></span>)</span><br><span class="line">truech_str=b_str.decode('utf-8')#字节性转化字符型</span><br><span class="line">trueprint(ch_str)</span><br><span class="line">trueprint(type(ch_str))</span><br><span class="line">true【有什么作用呢？？】</span><br><span class="line">b. Six库</span><br><span class="line">c. 编码方式的差异：中文编码方式——UTF-8的选加</span><br><span class="line">d. python环境</span><br><span class="line">truei. Anaconda：有许多的第三方库</span><br><span class="line">truetrue1) Jupyter notebook：想办法把本地的文件开源到GitHub上</span><br><span class="line">trueii. IDE：没有最好的，只有适合自己的；全都需要自己配置</span><br><span class="line">truetrue1) Eclipse+Pydev完全免费</span><br><span class="line">truetrue2) Pycharm部分免费</span><br><span class="line">truetrue设置配置python解释器有问题！===配置路径被隐藏的问题</span><br><span class="line">truetrue调试：断点调试/交互式调试====不是很会用！！！</span><br><span class="line">truetrue3) spyder完全免费，适合熟悉matlab的开发者</span><br><span class="line">trueiii. Ipython：简单验证思路===交互式命令的使用</span><br><span class="line">truetrue§ 在对像后面加一个'?'===显示对象的信息'??'===显示多个信息</span><br><span class="line">truetrueEg：fucktion_name??</span><br><span class="line">truetrueps：不要在后面加注释#否则会出错===我也不知道为啥</span><br><span class="line">truetrue§ 魔术命令的使用%time %timeit（一条语句） %%time %%timeit(多条语句)</span><br><span class="line">truetrueEg：%timeit output&gt;&gt;&gt;</span><br><span class="line">truetrue26.9 ns ± 1.8 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)</span><br></pre></td></tr></table></figure><h2 id="三、建模四个基本模型"><a href="#三、建模四个基本模型" class="headerlink" title="三、建模四个基本模型"></a>三、建模四个基本模型</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><blockquote><p>离散预测值；预先定义的</p></blockquote><ul><li>朴素贝叶斯</li><li>人工神经网络</li></ul><h3 id="回归"><a href="#回归" class="headerlink" title="回归"></a>回归</h3><blockquote><p>连续预测值</p></blockquote><ul><li>Logistic 回归</li></ul><h3 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h3><blockquote><p>预先没有被定义===未被标记的。</p></blockquote><ul><li>K-Means 聚类</li></ul><h3 id="时序分析"><a href="#时序分析" class="headerlink" title="时序分析"></a>时序分析</h3><ul><li>ARIMA 时序</li></ul><h2 id="四、CODE-SOP"><a href="#四、CODE-SOP" class="headerlink" title="四、CODE_SOP"></a>四、CODE_SOP</h2><h3 id="载入常用包"><a href="#载入常用包" class="headerlink" title="载入常用包"></a>载入常用包</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> stats</span><br><span class="line"></span><br><span class="line">matplotlib.rcParams[<span class="string">'font.sans-serif'</span>]=[<span class="string">'SimHei'</span>]</span><br><span class="line">matplotlib.rcParams[<span class="string">'axes.unicode_minus'</span>]=<span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="获取并查看数据"><a href="#获取并查看数据" class="headerlink" title="获取并查看数据"></a>获取并查看数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = <span class="string">'./data/train.csv'</span></span><br><span class="line">data_1 = pd.read_csv(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'基本信息有：\n'</span>)</span><br><span class="line"><span class="keyword">print</span> (data_1.info())</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'数据集有%i行，%i列'</span> %(data_1.shape[<span class="number">0</span>], data_1.shape[<span class="number">1</span>]))</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'数据预览:'</span>)</span><br><span class="line"><span class="keyword">print</span> (data_1.head(<span class="number">10</span>))</span><br><span class="line">……</span><br></pre></td></tr></table></figure><h3 id="数据的清洗和规整"><a href="#数据的清洗和规整" class="headerlink" title="数据的清洗和规整"></a>数据的清洗和规整</h3><h3 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h3><h3 id="数据挖掘"><a href="#数据挖掘" class="headerlink" title="数据挖掘"></a>数据挖掘</h3>]]></content>
      
      
      <categories>
          
          <category> DataAnalysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DataAnalysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-路径和nltk</title>
      <link href="blog/uatg7m/"/>
      <url>blog/uatg7m/</url>
      
        <content type="html"><![CDATA[<h2 id="一、路径相关"><a href="#一、路径相关" class="headerlink" title="一、路径相关"></a>一、路径相关</h2><h3 id="路径相关报错信息"><a href="#路径相关报错信息" class="headerlink" title="路径相关报错信息"></a>路径相关报错信息</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IOError: [Errno <span class="number">2</span>] No such file <span class="keyword">or</span> directory</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pandas.read_csv() 报错 OSError: Initializing <span class="keyword">from</span> file failed</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(unicode error) <span class="string">'unicodeescape'</span> codec can<span class="string">'t decode bytes in position 2-3: truncated \UXXXXXXXX escape [duplicate]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">File <span class="string">b'train.csv'</span> does <span class="keyword">not</span> exist even though file exist</span><br></pre></td></tr></table></figure><h3 id="分析与解决问题"><a href="#分析与解决问题" class="headerlink" title="分析与解决问题"></a>分析与解决问题</h3><p>编写 python 代码过程中，出现了类似这种一系列路径相关的错误，原因是，自己更改了<strong>相关文件夹/文件在电脑中的位置</strong>，解决办法就新建一个项目建一个全新路径或者修改现有路径</p><ul><li><code>\</code>绝对路径 会报错（转义字符）处理：① 双引号前面加一个 r②<code>\</code>换成<code>\\</code>（硬盘代号后面的第一个）</li><li><code>./</code>相对路径</li></ul><blockquote><p>三种解决方式<br><code>r&quot;C:\Users\YJG\Desktop\pi_digits.txt&quot;</code> &gt; <code>&quot;C:\\Users\\YJG\\Desktop\\pi_digits.txt&quot;</code> &gt; <code>&quot;C:/Users/YJG/Desktop/pi_digits.txt&quot;</code></p></blockquote><h3 id="PS：路径含中文"><a href="#PS：路径含中文" class="headerlink" title="PS：路径含中文"></a>PS：路径含中文</h3><p>假如路径、文件名都完整，还是报错的原因是这个参数中有中文，即使 Python3 已经支持中文，但是调用 pandas 的 read_csv()方法时，默认使用 C engine 作为 parser engine，而当文件名中含有中文的时候，用 C engine 在部分情况下就会出错。所以在调用 read_csv()方法时指定 engine 为 Python 就可以解决问题。根治：将路径编程全英文，这是必要素养习惯！</p><p><code>da4=pd.read_csv(xxxxxxxxxx,engine=&#39;python&#39;)</code></p><h3 id="PS：utf-8"><a href="#PS：utf-8" class="headerlink" title="PS：utf-8"></a>PS：utf-8</h3><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">UnicodeDecodeError：: <span class="symbol">'utf</span>-<span class="number">8</span>' codec can<span class="symbol">'t</span> decode byte <span class="number">0</span>xc8 <span class="keyword">in</span> position <span class="number">0</span>: invalid contin</span><br></pre></td></tr></table></figure><blockquote><p>解决办法：<code>data_1 = pd.read_csv(data1, encoding = &#39;gb2312&#39;)</code>或者 gb2312 换成 gbk<br>参考：<a href="https://blog.csdn.net/qq_18888869/article/details/82625343" target="_blank" rel="noopener">https://blog.csdn.net/qq_18888869/article/details/82625343</a></p></blockquote><h2 id="二、nltk-相关"><a href="#二、nltk-相关" class="headerlink" title="二、nltk 相关"></a>二、nltk 相关</h2><h3 id="nltk-下载报错信息"><a href="#nltk-下载报错信息" class="headerlink" title="nltk 下载报错信息"></a>nltk 下载报错信息</h3><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bug:[WinError </span><span class="number">10054</span>] 远程主机强迫关闭了一个现有的连接</span><br></pre></td></tr></table></figure><h3 id="分析与解决问题-1"><a href="#分析与解决问题-1" class="headerlink" title="分析与解决问题"></a>分析与解决问题</h3><p>原因：模型权重参数文件（.h5）较大，下载出现中断，下载失败</p><blockquote><ul><li>解决办法：手动下载模型，放到指定目录</li><li><code>C:\Users\XXX\AppData\Roaming</code></li></ul></blockquote><p><a href="https://pan.baidu.com/s/1oUsf-FgVAZnQAtZWRwiK4w" target="_blank" rel="noopener">下载地址</a>  （密码 9sar）</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/zln_whu/article/details/103448420" target="_blank" rel="noopener">CSDN-103448420</a></li><li><a href="https://www.jianshu.com/p/0e1d51a7549d" target="_blank" rel="noopener">nltk 简书详细讲解</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>入门机器学习scikit-learn</title>
      <link href="blog/wgv3ak/"/>
      <url>blog/wgv3ak/</url>
      
        <content type="html"><![CDATA[<h2 id="一、机器学习的一些概念"><a href="#一、机器学习的一些概念" class="headerlink" title="一、机器学习的一些概念"></a>一、机器学习的一些概念</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>特征：一组数据的多个属性</li><li>标签：人为指定特征</li><li>监督学习：就像分类（离散化的标签），回归（连续性的标签）、【“有标准答案”】</li><li>无监督学习：就像聚类【“无标准答案”】</li><li><strong>数据</strong>：是机器学习的命脉</li></ul><h3 id="基本框架图"><a href="#基本框架图" class="headerlink" title="基本框架图"></a>基本框架图</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598686130909-116e16a4-e86a-46e0-93fb-ac0263257056.png#align=left&amp;display=inline&amp;height=271&amp;margin=%5Bobject%20Object%5D&amp;originHeight=692&amp;originWidth=1157&amp;size=0&amp;status=done&amp;style=shadow&amp;width=453" alt><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598686131288-431d8fe6-bf3f-4f3e-9986-9b282e9e2982.png#align=left&amp;display=inline&amp;height=356&amp;margin=%5Bobject%20Object%5D&amp;originHeight=651&amp;originWidth=869&amp;size=0&amp;status=done&amp;style=shadow&amp;width=475" alt></p><h2 id="二、机器学习的一些阶段-步骤"><a href="#二、机器学习的一些阶段-步骤" class="headerlink" title="二、机器学习的一些阶段/步骤"></a>二、机器学习的一些阶段/步骤</h2><h3 id="sklearn-相关提及"><a href="#sklearn-相关提及" class="headerlink" title="sklearn 相关提及"></a>sklearn 相关提及</h3><p><a href="https://scikit-learn.org/stable/testimonials/testimonials.html" target="_blank" rel="noopener">官网 scikit-learn</a></p><ol><li>包含聚类、分类、回归等算法<br>eg：随机森林、k-means、SVM 等</li><li>包含模型筛选、降维、预处理等算法</li><li>要特别注意安装该包使用要注意的细节，具体参考上一篇博客</li></ol><h3 id="sklearn-处理机器学习的一般化-sop"><a href="#sklearn-处理机器学习的一般化-sop" class="headerlink" title="sklearn 处理机器学习的一般化 sop"></a>sklearn 处理机器学习的一般化 sop</h3><ol><li><strong>准备数据集</strong><ul><li><a href>数据分析</a>:（利用 np.reshape()成二维(n_samples,n_features)）</li><li>划分数据集：train_test_split()</li><li>特征工程：特征的提取、特征的归一化 nomalization</li></ul></li><li><strong>选择模型</strong><ul><li>根据不同场景选择合适的模型:<a href="https://scikit-learn.org/stable/tutorial/machine_learning_map/index.html" target="_blank" rel="noopener">scikit-learn 的模型选择路线图</a></li><li>分类、聚类、回归……</li></ul></li><li>在训练集上<strong>训练模型</strong>，并调整参数<ul><li>经验选定参数</li><li>交叉验证确定最优的参数 cross validation</li></ul></li><li>在测试集上<strong>测试模型</strong><ul><li>predict 预测、score 真实值预测值评分、etc</li></ul></li><li><strong>保存模型</strong><ul><li><code>import pickle</code></li></ul></li></ol><h3 id="主成分分析：将特征降维"><a href="#主成分分析：将特征降维" class="headerlink" title="主成分分析：将特征降维"></a>主成分分析：将特征降维</h3><ul><li>统计学相关知识：方差（衡量在一个维度的偏差）、协方差（衡量一个维度是否对另一个维度有影响 cov（x，y））</li><li>线代相关知识：特征值、特征向量、协方差向量</li><li>PCA</li></ul><p><a href="http://q5e49p23n.bkt.clouddn.com/scikit_pca.html" target="_blank" rel="noopener">相关代码 html 页面</a></p><h2 id="三、通过-scikit-learn-认识机器学习"><a href="#三、通过-scikit-learn-认识机器学习" class="headerlink" title="三、通过 scikit-learn 认识机器学习"></a>三、通过 scikit-learn 认识机器学习</h2><h3 id="加载示例数据集"><a href="#加载示例数据集" class="headerlink" title="加载示例数据集"></a>加载示例数据集</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line">iris = datasets.load_iris()<span class="comment">#用sklearn自身配带的数据</span></span><br><span class="line">digits = datasets.load_digits()</span><br><span class="line"><span class="comment"># C:\Users\wztli\Anaconda3\pkgs\scikit-learn-0.21.3-py37h6288b17_0\Lib\site-packages\sklearn\datasets\data</span></span><br><span class="line"><span class="comment"># 数据集在电脑中的位置</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看数据集</span></span><br><span class="line"><span class="comment"># iris</span></span><br><span class="line">print(iris.data[:<span class="number">5</span>])</span><br><span class="line">print(iris.data.shape)</span><br><span class="line">print(iris.target_names)</span><br><span class="line">print(iris.target)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[[<span class="number">5.1</span> <span class="number">3.5</span> <span class="number">1.4</span> <span class="number">0.2</span>]</span><br><span class="line"> [<span class="number">4.9</span> <span class="number">3.</span>  <span class="number">1.4</span> <span class="number">0.2</span>]</span><br><span class="line"> [<span class="number">4.7</span> <span class="number">3.2</span> <span class="number">1.3</span> <span class="number">0.2</span>]</span><br><span class="line"> [<span class="number">4.6</span> <span class="number">3.1</span> <span class="number">1.5</span> <span class="number">0.2</span>]</span><br><span class="line"> [<span class="number">5.</span>  <span class="number">3.6</span> <span class="number">1.4</span> <span class="number">0.2</span>]]</span><br><span class="line">(<span class="number">150</span>, <span class="number">4</span>)</span><br><span class="line">[<span class="string">'setosa'</span> <span class="string">'versicolor'</span> <span class="string">'virginica'</span>]</span><br><span class="line">[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"> <span class="number">2</span> <span class="number">2</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># digits</span></span><br><span class="line">print(digits.data)</span><br><span class="line">print(digits.data.shape)</span><br><span class="line">print(digits.target_names)</span><br><span class="line">print(digits.target)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[[ <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">5.</span> ...  <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</span><br><span class="line"> [ <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span> ... <span class="number">10.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</span><br><span class="line"> [ <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">0.</span> ... <span class="number">16.</span>  <span class="number">9.</span>  <span class="number">0.</span>]</span><br><span class="line"> ...</span><br><span class="line"> [ <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">1.</span> ...  <span class="number">6.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</span><br><span class="line"> [ <span class="number">0.</span>  <span class="number">0.</span>  <span class="number">2.</span> ... <span class="number">12.</span>  <span class="number">0.</span>  <span class="number">0.</span>]</span><br><span class="line"> [ <span class="number">0.</span>  <span class="number">0.</span> <span class="number">10.</span> ... <span class="number">12.</span>  <span class="number">1.</span>  <span class="number">0.</span>]]</span><br><span class="line">(<span class="number">1797</span>, <span class="number">64</span>)</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> ... <span class="number">8</span> <span class="number">9</span> <span class="number">8</span>]</span><br></pre></td></tr></table></figure><h3 id="在训练集上训练模型"><a href="#在训练集上训练模型" class="headerlink" title="在训练集上训练模型"></a>在训练集上训练模型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 手动划分训练集、测试集</span></span><br><span class="line">n_test = <span class="number">100</span> <span class="comment"># 测试样本个数</span></span><br><span class="line">train_X = digits.data[:-n_test, :]</span><br><span class="line">train_y = digits.target[:-n_test]</span><br><span class="line"></span><br><span class="line">test_X = digits.data[-n_test:, :]</span><br><span class="line">y_true = digits.target[-n_test:]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择SVM模型</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line"></span><br><span class="line">svm_model = svm.SVC(gamma=<span class="number">0.001</span>, C=<span class="number">100.</span>)</span><br><span class="line"><span class="comment"># svm_model = svm.SVC(gamma=100., C=1.)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">svm_model.fit(train_X, train_y)</span><br><span class="line"><span class="comment">#训练要放入两个参数：样本的特征数据，样本的标签</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SVC(C=<span class="number">100.0</span>, cache_size=<span class="number">200</span>, class_weight=<span class="literal">None</span>, coef0=<span class="number">0.0</span>,</span><br><span class="line">    decision_function_shape=<span class="string">'ovr'</span>, degree=<span class="number">3</span>, gamma=<span class="number">0.001</span>, kernel=<span class="string">'rbf'</span>,</span><br><span class="line">    max_iter=<span class="number">-1</span>, probability=<span class="literal">False</span>, random_state=<span class="literal">None</span>, shrinking=<span class="literal">True</span>,</span><br><span class="line">    tol=<span class="number">0.001</span>, verbose=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择LR（逻辑回归）模型</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"></span><br><span class="line">lr_model = LogisticRegression()</span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">lr_model.fit(train_X, train_y)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">C:\Users\wztli\Anaconda3\lib\site-packages\sklearn\linear_model\logistic.py:<span class="number">432</span>: FutureWarning: Default solver will be changed to <span class="string">'lbfgs'</span> <span class="keyword">in</span> <span class="number">0.22</span>. Specify a solver to silence this warning.</span><br><span class="line">  FutureWarning)</span><br><span class="line">C:\Users\wztli\Anaconda3\lib\site-packages\sklearn\linear_model\logistic.py:<span class="number">469</span>: FutureWarning: Default multi_class will be changed to <span class="string">'auto'</span> <span class="keyword">in</span> <span class="number">0.22</span>. Specify the multi_class option to silence this warning.</span><br><span class="line">  <span class="string">"this warning."</span>, FutureWarning)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LogisticRegression(C=<span class="number">1.0</span>, class_weight=<span class="literal">None</span>, dual=<span class="literal">False</span>, fit_intercept=<span class="literal">True</span>,</span><br><span class="line">                   intercept_scaling=<span class="number">1</span>, l1_ratio=<span class="literal">None</span>, max_iter=<span class="number">100</span>,</span><br><span class="line">                   multi_class=<span class="string">'warn'</span>, n_jobs=<span class="literal">None</span>, penalty=<span class="string">'l2'</span>,</span><br><span class="line">                   random_state=<span class="literal">None</span>, solver=<span class="string">'warn'</span>, tol=<span class="number">0.0001</span>, verbose=<span class="number">0</span>,</span><br><span class="line">                   warm_start=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h3 id="在测试集上测试模型"><a href="#在测试集上测试模型" class="headerlink" title="在测试集上测试模型"></a>在测试集上测试模型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y_pred_svm = svm_model.predict(test_X)</span><br><span class="line">y_pred_lr = lr_model.predict(test_X)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看结果</span></span><br><span class="line"><span class="comment"># 评价指标</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"></span><br><span class="line"><span class="comment">#print '预测标签：', y_pred</span></span><br><span class="line"><span class="comment">#print '真实标签：', y_true</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'SVM结果：'</span>, accuracy_score(y_true, y_pred_svm))</span><br><span class="line">print(<span class="string">'LR结果：'</span>, accuracy_score(y_true, y_pred_lr))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SVM结果： <span class="number">0.98</span></span><br><span class="line">LR结果： <span class="number">0.94</span></span><br></pre></td></tr></table></figure><h3 id="保存模型"><a href="#保存模型" class="headerlink" title="保存模型"></a>保存模型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'svm_model.pkl'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pickle.dump(svm_model, f)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载模型进行预测</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'svm_model.pkl'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    model = pickle.load(f)</span><br><span class="line"></span><br><span class="line">random_samples_index = np.random.randint(<span class="number">0</span>, <span class="number">1796</span>, <span class="number">5</span>)</span><br><span class="line">random_samples = digits.data[random_samples_index, :]</span><br><span class="line">random_targets = digits.target[random_samples_index]</span><br><span class="line"></span><br><span class="line">random_predict = model.predict(random_samples)</span><br><span class="line"></span><br><span class="line">print(random_predict)</span><br><span class="line">print(random_targets)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">3</span> <span class="number">8</span>]</span><br><span class="line">[<span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">3</span> <span class="number">8</span>]</span><br></pre></td></tr></table></figure><h2 id="四、scikit-learn-入门"><a href="#四、scikit-learn-入门" class="headerlink" title="四、scikit-learn 入门"></a>四、scikit-learn 入门</h2><h3 id="准备数据集"><a href="#准备数据集" class="headerlink" title="准备数据集"></a>准备数据集</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X = np.random.randint(<span class="number">0</span>, <span class="number">100</span>, (<span class="number">10</span>, <span class="number">4</span>))</span><br><span class="line">y = np.random.randint(<span class="number">0</span>, <span class="number">4</span>, <span class="number">10</span>)</span><br><span class="line">y.sort()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'样本：'</span>)</span><br><span class="line">print(X)</span><br><span class="line">print(<span class="string">'标签：'</span>, y)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">样本：</span><br><span class="line">[[<span class="number">43</span> <span class="number">43</span> <span class="number">18</span> <span class="number">78</span>]</span><br><span class="line"> [<span class="number">74</span> <span class="number">24</span> <span class="number">42</span> <span class="number">37</span>]</span><br><span class="line"> [<span class="number">36</span> <span class="number">69</span> <span class="number">84</span> <span class="number">47</span>]</span><br><span class="line"> [<span class="number">70</span> <span class="number">62</span> <span class="number">77</span> <span class="number">30</span>]</span><br><span class="line"> [<span class="number">87</span> <span class="number">38</span>  <span class="number">3</span> <span class="number">96</span>]</span><br><span class="line"> [<span class="number">68</span> <span class="number">67</span> <span class="number">24</span>  <span class="number">7</span>]</span><br><span class="line"> [<span class="number">66</span> <span class="number">36</span> <span class="number">72</span> <span class="number">72</span>]</span><br><span class="line"> [<span class="number">12</span> <span class="number">94</span> <span class="number">87</span> <span class="number">72</span>]</span><br><span class="line"> [<span class="number">66</span>  <span class="number">5</span> <span class="number">92</span>  <span class="number">6</span>]</span><br><span class="line"> [<span class="number">41</span> <span class="number">59</span> <span class="number">60</span> <span class="number">91</span>]]</span><br><span class="line">标签： [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分割训练集、测试集</span></span><br><span class="line"><span class="comment"># random_state确保每次随机分割得到相同的结果</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">1</span>/<span class="number">3.</span>, random_state=<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'训练集：'</span>)</span><br><span class="line">print(X_train)</span><br><span class="line">print(y_train)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'测试集：'</span>)</span><br><span class="line">print(X_test)</span><br><span class="line">print(y_test)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">训练集：</span><br><span class="line">[[<span class="number">63</span> <span class="number">56</span>  <span class="number">7</span> <span class="number">42</span>]</span><br><span class="line"> [<span class="number">40</span> <span class="number">47</span> <span class="number">17</span> <span class="number">23</span>]</span><br><span class="line"> [<span class="number">41</span> <span class="number">31</span> <span class="number">26</span>  <span class="number">8</span>]</span><br><span class="line"> [<span class="number">79</span> <span class="number">30</span> <span class="number">22</span> <span class="number">88</span>]</span><br><span class="line"> [<span class="number">54</span> <span class="number">85</span> <span class="number">48</span> <span class="number">54</span>]</span><br><span class="line"> [<span class="number">89</span> <span class="number">73</span> <span class="number">77</span> <span class="number">41</span>]]</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span>]</span><br><span class="line">测试集：</span><br><span class="line">[[ <span class="number">3</span>  <span class="number">0</span> <span class="number">42</span> <span class="number">86</span>]</span><br><span class="line"> [<span class="number">42</span> <span class="number">96</span> <span class="number">83</span> <span class="number">38</span>]</span><br><span class="line"> [<span class="number">33</span> <span class="number">45</span>  <span class="number">8</span> <span class="number">37</span>]</span><br><span class="line"> [ <span class="number">1</span> <span class="number">44</span> <span class="number">75</span>  <span class="number">7</span>]]</span><br><span class="line">[<span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 特征归一化</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"></span><br><span class="line">x1 = np.random.randint(<span class="number">0</span>, <span class="number">1000</span>, <span class="number">5</span>).reshape(<span class="number">5</span>,<span class="number">1</span>)</span><br><span class="line">x2 = np.random.randint(<span class="number">0</span>, <span class="number">10</span>, <span class="number">5</span>).reshape(<span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line">x3 = np.random.randint(<span class="number">0</span>, <span class="number">100000</span>, <span class="number">5</span>).reshape(<span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">X = np.concatenate([x1, x2, x3], axis=<span class="number">1</span>)</span><br><span class="line">print(X)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[[  <span class="number">353</span>     <span class="number">4</span> <span class="number">27241</span>]</span><br><span class="line"> [  <span class="number">999</span>     <span class="number">4</span> <span class="number">34684</span>]</span><br><span class="line"> [  <span class="number">911</span>     <span class="number">4</span> <span class="number">78606</span>]</span><br><span class="line"> [  <span class="number">310</span>     <span class="number">6</span> <span class="number">44593</span>]</span><br><span class="line"> [  <span class="number">817</span>     <span class="number">9</span>  <span class="number">6356</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(preprocessing.scale(X))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[[<span class="number">-1.12443958</span> <span class="number">-0.71443451</span> <span class="number">-0.46550183</span>]</span><br><span class="line"> [ <span class="number">1.11060033</span> <span class="number">-0.71443451</span> <span class="number">-0.15209341</span>]</span><br><span class="line"> [ <span class="number">0.80613669</span> <span class="number">-0.71443451</span>  <span class="number">1.69736578</span>]</span><br><span class="line"> [<span class="number">-1.27321159</span>  <span class="number">0.30618622</span>  <span class="number">0.26515287</span>]</span><br><span class="line"> [ <span class="number">0.48091416</span>  <span class="number">1.83711731</span> <span class="number">-1.34492342</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成分类数据进行验证scale的必要性</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_classification</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line">X, y = make_classification(n_samples=<span class="number">300</span>, n_features=<span class="number">2</span>, n_redundant=<span class="number">0</span>, n_informative=<span class="number">2</span>,</span><br><span class="line">                           random_state=<span class="number">25</span>, n_clusters_per_class=<span class="number">1</span>, scale=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">plt.scatter(X[:,<span class="number">0</span>], X[:,<span class="number">1</span>], c=y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598686130636-3a18d8f2-51cb-4b04-8a0f-a40cf1d0b9b6.png#align=left&amp;display=inline&amp;height=248&amp;margin=%5Bobject%20Object%5D&amp;originHeight=248&amp;originWidth=384&amp;size=0&amp;status=done&amp;style=none&amp;width=384" alt></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注释掉以下这句表示不进行特征归一化</span></span><br><span class="line">X = preprocessing.scale(X)</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">1</span>/<span class="number">3.</span>, random_state=<span class="number">7</span>)</span><br><span class="line">svm_classifier = svm.SVC()</span><br><span class="line">svm_classifier.fit(X_train, y_train)</span><br><span class="line">svm_classifier.score(X_test, y_test)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">C:\Users\wztli\Anaconda3\lib\site-packages\sklearn\svm\base.py:<span class="number">193</span>: FutureWarning: The default value of gamma will change <span class="keyword">from</span> <span class="string">'auto'</span> to <span class="string">'scale'</span> <span class="keyword">in</span> version <span class="number">0.22</span> to account better <span class="keyword">for</span> unscaled features. Set gamma explicitly to <span class="string">'auto'</span> <span class="keyword">or</span> <span class="string">'scale'</span> to avoid this warning.</span><br><span class="line">  <span class="string">"avoid this warning."</span>, FutureWarning)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">0.25</span></span><br></pre></td></tr></table></figure><h3 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 回归模型</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"></span><br><span class="line">boston_data = datasets.load_boston()</span><br><span class="line">X = boston_data.data</span><br><span class="line">y = boston_data.target</span><br><span class="line"></span><br><span class="line">print(<span class="string">'样本：'</span>)</span><br><span class="line">print(X[:<span class="number">5</span>, :])</span><br><span class="line">print(<span class="string">'标签：'</span>)</span><br><span class="line">print(y[:<span class="number">5</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">样本：</span><br><span class="line">[[<span class="number">6.3200e-03</span> <span class="number">1.8000e+01</span> <span class="number">2.3100e+00</span> <span class="number">0.0000e+00</span> <span class="number">5.3800e-01</span> <span class="number">6.5750e+00</span></span><br><span class="line">  <span class="number">6.5200e+01</span> <span class="number">4.0900e+00</span> <span class="number">1.0000e+00</span> <span class="number">2.9600e+02</span> <span class="number">1.5300e+01</span> <span class="number">3.9690e+02</span></span><br><span class="line">  <span class="number">4.9800e+00</span>]</span><br><span class="line"> [<span class="number">2.7310e-02</span> <span class="number">0.0000e+00</span> <span class="number">7.0700e+00</span> <span class="number">0.0000e+00</span> <span class="number">4.6900e-01</span> <span class="number">6.4210e+00</span></span><br><span class="line">  <span class="number">7.8900e+01</span> <span class="number">4.9671e+00</span> <span class="number">2.0000e+00</span> <span class="number">2.4200e+02</span> <span class="number">1.7800e+01</span> <span class="number">3.9690e+02</span></span><br><span class="line">  <span class="number">9.1400e+00</span>]</span><br><span class="line"> [<span class="number">2.7290e-02</span> <span class="number">0.0000e+00</span> <span class="number">7.0700e+00</span> <span class="number">0.0000e+00</span> <span class="number">4.6900e-01</span> <span class="number">7.1850e+00</span></span><br><span class="line">  <span class="number">6.1100e+01</span> <span class="number">4.9671e+00</span> <span class="number">2.0000e+00</span> <span class="number">2.4200e+02</span> <span class="number">1.7800e+01</span> <span class="number">3.9283e+02</span></span><br><span class="line">  <span class="number">4.0300e+00</span>]</span><br><span class="line"> [<span class="number">3.2370e-02</span> <span class="number">0.0000e+00</span> <span class="number">2.1800e+00</span> <span class="number">0.0000e+00</span> <span class="number">4.5800e-01</span> <span class="number">6.9980e+00</span></span><br><span class="line">  <span class="number">4.5800e+01</span> <span class="number">6.0622e+00</span> <span class="number">3.0000e+00</span> <span class="number">2.2200e+02</span> <span class="number">1.8700e+01</span> <span class="number">3.9463e+02</span></span><br><span class="line">  <span class="number">2.9400e+00</span>]</span><br><span class="line"> [<span class="number">6.9050e-02</span> <span class="number">0.0000e+00</span> <span class="number">2.1800e+00</span> <span class="number">0.0000e+00</span> <span class="number">4.5800e-01</span> <span class="number">7.1470e+00</span></span><br><span class="line">  <span class="number">5.4200e+01</span> <span class="number">6.0622e+00</span> <span class="number">3.0000e+00</span> <span class="number">2.2200e+02</span> <span class="number">1.8700e+01</span> <span class="number">3.9690e+02</span></span><br><span class="line">  <span class="number">5.3300e+00</span>]]</span><br><span class="line">标签：</span><br><span class="line">[<span class="number">24.</span>  <span class="number">21.6</span> <span class="number">34.7</span> <span class="number">33.4</span> <span class="number">36.2</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择线性回顾模型</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line">lr_model = LinearRegression()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割训练集、测试集</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">1</span>/<span class="number">3.</span>, random_state=<span class="number">7</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">lr_model.fit(X_train, y_train)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LinearRegression(copy_X=<span class="literal">True</span>, fit_intercept=<span class="literal">True</span>, n_jobs=<span class="literal">None</span>, normalize=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回参数</span></span><br><span class="line">lr_model.get_params()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">'copy_X'</span>: <span class="literal">True</span>, <span class="string">'fit_intercept'</span>: <span class="literal">True</span>, <span class="string">'n_jobs'</span>: <span class="literal">None</span>, <span class="string">'normalize'</span>: <span class="literal">False</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lr_model.score(X_train, y_train)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0.7598132492351114</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lr_model.score(X_test, y_test)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0.6693852753319398</span></span><br></pre></td></tr></table></figure><h3 id="交叉验证"><a href="#交叉验证" class="headerlink" title="交叉验证"></a>交叉验证</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split, cross_val_score</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line">X = iris.data</span><br><span class="line">y = iris.target</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">1</span>/<span class="number">3.</span>, random_state=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">k_range = range(<span class="number">1</span>, <span class="number">31</span>)</span><br><span class="line">cv_scores = []</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> k_range:</span><br><span class="line">    knn = KNeighborsClassifier(n)</span><br><span class="line">    scores = cross_val_score(knn, X_train, y_train, cv=<span class="number">10</span>, scoring=<span class="string">'accuracy'</span>) <span class="comment"># 分类问题使用</span></span><br><span class="line">    <span class="comment">#scores = cross_val_score(knn, X_train, y_train, cv=10, scoring='neg_mean_squared_error') # 回归问题使用</span></span><br><span class="line">    cv_scores.append(scores.mean())</span><br><span class="line"></span><br><span class="line">plt.plot(k_range, cv_scores)</span><br><span class="line">plt.xlabel(<span class="string">'K'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Accuracy'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598686130618-179a3dfa-9ffd-4f45-9cc2-d6f63e1ad2b9.png#align=left&amp;display=inline&amp;height=262&amp;margin=%5Bobject%20Object%5D&amp;originHeight=262&amp;originWidth=392&amp;size=0&amp;status=done&amp;style=none&amp;width=392" alt></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择最优的K</span></span><br><span class="line">best_knn = KNeighborsClassifier(n_neighbors=<span class="number">5</span>)</span><br><span class="line">best_knn.fit(X_train, y_train)</span><br><span class="line">print(best_knn.score(X_test, y_test))</span><br><span class="line">print(best_knn.predict(X_test))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0.96</span></span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">2</span></span><br><span class="line"> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span>]</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/wztlink1013/scikit-learn" target="_blank" rel="noopener">scikit-learn 中文文档 github</a>文中链接为英文文档</li><li><a href="https://blog.csdn.net/Little_Fire/article/details/81062447" target="_blank" rel="noopener">解释 iris 数据集</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> MachingLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sklearn </tag>
            
            <tag> scikit-learn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VScode编写C/C++及其他使用</title>
      <link href="blog/pm7mpk/"/>
      <url>blog/pm7mpk/</url>
      
        <content type="html"><![CDATA[<h2 id="一、VScode-常用插件"><a href="#一、VScode-常用插件" class="headerlink" title="一、VScode 常用插件"></a>一、VScode 常用插件</h2><ul><li>[x] Markdown Preview Github Styling</li><li>[x] Markdown All in One</li><li>[ ] GBKtoUTF8</li><li>[ ] CodeRunner</li><li>[x] Chinese (simplified)Language pack for Visual Code【简体中文】</li><li>[ ] C/C++</li><li>[ ] Bracket Pair Colorrizer 2 【优化大括号】</li><li>[ ] background 【添加背景图片】</li><li>[ ] AnsiComment</li><li>[x] vscode-icons【美化图标】</li><li>[ ] Path Intellisense【补全】</li><li>[ ] GitLens 【显示当前行 commit 信息，管理 git】</li><li>[ ] Git History 【查看 commit 信息】</li><li>[x] Waka Time【记录软件编写各类语言时间分配】</li><li>[x] Todo Tree【优化 TODO：侧边栏】</li><li>[x] Todo Highlight【优化 TODO：高亮】</li></ul><h2 id="二、VScode-编写-C-和-C"><a href="#二、VScode-编写-C-和-C" class="headerlink" title="二、VScode 编写 C 和 C++"></a>二、VScode 编写 C 和 C++</h2><p><a href="https://www.zhihu.com/question/30315894" target="_blank" rel="noopener">https://www.zhihu.com/question/30315894</a></p><h2 id="三、补充"><a href="#三、补充" class="headerlink" title="三、补充"></a>三、补充</h2><p>vscode 可以自定义 markdown 预览样式，css 文件以外链的方式放上</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="[https://segmentfault.com/a/1190000006697219#item-1](https://segmentfault.com/a/1190000006697219#item-1">vscode 插件推荐 - 献给所有前端工程师](https://segmentfault.com/a/1190000006697219)</a>)</li><li><a href="https://www.zhihu.com/question/30315894" target="_blank" rel="noopener">C&amp;C++环境 https://www.zhihu.com/question/30315894</a></li><li><a href="https://blog.csdn.net/TriDiamond6/article/details/105604427?utm_source=app" target="_blank" rel="noopener">VSCode 插件大全｜ VSCode 高级玩家之第二篇</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Environment </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>配置java开发环境</title>
      <link href="blog/cwqx6l/"/>
      <url>blog/cwqx6l/</url>
      
        <content type="html"><![CDATA[<h2 id="一、下载"><a href="#一、下载" class="headerlink" title="一、下载"></a>一、下载</h2><p><a href="https://www.oracle.com/cn/java/technologies/javase-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/cn/java/technologies/javase-downloads.html</a></p><h2 id="二、环境变量配置"><a href="#二、环境变量配置" class="headerlink" title="二、环境变量配置"></a>二、环境变量配置</h2><p>在系统变量下</p><h3 id="CLASSPATH"><a href="#CLASSPATH" class="headerlink" title="CLASSPATH"></a>CLASSPATH</h3><blockquote><p>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;%CATALINA_HOME%\common\lib\servlet-api.jar;</p></blockquote><p>其中<code>%CATALINA_HOME%\common\lib\servlet-api.jar;</code>为 tomcat 的加包配置</p><h3 id="JAVA-HOME"><a href="#JAVA-HOME" class="headerlink" title="JAVA_HOME"></a>JAVA_HOME</h3><blockquote><p>C:\Program Files\Java\jdk1.8.0_181</p></blockquote><h3 id="path"><a href="#path" class="headerlink" title="path"></a>path</h3><blockquote><p>%JAVA_HOME%\bin<br>%JAVA_HOME%\jre\bin</p></blockquote><h2 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h2><p>CMD 下输入<code>java -version</code></p>]]></content>
      
      
      <categories>
          
          <category> Environment </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Anaconda+JetBrains系列软件使用</title>
      <link href="blog/mv7tir/"/>
      <url>blog/mv7tir/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Anaconda-和-Pycharm-下载与配置"><a href="#一、Anaconda-和-Pycharm-下载与配置" class="headerlink" title="一、Anaconda 和 Pycharm 下载与配置"></a>一、Anaconda 和 Pycharm 下载与配置</h2><h3 id="下载-Anaconda-且配置"><a href="#下载-Anaconda-且配置" class="headerlink" title="下载 Anaconda 且配置"></a>下载 Anaconda 且配置</h3><ul><li>（更新）下载了 anaconda 就不要单独下载 python，之前下的也删掉，以此避免路径冲突</li><li>方式一：<strong>迅雷下载</strong>（推荐）；方式二：提取链接<strong>网盘下载</strong>；方式三：清华镜像下载，下载完安装【直接 next 即可】</li><li><strong>测试</strong>：<code>win + R</code> 进入终端输入<code>conda</code>出现 conda 命令使用指南，即证明成功安装</li><li><strong>配置环境变量</strong>：在<strong>系统变量</strong>path 路径中加入下面配置（具体路径具体填写）</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1606634508207-8eb4dda2-6dbe-4162-b7eb-93cc5b35dc0e.png#align=left&amp;display=inline&amp;height=107&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=169&amp;originWidth=467&amp;size=7789&amp;status=done&amp;style=shadow&amp;width=296" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1606634439956-bfa830a0-ece9-4caa-9bf7-641b14dafd70.png#align=left&amp;display=inline&amp;height=41&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=81&amp;originWidth=645&amp;size=5266&amp;status=done&amp;style=shadow&amp;width=322.5" alt="image.png"></p><h3 id="下载-Pycharm-且配置"><a href="#下载-Pycharm-且配置" class="headerlink" title="下载 Pycharm 且配置"></a>下载 Pycharm 且配置</h3><ul><li><p><strong>下载版本</strong><a href="https://www.jetbrains.com/pycharm/download/" target="_blank" rel="noopener">社区/专业</a>：专业版本需要激活码，社区版本功能基本能应付日常使用</p><blockquote><p>（大学学生时期可以用学生邮箱申请使用 JetBrains 系列软件，我的方法是先认证 GitHub 学生认证，然后直接从 GitHub 那边认证 JetBrains 软件的使用权，当然也可以直接用学生邮箱去 JetBrains 官网认证）</p></blockquote></li><li><p><strong>❗ 补充：取消上面用学生邮箱去申请 JetBrains 系列软件使用方法。先去 GitHub 申请学生包，然后通过 GitHub 已认证的 GitHub 账号再去申请 JetBrains 系列软件较为方便 <a href="https://www.jetbrains.com/zh-cn/community/education/?_ga=2.186354217.1063699871.1594345232-1379189663.1590592761#students" target="_blank" rel="noopener">JetBrains 申请链接 🔗</a></strong></p></li><li>Pycharm 使用 Anaconda 的配置 （ <strong>❗ 补充：下面貌似是社区版本的添加方式，但是专业版本会自动识别</strong> ）：</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685306285-e6ca8228-9234-4c7f-97f3-9d7fc26e0728.png#align=left&amp;display=inline&amp;height=266&amp;margin=%5Bobject%20Object%5D&amp;originHeight=1077&amp;originWidth=1843&amp;size=0&amp;status=done&amp;style=shadow&amp;width=456" alt></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685306347-9a79eaf2-93cf-4ed4-b008-9e49aa66ad7e.png#align=left&amp;display=inline&amp;height=324&amp;margin=%5Bobject%20Object%5D&amp;originHeight=885&amp;originWidth=1227&amp;size=0&amp;status=done&amp;style=shadow&amp;width=449" alt></p><h2 id="二、Anaconda-环境管理"><a href="#二、Anaconda-环境管理" class="headerlink" title="二、Anaconda 环境管理"></a>二、Anaconda 环境管理</h2><h3 id="pip-conda-Miniconda-Anaconda"><a href="#pip-conda-Miniconda-Anaconda" class="headerlink" title="pip,conda,Miniconda,Anaconda"></a>pip,conda,Miniconda,Anaconda</h3><ul><li>pip 包管理工具，python 官方认证</li><li>conda 是一种通用包管理系统，旨在构建和管理任何语言和任何类型的软件。包管理与 pip 的使用类似，环境管理则允许用户方便地安装不同版本的 python 并可以快速切换。</li><li>Anaconda 则是一个打包的集合，里面预装好了 conda、某个版本的 python、众多 packages、科学计算工具等等，就是把很多常用的不常用的库都给你装好了。同时利用配置/工具/命令 conda 来进行 package 和<strong>environment</strong>的管理。</li><li>Miniconda，它只包含最基本的内容——python 与 conda，以及相关的必须依赖项，对于空间要求严格的用户，Miniconda 是一种选择。就只包含最基本的东西，其他的库得自己装。</li></ul><blockquote><p>pip 下载/管理经常 bug，用 conda 结合 anaconda/miniconda 方便使用</p></blockquote><h3 id="Python-相关包路径的查看"><a href="#Python-相关包路径的查看" class="headerlink" title="Python 相关包路径的查看"></a>Python 相关包路径的查看</h3><ul><li><code>win+R</code>   输入<code>cmd</code>   输入<code>python</code> 输入<code>import sys</code> 输入<code>sys.path</code></li><li>标准库：anaconda 文件夹下的 lib 文件夹</li><li>第三方库：下述代码中的文件夹 <code>C:\Users\wztli\Anaconda3\Lib\site-packages</code></li></ul><h3 id="Sklearn-包安装失败总结"><a href="#Sklearn-包安装失败总结" class="headerlink" title="Sklearn 包安装失败总结"></a>Sklearn 包安装失败总结</h3><p>安装 scikit-learn 包，导入 sklearn 的 Bug</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ImportError: DLL load failed: 找不到指定的模块</span><br></pre></td></tr></table></figure><p><code>scikit-learn</code>的下载会对 numpy、scipy、joblib 三个库相应版本有所要求，总之如果用 anaconda 的话，全部更新为最新即可（<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">参考 whl 版本</a>）</p><blockquote><ul><li><code>C:\Users\wztli\Anaconda3\pkgs\scikit-learn-0.21.3-py37h6288b17_0\Lib\site-packages\sklearn\datasets\data</code></li><li>数据集在电脑中的位置</li></ul></blockquote><h3 id="Scrapy-包安装失败总结"><a href="#Scrapy-包安装失败总结" class="headerlink" title="Scrapy 包安装失败总结"></a>Scrapy 包安装失败总结</h3><ul><li>pip 下载可能会失败</li><li>使用 conda（镜像）下载<code>conda install -c scrapinghub scrapy</code></li></ul><h2 id="三、JetBrains-系列软件的高效使用"><a href="#三、JetBrains-系列软件的高效使用" class="headerlink" title="三、JetBrains 系列软件的高效使用"></a>三、JetBrains 系列软件的高效使用</h2><h3 id="JetBrains-之初始配置"><a href="#JetBrains-之初始配置" class="headerlink" title="JetBrains 之初始配置"></a>JetBrains 之初始配置</h3><blockquote><p>界面字体大小、代码字体大小、主题默认（dark）、背景图片（看心情）</p></blockquote><ul><li>字体相关<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685306645-d747b801-f817-475d-93e7-a9357a6f810b.png#align=left&amp;display=inline&amp;height=284&amp;margin=%5Bobject%20Object%5D&amp;originHeight=886&amp;originWidth=1227&amp;size=0&amp;status=done&amp;style=none&amp;width=393" alt></li><li>主题相关<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685306383-6425ce01-32e1-4216-b62e-def25d1e9dc7.png#align=left&amp;display=inline&amp;height=287&amp;margin=%5Bobject%20Object%5D&amp;originHeight=886&amp;originWidth=1227&amp;size=0&amp;status=done&amp;style=none&amp;width=398" alt></li></ul><h3 id="JetBrains-之-Debug-断点调试"><a href="#JetBrains-之-Debug-断点调试" class="headerlink" title="JetBrains 之 Debug 断点调试"></a>JetBrains 之 Debug 断点调试</h3><blockquote><p>断点调试是优于打印输出的一种调试程序的一种手段（Pycharm 编辑器，其他系列软件也一样）</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685306462-78e560c3-6150-4b08-b806-34919a36f0a2.png#align=left&amp;display=inline&amp;height=283&amp;margin=%5Bobject%20Object%5D&amp;originHeight=397&amp;originWidth=769&amp;size=0&amp;status=done&amp;style=shadow&amp;width=548" alt></p><blockquote><ul><li>Ctrl+F5（左上角）：（return “project”）重新 debug 该文件</li><li>F9：（resume program）一个断点接着一个断点走，不按行走（eg：有循环会随着 i 一步一步走完）</li><li>F8：（step over） 一行一行走代码</li><li>F7：（step into） 进入函数内部</li><li>Alt+shift+F7：（step into mycode）遇到自己函数   进去</li><li>shift+F8：（step out）跳出，进入函数后，跳出来</li><li>Alt+F10：（show execution point）指针显示当前断点旁边</li><li><strong>Show Python Prompt</strong>按键<br>交互式调试命令</li></ul></blockquote><h3 id="JetBrains-之-GitHub-使用"><a href="#JetBrains-之-GitHub-使用" class="headerlink" title="JetBrains 之 GitHub 使用"></a>JetBrains 之 GitHub 使用</h3><ol><li>配置 Git 和 GitHub（先连接本地 git，然后登录 GitHub）<br>页面   依次点击<code>File</code> <code>Setting</code> <code>Version Control</code> <code>GitHub</code>然后登录账户进行配置</li><li>将项目新建在 GitHub<br>菜单栏 依次点击 <code>VCS</code> <code>Import into Version Control</code> <code>Share Project on GitHub</code></li><li><strong>将项目克隆在本地</strong> <code>VCS</code> <code>Get from Version Control</code></li></ol><h3 id="JetBrains-之-TODO-使用"><a href="#JetBrains-之-TODO-使用" class="headerlink" title="JetBrains 之 TODO 使用"></a>JetBrains 之 TODO 使用</h3><p>便于编写大型代码，将注释加上前缀以便分类处理，以下图片展示<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685306509-efc968a4-bf76-44f3-8347-52cbb5a7cc73.png#align=left&amp;display=inline&amp;height=689&amp;margin=%5Bobject%20Object%5D&amp;originHeight=689&amp;originWidth=1890&amp;size=0&amp;status=done&amp;style=none&amp;width=1890" alt></p><p>参考：</p><ul><li><a href="https://www.jetbrains.com/help/pycharm/using-todo.html" target="_blank" rel="noopener">TODO 的使用官方文档</a></li><li><a href="https://blog.csdn.net/weixin_34277853/article/details/94205060?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-5&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-5" target="_blank" rel="noopener">TODO 的用法</a></li></ul><h3 id="JetBrains-之插件枚举"><a href="#JetBrains-之插件枚举" class="headerlink" title="JetBrains 之插件枚举"></a>JetBrains 之插件枚举</h3><ul><li>Waka Time：持续记录自己的 IDE 以及编程语言的使用时长</li><li><p>Arma：在 IDEA 里面运行 C++插件，在做数据结构、算法、刷题时候有用</p><blockquote><p><a href="https://plugins.jetbrains.com/plugin/9254-arma-intellij-plugin" target="_blank" rel="noopener">https://plugins.jetbrains.com/plugin/9254-arma-intellij-plugin</a> &gt; <img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1606635071834-03d24e9a-fcc0-4810-bace-47e9b67e8ed9.png#align=left&amp;display=inline&amp;height=237&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=474&amp;originWidth=1920&amp;size=60705&amp;status=done&amp;style=shadow&amp;width=960" alt="image.png"></p></blockquote></li><li><p>leetcode editor：leetcode 刷题插件</p></li></ul><h3 id="JetBrains-之初用警告"><a href="#JetBrains-之初用警告" class="headerlink" title="JetBrains 之初用警告"></a>JetBrains 之初用警告</h3><p>一般下载完开始使用，IDE 会报一个 <code>Windows安全中心</code> 的警告</p><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Windows</span> Defender might <span class="keyword">be </span>impacting your <span class="keyword">build </span>performance. PyCharm checked the following directorie</span><br></pre></td></tr></table></figure><p>解决：<img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598685306961-bcb04392-e8c2-4f3a-a7f0-d2d1516afe70.png#align=left&amp;display=inline&amp;height=700&amp;margin=%5Bobject%20Object%5D&amp;originHeight=700&amp;originWidth=1184&amp;size=0&amp;status=done&amp;style=none&amp;width=1184" alt><br>然后再进入排除项添加报错的文件夹即可</p><h3 id="JetBrains-之-IDEA-的-leetcode-插件"><a href="#JetBrains-之-IDEA-的-leetcode-插件" class="headerlink" title="JetBrains 之 IDEA 的 leetcode 插件"></a>JetBrains 之 IDEA 的 leetcode 插件</h3><blockquote><p>记录一些配置</p></blockquote><ul><li>勾选 Custom Template 和 Plugin Update</li><li>TempFilePath</li></ul><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">D:<span class="symbol">\p</span>roject-java<span class="symbol">\d</span>atastructure<span class="symbol">\s</span>rc<span class="symbol">\c</span>om<span class="symbol">\w</span>ztlink1013<span class="symbol">\p</span>roblems</span><br></pre></td></tr></table></figure><ul><li>CodeFileName</li></ul><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">P<span class="variable">$&#123;</span>question.frontendQuestionId&#125;<span class="variable">$!</span>velocityTool.camelCaseName(<span class="variable">$&#123;</span>question.titleSlug&#125;)</span><br></pre></td></tr></table></figure><ul><li>CodeTemplate</li></ul><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wztlink1013.problems.leetcode.editor.cn;</span><br><span class="line"></span><br><span class="line">$&#123;question.content&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">P</span></span>$&#123;question.frontendQuestionId&#125;$!velocityTool.camelCaseName($&#123;question.titleSlug&#125;)&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> <span class="type">P</span>$&#123;question.frontendQuestionId&#125;$!velocityTool.camelCaseName($&#123;question.titleSlug&#125;)().<span class="keyword">new</span> <span class="type">Solution</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">$&#123;question.code&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<br><a href="https://blog.csdn.net/yxf19034516/article/details/106087994/" target="_blank" rel="noopener">IDEA 的 LeetCode 力扣插件设置与使用</a><br><a href="https://hacpai.com/article/1575547715310" target="_blank" rel="noopener">IDEA 的 LeetCode 刷题插件 leetcode editor</a></p>]]></content>
      
      
      <categories>
          
          <category> Environment </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Jupyter环境的扩展</title>
      <link href="blog/ouipza/"/>
      <url>blog/ouipza/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Jupyter-环境的搭建"><a href="#一、Jupyter-环境的搭建" class="headerlink" title="一、Jupyter 环境的搭建"></a>一、Jupyter 环境的搭建</h2><ol><li>pip 下载</li><li>跟随 anaconda 下载</li></ol><h2 id="二、高效使用，安装扩展插件"><a href="#二、高效使用，安装扩展插件" class="headerlink" title="二、高效使用，安装扩展插件"></a>二、高效使用，安装扩展插件</h2><p>一般只需要下面两条命令，就可以重新打开就可看见新安装的插件环境。</p><p><code>pip install jupyter_contrib_nbextensions</code></p><p>或者</p><p><code>jupyter contrib nbextension install</code></p><p>但是 pip 下载完，会出现 jupyter_contrib_nbextension 扩展功能后不显示 Nbextensions 标签的 bug，在此记录下解决的方式。</p><h2 id="三、扩展插件不显示的解决方法"><a href="#三、扩展插件不显示的解决方法" class="headerlink" title="三、扩展插件不显示的解决方法"></a>三、扩展插件不显示的解决方法</h2><ol><li>如果之前已经用上述两条命令之一安装了上述包，且用 pip list 查看的确成功安装，则依次进行下面删除命令（选 y）:<br><code>pip uninstall jupyter_contrib_nbextensions</code><br><code>pip uninstall jupyter_nbextensions_configurator</code></li><li>打开 Anaconda Prompt 窗口，执行第一个命令，用于安装 nbextensions:<br><code>pip install jupyter_contrib_nbextensions</code></li><li>再执行第下面命令，用于安装 javascript and css files:<br><code>jupyter contrib nbextension install --user</code></li><li>最后执行，用于安装 configurator:<br><code>pip install jupyter_nbextensions_configurator</code></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>安装的扩展插件参考以下网站：</p><ul><li><a href="https://www.jiqizhixin.com/articles/2018-12-20-12" target="_blank" rel="noopener">五个常用插件 - 简书</a></li><li><a href="https://www.zhihu.com/question/59392251/answer/560977151" target="_blank" rel="noopener">如何优雅地使用 Jupyter？ - 量子位的回答 - 知乎</a></li><li><a href="https://blog.csdn.net/xiaodongxiexie/article/details/54633183" target="_blank" rel="noopener">jupyter 使用技巧</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Environment </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>AfterEffects</title>
      <link href="blog/ikze6c/"/>
      <url>blog/ikze6c/</url>
      
        <content type="html"><![CDATA[<h2 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h2><ul><li>帧</li><li>关键帧：开头、结尾中间的计算机会帮助</li><li>FPS：帧数率===飞车掉帧</li><li>视频格式：了解一些常见的格式的各自特点</li><li>比特率：也适影响到了视频的因素</li><li>格式转换：常用的格式转换软件===格式工厂，魔音工厂</li></ul><h2 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h2><ul><li>文件</li><li>编辑栏</li></ul><h2 id="大作业"><a href="#大作业" class="headerlink" title="大作业"></a>大作业</h2><h3 id="bgm"><a href="#bgm" class="headerlink" title="bgm"></a>bgm</h3><p>next to you</p><h3 id="片段设计"><a href="#片段设计" class="headerlink" title="片段设计"></a>片段设计</h3><blockquote><p>片段 1：</p></blockquote><p>千与千寻<br>龙猫<br>天空之城<br>ps：每个片段之间的过渡添加一些过渡元素<br>过渡要有一点蒙太奇的感觉、比如张口，下一个片段也要有这个就好<br>站在一起淋雨作为尾巴</p><blockquote><p>片段 2：</p></blockquote><p>电子相册展示放映</p><blockquote><p>片段 3：</p></blockquote><p>宫崎骏画像<br>开头开车的时候，加一段字幕：有种诗情画意<br>就是标题，主题<br>致敬：那些年的感动<br>和车子一起向左走动</p><p>片头开车 女孩拿桶子 趴在龙猫身上说话 祈祷种子 一段电子相册 一起飞 黄色龙猫奔跑 电子相册 等车 黄色龙猫跑 树上唱歌</p><p>车子 🚗===小女孩拿桶子===龙猫的大嘴===车站见面龙猫===一起种树===抱起来飞===一起唱歌</p>]]></content>
      
      
      <categories>
          
          <category> PostProduction </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Premiere</title>
      <link href="blog/edproq/"/>
      <url>blog/edproq/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Premiere </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>重装系统</title>
      <link href="blog/qq1dno/"/>
      <url>blog/qq1dno/</url>
      
        <content type="html"><![CDATA[<h2 id="一、关于重装"><a href="#一、关于重装" class="headerlink" title="一、关于重装"></a>一、关于重装</h2><h3 id="重装缘由"><a href="#重装缘由" class="headerlink" title="重装缘由"></a>重装缘由</h3><ul><li>电脑的空间太杂乱</li><li>环境配置混乱</li><li>网卡驱动出错<blockquote><p>总结几次重装步骤，为了今后出现类似情况，更快地重装。</p></blockquote></li></ul><h3 id="重装好处"><a href="#重装好处" class="headerlink" title="重装好处"></a>重装好处</h3><p>电脑重装系统能解决大多数问题（对鄙人能解决 100%问题//手动滑稽），在此总结一下自己重装系统过程步骤以及遇到的问题</p><h2 id="二、重装系统-SOP"><a href="#二、重装系统-SOP" class="headerlink" title="二、重装系统 SOP"></a>二、重装系统 SOP</h2><h3 id="1-制作启动盘"><a href="#1-制作启动盘" class="headerlink" title="1. 制作启动盘"></a>1. 制作启动盘</h3><ul><li><a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">法一：MSDN 下载</a><br>① 迅雷下载  ② 网盘下载</li></ul><p>下载完镜像之后，再用 <del>ULtralSO/</del> rufus 软件刻录在 U 盘（大于 4G 的 U 盘）</p><ul><li><a href="https://www.microsoft.com/zh-cn/software-download/windows10" target="_blank" rel="noopener">法二：微软官方下载</a><br>网速不能太慢，WiFi 较快的可以用这个，不过下载的电脑原装版本，不追求专业版本的 Windows，最好还是下这个吧</li></ul><blockquote><p>坑 1：如果下载的镜像大于 4G 左右，ULtralSO 不能刻录。但是在学校重装为啥就可以，是 u 盘问题嘛，醉了。<br>亮 2：官方下载，可以匹配自己电脑本来的版本；可以直接刻录在 U 盘，唯一不足应该就是网速问题。<br>坑 3：U 盘如果“身患重伤”，下个相关优化 U 盘软件处理一下</p></blockquote><ul><li>（更新）<a href="http://www.kqidong.com/index.html" target="_blank" rel="noopener">法三：快启动</a>先用法一下好镜像。</li></ul><h3 id="2-正式重装"><a href="#2-正式重装" class="headerlink" title="2. 正式重装"></a>2. 正式重装</h3><ul><li>进入 bios 界面<br>开机刚要出现<code>HP</code>字样，一直点 <em>esc</em> 键，然后再设置开机进入启动盘</li><li>Next Wait 即可<br>格式化 C 盘 → 安装 → 等候 → 登录微软账号…</li></ul><h3 id="3-磁盘管理"><a href="#3-磁盘管理" class="headerlink" title="3. 磁盘管理"></a>3. 磁盘管理</h3><ul><li><strong>磁盘管理器</strong>：根据需求将磁盘分区</li><li>问题 1：给 C 盘扩展时不能扩展？磁盘只有相邻卷才能扩展卷：解决办法就是把右边的磁盘删除（状态为未分配空间），然后用左边的磁盘合并之（使用扩展卷）</li></ul><h3 id="4-关于破解"><a href="#4-关于破解" class="headerlink" title="4. 关于破解"></a>4. 关于破解</h3><p>首先有条件购买支持正版，支持同行</p><p>其次下载自己笔记本出厂 Windows 版本，则不需要激活码，自带</p><p>最后破解之</p><p><code>hwid.kms38.gen.mk6</code>软件</p><h2 id="三、Computer"><a href="#三、Computer" class="headerlink" title="三、Computer"></a>三、Computer</h2><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><ul><li><del>谷歌浏览器</del></li><li>Edge(最新)浏览器：<a href="https://www.microsoftedgeinsider.com/en-us/download" target="_blank" rel="noopener">下载地址（DEV 版本会消去插件开发者禁用状态）</a></li><li><del>谷歌访问助手插件 让谷歌先连上网 然后构建 SSR/</del> <strong>ByWave</strong></li><li>登录账号同步书签插件等设置</li><li><del>下载<a href="http://www.carrotchou.blog/59.html" target="_blank" rel="noopener">IDM 下载器</a></del></li></ul><h3 id="文件备份及恢复"><a href="#文件备份及恢复" class="headerlink" title="文件备份及恢复"></a>文件备份及恢复</h3><ul><li>网盘常用文件夹备份（图片文件夹+个人信息文件夹）</li><li>GitHub 同步开发项目代码</li></ul><h3 id="开发环境的搭建"><a href="#开发环境的搭建" class="headerlink" title="开发环境的搭建"></a>开发环境的搭建</h3><ul><li>Git：配置全局用户 <del>（非个人电脑配置多用户环境</del>）</li><li>Nodejs</li><li>Unix：VMware15</li><li>Java：jdkjdk1.8.0_181、jrejdk1.8.0_181</li><li>MySQL</li></ul><h3 id="通用软件"><a href="#通用软件" class="headerlink" title="通用软件"></a>通用软件</h3><ul><li>百度网盘，<del>Dropbox，</del>迅雷</li><li>Bandizip</li><li>PDF：Adobe Acrobat DC <del>/福昕阅读器</del></li><li><del>有道翻译</del></li><li>Office2019（或者直接重装最新版 Win10 操作系统） <del>(已经集成 Onenote2016)，再另外下载 onenote 插件</del></li><li>Potplayer 播放器</li></ul><h3 id="社交软件"><a href="#社交软件" class="headerlink" title="社交软件"></a>社交软件</h3><p>QQ、微信、网易邮箱大师、网易云、酷狗<del>、Telegram</del></p><h3 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h3><ul><li>C&amp;C++：<del>VScode(轻量)、Codeblocks(次选)、VS2019(PC 空间大则优选)、</del><strong>VS2013</strong></li><li>Python：Anaconda、Pycharm(<del>配置 nltk、tensorflow 等</del>)(<del>关于破解或</del> <strong>学生用户登录</strong>)</li><li>Java/JavaWeb：jdk、IDEA/Eclipse(配置 Tomcat)</li><li>Web：VScode <del>/webstorm</del></li><li>DataBase：<a href="https://www.microsoft.com/zh-cn/download/confirmation.aspx?id=30438" target="_blank" rel="noopener">SQL Server 2008</a> 和 <a href="https://zhuanlan.zhihu.com/p/65630194" target="_blank" rel="noopener">安装教程</a> 、 Navicat Premium 12（MySQL）</li><li>Android：Android Studio、HBuilder X、微信开发者工具</li><li><del>OS：CPU Simulator</del></li><li>Matlab</li><li><del>研究-CAJViewer 7.3</del></li><li>研究-AxMath</li><li><del>研究-AxGlyph</del></li><li>Authy Desktop（二重验证）</li></ul><h3 id="后期制作"><a href="#后期制作" class="headerlink" title="后期制作"></a>后期制作</h3><p>Ps、Pr、Ae <del>、An、Au、EV 录频、Format factory 格式转换工厂</del></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>语雀</li><li><a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo</a> （全局代理下载）</li><li>Snipaste-2.3-64 位（网盘）</li><li><del>阿里云的 oss-browser</del></li><li><del>HexoClient</del></li><li><del>火萤桌面视频</del></li><li><del>Rainmeter</del></li></ul>]]></content>
      
      
      <categories>
          
          <category> Environment </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CNN(卷积)和GCN(离散卷积)</title>
      <link href="blog/ldx7ak/"/>
      <url>blog/ldx7ak/</url>
      
        <content type="html"><![CDATA[<h2 id="一、CNN"><a href="#一、CNN" class="headerlink" title="一、CNN"></a>一、CNN</h2><h3 id="1-卷积的理解"><a href="#1-卷积的理解" class="headerlink" title="1. 卷积的理解"></a>1. 卷积的理解</h3><ul><li>从数学角度来看，卷积就是一种运算，就好比是线性代数的内积、向量积等。</li><li>卷积分两种类型，一种是连续类型，一种是离散类型。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598686034538-58c8f110-943e-4194-8c80-f9465c4fde8e.png#align=left&amp;display=inline&amp;height=402&amp;margin=%5Bobject%20Object%5D&amp;originHeight=402&amp;originWidth=453&amp;size=0&amp;status=done&amp;style=none&amp;width=453" alt></li></ul><h3 id="2-Examples"><a href="#2-Examples" class="headerlink" title="2. Examples"></a>2. Examples</h3><ol><li>离散卷积===掷骰子<br>加入同时掷两个骰子，求骰子显现数之和为 4 的概率为多少？其实就是高中所学的排列组合问题，可以看作是卷积离散形式的显性表现形式。</li><li>连续卷积===做馒头<br>由于时间变化和食物腐败特性，做馒头的同时也会有馒头的腐败，给定相关数据，求一天之中腐败的馒头数量。</li></ol><h3 id="3-卷积在计算机领域简单应用"><a href="#3-卷积在计算机领域简单应用" class="headerlink" title="3. 卷积在计算机领域简单应用"></a>3. 卷积在计算机领域简单应用</h3><ul><li>降噪图像：将图像按照矩阵的形式表达为一个数据集，对目标的一个像素点，进行平均矩阵运算，此时的矩阵表达形式可以映射到卷积的数学表达形式。</li></ul><h2 id="二、GCN"><a href="#二、GCN" class="headerlink" title="二、GCN"></a>二、GCN</h2><p>卷积的区分：</p><ul><li>数学运算当中的卷积：“”</li><li>深度学习里面的卷积</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.zhihu.com/question/22298352/answer/228543288" target="_blank" rel="noopener">如何通俗易懂地解释卷积？ - 马同学的回答 - 知乎</a></li><li><a href="https://www.zhihu.com/question/52237725/answer/545340892" target="_blank" rel="noopener">解释一下卷积神经网络的卷积核？ - superbrother 的回答 - 知乎</a></li><li><a href="https://www.zhihu.com/question/54504471/answer/332657604" target="_blank" rel="noopener">如何理解 Graph Convolutional Network（GCN）？-superbrother 的回答-知乎</a></li><li><a href="https://www.cnblogs.com/maybe2030/p/4665847.html#top" target="_blank" rel="noopener">复杂网络的解释</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> MachingLearning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Photoshop使用</title>
      <link href="blog/bkthv9/"/>
      <url>blog/bkthv9/</url>
      
        <content type="html"><![CDATA[<h2 id="一、基本工具"><a href="#一、基本工具" class="headerlink" title="一、基本工具"></a>一、基本工具</h2><blockquote><p>认识 PS===有许多功能 eg：绘画等等<br>准备工作===了解菜单栏；工具栏；基本功能</p></blockquote><h3 id="图层面板的认识"><a href="#图层面板的认识" class="headerlink" title="图层面板的认识"></a>图层面板的认识</h3><p>图层顺序 上一层遮挡下一层 蒙版也是图层<br>混合模式 就是这层图层与下一层混合叠加的效果<br>@@滤色 就是消去黑色深色只显示白色亮色的部分 案例光晕 用黑背景绘画光晕的图案选择滤色混合样式<br>图层样式<br>不透明<br>创建 删除 解锁</p><h3 id="图片的裁切"><a href="#图片的裁切" class="headerlink" title="图片的裁切"></a>图片的裁切</h3><p>选框工具不行===无法确定像素 不能缩放要显示的区域<br>裁剪工具不行===能确定像素 但不能缩放要显示的区域只是同时裁剪图片和画布<br>图像===大小不行–只是压缩图片和画布而已<br>画布大小（前提是图层不是背景层没有被锁定）<br>调整画布的大小+自由变换工具缩放+移动工具<br>我们想要的大小 调整图像等比例缩放 移动到我们要显示的区域</p><h3 id="蒙版作用"><a href="#蒙版作用" class="headerlink" title="蒙版作用"></a>蒙版作用</h3><p>蒙版只有白和黑 只是在通道建立一个白色的蒙版图层（默认全部显示；有选区时，选区是白色的非选区是黑色的）<br>黑透明，白不透明<br>画笔涂抹 透明度 流量<br>一般用来合成图片<br>对图像擦除的效果 但不影响原始图像的像素 便于后期修改<br>如果用橡皮擦会破坏原始素材</p><h3 id="正确校色"><a href="#正确校色" class="headerlink" title="正确校色"></a>正确校色</h3><p>图像-调整===对图像校色是不可逆的 不适合后期修改<br>创建新的填充和调整图层的按钮 添加带蒙版的调整图层<br>带蒙版的调整图层 是可逆的<br>如果想只对**一个图层作用 右击图层-创建剪切蒙版</p><h3 id="钢笔工具"><a href="#钢笔工具" class="headerlink" title="钢笔工具"></a>钢笔工具</h3><p>点击-点击===是直线<br>点击-点击不要松开手===拖动 就是曲线勒<br>alt+ 点击瞄点拖拉会产生操纵杆===并且把直线变成曲线<br>点击单个操纵杆会单独操纵一边的<br>crtl+ 移动瞄点<br>属性栏【自动添加/删除】打勾时 点击线能添加点 点击点不拖动能删除点<br>描绘到一半的没闭合的图层 要闭合的话就要先 ctrl 点击最后一点 在点击初始点<br>抠出的区域转为选区 选中图层 点击路径面板-将路径转为选区<br>这时候的选区可以 建立蒙版把他抠出来单独单独显示 这种抠图是可逆的</p><h3 id="修片时用到的工具"><a href="#修片时用到的工具" class="headerlink" title="修片时用到的工具"></a>修片时用到的工具</h3><p>红眼 ===记得是整个眼睛<br>污点 ===可以吧污点附近的像素自动修改污点 但是对麻子脸没用<br>修复画笔 ===把目标的像素填充涂抹的地方 并且能自动融合边缘<br>修补工具 ===框选一个目标选区 填充涂抹的地方 并且能自动融合边缘</p><p>##</p>]]></content>
      
      
      <categories>
          
          <category> PostProduction </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Animate使用</title>
      <link href="blog/vh02ai/"/>
      <url>blog/vh02ai/</url>
      
        <content type="html"><![CDATA[<h2 id="一、基本功能"><a href="#一、基本功能" class="headerlink" title="一、基本功能"></a>一、基本功能</h2><ul><li>铅笔工具：属性面板和工具栏下方公共栏都有修改属性设置，笔触颜色， 模式（伸直平滑墨水） 样式下拉菜单中选斑马线测试</li><li>线条工具：shift 划线，水平垂直 45 度角     端点</li><li>矩形工具：形状，笔触和填充两种颜色  Shift 正方形   接合</li><li>基本矩形工具：图元，跟形状重合不会破坏，形状之间融合</li><li>椭圆工具：不要笔触颜色   不要填充颜色</li><li>基本椭圆工具：直接在图上拖动修改   圆环   扇形</li><li>多角星形工具：多边形，星形（属性-工具设置-选项-样式-星形）</li><li>选择工具</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">选择功能：单击填充选填充，双击填充选边框+填充，双击边框选连通边框</span><br><span class="line">移动功能：选择，按着鼠标移动</span><br><span class="line">复制功能：选择，ALT+按着鼠标移动可复制</span><br><span class="line">变形功能：鼠标放在边框上当光标变了，按着鼠标拖动可以做变形</span><br></pre></td></tr></table></figure><blockquote><p>月亮和叶子制作</p></blockquote><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">画笔工具（刷子工具）： 有边框无填充矩形，用刷子工具测试刷子模式（画笔模式）。</span><br><span class="line">画笔工具（艺术画笔工具）：可点击画笔库按钮打开预设，双击某种画笔，添加到属性面板的样式下拉列表</span><br><span class="line">颜料桶工具：修改填充颜色   空隙大小</span><br><span class="line">墨水瓶工具：修改笔触颜色 改宽度和样式，细边粗边斑马</span><br><span class="line">滴管工具：选择边框，修改笔触颜色，选择填充，修改填充颜色，并同时转换成墨水瓶或颜料桶工具</span><br><span class="line">任意变形工具：有点像PS的自由变换  导入外部文件并打散（CTRL+<span class="keyword">B）做变形</span></span><br><span class="line"><span class="keyword">渐变变形工具：气球制作（填充颜色选渐变，用颜色调板变换颜色，用颜料桶工具填充）</span></span><br><span class="line"><span class="keyword">部分选择工具：红心制作（只有填充没有边框的正圆-复制正圆两只圆叠加心的半成品-部分选择工具移动下面锚点成心形）</span></span><br><span class="line"><span class="keyword">文字工具：七彩文字（颜料桶工具填充为线性渐变） </span>  透视文字（任意变形工具 扭曲）</span><br><span class="line">                  波浪文字（任意变形工具 封套）</span><br><span class="line"><span class="number">3</span>D旋转平移工具：两种工具只对影片剪辑元件起作用（插入讲元件，花元件，对齐面板排列）</span><br></pre></td></tr></table></figure><blockquote><p>时间轴，普通帧，关键帧，空白关键帧</p></blockquote><blockquote><p>逐帧动画</p></blockquote><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">导入文件名连续的多张图片，文件-导入-导入到舞台-此文件看起来是图像序列的组成部分，是否导入序列中的所有图像？是-在时间轴上查看，生成若干关键帧，每帧一幅图像，CTRL-Enter测试影片，<span class="number">1</span>帧频<span class="number">2</span>关键帧后插入普通帧放慢速度（选择关键帧-插入-时间轴-普通帧）</span><br><span class="line">小球跳跃，从屏幕左边跳到右边，再跳回来（插入关键帧，每个关键帧中小球改变位置，时间轴上选择所有帧，按着Alt键拖动可复制，对复制帧鼠标右键选翻转帧）</span><br><span class="line">Connecting制作</span><br></pre></td></tr></table></figure><h2 id="二、补间形状动画"><a href="#二、补间形状动画" class="headerlink" title="二、补间形状动画"></a>二、补间形状动画</h2><ol><li>小球移动   第一帧画圆-选择时间轴上的帧-鼠标右键-创建补间形状-时间轴上选第 25 帧创建关键帧，这个关键帧跟前面距离它最近的关键帧一样，把小球移动到右边- CTRL-Enter 测试影片</li><li>蓝色方形变红色圆</li><li>“3 变色文字”实现时注意，文字必须打散为形状，才能做补间形状动画</li><li>“4 形状提示“ 同一图中两个不同动画是通过创建图层，不同图层上不同动画；形状提示的添加方法：修改-形状-添加形状提示</li></ol><h2 id="三、传统补间动画"><a href="#三、传统补间动画" class="headerlink" title="三、传统补间动画"></a>三、传统补间动画</h2><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">传统补间动画-小球为例子</span><br><span class="line">画圆-帧-鼠标右键-创建传统补间-注意圆已经被转换为图形元件<span class="number">-30</span>帧处创建关键帧-圆移动到右边-测试影片-在库中找到自动建立的图形元件，双击修改为径向渐变填充-选择第一帧点击-修改帧属性中的旋转为顺时针，测试影片。-选择第二个关键帧中的圆，在属性中选择色彩效果-样式中的各种选项-测试效果  </span><br><span class="line"><span class="number">6</span><span class="number">-1</span> 动作动画-放大</span><br><span class="line">导入图-帧-鼠标右键-创建传统补间<span class="number">-30</span>帧处创建关键帧-放大第二个关键帧中图片元件-选择第一帧-帧属性中缓动设置为<span class="number">-100</span></span><br><span class="line">补间形状和传统补间的区别</span><br><span class="line"><span class="number">6</span><span class="number">-2</span> 动作动画-小人跑步</span><br><span class="line">设置舞台颜色-制作路图层-制作小人影片剪辑动画-生成小人走路图层-设置两个关键帧中小人属性</span><br><span class="line">读ppt13-ppt17对图形元件和影片剪辑元件属性设置的不同</span><br><span class="line">引导动画-小球抛物线</span><br><span class="line">要创建运动引导动画，至少需要两个图层：一个是被引导图层，用于存放运动的对象，必须是传统补间动画；另一个是引导层，用于绘制作为对象运动路径的辅助线。使用鼠标右键单击，在弹出的快捷菜单中，选择【添加传统运动引导层】选项，即可添加一个传统运动引导层。</span><br><span class="line">创建一个传统补间动画-小球从频幕左边走到右边-在图层左边空白处鼠标右键单击，在弹出的快捷菜单中，选择【添加传统运动引导层】选项，即可添加一个传统运动引导层。用直线工具画直线，小球自动吸附到线上-用选择工具把直线变成抛物线-测试</span><br><span class="line">遮罩动画</span><br><span class="line">遮罩动画是Flash的一种基本动画方式，制作遮罩动画至少需要<span class="number">2</span>个图层，即遮罩层和被遮罩层。在时间轴上，位于上层的图层是遮罩层，这个遮罩层中的对象就像一个窗口一样，透过它的填充区域可以看到位于其下方的被遮罩层中的区域。而任何的非填充区域都是不透明的，被遮罩层在此区域中的图像将不可见。</span><br><span class="line">导入women1照片-建立新图层-画椭圆遮住女孩头部-图层左边空白处鼠标右键单击，在弹出的快捷菜单中，选择【遮罩层】，看效果。</span><br><span class="line">补间形状动画</span><br><span class="line">true改变的形状</span><br><span class="line">true单纯位置的移动</span><br><span class="line">传统补间动画</span><br><span class="line">true多个属性可以改变：旋转、放大、透明……</span><br><span class="line"> </span><br><span class="line">引导层</span><br><span class="line">trueeg：旋转的字</span><br><span class="line">遮罩动画</span><br><span class="line">trueeg：闪光灯文字效果</span><br><span class="line"> </span><br><span class="line">影片剪辑动画===how？</span><br><span class="line">滤镜===实现灰色地带</span><br><span class="line">帧的种类与差异</span><br><span class="line">切割字幕：线条工具/铅笔</span><br><span class="line">从库那里打开文件，直接拖动，可以保留被拖动的东西属性</span><br><span class="line">魔戒：</span><br><span class="line">向下滚动的文字==不同时间掉下===该百年属性，图形原件，各个掉下的文字改成不同的帧数</span><br></pre></td></tr></table></figure><h2 id="四、部件动画"><a href="#四、部件动画" class="headerlink" title="四、部件动画"></a>四、部件动画</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">补间动画</span></span><br><span class="line"> </span><br><span class="line"><span class="string">补间动画（CS4开始）是基于对象的，传统补间是基于帧的</span></span><br><span class="line"> </span><br><span class="line"><span class="string">生成补间动画方法：</span></span><br><span class="line">true<span class="string">①选择对象，右击，选创建补间动画；</span></span><br><span class="line">true<span class="string">②选择帧，右击选创建补间动画，系统自动生成补间范围，容纳一秒所需帧</span></span><br><span class="line"> </span><br><span class="line"><span class="string">创建补间动画后，帧色彩是浅蓝色，与传统补间补间形状比（淡紫色</span> <span class="string">绿色）</span></span><br><span class="line"><span class="string">（生成一个新图层，创建传统补间，查看颜色）</span></span><br><span class="line"> </span><br><span class="line"><span class="string">补间对象可以是元件（图形元件、影片剪辑、按钮）、文本（演示传统补间如何做文字运动，自动把文本转换为图形元件，而补间动画直接对文本做补间）</span></span><br><span class="line"> </span><br><span class="line"><span class="string">编辑补间动画范围：</span></span><br><span class="line"><span class="string">补间动画可以方便调整帧数</span>  <span class="string">传统补间不能像补间动画范围那样拉伸或改变大小，只能分别选择这些帧并插入或删除才能拉伸或缩短动画</span></span><br><span class="line">true<span class="string">注意：在时间轴上，第一帧最后一帧边缘按着鼠标拖动，帧们按比例压缩或者增长；如果按着shift键拖动，可保持原来关键帧之间的距离，尾部自动生成普通帧</span></span><br><span class="line"><span class="string">延长动画持续时间，可以将范围左侧边缘或右侧边缘拖动到期望的帧上。</span></span><br><span class="line">    <span class="string">“基于整体范围的选择”（时间轴右上角下拉菜单）勾选时，鼠标拖过希望选择的帧的同时按下ctrl键可以在动画范围内选择一定范围内的帧，（ctrl+鼠标拖动可以同时选多个图层多个帧），选择后拖动可以移动关键帧到图层的新位置，按着Alt的同时拖动是复制帧</span></span><br><span class="line">   </span><br><span class="line">true<span class="string">选择帧后鼠标右键，拆分动画，产生两个补间范围</span></span><br><span class="line">true<span class="string">eg：</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="string">关键帧和属性关键帧？？？</span></span><br><span class="line"><span class="string">不同，关键帧只时间轴上某一帧中元件实例首次出现在舞台上；属性关键帧是flash</span> <span class="string">cs4增加的，指在补间动画中为特定时间或某一帧某个属性定义的一个值</span></span><br><span class="line"><span class="string">添加属性关键帧：</span></span><br><span class="line">true<span class="number">1</span><span class="string">）手动添加：播放头放在要添加帧的位置，右击-插入关键帧-</span>            </span><br><span class="line">true<span class="number">2</span><span class="string">）自动添加:播放头放在要添加帧的位置，属性改变</span></span><br><span class="line"> </span><br><span class="line"><span class="string">编辑运动路径</span></span><br><span class="line">      <span class="string">创建/修改运动路径：可以用选择工具移动路径（包括对象）、路径变形、用部分选择工具修改路径，可用选择工具重新定位路径也可以用任意变形工具缩放处理路径，还可以菜单修改-变形更多范围处理路径</span></span><br><span class="line">      <span class="string">将播放头定位在路径中间位置，修改对象位置，会自动改变路径</span></span><br><span class="line">      <span class="string">创建复炸路径：新建一个铅笔图层，铅笔工具绘制图在该图层，ctrl+X，选择时间轴内的动画范围或舞台上的对象ctrl+v粘贴，就可以生成路径，</span></span><br><span class="line">      <span class="string">Ctrl+shift+V不改变原图形位置复制</span></span><br><span class="line">true<span class="string">注意：路径不能闭合，比如地球绕太阳旋转的题，用补间动画实现时，园必须有缝隙，小球才能在缝隙处开始</span></span><br><span class="line"> </span><br><span class="line"><span class="string">Eg：</span></span><br><span class="line"><span class="number">1</span><span class="string">）飞机头跟着路径走。</span></span><br><span class="line"><span class="number">2</span><span class="string">）海底海豚</span></span><br><span class="line">true<span class="string">Ø</span> <span class="string">影片剪辑动画尾巴的摆动：新建元件（影片剪辑），再导入三张海豚图片（改变相关的帧）生成海豚摆尾巴的一个小影片剪辑</span></span><br><span class="line">true<span class="string">Ø</span> <span class="string">学会导入影片所需要的剪辑动画①同时打开fla文件，库当中导入②文件选项导入到舞台</span></span><br><span class="line">true<span class="string">Ø</span> <span class="string">还要勾选“调整到路径”</span></span><br><span class="line"><span class="string">补间动画使用并保存为预设动画</span></span><br><span class="line"><span class="string">传统补间不行，只能是补间动画才行</span></span><br><span class="line"><span class="string">动画预设使用：选择动画预设中的相关预设，鼠标右键“在当前位置结束”</span>  </span><br><span class="line"><span class="string">自己创建预设：方形从左到右，创建补间动画，在动画预设工具中选左下第一个生成预设命令，或者右上弹出菜单中选“保存”，即可在自定义预设中定义自己的预设</span></span><br><span class="line">    <span class="string">另外，再同样生成传统补间，同样保存，会出现不能创建对话框。</span></span><br><span class="line">    <span class="string">如果画形状（如圆），可直接应用动画预设，但是，注意别只选择元的心或者轮廓，这样，会保留没选择部分为一个图层，选择部分自动生成新图层</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="string">位置与颜色效果动画：</span></span><br><span class="line">         <span class="number">1</span><span class="string">）打开素材，延长帧到117</span></span><br><span class="line">           <span class="number">2</span><span class="string">）新建图层2，第11帧F6插入关键帧，库中拖动P00元件，到舞台底部，并创建补间动画</span></span><br><span class="line">           <span class="number">3</span><span class="string">）14帧处右击，插入属性关键帧-全部，向上移动P00，到下面细条一半进入----快速上移</span></span><br><span class="line">           <span class="number">4</span><span class="string">）25帧插入属性关键帧，Poo上移一点，到细条全显示--慢速上移</span></span><br><span class="line">           <span class="number">5</span><span class="string">）新建图层3</span> <span class="string">，33帧处插入关键帧，元件“按钮1”</span> <span class="string">拖入放在上端和大字上端齐平，选按钮1，属性面板中设亮度为80%,创建补间动画</span></span><br><span class="line">           <span class="number">6</span><span class="string">）41帧处插入属性关键帧，向下拖动对象到顶端比上面的细线低不少，亮度设为0%</span></span><br><span class="line">           <span class="number">7</span><span class="string">)</span> <span class="number">46</span><span class="string">帧F6，向上拖动图到最终位置，图像的下端与下面的细条的上端齐平</span></span><br><span class="line">           <span class="number">8</span><span class="string">）选择补间范围，在“动画预设”面板创建并存储新的动画预设</span></span><br><span class="line">           <span class="number">9</span><span class="string">）新建图层，36帧处插入关键帧，元件“按钮2”</span> <span class="string">拖入放在上端和大字上端齐平，将刚创建的动画预设应用到元件上</span></span><br><span class="line">           <span class="number">10</span><span class="string">）依次创建新图层，拖入按钮3,4，应用动画预设</span></span><br><span class="line"> </span><br><span class="line"><span class="string">运动及运动引导动画</span>  </span><br><span class="line">                    <span class="number">1</span><span class="string">)打开素材文件，把Symboll0拖入场景，转换为影片剪辑运动动画第一帧窗机补间动画，新建图层，绘制曲线，ctrl+X，回到图层一，ctrl+shift+V原位粘贴</span></span><br><span class="line">                   <span class="number">2</span><span class="string">）生成图层3，错后几帧建立关键帧，拖入Symbol0，还是创建补间动画，绘制曲线，复制粘贴</span></span><br><span class="line">                   <span class="number">3</span><span class="string">）生成图层4，重复2）</span></span><br><span class="line">                   <span class="number">4</span><span class="string">）回到场景，图层一背景，图层2放入运动动画，按Alt拖动复制若干，调整位置，使得播放时有更多花瓣飞出</span></span><br><span class="line"><span class="string">摄像头动画</span></span><br><span class="line"><span class="string">创建：时间轴下方/左边工具里面</span></span><br><span class="line"><span class="string">在控制台修改属性，补间动画，传统补间</span></span><br><span class="line"><span class="string">还可以左右移动摄像机</span></span><br></pre></td></tr></table></figure><h2 id="五、按钮"><a href="#五、按钮" class="headerlink" title="五、按钮"></a>五、按钮</h2><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">三种元件</span><br><span class="line">true图形</span><br><span class="line">true影片剪辑</span><br><span class="line">true按钮</span><br><span class="line"> </span><br><span class="line">按钮</span><br><span class="line">true（使用和指针使用有关）</span><br><span class="line">true四种状态：</span><br><span class="line">  弹起状态</span><br><span class="line">  指针点击状态</span><br><span class="line">  按下状态</span><br><span class="line">  滑过状态</span><br><span class="line">trueps：2热区、点击状态</span><br><span class="line"> </span><br><span class="line">⚪的制作</span><br><span class="line">true四个图层</span><br><span class="line">true选择<span class="comment">===变形===</span></span><br><span class="line">trueCtrl+x 制作外环<span class="comment">===在制作成影片剪辑原件（用补间动画制作）</span></span><br><span class="line">true加在一起<span class="comment">===都选择===对齐命令</span></span><br><span class="line">true加入音乐</span><br><span class="line"> </span><br><span class="line">史努比的实现</span><br><span class="line">true抠图<span class="comment">===魔棒……</span></span><br><span class="line">true扩大热区</span><br><span class="line">游动的鱼</span><br><span class="line">true影片剪辑</span><br><span class="line">true隐形动画</span><br><span class="line"> </span><br><span class="line">动作脚本（a来显示）</span><br><span class="line">true窗口<span class="comment">===动画===写代码</span></span><br><span class="line">true①小球停止</span><br><span class="line">true②星球环绕：第二帧跳到第一帧</span><br><span class="line">true创建：</span><br><span class="line">  ①动作里面的</span><br><span class="line">  ②代码片段里面</span><br><span class="line">  新建一个图层，用其他人的按钮代码片段</span><br><span class="line"> </span><br><span class="line">经典交互程序</span><br><span class="line">true四个商店</span><br><span class="line"> </span><br><span class="line">声音</span><br><span class="line">  选择第一帧，拖动过来</span><br><span class="line">  同步：不要选择“事件”，选择“开始”，“数据流”只在选择的的帧出声音</span><br><span class="line">  拖动音乐进来之后：插入普通帧不要关键帧</span><br><span class="line">文本（歌词）</span><br><span class="line">true三种类型：</span><br><span class="line">true①静态文本：从头到尾不变</span><br><span class="line">true②动态文本</span><br><span class="line">true③输入文本：交互</span><br><span class="line"> </span><br><span class="line">true按F7（第一个F7之后插入F6），在文本（歌词）图层中，</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">不同场景按钮：</span><br><span class="line">true三个按钮，响应进入另一个场景，插入场景<span class="comment">===用到代码片段</span></span><br><span class="line">true代码实现</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PostProduction </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OS小结</title>
      <link href="blog/spobqi/"/>
      <url>blog/spobqi/</url>
      
        <content type="html"><![CDATA[<h2 id="学期完一点想法"><a href="#学期完一点想法" class="headerlink" title="学期完一点想法"></a>学期完一点想法</h2><p>OS 学的不深，许多经典算法没有自己实现，只是表层的理解原理而已。</p><p>OS 的学习以后还有待加强！</p><h2 id="他人的话"><a href="#他人的话" class="headerlink" title="他人的话"></a>他人的话</h2><p>上大学上的的最有意义的四门课：</p><ol><li>操作系统/实习：从零开始写了一个操作系统，从实模式到 bash，包括文件系统</li><li>计算机网络：从零实现 tcp 协议栈，以及路由算法</li><li>编译原理/实习：从零写 python 静态类型推导以及 runtime 库</li><li>计算机体系结构：这个没做什么项目，但是了解了 cpu 的基本原理，发展历史，以及现代处理器的工作模式。</li></ol><p>至于这四门课都学完后我的收益是什么？ 任何一个计算机软件层面的问题，我都可以按照这四门课教我的方法，系统性的分析到根源，从未失手过。 目前面试过的人得有 100+，感觉 985 科班出身的会好一些，感觉 CS 大学教育还是有待加强</p><h2 id="java-对-os-的复习"><a href="#java-对-os-的复习" class="headerlink" title="java 对 os 的复习"></a>java 对 os 的复习</h2><h3 id="计算机的组成"><a href="#计算机的组成" class="headerlink" title="计算机的组成"></a>计算机的组成</h3><ul><li>CPU<ul><li>对内存的数据，执行相关数据</li></ul></li><li>内存<ul><li>数据是如何存储的？</li></ul></li><li>外存<ul><li>硬盘、cd、驱动</li></ul></li><li>输出设备<ul><li>显示器（分辨率，点距）</li></ul></li><li>输入设备<ul><li>键盘</li></ul></li><li>调制解调器</li></ul><h3 id="程序的本质"><a href="#程序的本质" class="headerlink" title="程序的本质"></a>程序的本质</h3><p>封装一个极其智能软件</p><ul><li>机器语言</li><li>汇编语言：对上一语言做了部分封装，所以需要了编译器</li><li>高级语言：就想学英语一样（要学好英语，提升词汇量等），也需要编译器来转换机器所能认识的机器语言或虚拟机器语言</li></ul><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><p>java 能开发很多平台应用，使用范围广泛</p><p>java 的一些特征</p>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB-概述</title>
      <link href="blog/rfeess/"/>
      <url>blog/rfeess/</url>
      
        <content type="html"><![CDATA[<h2 id="MATLAB-概述"><a href="#MATLAB-概述" class="headerlink" title="MATLAB 概述"></a>MATLAB 概述</h2><p>MATLAB(矩阵实验室)是数字计算，可视化和编程的第四代高级编程语言和交互式环境。MATLAB 是由 MathWorks 开发的。</p><p>它允许矩阵操纵，绘制功能和数据; 实现算法; 创建用户界面; 与其他语言编写的程序(包括 C 语言，C++，Java 和 FORTRAN)进行交互; 分析数据; 开发算法; 并创建模型和应用程序。</p><p>它有许多内置命令和数学函数，可以帮助您进行数学计算，生成图形和执行数值方法。</p><h2 id="MATLAB-计算数学"><a href="#MATLAB-计算数学" class="headerlink" title="MATLAB 计算数学"></a>MATLAB 计算数学</h2><p>MATLAB 用于计算数学的各个方面，以下是最常用的常用数学计算方法 -</p><ul><li>处理矩阵和数组</li><li>2D 和 3D 绘图和图形</li><li>线性代数</li><li>代数方程</li><li>非线性函数</li><li>统计</li><li>数据分析</li><li>微积分和微分方程</li><li>数值计算</li><li>积分</li><li>变换</li><li>曲线拟合</li><li>各种其他特殊功能</li></ul><h2 id="MATLAB-特点"><a href="#MATLAB-特点" class="headerlink" title="MATLAB 特点"></a>MATLAB 特点</h2><p>以下是 MATLAB 的基本特性 -</p><ul><li>它是数字计算，可视化和应用程序开发的高级语言。</li><li>它还为迭代探索，设计和解决问题提供了一个交互式环境。</li><li>它为线性代数，统计学，傅里叶分析，滤波，优化，数值积分和求解常微分方程提供了广泛的数学函数库。</li><li>它提供内置的图形，用于可视化数据和工具，用于创建自定义绘图。</li><li>MATLAB 编程接口提供了开发工具，以提高代码质量的可维护性并最大限度提高性能。</li><li>它提供使用自定义图形界面构建应用程序的工具。</li><li>它提供了基于 MATLAB 的算法与外部应用程序和语言(如 C 语言，Java，.NET 和 Microsoft Excel)集成的功能。</li></ul><h2 id="MATLAB-使用"><a href="#MATLAB-使用" class="headerlink" title="MATLAB 使用"></a>MATLAB 使用</h2><p>MATLAB 广泛应用于物理，化学，数学和所有工程流领域的科学与工程计算工具。 它用于一系列应用，包括 -</p><ul><li>信号处理和通信</li><li>图像和视频处理</li><li>控制系统</li><li>测试和测量</li><li>计算财务</li><li>计算生物学</li></ul>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JAVA-基础知识</title>
      <link href="blog/esofty/"/>
      <url>blog/esofty/</url>
      
        <content type="html"><![CDATA[<h2 id="一、关于-JAVA"><a href="#一、关于-JAVA" class="headerlink" title="一、关于 JAVA"></a>一、关于 JAVA</h2><h3 id="Java-和-C-和-C"><a href="#Java-和-C-和-C" class="headerlink" title="Java 和 C 和 C++"></a>Java 和 C 和 C++</h3><ol><li>c 是面向过程的语言。c++和 Java 都是面向对象的。在 c 中没有类或者对象的概念。</li><li>java 运行在虚拟机上，号称与平台无关。也就是你开发的 java 程序无论是 unix，linux 还是 windows 都可以正常运行。但是实际上这是一个良好的愿望，实际跨平台时还会有各种各样的问题。c 和 c++都是直接编译成可执行文件，是否能跨平台主要看你用到的编译器特性是否有多平台支持。</li><li>因为 c 和 c 是直接编译成可执行文件，所以运行效率要比 java 高。至于 c 和 c 哪个更快，两种语言的拥趸已经吵了很多年。</li><li>java 因为是运行在虚拟机上，不需要考虑内存管理和垃圾回收机制。也是就你可以声明一个对象而不用考虑释放他，虚拟机帮你做这事情。而 c 和 c 语言本身没有多少内存管理的概念，写 c 和 c 程序如果用到指针就一定要考虑内存申请和释放。内存泄漏是 c 和 c++最头疼的问题。</li><li>代码重用：java 中有一个根类 object，所有的类都是其子类，通过这种方式将容器和算法分离，实现一种操作作用于多种对象，提高代码重用。c 中没有总根对象，但是 c 提供了另一个更强大的功能“模板”，同样高效地实现了一种操作作用于多种对象，提供了高效的代码重用方法。</li><li>数据结构：java 内建了丰富的数据结构：列表，集合等等（很久没用 java 了，有些记不太清）。而 c++则用“模板”同样提供了各种数据结构（容器）。</li><li>c 语言在一些比较低层，和硬件打交道的地方用得比较多。另外很多开源软件由于 unix/linux 开发习惯也大多采用 c 来开发。Java 是现在最流行的开发语言，c++比起 java 稍稍不那么流行一些，但是功能很强大。如能深入掌握，可以写出兼顾效率和美观的优秀代码。</li></ol><h3 id="多语言简略对比"><a href="#多语言简略对比" class="headerlink" title="多语言简略对比"></a>多语言简略对比</h3><blockquote><p><strong>Ideas are cheap, show me the code</strong>   学到了，学到了~</p></blockquote><figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">代码块：<span class="keyword">python</span>通过缩进来确定代码块</span><br><span class="line">复数：java、<span class="keyword">python</span>有，C、Cplusplus没有</span><br><span class="line"><span class="keyword">python</span>：相对于java，<span class="keyword">python</span>就是java的压缩版本</span><br><span class="line">包、接口、API：我觉得java也好，<span class="keyword">python</span>也好，正是因为这些模块组件化，才使得这些语言好很好的的健壮性</span><br></pre></td></tr></table></figure><h2 id="二、数据类型；运算符；表达式"><a href="#二、数据类型；运算符；表达式" class="headerlink" title="二、数据类型；运算符；表达式"></a>二、数据类型；运算符；表达式</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><ol><li>常量</li><li>标识符和变量</li><li>数据类型：<strong>JAVA 中除了下面 8 种数据类型其他的都是以对象（或者说类的实例）存在的</strong></li></ol><p>**</p><blockquote><ul><li>string：要熟悉常用的函数</li><li>boolean（java 中需要全部写出来）：会打印出来<code>true</code> <code>false</code></li><li>数值型</li></ul></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598686524193-b62199d3-9dc6-4caa-a3c1-2484c7d6185c.png#align=left&amp;display=inline&amp;height=204&amp;margin=%5Bobject%20Object%5D&amp;originHeight=583&amp;originWidth=1192&amp;size=0&amp;status=done&amp;style=none&amp;width=418" alt></p><p>_</p><blockquote><p><em>关于 byte 数据类型的二进制运算：反码、补码、原码</em></p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598686523775-71b931fb-886e-4438-99b4-e78973f270de.png#align=left&amp;display=inline&amp;height=277&amp;margin=%5Bobject%20Object%5D&amp;originHeight=466&amp;originWidth=650&amp;size=0&amp;status=done&amp;style=none&amp;width=386" alt></p><h3 id="运算符和表达式"><a href="#运算符和表达式" class="headerlink" title="运算符和表达式"></a>运算符和表达式</h3><ul><li>赋值语句，赋值表达式</li><li>输入输出：<strong>输入输出，要有记得清除的空间，close 的意识！</strong></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line">Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">double</span> radius = input.nextDouble();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二 : 好处就是避免项目工程中类当中重名的情况</span></span><br><span class="line">java.util.Scanner input = <span class="keyword">new</span> java.util.Scanner(System.in);</span><br><span class="line"><span class="keyword">double</span> radius = input.nextDouble();</span><br></pre></td></tr></table></figure><ul><li><p>数值运算符</p><blockquote><p>+、-、*、/、%</p></blockquote></li><li><p>逻辑运算符<br><code>&amp;&amp;</code> <code>||</code> <code>!</code> <code>^</code>(异或：相同才为假)<br><code>&amp;</code> <code>|</code> <code>^</code> 位运算符：会先化成二进制对二进制码进行分析</p></li><li>运算符的优先级</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598686523840-d1395ecf-7d3c-416b-8ce8-5d11a0e3f313.png#align=left&amp;display=inline&amp;height=302&amp;margin=%5Bobject%20Object%5D&amp;originHeight=552&amp;originWidth=543&amp;size=0&amp;status=done&amp;style=none&amp;width=297" alt></p><h2 id="三、程序三大基本结构"><a href="#三、程序三大基本结构" class="headerlink" title="三、程序三大基本结构"></a>三、程序三大基本结构</h2><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><h3 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h3><ul><li>if(){} else{}</li><li>switch</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      <span class="comment">//char grade = args[0].charAt(0);</span></span><br><span class="line">      <span class="keyword">char</span> grade = <span class="string">'C'</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">switch</span>(grade)</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">'A'</span> :</span><br><span class="line">            System.out.println(<span class="string">"优秀"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">'B'</span> :</span><br><span class="line">         <span class="keyword">case</span> <span class="string">'C'</span> :</span><br><span class="line">            System.out.println(<span class="string">"良好"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">'D'</span> :</span><br><span class="line">            System.out.println(<span class="string">"及格"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">'F'</span> :</span><br><span class="line">            System.out.println(<span class="string">"你需要再努力努力"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">default</span> :</span><br><span class="line">            System.out.println(<span class="string">"未知等级"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">"你的等级是 "</span> + grade);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>条件表达式</strong></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println((num % <span class="number">2</span> == <span class="number">0</span>) ? <span class="string">"num is even"</span> : <span class="string">"num is odd"</span>);</span><br></pre></td></tr></table></figure><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><ul><li>while () {}</li><li>do {} while ();</li><li>for () {}</li><li>关于 break（跳出该级别的 for 循环）和 continue（后面的语句不读）</li><li>关于 return</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598686523958-c57b6b4d-e802-44e1-adc6-276167476c3d.png#align=left&amp;display=inline&amp;height=236&amp;margin=%5Bobject%20Object%5D&amp;originHeight=328&amp;originWidth=530&amp;size=0&amp;status=done&amp;style=shadow&amp;width=381" alt></p><ul><li>关于<strong>增强的 for 循环</strong>，在模板章节，配合 vector 使用，并发控制，高效使用</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598686523773-6d1af202-9aa9-4789-b931-b0671aac432f.png#align=left&amp;display=inline&amp;height=255&amp;margin=%5Bobject%20Object%5D&amp;originHeight=781&amp;originWidth=1128&amp;size=0&amp;status=done&amp;style=none&amp;width=369" alt><br>缺点：看不见索引</p><h2 id="四、方法"><a href="#四、方法" class="headerlink" title="四、方法"></a>四、方法</h2><h2 id="五、一维数组"><a href="#五、一维数组" class="headerlink" title="五、一维数组"></a>五、一维数组</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> [] array; <span class="comment">// 声明数组方式一</span></span><br><span class="line"><span class="keyword">double</span> array []; <span class="comment">// 生命数组方式二</span></span><br></pre></td></tr></table></figure><p>创建好编译器会有初始值<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598686523691-98e6140a-a9e1-4218-9589-dc55ff35ed67.png#align=left&amp;display=inline&amp;height=79&amp;margin=%5Bobject%20Object%5D&amp;originHeight=240&amp;originWidth=895&amp;size=0&amp;status=done&amp;style=shadow&amp;width=293" alt></p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> [] array = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">10</span>]; <span class="comment">// 生命数组并且初始化数组大小</span></span><br><span class="line"><span class="keyword">double</span> [] array = &#123;<span class="number">1.9</span>, <span class="number">2.9</span>, <span class="number">3.4</span>, <span class="number">3.5</span>&#125;; <span class="comment">// 用值初始化数组</span></span><br></pre></td></tr></table></figure><h3 id="相关属性"><a href="#相关属性" class="headerlink" title="相关属性"></a>相关属性</h3><blockquote><p>是一个对象，有自己的属性自己的方法</p></blockquote><p>String 里面长度 length 有()，也就是 String 里面是方法，而数组没有括号()（写成 array.length），理解为成员变量/属性，而不是方法（封装好了许多功能，体现出语言优越性）</p><h3 id="相关操作"><a href="#相关操作" class="headerlink" title="相关操作"></a>相关操作</h3><ul><li>[x] Initializing arrays with input values</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.util.Scanner input = <span class="keyword">new</span> java.util.Scanner(System.in);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mylist.length;i++)</span><br><span class="line">    mylist[i] = input.nextDouble();</span><br></pre></td></tr></table></figure><ul><li>[x] Initializing arrays with random values</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; myList.length; i++) &#123;</span><br><span class="line">  myList[i] = Math.random() * <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>[x] Printing arrays</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; myList.length; i++) &#123;</span><br><span class="line">  System.out.print(myList[i] + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>[x] Summing all elements</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; myList.length; i++) &#123;</span><br><span class="line">  total += myList[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>[x] Finding the largest element</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> max = myList[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; myList.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (myList[i] &gt; max) max = myList[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>[ ] Finding the smallest index of the largest element</li><li>[x] Random shuffling</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598686524154-f90809c6-aaae-46bf-b892-5e6f9ed63f50.png#align=left&amp;display=inline&amp;height=502&amp;margin=%5Bobject%20Object%5D&amp;originHeight=502&amp;originWidth=1168&amp;size=0&amp;status=done&amp;style=shadow&amp;width=1168" alt></p><ul><li>[x] Shifting elements</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598686523785-4984f380-9ca1-4e26-94c5-9c7de0a9c9a1.png#align=left&amp;display=inline&amp;height=470&amp;margin=%5Bobject%20Object%5D&amp;originHeight=470&amp;originWidth=1164&amp;size=0&amp;status=done&amp;style=shadow&amp;width=1164" alt></p><h3 id="数组的值传递"><a href="#数组的值传递" class="headerlink" title="数组的值传递"></a>数组的值传递</h3><blockquote><p><strong>java 核心知识点之一</strong></p></blockquote><p>数组名（数组地址）作为函数参数</p><p>java 当中是<strong>值传递</strong>的，没有引用没有指针的概念，所以在做函数参数当中，一直都是值传递，python 也是。</p><h3 id="Array-类"><a href="#Array-类" class="headerlink" title="Array 类"></a>Array 类</h3><blockquote><p>import java.util.Arrays;</p></blockquote><ul><li>[x] Array 类中常用的函数<blockquote><p>sort()、parallelSort()、fill()、toString()、binarySearch()（Binary Search 二分查找（事先得排好序））、equals()</p></blockquote></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598686524086-a8d0a2b1-81e5-4045-8cdf-21b40f26c53e.png#align=left&amp;display=inline&amp;height=224&amp;margin=%5Bobject%20Object%5D&amp;originHeight=488&amp;originWidth=1225&amp;size=0&amp;status=done&amp;style=shadow&amp;width=562" alt><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598686524588-f9bcf764-f194-42b9-9c16-3e1676e8964e.png#align=left&amp;display=inline&amp;height=593&amp;margin=%5Bobject%20Object%5D&amp;originHeight=736&amp;originWidth=662&amp;size=0&amp;status=done&amp;style=shadow&amp;width=533" alt></p><h2 id="六、多维数组"><a href="#六、多维数组" class="headerlink" title="六、多维数组"></a>六、多维数组</h2><h3 id="二维数组的创建、初始化"><a href="#二维数组的创建、初始化" class="headerlink" title="二维数组的创建、初始化"></a>二维数组的创建、初始化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dataType[][] refVar = <span class="keyword">new</span> dataType[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[][] array = &#123;</span><br><span class="line">  &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">  &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;,</span><br><span class="line">  &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;,</span><br><span class="line">  &#123;<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>数组长度的计算</p></blockquote><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">array.length</span> = <span class="number">4</span></span><br><span class="line"><span class="attr">array[0].length</span> = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="attr">array[4].length</span> ==&gt; ArrayIndexOutOfBoundsException</span><br></pre></td></tr></table></figure><h3 id="二维数组的相关操作"><a href="#二维数组的相关操作" class="headerlink" title="二维数组的相关操作"></a>二维数组的相关操作</h3><ul><li>[x] Initializing arrays with input values</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.util.Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"Enter "</span> + matrix.length + <span class="string">" rows and "</span> +</span><br><span class="line">  matrix[<span class="number">0</span>].length + <span class="string">" columns: "</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; matrix.length; row++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> column = <span class="number">0</span>; column &lt; matrix[row].length; column++) &#123;</span><br><span class="line">    matrix[row][column] = input.nextInt();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>[x] Initializing arrays with random values</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; matrix.length; row++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> column = <span class="number">0</span>; column &lt; matrix[row].length; column++) &#123;</span><br><span class="line">    matrix[row][column] = (<span class="keyword">int</span>)(Math.random() * <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>[x] Printing arrays</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; matrix.length; row++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> column = <span class="number">0</span>; column &lt; matrix[row].length; column++) &#123;</span><br><span class="line">    System.out.print(matrix[row][column] + <span class="string">" "</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>[x] Summing all elements</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; matrix.length; row++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> column = <span class="number">0</span>; column &lt; matrix[row].length; column++) &#123;</span><br><span class="line">    total += matrix[row][column];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>[x] Summing all elements by column</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> column = <span class="number">0</span>; column &lt; matrix[<span class="number">0</span>].length; column++) &#123;</span><br><span class="line">  <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; matrix.length; row++)</span><br><span class="line">    total += matrix[row][column];</span><br><span class="line">  System.out.println(<span class="string">"Sum for column "</span> + column + <span class="string">" is "</span></span><br><span class="line">    + total);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>[x] Which row has the largest sum</li><li>[x] Finding the smallest index of the largest element</li><li>[x] Random shuffling</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; matrix[i].length; j++) &#123;</span><br><span class="line">    <span class="keyword">int</span> i1 = (<span class="keyword">int</span>)(Math.random() * matrix.length);</span><br><span class="line">    <span class="keyword">int</span> j1 = (<span class="keyword">int</span>)(Math.random() * matrix[i].length);</span><br><span class="line">    <span class="comment">// Swap matrix[i][j] with matrix[i1][j1]</span></span><br><span class="line">    <span class="keyword">int</span> temp = matrix[i][j];</span><br><span class="line">    matrix[i][j] = matrix[i1][j1];</span><br><span class="line">    matrix[i1][j1] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span>[][][] scores = &#123;</span><br><span class="line">  &#123;&#123;<span class="number">7.5</span>, <span class="number">20.5</span>&#125;, &#123;<span class="number">9.0</span>, <span class="number">22.5</span>&#125;, &#123;<span class="number">15</span>, <span class="number">33.5</span>&#125;, &#123;<span class="number">13</span>, <span class="number">21.5</span>&#125;, &#123;<span class="number">15</span>, <span class="number">2.5</span>&#125;&#125;,</span><br><span class="line">  &#123;&#123;<span class="number">4.5</span>, <span class="number">21.5</span>&#125;, &#123;<span class="number">9.0</span>, <span class="number">22.5</span>&#125;, &#123;<span class="number">15</span>, <span class="number">34.5</span>&#125;, &#123;<span class="number">12</span>, <span class="number">20.5</span>&#125;, &#123;<span class="number">14</span>, <span class="number">9.5</span>&#125;&#125;,</span><br><span class="line">  &#123;&#123;<span class="number">6.5</span>, <span class="number">30.5</span>&#125;, &#123;<span class="number">9.4</span>, <span class="number">10.5</span>&#125;, &#123;<span class="number">11</span>, <span class="number">33.5</span>&#125;, &#123;<span class="number">11</span>, <span class="number">23.5</span>&#125;, &#123;<span class="number">10</span>, <span class="number">2.5</span>&#125;&#125;,</span><br><span class="line">  &#123;&#123;<span class="number">6.5</span>, <span class="number">23.5</span>&#125;, &#123;<span class="number">9.4</span>, <span class="number">32.5</span>&#125;, &#123;<span class="number">13</span>, <span class="number">34.5</span>&#125;, &#123;<span class="number">11</span>, <span class="number">20.5</span>&#125;, &#123;<span class="number">16</span>, <span class="number">7.5</span>&#125;&#125;,</span><br><span class="line">  &#123;&#123;<span class="number">8.5</span>, <span class="number">26.5</span>&#125;, &#123;<span class="number">9.4</span>, <span class="number">52.5</span>&#125;, &#123;<span class="number">13</span>, <span class="number">36.5</span>&#125;, &#123;<span class="number">13</span>, <span class="number">24.5</span>&#125;, &#123;<span class="number">16</span>, <span class="number">2.5</span>&#125;&#125;,</span><br><span class="line">  &#123;&#123;<span class="number">9.5</span>, <span class="number">20.5</span>&#125;, &#123;<span class="number">9.4</span>, <span class="number">42.5</span>&#125;, &#123;<span class="number">13</span>, <span class="number">31.5</span>&#125;, &#123;<span class="number">12</span>, <span class="number">20.5</span>&#125;, &#123;<span class="number">16</span>, <span class="number">6.5</span>&#125;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="HelloWorld/"/>
      <url>HelloWorld/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
