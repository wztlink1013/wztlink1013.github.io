<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>尼采般地抒情</title>
    <link>https://www.wztlink1013.com/</link>
    
    <image>
      <url>https://www.wztlink1013.com/favicon.ico</url>
      <title>尼采般地抒情</title>
      <link>https://www.wztlink1013.com/</link>
    </image>
    
    <atom:link href="https://www.wztlink1013.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>尼采般地抒情个人网站，本科CS，大学期间开始撰写技术博客、个人生活随笔，这个兴趣爱好会一直延续下去……坚信什么都不舍弃，什么也改变不了！</description>
    <pubDate>Sat, 15 Oct 2022 07:39:14 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>axios实现重连机制</title>
      <link>https://www.wztlink1013.com/blog/urrudl/</link>
      <guid>https://www.wztlink1013.com/blog/urrudl/</guid>
      <pubDate>Fri, 14 Oct 2022 23:29:38 GMT</pubDate>
      
        
        
          
          
      <description>&lt;!doctype html&gt;&lt;div class=&quot;lake-content&quot; typography=&quot;classic&quot;&gt;&lt;p id=&quot;u719a7e4d&quot; class=&quot;ne-p&quot;&gt;&lt;img</description>
          
        
      
      
      
      <content:encoded><![CDATA[<!doctype html><div class="lake-content" typography="classic"><p id="u719a7e4d" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1665819024337-8997802d-d9c9-4398-aa69-f7be2c45d02b.png" width="1347.499946455163" id="u1a5e26ad" class="ne-image"></p><p id="ub28fc1f7" class="ne-p"><span class="ne-text"></span></p><p id="uab8a1db5" class="ne-p"><span class="ne-text">前言：Vue项目中利用Axios封装接口的请求和响应过程中，请求的接口可能会出现本地网络情况抑或是服务端相关环境错误，如果需要接口配置重连机制，如下逻辑可以实现：</span></p><p id="u7c9e092e" class="ne-p"><br></p><pre><code class="javascript">···service.interceptors.response.use((response) =&gt; &#123;tryCloseLoading();return response &amp;&amp; response.data;&#125;,(err) =&gt; &#123;// 通用报错处理if (err.response) &#123;// 通用报错处理···// 关闭加载中tryCloseLoading();// return Promise.reject(err.response.data);&#125; else &#123;const &#123; config &#125; = err;if (!config || !config.retry) return Promise.reject(err);config.retryCount = config.retryCount || 0;// 检查是否已经达到重连总数if (config.retryCount &gt;= config.retry) &#123;message.error(&#39;当前网络异常&#39;);tryCloseLoading();return Promise.reject(err);&#125;config.retryCount += 1;// 自动计算每次重试的延时，重试次数越多，延时越大const retryDelay = (1 / 2) _ (Math.pow(2, config.retryCount) - 1) _ 1000;// 创建新的 Promise 来发起请求const backoff = new Promise((resolve) =&gt; &#123;setTimeout(() =&gt; &#123;resolve();&#125;, retryDelay);&#125;);return backoff.then(() =&gt; &#123;tryCloseLoading();return service(config);&#125;);&#125;&#125;,);···</code></pre></div>]]></content:encoded>
      
      
      <category domain="https://www.wztlink1013.com/categories/Web%E5%BC%80%E5%8F%91/">Web开发</category>
      
      <category domain="https://www.wztlink1013.com/categories/Web%E5%BC%80%E5%8F%91/Vue/">Vue</category>
      
      
      
      <comments>https://www.wztlink1013.com/blog/urrudl/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>同站点防盗链图片和百度统计Referer不一致的解决方案</title>
      <link>https://www.wztlink1013.com/blog/ugwagn/</link>
      <guid>https://www.wztlink1013.com/blog/ugwagn/</guid>
      <pubDate>Thu, 06 Oct 2022 22:19:11 GMT</pubDate>
      
        
        
          
          
      <description>&lt;!doctype html&gt;&lt;div class=&quot;lake-content&quot; typography=&quot;classic&quot;&gt;&lt;p id=&quot;uac5762ec&quot; class=&quot;ne-p&quot;&gt;&lt;img</description>
          
        
      
      
      
      <content:encoded><![CDATA[<!doctype html><div class="lake-content" typography="classic"><p id="uac5762ec" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1665124978469-51dce474-28f7-4372-9549-d55a6fd48098.png" width="874.1666319304056" id="udf2cdd49" class="ne-image"></p><p id="ue8a744ec" class="ne-p"><span class="ne-text">前言：个人网站使用的语雀外链图片和百度统计两者之间的referrer不一致的解决方案</span></p><p id="u85ff8593" class="ne-p"><span class="ne-text"></span></p><p id="u1cbd0778" class="ne-p"><span class="ne-text">问题：防盗链图片不在所指定的白名单内，是不被允许访问的，比如语雀图片不能在自己网站上渲染使用，通过设置页面的referrer可以进行访问（</span><a href="https://blog.csdn.net/qq_53225741/article/details/125239106" data-href="https://blog.csdn.net/qq_53225741/article/details/125239106" class="ne-link"><span class="ne-text">Referer和Referrer Policy以及图片防盗链_前端码农小王的博客-CSDN博客_前端设置referer</span></a><span class="ne-text">）</span></p><pre><code class="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;</code></pre><p id="uf17ac2f5" class="ne-p"><span class="ne-text">设置上述referrer，那么对百度统计代码失效，因为百度统计需要携带请求网站的referr等信息才能进一步进行数据同居分析</span></p><p id="uaa9559de" class="ne-p"><br></p><p id="u41eb776c" class="ne-p"><span class="ne-text">解决思路：动态对网站的referrer进行更改，设置网站初始referrer为no-referrer，待网站所有外链图片加载完成，动态修改referrer为strict-origin-when-cross-origin，再进行百度统计逻辑代码的执行。核心代码如下：</span></p><pre><code class="javascript">// 防盗链图片共存const getImgLoadEd = (callback) =&gt; &#123;let images = document.getElementById(&quot;lyrics&quot;).querySelectorAll(&quot;img&quot;);const promises = Array.prototype.slice.call(images).filter((img) =&gt; /^(https:\/\/cdn.xxx.com\/yuque)/.test(img.src)).map((node) =&gt; &#123;return new Promise((resolve, reject) =&gt; &#123;// 加一重保障node.setAttribute(&quot;referrerpolicy&quot;, &quot;no-referrer&quot;);let loadImg = new Image();loadImg.src = node.src;loadImg.onload = () =&gt; &#123;resolve(node);&#125;;&#125;);&#125;);Promise.all(promises).then((data) =&gt; &#123;if (callback) callback();&#125;).catch((e) =&gt; &#123;console.log(&quot;所拉取的文章图床访问失败!&quot;);&#125;);&#125;;const baidutongji = () =&gt; &#123;document.querySelector(&#39;meta[name=&quot;referrer&quot;]&#39;).setAttribute(&quot;content&quot;, &quot;strict-origin-when-cross-origin&quot;);var hm = document.createElement(&quot;script&quot;);hm.src = &quot;https://hm.baidu.com/hm.js?bcxxxxxxxxxxxx1&quot;;var s = document.getElementsByTagName(&quot;script&quot;)[0];s.parentNode.insertBefore(hm, s);&#125;;</code></pre></div>]]></content:encoded>
      
      
      <category domain="https://www.wztlink1013.com/categories/%E5%85%B6%E4%BB%96/">其他</category>
      
      <category domain="https://www.wztlink1013.com/categories/%E5%85%B6%E4%BB%96/%E7%8E%A9%E8%BD%AC%E5%8D%9A%E5%AE%A2/">玩转博客</category>
      
      
      
      <comments>https://www.wztlink1013.com/blog/ugwagn/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>站点添加雷姆live2d+看板模型</title>
      <link>https://www.wztlink1013.com/blog/wrygmp/</link>
      <guid>https://www.wztlink1013.com/blog/wrygmp/</guid>
      <pubDate>Thu, 06 Oct 2022 20:43:55 GMT</pubDate>
      
        
        
          
          
      <description>&lt;!doctype html&gt;&lt;div class=&quot;lake-content&quot; typography=&quot;classic&quot;&gt;&lt;p id=&quot;ubf72f4a0&quot; class=&quot;ne-p&quot;&gt;&lt;img</description>
          
        
      
      
      
      <content:encoded><![CDATA[<!doctype html><div class="lake-content" typography="classic"><p id="ubf72f4a0" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1665116739656-379177c2-ffa2-4cc4-b22c-38fb12c201e8.png" width="1599.1666031214952" id="u3f0332ae" class="ne-image"></p><p id="u2c3627c7" class="ne-p"><br></p><p id="u15698168" class="ne-p"><span class="ne-text">前言：为自己站点配置雷姆live2d，并在live2d模型的基础上附加添加看板功能。</span></p><h2 id="dTMUK"><span class="ne-text">安装hexo-helper-live2d</span></h2><ul class="ne-ul"><li id="ua238e076"><span class="ne-text">下载</span><code class="ne-code"><span class="ne-text">hexo-helper-live2d</span></code><span class="ne-text">（</span><a href="https://github.com/EYHN/hexo-helper-live2d" data-href="https://github.com/EYHN/hexo-helper-live2d" target="_blank" class="ne-link"><span class="ne-text">https://github.com/EYHN/hexo-helper-live2d</span></a><span class="ne-text">）</span></li></ul><pre><code class="bash">npm install --save hexo-helper-live2d</code></pre><h2 id="xTwII"><span class="ne-text">配置自定义蕾姆模型</span></h2><h3 id="LkS5r"><span class="ne-text">文件配置</span></h3><ul class="ne-ul"><li id="uba7ea8c6"><span class="ne-text">remu模型下载：</span><a href="https://onedrive.wztlink1013.com/zh-CN/live2d/" data-href="https://onedrive.wztlink1013.com/zh-CN/live2d/" target="_blank" class="ne-link"><span class="ne-text">https://onedrive.wztlink1013.com/zh-CN/live2d/</span></a><span class="ne-text"> 【密码：remu】</span></li><li id="u4c758308"><span class="ne-text">在hexo</span><strong><span class="ne-text">项目根目录</span></strong><span class="ne-text">新建</span><code class="ne-code"><span class="ne-text">live2d_models</span></code><span class="ne-text">文件夹，再将所下载的模型解压放入该文件夹</span></li></ul><p id="ub4f75940" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1665114888992-4037e056-a783-4827-9d0f-426fbc3e0107.png" width="548.3333115445251" id="u4879bd54" class="ne-image"></p><h3 id="RMXIc"><span class="ne-text">_config.yml配置</span></h3><ul class="ne-ul"><li id="ue2750c2f"><span class="ne-text">根目录_config.yml添加如下配置</span></li><li id="u1a142b41"><span class="ne-text">API文档：</span><a href="https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init" data-href="https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init" target="_blank" class="ne-link"><span class="ne-text">https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init</span></a></li></ul><pre><code class="yaml">## live2dlive2d:enable: true # 是否开启 live2dscriptFrom: local # 脚本从本地引入pluginRootPath: live2d/ # 插件在站点上的根目录(相对路径)pluginJsPath: lib/ # 脚本文件相对与插件根目录路径pluginModelPath: assets/ # 模型文件相对与插件根目录路径tagMode: false # 标签模式, 是否仅替换 live2d tag 标签而非插入到所有页面中debug: false # 调试, 是否在控制台输出日志model:use: remu # 填写放进 live2d_models 文件夹中的模型文件夹名字scale: 1 # canvas 模型与 canvas 的缩放display:width: 150 # 宽度height: 300 # 高度position: left # 显示位置hOffset: 0 #水平偏移vOffset: -12 #垂直偏移mobile:show: true # 手机端是否显示scale: 1 # 移动设备上的缩放react:opacity: 1 # 透明度</code></pre><div data-type="info" class="ne-alert"><p id="u9c7aaaf6" class="ne-p"><span class="ne-text">PS：按需加载 live2d 标签</span></p><p id="u6dcae3e1" class="ne-p"><span class="ne-text">上述配置中</span><code class="ne-code"><span class="ne-text">tagMode: true</span></code><span class="ne-text">则代表需要在主题中单独给出需要显示的页面</span></p></div><h3 id="aCTih"><span class="ne-text">最终 live2d 效果</span></h3><p id="u79795e33" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1665115637123-4e5c7429-8a8e-4ae9-b38b-64fc9779a01f.png" width="1599.9999364217147" id="uf21a5c73" class="ne-image"></p><h2 id="dgYzR"><span class="ne-text">配置三方插件模型</span></h2><p id="ua70cfc9f" class="ne-p"><span class="ne-text">上述步骤是下载 remu 源文件然后自定义的 remu 模型，也可以下载社区封装好 npm 插件的模型，本文做自定义模型的说明，故不做该部分详述。相关参考如下：</span></p><ul class="ne-ul"><li id="ufdb404b2"><a href="https://github.com/xiazeyu/live2d-widget-models" data-href="https://github.com/xiazeyu/live2d-widget-models" target="_blank" class="ne-link"><span class="ne-text">https://github.com/xiazeyu/live2d-widget-models</span></a></li><li id="u4b8b184e"><a href="https://huaji8.top/post/live2d-plugin-2.0/" data-href="https://huaji8.top/post/live2d-plugin-2.0/" class="ne-link"><span class="ne-text">https://huaji8.top/post/live2d-plugin-2.0/</span></a></li></ul><h2 id="ayEhu"><span class="ne-text">附：给 live2d 添加看板功能</span></h2><p id="u85e2afa1" class="ne-p"><span class="ne-text">上述所有步骤完成 live2d 的安装配置，在此基础上还可以给 live2d 添加看板功能，就如本文第一张图片那种效果</span></p><h3 id="MW7kI"><span class="ne-text">添加看板样式</span></h3><p id="uc900e14f" class="ne-p"><span class="ne-text">添加静态样式即可：</span></p><details class="lake-collapse"><summary id="u319b4002"><span class="ne-text">\_live2d/remu.styl</span></summary><pre><code class="css">// 收缩之后的左下角的贴附样式#waifu-toggle &#123;background-color: #3f51b5;border-radius: 5px;bottom: 66px;color: #fff;cursor: pointer;font-size: 14px;left: 5px;margin-left: -90px;padding: 5px 2px 5px 5px;position: fixed;transition: margin-left 1s;width: 60px;writing-mode: vertical-rl;&#125;#waifu-toggle.waifu-toggle-active &#123;margin-left: -40px;&#125;#waifu-toggle.waifu-toggle-active:hover &#123;margin-left: -30px;&#125;// 容纳雷姆的盒子#waifu &#123;bottom: -1000px;left: 0;line-height: 0;margin-bottom: -10px;position: fixed;transform: translateY(3px);transition: transform .3s ease-in-out, bottom 3s ease-in-out;z-index: 1;&#125;#waifu:hover &#123;transform: translateY(0);&#125;// 文字提示框#waifu-tips &#123;animation: shake 50s ease-in-out 5s infinite;background-color: rgba(100,149,237, .5);border: 1px solid rgba(30,144,255, .62);border-radius: 12px;box-shadow: 0 3px 15px 2px rgba(191, 158, 118, .2);font-size: 14px;line-height: 24px;margin: -30px 20px;min-height: 70px;opacity: 0;overflow: hidden;padding: 5px 10px;position: absolute;text-overflow: ellipsis;transition: opacity 1s;width: 180px;word-break: break-all;&#125;#waifu-tips.waifu-tips-active &#123;opacity: 1;transition: opacity .2s;&#125;#waifu-tips spancolor: rgba(0,0,255,.7); // 文字提示框中的重点字// 容纳雷姆的外加小盒子#waifu #live2d &#123;cursor: grab;height: 300px;position: relative;width: 200px;&#125;#waifu #live2d:active &#123;cursor: grabbing;&#125;// 小按钮组件#waifu-tool &#123;color: #0684bd;opacity: 0.5;position: absolute;left: 5pxtop: 70px;transition: opacity 1s;&#125;#waifu:hover #waifu-tool &#123;opacity: 1;&#125;// 小按钮的 span 样式#waifu-tool span &#123;color: #0684bd;cursor: pointer;display: block;line-height: 30px;text-align: center;transition: color .3s;&#125;#waifu-tool span:hover &#123;color: #0684bd; /_ #34495e _/&#125;@keyframes shake &#123;2% &#123;transform: translate(.5px, -1.5px) rotate(-.5deg);&#125;4% &#123;transform: translate(.5px, 1.5px) rotate(1.5deg);&#125;6% &#123;transform: translate(1.5px, 1.5px) rotate(1.5deg);&#125;8% &#123;transform: translate(2.5px, 1.5px) rotate(.5deg);&#125;10% &#123;transform: translate(.5px, 2.5px) rotate(.5deg);&#125;12% &#123;transform: translate(1.5px, 1.5px) rotate(.5deg);&#125;14% &#123;transform: translate(.5px, .5px) rotate(.5deg);&#125;16% &#123;transform: translate(-1.5px, -.5px) rotate(1.5deg);&#125;18% &#123;transform: translate(.5px, .5px) rotate(1.5deg);&#125;20% &#123;transform: translate(2.5px, 2.5px) rotate(1.5deg);&#125;22% &#123;transform: translate(.5px, -1.5px) rotate(1.5deg);&#125;24% &#123;transform: translate(-1.5px, 1.5px) rotate(-.5deg);&#125;26% &#123;transform: translate(1.5px, .5px) rotate(1.5deg);&#125;28% &#123;transform: translate(-.5px, -.5px) rotate(-.5deg);&#125;30% &#123;transform: translate(1.5px, -.5px) rotate(-.5deg);&#125;32% &#123;transform: translate(2.5px, -1.5px) rotate(1.5deg);&#125;34% &#123;transform: translate(2.5px, 2.5px) rotate(-.5deg);&#125;36% &#123;transform: translate(.5px, -1.5px) rotate(.5deg);&#125;38% &#123;transform: translate(2.5px, -.5px) rotate(-.5deg);&#125;40% &#123;transform: translate(-.5px, 2.5px) rotate(.5deg);&#125;42% &#123;transform: translate(-1.5px, 2.5px) rotate(.5deg);&#125;44% &#123;transform: translate(-1.5px, 1.5px) rotate(.5deg);&#125;46% &#123;transform: translate(1.5px, -.5px) rotate(-.5deg);&#125;48% &#123;transform: translate(2.5px, -.5px) rotate(.5deg);&#125;50% &#123;transform: translate(-1.5px, 1.5px) rotate(.5deg);&#125;52% &#123;transform: translate(-.5px, 1.5px) rotate(.5deg);&#125;54% &#123;transform: translate(-1.5px, 1.5px) rotate(.5deg);&#125;56% &#123;transform: translate(.5px, 2.5px) rotate(1.5deg);&#125;58% &#123;transform: translate(2.5px, 2.5px) rotate(.5deg);&#125;60% &#123;transform: translate(2.5px, -1.5px) rotate(1.5deg);&#125;62% &#123;transform: translate(-1.5px, .5px) rotate(1.5deg);&#125;64% &#123;transform: translate(-1.5px, 1.5px) rotate(1.5deg);&#125;66% &#123;transform: translate(.5px, 2.5px) rotate(1.5deg);&#125;68% &#123;transform: translate(2.5px, -1.5px) rotate(1.5deg);&#125;70% &#123;transform: translate(2.5px, 2.5px) rotate(.5deg);&#125;72% &#123;transform: translate(-.5px, -1.5px) rotate(1.5deg);&#125;74% &#123;transform: translate(-1.5px, 2.5px) rotate(1.5deg);&#125;76% &#123;transform: translate(-1.5px, 2.5px) rotate(1.5deg);&#125;78% &#123;transform: translate(-1.5px, 2.5px) rotate(.5deg);&#125;80% &#123;transform: translate(-1.5px, .5px) rotate(-.5deg);&#125;82% &#123;transform: translate(-1.5px, .5px) rotate(-.5deg);&#125;84% &#123;transform: translate(-.5px, .5px) rotate(1.5deg);&#125;86% &#123;transform: translate(2.5px, 1.5px) rotate(.5deg);&#125;88% &#123;transform: translate(-1.5px, .5px) rotate(1.5deg);&#125;90% &#123;transform: translate(-1.5px, -.5px) rotate(-.5deg);&#125;92% &#123;transform: translate(-1.5px, -1.5px) rotate(1.5deg);&#125;94% &#123;transform: translate(.5px, .5px) rotate(-.5deg);&#125;96% &#123;transform: translate(2.5px, -.5px) rotate(-.5deg);&#125;98% &#123;transform: translate(-1.5px, -1.5px) rotate(-.5deg);&#125;0%, 100% &#123;transform: translate(0, 0) rotate(0);&#125;&#125;</code></pre></details><h3 id="ZDamL"><span class="ne-text">添加看板逻辑代码</span></h3><details class="lake-collapse"><summary id="ub489a590"><span class="ne-text">./part/live2d.js</span></summary><pre><code class="javascript">function loadWidget(config) &#123;let &#123; waifuPath, apiPath, cdnPath &#125; = config;let useCDN = false, modelList;if (typeof cdnPath === &quot;string&quot;) &#123;useCDN = true;if (!cdnPath.endsWith(&quot;/&quot;)) cdnPath += &quot;/&quot;;&#125; else if (typeof apiPath === &quot;string&quot;) &#123;if (!apiPath.endsWith(&quot;/&quot;)) apiPath += &quot;/&quot;;&#125; else &#123;console.error(&quot;Invalid initWidget argument!&quot;);return;&#125;localStorage.removeItem(&quot;waifu-display&quot;);sessionStorage.removeItem(&quot;waifu-text&quot;);document.body.insertAdjacentHTML(&quot;beforeend&quot;, `&lt;div id=&quot;waifu&quot;&gt; &lt;div id=&quot;waifu-tips&quot;&gt;&lt;/div&gt; &lt;canvas id=&quot;live2d&quot;&gt;&lt;/canvas&gt; &lt;div id=&quot;waifu-tool&quot;&gt; &lt;span class=&quot;fa fa-comments&quot;&gt;&lt;/span&gt; &lt;span class=&quot;fa fa-link&quot;&gt;&lt;/span&gt; &lt;span class=&quot;fa fa-compress&quot;&gt;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt;`);// https://stackoverflow.com/questions/24148403/trigger-css-transition-on-appended-elementsetTimeout(() =&gt; &#123;document.getElementById(&quot;waifu&quot;).style.bottom = 0;&#125;, 0);function randomSelection(obj) &#123;return Array.isArray(obj) ? obj[Math.floor(Math.random() * obj.length)] : obj;&#125;// 检测用户活动状态，并在空闲时显示消息let userAction = false,userActionTimer,messageTimer,messageArray = [&quot;好久不见，日子过得好快呢……&quot;, &quot;嗨～欢迎访问该站点！&quot;, &quot;记得把小家加入 Adblock 白名单哦！&quot;];window.addEventListener(&quot;mousemove&quot;, () =&gt; userAction = true);window.addEventListener(&quot;keydown&quot;, () =&gt; userAction = true);setInterval(() =&gt; &#123;if (userAction) &#123;userAction = false;clearInterval(userActionTimer);userActionTimer = null;&#125; else if (!userActionTimer) &#123;userActionTimer = setInterval(() =&gt; &#123;showMessage(randomSelection(messageArray), 6000, 9);&#125;, 20000);&#125;&#125;, 1000);(function registerEventListener() &#123;// TODO: 第一个 icon，说话document.querySelector(&quot;#waifu-tool .fa-comments&quot;).addEventListener(&quot;click&quot;, showHitokoto);// TODO: 第二个 icon，貌似是什么游戏// document.querySelector(&quot;#waifu-tool .fa-paper-plane&quot;).addEventListener(&quot;click&quot;, () =&gt; &#123;// if (window.Asteroids) &#123;// if (!window.ASTEROIDSPLAYERS) window.ASTEROIDSPLAYERS = [];// window.ASTEROIDSPLAYERS.push(new Asteroids());// &#125; else &#123;// const script = document.createElement(&quot;script&quot;);// script.src = &quot;https://cdn.jsdelivr.net/gh/stevenjoezhang/asteroids/asteroids.js&quot;;// document.head.appendChild(script);// &#125;// &#125;);// TODO: 第三个 icon，换人物// document.querySelector(&quot;#waifu-tool .fa-user-circle&quot;).addEventListener(&quot;click&quot;, loadOtherModel);// TODO: 第四个 icon，应该是换装// document.querySelector(&quot;#waifu-tool .fa-street-view&quot;).addEventListener(&quot;click&quot;, loadRandModel);// TODO: 第五个 icon，拍照// document.querySelector(&quot;#waifu-tool .fa-camera-retro&quot;).addEventListener(&quot;click&quot;, () =&gt; &#123;// showMessage(&quot;照好了嘛，是不是很可爱呢？&quot;, 6000, 9);// Live2D.captureName = &quot;photo.png&quot;;// Live2D.captureFrame = true;// &#125;);// TODO: 第六个 icon，原项目地址document.querySelector(&quot;#waifu-tool .fa-link&quot;).addEventListener(&quot;click&quot;, () =&gt; &#123;open(&quot;https://www.wztlink1013.com/about/&quot;);&#125;);// TODO: 第七个 icon，隐藏看板娘    document.querySelector(&quot;#waifu-tool .fa-compress&quot;).addEventListener(&quot;click&quot;, () =&gt; &#123;      localStorage.setItem(&quot;waifu-display&quot;, Date.now());      showMessage(&quot;愿你有一天能与重要的人重逢。&quot;, 2000, 11);      document.getElementById(&quot;waifu&quot;).style.bottom = &quot;-500px&quot;; // 隐藏大盒子      setTimeout(() =&gt; &#123;        document.getElementById(&quot;waifu&quot;).style.display = &quot;none&quot;;        document.getElementById(&quot;waifu-toggle&quot;).classList.add(&quot;waifu-toggle-active&quot;);      &#125;, 3000);    &#125;);    window.addEventListener(&quot;copy&quot;, () =&gt; &#123;      showMessage(&quot;你都复制了些什么呀，转载要记得加上出处哦！&quot;, 6000, 9);    &#125;);    window.addEventListener(&quot;visibilitychange&quot;, () =&gt; &#123;      if (!document.hidden) showMessage(&quot;哇，你终于回来了～&quot;, 6000, 9);    &#125;);&#125;)();// 首页展示特定文字(function welcomeMessage() &#123;let text;if (location.pathname === &quot;/&quot;) &#123; // 如果是主页const now = new Date().getHours();if (now &gt; 5 &amp;&amp; now &lt;= 7) text = &quot;早上好！一日之计在于晨，美好的一天就要开始了。&quot;;else if (now &gt; 7 &amp;&amp; now &lt;= 11) text = &quot;上午好！工作顺利嘛，不要久坐，多起来走动走动哦！&quot;;else if (now &gt; 11 &amp;&amp; now &lt;= 13) text = &quot;中午了，工作了一个上午，现在是午餐时间！&quot;;else if (now &gt; 13 &amp;&amp; now &lt;= 17) text = &quot;午后很容易犯困呢，今天的运动目标完成了吗？&quot;;else if (now &gt; 17 &amp;&amp; now &lt;= 19) text = &quot;傍晚了！窗外夕阳的景色很美丽呢，最美不过夕阳红～&quot;;else if (now &gt; 19 &amp;&amp; now &lt;= 21) text = &quot;晚上好，今天过得怎么样？&quot;;else if (now &gt; 21 &amp;&amp; now &lt;= 23) text = [&quot;已经这么晚了呀，早点休息吧，晚安～&quot;, &quot;深夜时要爱护眼睛呀！&quot;];else text = &quot;你是夜猫子呀？这么晚还不睡觉，明天起的来嘛？&quot;;&#125; else if (document.referrer !== &quot;&quot;) &#123;const referrer = new URL(document.referrer),domain = referrer.hostname.split(&quot;.&quot;)[1];if (location.hostname === referrer.hostname) text = `欢迎阅读&lt;span&gt;「$&#123;document.title.split(&quot; - &quot;)[0]&#125;」&lt;/span&gt;`;else if (domain === &quot;baidu&quot;) text = `Hello！来自 百度搜索 的朋友&lt;br&gt;你是搜索 &lt;span&gt;$&#123;referrer.search.split(&quot;&amp;wd=&quot;)[1].split(&quot;&amp;&quot;)[0]&#125;&lt;/span&gt; 找到的我吗？`;else if (domain === &quot;so&quot;) text = `Hello！来自 360搜索 的朋友&lt;br&gt;你是搜索 &lt;span&gt;$&#123;referrer.search.split(&quot;&amp;q=&quot;)[1].split(&quot;&amp;&quot;)[0]&#125;&lt;/span&gt; 找到的我吗？`;else if (domain === &quot;google&quot;) text = `Hello！来自 谷歌搜索 的朋友&lt;br&gt;欢迎阅读&lt;span&gt;「$&#123;document.title.split(&quot; - &quot;)[0]&#125;」&lt;/span&gt;`;else text = `Hello！来自 &lt;span&gt;$&#123;referrer.hostname&#125;&lt;/span&gt; 的朋友`;&#125; else &#123;text = `欢迎阅读&lt;span&gt;「$&#123;document.title.split(&quot; - &quot;)[0]&#125;」&lt;/span&gt;`;&#125;showMessage(text, 7000, 8);&#125;)();// TODO: 服务于第一个 iconfunction showHitokoto() &#123;// 增加 hitokoto.cn 的 APIfetch(&quot;https://v1.hitokoto.cn&quot;).then(response =&gt; response.json()).then(result =&gt; &#123;const text = `这句一言来自 &lt;span&gt;「$&#123;result.from&#125;」&lt;/span&gt;，是 &lt;span&gt;$&#123;result.creator&#125;&lt;/span&gt; 在 hitokoto.cn 投稿的。`;showMessage(result.hitokoto, 6000, 9);setTimeout(() =&gt; &#123;showMessage(text, 4000, 9);&#125;, 6000);&#125;);&#125;// 没有 bug 展示特定状态下的文字function showMessage(text, timeout, priority) &#123;if (!text || (sessionStorage.getItem(&quot;waifu-text&quot;) &amp;&amp; sessionStorage.getItem(&quot;waifu-text&quot;) &gt; priority)) return;if (messageTimer) &#123;clearTimeout(messageTimer);messageTimer = null;&#125;text = randomSelection(text);sessionStorage.setItem(&quot;waifu-text&quot;, priority);const tips = document.getElementById(&quot;waifu-tips&quot;);tips.innerHTML = text;tips.classList.add(&quot;waifu-tips-active&quot;);messageTimer = setTimeout(() =&gt; &#123;sessionStorage.removeItem(&quot;waifu-text&quot;);tips.classList.remove(&quot;waifu-tips-active&quot;);&#125;, timeout);&#125;&#125;function initWidget(config, apiPath) &#123;if (typeof config === &quot;string&quot;) config = &#123; waifuPath: config, apiPath &#125;;document.body.insertAdjacentHTML(&quot;beforeend&quot;, `&lt;div id=&quot;waifu-toggle&quot;&gt; &lt;span&gt;雷姆&lt;/span&gt; &lt;/div&gt;`);const toggle = document.getElementById(&quot;waifu-toggle&quot;);toggle.addEventListener(&quot;click&quot;, () =&gt; &#123;toggle.classList.remove(&quot;waifu-toggle-active&quot;);if (toggle.getAttribute(&quot;first-time&quot;)) &#123;loadWidget(config);toggle.removeAttribute(&quot;first-time&quot;);&#125; else &#123;localStorage.removeItem(&quot;waifu-display&quot;);document.getElementById(&quot;waifu&quot;).style.display = &quot;&quot;;setTimeout(() =&gt; &#123;document.getElementById(&quot;waifu&quot;).style.bottom = 0;&#125;, 0);&#125;// TODO: 一开始判断是否隐藏雷姆代码&#125;);if (localStorage.getItem(&quot;waifu-display&quot;) &amp;&amp; Date.now() - localStorage.getItem(&quot;waifu-display&quot;) &lt;= 86400000) &#123;toggle.setAttribute(&quot;first-time&quot;, true);setTimeout(() =&gt; &#123;toggle.classList.add(&quot;waifu-toggle-active&quot;);&#125;, 0);&#125; else &#123;loadWidget(config);&#125;&#125;export &#123;initWidget, //导出对象&#125;</code></pre></details><p id="u09d47608" class="ne-p"><span class="ne-text">在base.js中初始化看板逻辑代码</span></p><pre><code class="javascript">import &#123;initWidget&#125; from &#39;./part/live2d.js&#39;;// live2d 初始化initWidget(&#123;waifuPath: &quot;/data/remu.json&quot;,cdnPath: &quot;https://github.com/fghrsh/live2d_api/tree/1.0.1/&quot;&#125;);</code></pre><h3 id="kOl6b"><span class="ne-text">最终看板效果</span></h3><p id="u6ec1d33d" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1665116671351-7c3e9921-cb79-4902-822f-a09a3ce422ae.png" width="1599.9999364217147" id="u50ba46fe" class="ne-image"></p><h2 id="op5Lz"><span class="ne-text">参考</span></h2><ul class="ne-ul"><li id="u96f1ffee"><span class="ne-text">live2d API 文档：</span><a href="https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init" data-href="https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init" target="_blank" class="ne-link"><span class="ne-text">https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init</span></a></li><li id="uadc38fc5"><span class="ne-text">封装为 npm 插件模型：</span><a href="https://huaji8.top/post/live2d-plugin-2.0/" data-href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" class="ne-link"><span class="ne-text">https://huaji8.top/post/live2d-plugin-2.0/</span></a></li><li id="0b0eccc822d2e4f83803798ba3120030"><span class="ne-text">自定义扩展模型：</span><a href="https://github.com/luanshizhimei/live2d_models_collect" data-href="https://github.com/luanshizhimei/live2d_models_collect" target="_blank" class="ne-link"><span class="ne-text">https://github.com/luanshizhimei/live2d_models_collect</span></a></li><li id="u845fdd61"><span class="ne-text">vscode live2d 扩展：</span><a href="https://github.com/ezshine/vscode-rainbow-fart-waifu" data-href="https://github.com/ezshine/vscode-rainbow-fart-waifu" target="_blank" class="ne-link"><span class="ne-text">https://github.com/ezshine/vscode-rainbow-fart-waifu</span></a></li><li id="u1b0da9ef"><a href="https://github.com/fghrsh/live2d_api/tree/1.0.1/" data-href="https://github.com/fghrsh/live2d_api/tree/1.0.1/" target="_blank" class="ne-link"><span class="ne-text">https://github.com/fghrsh/live2d_api/tree/1.0.1/</span></a></li></ul><ul class="ne-tl"><li id="u57f3d399"><strong><span class="ne-text" style="background-color: #FADB14">TODO: </span></strong><span class="ne-text">优化资源加载方式，模型的静态资源使用外链的形式较为合理，以及插件每次在开发模式下都会编译文件，都会带来开发环境以及生产环境上的不便</span></li></ul></div>]]></content:encoded>
      
      
      <category domain="https://www.wztlink1013.com/categories/%E5%85%B6%E4%BB%96/">其他</category>
      
      <category domain="https://www.wztlink1013.com/categories/%E5%85%B6%E4%BB%96/%E7%8E%A9%E8%BD%AC%E5%8D%9A%E5%AE%A2/">玩转博客</category>
      
      
      
      <comments>https://www.wztlink1013.com/blog/wrygmp/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Vue3项目中ts报错总结</title>
      <link>https://www.wztlink1013.com/blog/ngt02r/</link>
      <guid>https://www.wztlink1013.com/blog/ngt02r/</guid>
      <pubDate>Sat, 27 Aug 2022 04:10:55 GMT</pubDate>
      
        
        
          
          
      <description>&lt;!doctype html&gt;&lt;div class=&quot;lake-content&quot; typography=&quot;classic&quot;&gt;&lt;h2 id=&quot;xQF2S&quot;&gt;&lt;span class=&quot;ne-text&quot;&gt;TS7053: 元素隐式具有 &quot;any&quot; 类型，因为类型为 &quot;string&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<!doctype html><div class="lake-content" typography="classic"><h2 id="xQF2S"><span class="ne-text">TS7053: 元素隐式具有 "any" 类型，因为类型为 "string" 的表达式不能用于索引类型 "{ doc_image: string; docx: string[]; }"。ts(7053)</span></h2><pre><code class="typescript">const MINE_TYPES = &#123;doc_image: [&#39;image/png&#39;, &#39;image/gif&#39;, &#39;image/jpeg&#39;, &#39;image/jpg&#39;, &#39;image/bmp&#39;].join(&#39;,&#39;),// 暂仅支持 docx 和 xlsxdocx: [// &#39;application/pdf&#39;,// &#39;application/msword&#39;,&#39;application/vnd.openxmlformats-officedocument.wordprocessingml.document&#39;,&#39;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&#39;]&#125;;</code></pre><p id="u6dd3159d" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1660816279493-28f705da-2d60-432f-bbd4-20cfef128611.png" width="982" id="TAU1s" class="ne-image"></p><ul class="ne-ul"><li id="ub4f24491"><span class="ne-text">ts 对于传入的 apiType，编译器只知道为字符串而不是具体的 doc_image 或者 docx，所以需要自行使用断言以及显示声明传入的值与这些值一致。</span></li></ul><pre><code class="typescript">const accept = MINE_TYPES[apiType as keyof typeof MINE_TYPES] || &#39;\*&#39;;</code></pre><h2 id="hMqm1"><span class="ne-text">TS2531: Type ‘HTMLElement | null‘ is not assignable to type ‘HTMLElement‘</span></h2><ul class="ne-ul"><li id="u4c1bc5d4"><span class="ne-text">查找 DOM 这块，很有可能是找不到该 DOM 元素的，如下：</span></li></ul><p id="u8774d23b" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1660617254293-3d7d5a6c-3512-4c0a-84e4-4af68868f2df.png" width="623" id="GNuC9" class="ne-image"></p><p id="ub7348ded" class="ne-p"><span class="ne-text">很确定 dom 层一渲染 dom 树，使用断言</span></p><pre><code class="typescript">// 点击按钮，返回顶部const handleBackToTop = () =&gt; &#123;let page_content: HTMLElement = document.getElementById(&#39;file-page-content&#39;) as HTMLElement;if (page_content !== null) &#123;page_content.scrollTop = 0;&#125;&#125;;</code></pre><h2 id="Lqyep"><span class="ne-text">TS2345: Typescript 'string | 类型的参数 null' 不能分配给“字符串”类型的参数.类型 'null' 不能分配给类型 'string'</span></h2><p id="u0af4acf7" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1660632598192-4b5203c9-b02e-4277-bdae-321bfb3bc173.png" width="1018" id="haE8A" class="ne-image"></p><pre><code class="typescript">const authorInfo = localStorage.getItem(&#39;LOGIN_USER&#39;)? JSON.parse(localStorage.getItem(&#39;LOGIN_USER&#39;) as string): null;</code></pre><h2 id="Mf6k2"><span class="ne-text">TS2307: 【找不到模块】或【ts 导入 js 文件】</span></h2><div class="ne-quote"><p id="u75fe1cc9" class="ne-p"><span class="ne-text">可以归为一类问题，都是导入非 ts 模块 而报错，而 ts 的编译是需要有声明类型的</span></p></div><p id="ua6da90e1" class="ne-p"><span class="ne-text">这类报错一般有如下两种情况：</span></p><ol class="ne-ol"><li id="ua5deb70d"><span class="ne-text">import 导入依赖包，但是提示找不到该包</span></li><li id="u688ca3e4"><span class="ne-text">ts 文件中导入 js 文件</span></li></ol><p id="u07a5d9a7" class="ne-p"><span class="ne-text">原因：</span></p><ol class="ne-ol"><li id="u13a96ef4"><span class="ne-text">依赖包没有做 ts 化，没有声明文件，或者说暴露出来的接口，import 不支持</span></li><li id="ubdd854de"><span class="ne-text">ts 不能导入 js，除非做一些配置文件的相关配置（但是尽量不要在 ts 项目存在 js 项目）</span></li></ol><p id="u700e1cdb" class="ne-p"><span class="ne-text">解决：</span></p><ul class="ne-ul"><li id="uc836f6e5"><span class="ne-text">国际化网站下载下来的是 js 文件，但是 vite 项目不能使用 require 来导入外部文件</span></li></ul><p id="u32bdd5fb" class="ne-p"><a href="https://www.cnblogs.com/fqh123/p/15820329.html" data-href="https://www.cnblogs.com/fqh123/p/15820329.html" class="ne-link"><span class="ne-text" style="text-decoration: line-through">vite 无法使用 require 的替代方案 - 古墩古墩 - 博客园</span></a><span class="ne-text" style="text-decoration: line-through">，api 已废弃</span></p><ul class="ne-tl"><li checked="true" id="u2557d297"><span class="ne-text">解决方法 1：（无伤解决方法）类似声明非 ts 项目依赖一样，单独声明再使用（</span><a href="https://www.cnblogs.com/Blod/p/16185788.html" data-href="https://www.cnblogs.com/Blod/p/16185788.html" class="ne-link"><span class="ne-text">在 ts 中怎么引入 js 文件 - 冰中焱 - 博客园</span></a><span class="ne-text">）</span></li></ul><p id="u4d870acd" class="ne-p"><span class="ne-text">en.d.ts 中添加</span></p><pre><code class="typescript">···declare module &#39;@/i18n/lang/zh.js&#39;;declare module &#39;@/i18n/lang/en.js&#39;;···</code></pre><p id="uf566735f" class="ne-p"><span class="ne-text">然后再 ts 文件中直接导入使用即可</span></p><pre><code class="typescript">import zh from &#39;@/i18n/lang/zh.js&#39;;import en from &#39;@/i18n/lang/en.js&#39;;···</code></pre><ul class="ne-ul"><li id="ufc211982"><span class="ne-text">解决方法 2：直接在 tsconfig 中配置可以使用 js 的配置项，但是需要单独添加 ts 编译后的 js 目录，改动较大</span></li></ul><div class="ne-quote"><ul class="ne-ul"><li id="u5e51fc86"><a href="https://segmentfault.com/q/1010000019980246" data-href="https://segmentfault.com/q/1010000019980246" class="ne-link"><span class="ne-text">tsconfig.json 报错 无法写错写入文件 ，因为他会覆盖输入文件是怎么回事？ - SegmentFault 思否</span></a></li><li id="u2c7f8371"><a href="https://juejin.cn/post/6844904127131025416" data-href="https://juejin.cn/post/6844904127131025416" class="ne-link"><span class="ne-text">ts 引用 js 文件（node 包/自己写的文件） - 掘金</span></a></li></ul></div><h2 id="tT4L5"><span class="ne-text" style="color: rgb(77, 77, 77); font-size: 16px">TS2339: </span><span class="ne-text">Property 'replaceAll' does not exist on type 'string'</span></h2><ul class="ne-ul"><li id="uc593baff"><span class="ne-text">ts 不能使用 js 中 String 的内置 API：replaceAll 方法</span></li><li id="u5431a587"><span class="ne-text">使用其他字符串 api 来达到该目的，</span><a href="https://stackoverflow.com/questions/63616486/property-replaceall-does-not-exist-on-type-string" data-href="https://stackoverflow.com/questions/63616486/property-replaceall-does-not-exist-on-type-string" target="_blank" class="ne-link"><span class="ne-text">https://stackoverflow.com/questions/63616486/property-replaceall-does-not-exist-on-type-string</span></a><span class="ne-text">，不推荐使用该方法</span></li></ul><ul class="ne-tl"><li checked="true" id="u8475e55e"><span class="ne-text">解决方法：默认 TypeScript 不支持某些 es6 polyfill 函数，在 tsconfig.json 配置中进行配置新版本的 js 语法</span></li></ul><pre><code class="json">&#123;...,&quot;compilerOptions&quot;: &#123;...,&quot;lib&quot;: [...,&quot;ES2021.String&quot;]&#125;&#125;</code></pre><h2 id="A8Glh"><span class="ne-text">TS2589: Type instantiation is excessively deep and possibly infinite.</span></h2><ul class="ne-tl"><li id="ub9e33958"><strong><span class="ne-text" style="color: #E8323C"></span></strong><span class="ne-text">如果使用 js 文件导入，那么在 ts 文件中使用就会报 ts 2589 错误。</span></li></ul><pre><code class="plain">src/utils/fetch.ts:63:55 - error TS2589: Type instantiation is excessively deep and possibly infinite.63 message[response.config.warnType as NoticeType](&lt;i18n.global.t(msg)&gt;);</code></pre><p id="ueab1ee74" class="ne-p"><span class="ne-text">使用如下方式导入 js 导出来的 js 和 json 数据</span></p><pre><code class="typescript">import &#123; createI18n &#125; from &#39;vue-i18n&#39;;import config from &#39;./config.json&#39;;import zh from &#39;@/i18n/lang/zh.js&#39;;import en from &#39;@/i18n/lang/en.js&#39;;import &#123; ref &#125; from &#39;vue&#39;;let zh_obj = &#123;&#125;;zh_obj = zh;let en_obj = &#123;&#125;;en_obj = en;export const lang = ref(&#39;zh_obj&#39;);export const languages = config;const i18n = createI18n(&#123;locale: lang.value,fallbackLocale: lang.value,messages: &#123;zh_obj,en_obj&#125;&#125;);export default i18n;</code></pre></div>]]></content:encoded>
      
      
      <category domain="https://www.wztlink1013.com/categories/Web%E5%BC%80%E5%8F%91/">Web开发</category>
      
      <category domain="https://www.wztlink1013.com/categories/Web%E5%BC%80%E5%8F%91/JS-TS/">JS+TS</category>
      
      <category domain="https://www.wztlink1013.com/categories/Web%E5%BC%80%E5%8F%91/JS-TS/TypeScript/">TypeScript</category>
      
      
      
      <comments>https://www.wztlink1013.com/blog/ngt02r/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>诺兰『蝙蝠侠』三部曲</title>
      <link>https://www.wztlink1013.com/essay/lr2r4p/</link>
      <guid>https://www.wztlink1013.com/essay/lr2r4p/</guid>
      <pubDate>Sat, 30 Jul 2022 23:41:11 GMT</pubDate>
      
        
        
          
          
      <description>&lt;!doctype html&gt;&lt;div class=&quot;lake-content&quot; typography=&quot;classic&quot;&gt;&lt;p id=&quot;ud0b8a1c9&quot; class=&quot;ne-p&quot;&gt;&lt;img</description>
          
        
      
      
      
      <content:encoded><![CDATA[<!doctype html><div class="lake-content" typography="classic"><p id="ud0b8a1c9" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1659258590527-a4ac7156-1a4c-494f-8480-9609de27e2c6.png" width="1139.259339739435" id="uc1f00cef" class="ne-image"></p><h4 id="AZQqk"><span class="ne-text">恐惧继而愤怒</span></h4><p id="u8e0b4d48" class="ne-p"><span class="ne-text">害怕的事物终究成为自我救赎的武器</span></p><p id="u3c9b937f" class="ne-p"><span class="ne-text">害怕黑暗与黑暗中的蝙蝠，害怕所带来的恐惧与懦弱</span></p><p id="u833ac2f1" class="ne-p"><span class="ne-text">一个人越害怕一件事情，这件事情往往会再现自己的身边</span></p><p id="ua567b001" class="ne-p"><span class="ne-text">只不过对于布鲁斯·韦恩，这个失去的东西太沉重</span></p><p id="ua4be8f15" class="ne-p"><span class="ne-text">于是带着自责与愤怒逃离那个错误的城市···</span></p><p id="ua1b2d4ff" class="ne-p"><span class="ne-text"></span></p><h4 id="GwlsN"><span class="ne-text">愤怒但非犯罪</span></h4><p id="u9bf106bf" class="ne-p"><span class="ne-text">秉承着 惧怕驱使你行善或作恶的动力 信念的影武者联盟</span></p><p id="u045841c1" class="ne-p"><span class="ne-text">消除了内心的恐惧</span></p><p id="ub502277c" class="ne-p"><span class="ne-text">但是消除并不等于黑化</span></p><p id="uaa843634" class="ne-p"><span class="ne-text">于是误入歧途的前一刻坚守自己认为对的事情···</span></p><p id="u67bf7b28" class="ne-p"><span class="ne-text"></span></p><h4 id="vqGFP"><span class="ne-text">侠影与得失</span></h4><p id="uc99c173d" class="ne-p"><span class="ne-text">用一己之力纠正那些不对的事</span></p><p id="u3ff1b640" class="ne-p"><span class="ne-text">当认定要做一些常人难以做成的事情</span></p><p id="u913e6cd7" class="ne-p"><span class="ne-text">就势必会失去一些已有的事物，比如感情与名望···</span></p><p id="u0a14c2c5" class="ne-p"><span class="ne-text"></span></p><h4 id="RrHQ4"><span class="ne-text">原则</span></h4><p id="ud66d9e8b" class="ne-p"><span class="ne-text">世上所有的反派都不及一个精神病患者</span></p><p id="u783c4a39" class="ne-p"><span class="ne-text">人才辈出阿卡姆就有这么一个人才</span></p><p id="u0186c38b" class="ne-p"><span class="ne-text">什么都不想要，只想要毁灭，只仇视所谓正义的秩序者</span></p><p id="uc880c0d5" class="ne-p"><span class="ne-text">众所周知，疯子和天才只有一线之隔</span></p><p id="ua8d05fb3" class="ne-p"><span class="ne-text">小丑最擅长的就是拿捏人性，而且是每次都成功拿捏人性中的暗</span></p><p id="uf90a1a98" class="ne-p"><span class="ne-text">所以小丑所设计的几个犯罪案例都是结合人性的超高智商案例</span></p><p id="u0ff2b39e" class="ne-p"><span class="ne-text">小丑和蝙蝠侠都是同类人</span></p><p id="u1ca4d347" class="ne-p"><span class="ne-text">造成这个不同的结果就是小时候的教育···</span></p><p id="u57861ea6" class="ne-p"><span class="ne-text">所以与其说这是蝙蝠侠与小丑或是正义与邪恶之间的较量</span></p><p id="u7cfb9084" class="ne-p"><span class="ne-text">不如说是人性的光与暗之间的碰撞</span></p><p id="ue3e3804c" class="ne-p"><span class="ne-text"></span></p><h4 id="ARbHF"><span class="ne-text">黑暗骑士——无名</span></h4><p id="ue3faa0f9" class="ne-p"><span class="ne-text">最高光最封神的就是第二部中蝙蝠侠与戈登最后的对话</span></p><div class="ne-quote"><p id="u426a0640" class="ne-p"><span class="ne-text">要么舍生取义、流芳百世</span></p><p id="u11d91de1" class="ne-p"><span class="ne-text">要么苟活到目睹自己被逼成恶棍</span></p><p id="uba08d3ec" class="ne-p"><span class="ne-text">把这些事算到我头上</span></p><p id="ub8294670" class="ne-p"><span class="ne-text">因为我不是英雄 不像丹特</span></p><p id="ue45b20a3" class="ne-p"><span class="ne-text">我可以背负杀死他们的罪名</span></p><p id="ua99b18c2" class="ne-p"><span class="ne-text">哥谭需要我是什么样的 我就是什么样的</span></p></div><p id="u78c6401e" class="ne-p"><span class="ne-text">行走在黑暗中的骑士，从来都不需要流芳百世</span></p><p id="ub69ea752" class="ne-p"><span class="ne-text">背负诋毁与罪名，让人们生活在光明且充满希望的世界···</span></p><p id="uf8c20e54" class="ne-p"><span class="ne-text"></span></p><h4 id="T0wSf"><span class="ne-text">崛起</span></h4><p id="u185ccb90" class="ne-p"><span class="ne-text">蝙蝠侠崛起的不是布鲁斯·韦恩，而是蝙蝠侠这种侠影精神</span></p><p id="u6de2757b" class="ne-p"><span class="ne-text">最后的罗宾来到蝙蝠洞就证明这一点</span></p><p id="u1b3ec18e" class="ne-p"><span class="ne-text">英雄谢幕退场到原点，后来者继上···</span></p><p id="u6cf9a49d" class="ne-p"><span class="ne-text"></span></p><p id="ub842d2d1" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/1484158/1659258039316-a9a813e2-6189-439d-84f2-16980eabae9a.jpeg" width="2400" id="MrsZD" class="ne-image"></p><p id="uda87b3d3" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/1484158/1659258040513-acdc8cbd-0d02-441f-a5c5-e685e7b96a83.jpeg" width="2400" id="ovmsC" class="ne-image"></p><p id="uc410fc3e" class="ne-p"><br></p></div>]]></content:encoded>
      
      
      <category domain="https://www.wztlink1013.com/categories/%E5%BD%B1%E8%A7%86/">影视</category>
      
      
      
      <comments>https://www.wztlink1013.com/essay/lr2r4p/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>js实现并发控制且并发上限为concurrency</title>
      <link>https://www.wztlink1013.com/blog/wboxcq/</link>
      <guid>https://www.wztlink1013.com/blog/wboxcq/</guid>
      <pubDate>Mon, 25 Jul 2022 03:59:32 GMT</pubDate>
      
        
        
          
          
      <description>&lt;!doctype html&gt;&lt;div class=&quot;lake-content&quot; typography=&quot;classic&quot;&gt;&lt;p id=&quot;u5db88ede&quot; class=&quot;ne-p&quot;&gt;&lt;img</description>
          
        
      
      
      
      <content:encoded><![CDATA[<!doctype html><div class="lake-content" typography="classic"><p id="u5db88ede" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1658750399274-d7c6f4fd-a9ce-4f10-a771-b9567b84830d.png" width="255.5555736086509" id="u9eff5b76" class="ne-image"></p><p id="u336780ef" class="ne-p"><span class="ne-text">前言：使用Typescript编写如下函数功能 并发控制函数 要求控制任务执行的并发上限为concurrency</span></p><p id="ua4fed787" class="ne-p"><span class="ne-text"></span></p><pre><code class="typescript">/*- @Author: wztlink1013- @Date: 2022-07-25 19:57:09- @LastEditTime: 2022-07-25 19:57:22- @Description:  \*/  // Practice 1  const test_1 = () =&gt; &#123;  return new Promise(resolve =&gt; &#123;  setTimeout(() =&gt; &#123;  console.log(&#39;2000&#39;)  let myDate = new Date()  console.log(&#39;---- &#39;, myDate.toTimeString().substring(0, 8), &#39; ----&#39;)  resolve(2000)  &#125;, 2000)  &#125;)  &#125;  const test_2 = () =&gt; &#123;  return new Promise(resolve =&gt; &#123;  setTimeout(() =&gt; &#123;  console.log(&#39;3000&#39;)  let myDate = new Date()  console.log(&#39;---- &#39;, myDate.toTimeString().substring(0, 8), &#39; ----&#39;)  resolve(3000)  &#125;, 3000)  &#125;)  &#125;  const test_3 = () =&gt; &#123;  return new Promise(resolve =&gt; &#123;  setTimeout(() =&gt; &#123;  console.log(&#39;4000&#39;)  let myDate = new Date()  console.log(&#39;---- &#39;, myDate.toTimeString().substring(0, 8), &#39; ----&#39;)  resolve(4000)  &#125;, 4000)  &#125;)  &#125;let arr = [test_1, test_2, test_3]async function parallel(tasks: (() =&gt; void)[],concurrency: number): Promise&lt;void&gt; &#123;const ret: any[] = []const executing: any[] = []let myDate = new Date()console.log(&#39;----start &#39;, myDate.toTimeString().substring(0, 8), &#39; ----&#39;)for (const item of tasks) &#123;const p = Promise.resolve().then(item)ret.push(p)    if (concurrency &lt;= tasks.length) &#123;      const e: any = p.then(() =&gt; executing.splice(executing.indexOf(e), 1))      executing.push(e)      if (executing.length &gt;= concurrency) &#123;        await Promise.race(executing)      &#125;    &#125;&#125;// return Promise.all(ret);&#125;parallel(arr, 2)</code></pre><h2 id="lXmLO"><span class="ne-text">参考：</span></h2><ul class="ne-ul"><li id="u6fd14527"><a href="https://juejin.cn/post/6976028030770610213" data-href="https://juejin.cn/post/6976028030770610213" class="ne-link"><span class="ne-text">JavaScript 中如何实现并发控制？ - 掘金</span></a></li></ul></div>]]></content:encoded>
      
      
      <category domain="https://www.wztlink1013.com/categories/Web%E5%BC%80%E5%8F%91/">Web开发</category>
      
      <category domain="https://www.wztlink1013.com/categories/Web%E5%BC%80%E5%8F%91/JS-TS/">JS+TS</category>
      
      <category domain="https://www.wztlink1013.com/categories/Web%E5%BC%80%E5%8F%91/JS-TS/ECMAScript/">ECMAScript</category>
      
      
      
      <comments>https://www.wztlink1013.com/blog/wboxcq/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>滚动穿透：抽屉层下的DOM跟随滚动</title>
      <link>https://www.wztlink1013.com/blog/wwclae/</link>
      <guid>https://www.wztlink1013.com/blog/wwclae/</guid>
      <pubDate>Sun, 24 Jul 2022 07:05:54 GMT</pubDate>
      
        
        
          
          
      <description>&lt;!doctype html&gt;&lt;div class=&quot;lake-content&quot; typography=&quot;classic&quot;&gt;&lt;p id=&quot;u10d9e989&quot; class=&quot;ne-p&quot;&gt;&lt;img</description>
          
        
      
      
      
      <content:encoded><![CDATA[<!doctype html><div class="lake-content" typography="classic"><p id="u10d9e989" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1665141885929-afd0c3cb-bdd4-4e82-95b3-8b6d2f7964b5.png" width="696.6666389836216" id="ubd08e735" class="ne-image"></p><p id="u46c516f8" class="ne-p"><span class="ne-text">前言：对网站做移动端适配，点击左上角弹出抽屉布局，其实现为fixed绝对定位，对其进行鼠标的上下滚动会造成抽屉层下面的dom元素也随之滚动，本文目的旨在解决该</span><strong><span class="ne-text">滚动穿透</span></strong><span class="ne-text">问题。</span></p><p id="u9432b897" class="ne-p"><span class="ne-text"></span></p><p id="u22e19627" class="ne-p"><span class="ne-text">思路</span></p><ul class="ne-ul"><li id="ub7820cc9"><span class="ne-text">网上思路较多，鼠标滚动也好，手指滑动也好，都属于Event事件，而后抽屉弹出禁用底部dom的默认事件思路，该思路可行，不过有点大材小用。</span></li></ul><ul class="ne-tl"><li checked="true" id="uf52d49e9"><span class="ne-text">只利用css解决该问题，当抽屉弹出，记录</span><code class="ne-code"><span class="ne-text">window.scrollY</span></code><span class="ne-text">的值，同时对底部dom进行绝对定位，当抽屉层关闭，底部dom清楚绝对定位及其相关属性，并且跳转刚刚记录的</span><code class="ne-code"><span class="ne-text">window.scrollY</span></code><span class="ne-text">值。部分代码如下：</span></li></ul><pre><code class="javascript">let top = 0;// 点击左按钮btn_app_sider.click(function () &#123;app_side_glass.css(&#123; display: &quot;block&quot; &#125;);app_side_content.css(&#123; display: &quot;block&quot; &#125;);// 阻止抽屉层下的滑动穿透top = window.scrollY;container.css(&#123; position: &quot;fixed&quot;, top: -top + &quot;px&quot; &#125;);&#125;);// 点击毛玻璃片app_side_glass.click(function () &#123;app_side_glass.css(&#123; display: &quot;none&quot; &#125;);app_side_content.css(&#123; display: &quot;none&quot; &#125;);// 阻止抽屉层下的滑动穿透container.css(&#123; position: &quot;&quot;, top: &quot;&quot; &#125;);window.scrollTo(0, top);&#125;);</code></pre></div>]]></content:encoded>
      
      
      <category domain="https://www.wztlink1013.com/categories/Web%E5%BC%80%E5%8F%91/">Web开发</category>
      
      <category domain="https://www.wztlink1013.com/categories/Web%E5%BC%80%E5%8F%91/HTML-CSS/">HTML+CSS</category>
      
      <category domain="https://www.wztlink1013.com/categories/Web%E5%BC%80%E5%8F%91/HTML-CSS/%E5%B8%83%E5%B1%80/">布局</category>
      
      
      
      <comments>https://www.wztlink1013.com/blog/wwclae/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Vue3重构Vue2项目知识总结</title>
      <link>https://www.wztlink1013.com/blog/wg5n0g/</link>
      <guid>https://www.wztlink1013.com/blog/wg5n0g/</guid>
      <pubDate>Sun, 24 Jul 2022 07:03:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;!doctype html&gt;&lt;div class=&quot;lake-content&quot; typography=&quot;classic&quot;&gt;&lt;p id=&quot;u5fc1e207&quot; class=&quot;ne-p&quot;&gt;&lt;img</description>
          
        
      
      
      
      <content:encoded><![CDATA[<!doctype html><div class="lake-content" typography="classic"><p id="u5fc1e207" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1662219960321-86e09edc-e993-4ce0-88db-bebea0da263e.png" width="1507.4999400973343" id="u6d2cb89a" class="ne-image"></p><p id="u7483d19f" class="ne-p"><span class="ne-text"></span></p><p id="u3bbb6074" class="ne-p"><span class="ne-text">前言：使用Vue3（</span><a href="https://cn.vuejs.org/" data-href="https://cn.vuejs.org/" class="ne-link"><span class="ne-text">Vue.js - 渐进式 JavaScript 框架 | Vue.js</span></a><span class="ne-text">）的 </span><a href="https://cn.vuejs.org/guide/introduction.html#api-styles" data-href="https://cn.vuejs.org/guide/introduction.html#api-styles" target="_blank" class="ne-link"><span class="ne-text">组合式API</span></a><span class="ne-text"> 编程风格来进行基础转换。</span></p><p id="uf30994f1" class="ne-p"><br></p><p id="u11b5af03" class="ne-p"><span class="ne-text" style="color: rgb(36, 41, 47); font-size: 14px">基础变动：</span></p><ul class="ne-ul"><li id="u3d084571"><span class="ne-text" style="color: rgb(36, 41, 47); font-size: 14px">setup语法糖 Vue3.2之后才能放到script里面</span></li><li id="u89b82f0b"><span class="ne-text" style="color: rgb(36, 41, 47); font-size: 14px">data methods 都不再需要，也不再需要return出变量或是函数</span></li><li id="uec5a4d8c"><span class="ne-text" style="color: rgb(36, 41, 47); font-size: 14px">路由相关知识，只注意</span><span class="ne-text" style="color: rgb(36, 41, 47); font-size: 12px">useRoute()</span><span class="ne-text" style="color: rgb(36, 41, 47); font-size: 14px"> </span><span class="ne-text" style="color: rgb(36, 41, 47); font-size: 12px">useRouter()</span><span class="ne-text" style="color: rgb(36, 41, 47); font-size: 14px">其余的，和之前自己写的lyrics前端路由就够用了</span></li><li id="u5e17a00e"><span class="ne-text" style="color: rgb(36, 41, 47); font-size: 14px">Vue3 异步编程</span></li><li id="u46903163"><span class="ne-text" style="color: rgb(36, 41, 47); font-size: 14px">provide 和 inject</span></li><li id="u4a3c5f1e"><span class="ne-text" style="color: rgb(36, 41, 47); font-size: 14px">······</span></li></ul><p id="u642b3074" class="ne-p"><span class="ne-text">语法转换过程中，主要分几个大块：</span></p><ul class="ne-ul"><li id="u4a49a6cf"><span class="ne-text">语法：框架自行的一些语法迁移（官网里面的</span><strong><span class="ne-text">基础</span></strong><span class="ne-text">）</span></li><li id="u3fb0af83"><span class="ne-text">组件相关：尤其是组件之间的各类通信方式，以及封装组件的传参等，单独一篇文章总结。</span></li><li id="uca31ce98"><span class="ne-text">编程风格/封装相关</span></li><li id="u9590c6a0"><span class="ne-text">······</span></li></ul><h2 id="sXl99"><span class="ne-text">数据</span></h2><h3 id="opEG9"><span class="ne-text">普通数据</span></h3><pre><code class="typescript">&lt;script setup lang=&quot;ts&quot;&gt;interface SpecialFunDataItem &#123;title: stringdescription: string&#125;const apply_data: SpecialFunDataItem[] = [&#123;title: &#39;知识库/项目文档/产品手册&#39;,description: &#39;适合&#39;,&#125;,&#123;title: &#39;帮助中心/FAQ/在线问答&#39;,description: &#39;适合。&#39;,&#125;,]&lt;/script&gt;</code></pre><h3 id="u5iUn"><span class="ne-text">响应数据</span></h3><h4 id="Mp2Px"><span class="ne-text">ref</span></h4><pre><code class="vue">&lt;template&gt;&lt;a-modalv-model:visible=&quot;visible&quot;、··· &gt;&lt;/template&gt;&lt;script setup lang=&quot;ts&quot;&gt;import &#123;ref&#125; from &#39;vue&#39;const visible = ref&lt;boolean&gt;(false)&lt;/script&gt;</code></pre><h4 id="Q3CuW"><span class="ne-text">reactive</span></h4><p id="u6466c8ca" class="ne-p"><span class="ne-text">reactive这个更多使用在对象和数组类型的响应式定义数据，因为在vue2中，对于数组和对象是不能够完美响应式的，需要watch来监听实现，而在vue3中，以此作为优化来定义响应式数据。</span></p><p id="u3a6d13e2" class="ne-p"><span class="ne-text">但是直接使用ref也可以定义响应式数组或对象数据</span></p><ul class="ne-tl"><li checked="true" id="u0e7fb17d"><span class="ne-text">reactive定义的数组不能实时渲染，用ref就完事了</span></li></ul><p id="uc2bb26ea" class="ne-p"><a href="https://blog.csdn.net/m0_46527751/article/details/124957269" data-href="https://blog.csdn.net/m0_46527751/article/details/124957269" class="ne-link"><span class="ne-text">Vue3异步请求获取数据在渲染时不显示的问题_s－010101的博客-CSDN博客_vue异步请求数据没渲染</span></a></p><p id="u1db3fe11" class="ne-p"><span class="ne-text">并不是生命周期的问题，而是数据定义的问题</span></p><p id="ubd0005f8" class="ne-p"><span class="ne-text">除了上述两种方式解决办法，还可以使用ts语法，接口，参照antdv中的表单相关实例代码</span></p><ul class="ne-tl"><li id="ua1955014"><span class="ne-text">reactive不能渲染，更新名称子组件不能渲染</span></li><li checked="true" id="u984ead1f"><span class="ne-text">FIXME: 重命名组件中，输入框值变化不能响应式</span></li></ul><p id="ua93986ed" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1661150516722-4068bc1d-d2e0-4f0c-ba9c-ee0970b4963c.png" width="265.9921875" id="lQR6v" class="ne-image"><span class="ne-text">同时对数据定义用ref不用reactive</span></p><ul class="ne-tl"><li id="ubbbdc775"><a href="https://segmentfault.com/q/1010000039940940" data-href="https://segmentfault.com/q/1010000039940940" target="_blank" class="ne-link"><span class="ne-text">vue3中的reactive对象赋值问题</span></a></li></ul><h3 id="w8Utk"><span class="ne-text">Vue2中的data</span></h3><h4 id="PtTx4"><span class="ne-text">如何在setup中使用data中的数据库？</span></h4><p id="ud3222ed5" class="ne-p"><span class="ne-text">按照以前vue2，直接使用this可以访问到data中定义的数据，但在vue3不行，因为setup()函数的执行要比created，oncrated函数都要早。</span></p><p id="u9da72a0e" class="ne-p"><span class="ne-text"></span></p><p id="u34d7ae55" class="ne-p"><span class="ne-text">具体使用以下小技巧可以访问到：</span></p><pre><code class="javascript">&lt;div v-on:click=&quot;fun(testdata)&quot;&gt;&lt;/div&gt;setup()&#123;const fun=(i)=&gt;&#123;alert(i)&#125;&#125;,data()&#123;return&#123;testdata:1,&#125;&#125;</code></pre><p id="u67e03fdc" class="ne-p"><span class="ne-text">也可以使用 getCurrentInstance 方法获取 data 内的数据</span><strong><span class="ne-text" style="color: #E8323C">（未验证）</span></strong></p><pre><code class="vue">&lt;script lang=&quot;ts&quot;&gt;import &#123; getCurrentInstance &#125; from &quot;vue&quot;;export default &#123;data() &#123;return &#123;b: &quot;data 数据&quot;,&#125;;&#125;,setup() &#123;const datab = getCurrentInstance();async function getdata()&#123;let dataa=datab.data.b;console.log(dataa)&#125;&#125;,&#125;;&lt;/script&gt;</code></pre><p id="uf6f7e0e6" class="ne-p"></p><h2 id="u0Iol"><span class="ne-text">计算属性+方法+侦听器</span></h2><p id="u7dfc51e9" class="ne-p"><span class="ne-text">计算属性（computed）和方法（methods）的区别</span></p><ul class="ne-ul"><li id="u15ab7bec"><span class="ne-text">计算属性是基于他们的依赖来进行缓存的</span></li></ul><p id="u7ae90c12" class="ne-p"><span class="ne-text">“他们的依赖”指的是data数据域中的data数据，如果其变动，计算属性值才会变</span></p><ul class="ne-ul"><li id="u424a9f75"><span class="ne-text">方法不存在缓存</span></li></ul><p id="u9a1a5ffb" class="ne-p"><span class="ne-text">计算属性（computed）和侦听器（watch）的使用</span></p><ul class="ne-ul"><li id="u029e3984"><span class="ne-text">侦听器更用于异步或是开销较大的操作</span></li></ul><h3 id="b1d999af"><span class="ne-text">watch（侦听器）+computed（计算属性）+watchEffect</span></h3><ul class="ne-ul"><li id="u218599f2"><span class="ne-text">watchEffect：只要在该函数引用声明式变量，那么就会执行该函数</span></li></ul><div class="ne-quote"><p id="ub95ff445" class="ne-p"><span class="ne-text">为了根据响应式状态自动应用和重新应用副作用，我们可以使用 watchEffect 函数。它立即执行传入的一个函数，同时响应式追踪其依赖，并在其依赖变更时重新运行该函数。</span></p></div><ul class="ne-ul"><li id="u39565fb8"><span class="ne-text">watch：vue2中监听新值和旧值的一样使用（ref reactive 各有不同）</span></li><li id="uf22eca5e"><span class="ne-text">computed </span></li></ul><ul class="ne-list-wrap"><ul ne-level="1" class="ne-ul"><li id="u4b2042e5"><span class="ne-text">注意Vue computed 的类型声明方式https://bytenote.net/article/121073339505573889 </span><a href="https://v3.cn.vuejs.org/api/computed-watch-api.html#computed" data-href="https://v3.cn.vuejs.org/api/computed-watch-api.html#computed" target="_blank" class="ne-link"><span class="ne-text">https://v3.cn.vuejs.org/api/computed-watch-api.html#computed</span></a></li><li id="u393ac6e2"><span class="ne-text">不确定暂时先用any</span></li></ul></ul><ul class="ne-ul"><li id="u9c90f99c"><span class="ne-text">动态监听数组，返回的新值打印出来都是数组元素逗号隔开，因为监听的是内部每一个数组元素</span></li></ul><details class="lake-collapse"><summary id="u0887aed0"></summary><pre><code class="vue">&lt;template&gt;  &lt;button type=&quot;button&quot; @click=&quot;count++&quot;&gt;[watch watchEffect]ref 定义的 count is: &#123;&#123; count &#125;&#125;&lt;/button&gt;&lt;hr/&gt;  &lt;button type=&quot;button&quot; @click=&quot;numbers[0]++&quot;&gt;[watch watchEffect]reactive 定义的 numbers is: &#123;&#123; numbers &#125;&#125;&lt;/button&gt;&lt;hr/&gt;  &lt;button type=&quot;button&quot; &gt;[computed]ref 定义的 person_ref is: &#123;&#123; person_ref &#125;&#125;&lt;/button&gt;&lt;hr/&gt;  &lt;button type=&quot;button&quot; &gt;[computed]reactive 定义的 person_reactive is: &#123;&#123; person_reactive &#125;&#125;&lt;/button&gt;&lt;hr/&gt;  &lt;span&gt;动态参数绑定：&lt;/span&gt;&lt;a :href=&quot;getHrefValue()&quot;&gt;&#123;&#123;getHrefValue()&#125;&#125;&lt;/a&gt;&lt;hr/&gt;&lt;/template&gt;&lt;script setup lang=&quot;ts&quot;&gt;import &#123; ref, watchEffect, watch, reactive, computed, Ref &#125; from &#39;vue&#39;const count = ref(0)const numbers = reactive([1, 2, 3, 4])let person_ref = ref(&#39;wuzutao&#39;)let person_reactive = reactive(&#123;firstName:&#39;wu&#39;, lastName:&#39;zutao&#39;, fullName: &#39;wu-zutao&#39;&#125;)let getHrefValue = () =&gt; &#123;    return &#39;www.wztlink1013.com&#39;&#125;// [watchEffect ref reactive]watchEffect(()=&gt;&#123;  const x1 = count.value  const x2 = numbers[0]  console.log(&#39;因为watchEffect里面调用了count/numbers[0] 所以watchEffect所指定的回调执行了&#39;, x1, x2)&#125;)// [watch ref]watch(count, (count, prevCount) =&gt; &#123;    console.log(&#39;新值&#39;, count)    console.log(&#39;旧值&#39;, prevCount)&#125;)// [watch reactive]watch(  () =&gt; [...numbers],  (numbers, prevNumbers) =&gt; &#123;    console.log(&#39;numbers新值&#39;,numbers)    console.log(&#39;numbers旧值&#39;,prevNumbers)  &#125;)// [computed ref]// const computed_ref = computed(() =&gt; &#123; // 简单式//     person_ref.value = person_ref.value + &#39;+&#39;// &#125;)const computed_ref = computed&lt;any&gt;(&#123; // 复合式  get: () =&gt; &#123;    console.log(&#39;[ref]使用(get)该变量,就会调用&#39;)  &#125;,  set: (val) =&gt; &#123;    console.log(&#39;[ref]改变(set)该变量,就会调用&#39;)    person_ref.value = val + &#39;-内部处理值-原始值&#39; + person_ref.value  &#125;&#125;)// console.log(computed_ref.value) // 会打印undefined因为上面的get没有传参computed_ref.value = &#39;修改的目的值&#39;// [computed reactive]// person[&#39;firstName&#39;] = computed(()=&gt;&#123;//     return person.firstName + &#39;-&#39; + person.lastName//     &#125;)  const computed_reactive= computed&lt;any&gt;(&#123; // 完整写法    get()&#123;        // return person_reactive.firstName + &#39;-&#39; + person_reactive.lastName        console.log(&#39;[reactive]使用(get)该变量,就会调用&#39;)    &#125;,    set(value)&#123;        console.log(&#39;[reactive]改变(set)该变量,就会调用&#39;)        const nameArr = value.split(&#39;-&#39;)        person_reactive.fullName = value        person_reactive.firstName = nameArr[0]        person_reactive.lastName = nameArr[1]    &#125;&#125;)computed_reactive.value = &#39;wu+-zutao+&#39;&lt;/script&gt;&lt;style scoped&gt;a &#123;  color: #42b983;&#125;label &#123;  margin: 0 0.5em;  font-weight: bold;&#125;code &#123;  background-color: #eee;  padding: 2px 4px;  border-radius: 4px;  color: #304455;&#125;&lt;/style&gt;</code></pre></details><ul class="ne-tl"><li id="udfbfc9b8"><span class="ne-text">vue3的监听器报重载错误</span></li></ul><h3 id="KW8mQ"><span class="ne-text">Vue2中侦听器(watch)注意事项</span></h3><p id="uf59f37a1" class="ne-p"><span class="ne-text">实际开发过程中：</span></p><ul class="ne-ul"><li id="uacba8ec2"><strong><span class="ne-text">非的确必要，尽量不要使用watch监听，实际过程中，会造成许多问题，比如渲染顺序等，会给后续添加功能带来难以维护的问题</span></strong></li><li id="u4800cbab"><span class="ne-text">当监听的数据不是一个简单的基本类型，比如一个对象，一个数组，此时应该使用深度监听：deep:true；当想让监听器一启动就触发一次watch，应该使用： immediate: true。</span></li></ul><div class="ne-quote"><p id="ub31b8966" class="ne-p"><span class="ne-text">直接</span><code class="ne-code"><span class="ne-text">watch</span></code><span class="ne-text">监听对象内的是检测不到变化的，因为对象的指向并没有发生改变。Vue中的watch监听对象内属性的变动方案</span></p></div><h4 id="U7lp1"><span class="ne-text">使用deep属性</span></h4><pre><code class="javascript">new Vue(&#123;data: &#123;count: 10，blog:&#123;title:&#39;my-blog&#39;,categories:[]&#125;&#125;,watch: &#123;blog:&#123;handler(newVal,oldVal)&#123;console.log(`new: $&#123;newVal&#125;, old: $&#123;oldVal&#125;`);&#125;,deep:true&#125;&#125;&#125;)</code></pre><p id="u22fd44d5" class="ne-p"></p><p id="uc92302d5" class="ne-p"><span class="ne-text">里面的</span><code class="ne-code"><span class="ne-text">deep</span></code><span class="ne-text">设为了</span><code class="ne-code"><span class="ne-text">true</span></code><span class="ne-text">，这样的话，如果修改了这个</span><code class="ne-code"><span class="ne-text">blog</span></code><span class="ne-text">中的任何一个属性，都会执行</span><code class="ne-code"><span class="ne-text">handler</span></code><span class="ne-text">这个方法。不过这样会造成更多的性能开销，尤其是对象里面属性过多，结构嵌套过深的时候。而且有时候我们就只想关心这个对象中的某个特定属性，这个时候可以这样</span></p><h4 id="F2YBm"><span class="ne-text">用字符串来表示对象的属性调用</span></h4><pre><code class="javascript">new Vue(&#123;  data: &#123;    count: 10，    blog:&#123;        title:&#39;my-blog&#39;,        categories:[]    &#125;  &#125;,  watch: &#123;    &#39;blog.categories&#39;(newVal, oldVal) &#123;        console.log(`new:$&#123;newVal&#125;, old:$&#123;oldVal&#125;`);    &#125;,   &#125;&#125;)</code></pre><h4 id="aAOEA"><span class="ne-text">使用计算属性(computed)</span></h4><pre><code class="javascript">new Vue(&#123;  data: &#123;    count: 10，    blog:&#123;        title:&#39;my-blog&#39;,        categories:[]    &#125;  &#125;,  computed: &#123;    categories() &#123;      return this.blog.categories;    &#125;  &#125;,  watch: &#123;    categories(newVal, oldVal) &#123;      console.log(`new:$&#123;newVal&#125;, old:$&#123;oldVal&#125;`);    &#125;,   &#125;,&#125;)</code></pre><p id="u7e9d13d4" class="ne-p"><span class="ne-text">参考：</span><a href="https://segmentfault.com/a/1190000018080301" data-href="https://segmentfault.com/a/1190000018080301" target="_blank" class="ne-link"><span class="ne-text">https://segmentfault.com/a/1190000018080301</span></a></p><h3 id="fad771df"></h3><h2 id="uWCZt"><span class="ne-text">生命周期</span></h2><ul class="ne-ul"><li id="ub3ef8ae4"><span class="ne-text">生命周期需要注意，没有created阶段了，直接在setup里面了，也就是setup阶段是没有挂载真实DOM的，如果需要操作真实dom需要在onMounetd里面进行相应逻辑</span></li></ul><pre><code class="javascript">onMounted(() =&gt; &#123;  if ((document.getElementById(&#39;test&#39;) as HTMLElement) === null) &#123;    console.log(&#39;--------------&#39;);  &#125; else &#123;    console.log(&#39;+++++++++++++++++++++&#39;);  &#125;&#125;);</code></pre><ul class="ne-ul"><li id="uac6d1435"><a href="https://v3.cn.vuejs.org/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA" data-href="https://v3.cn.vuejs.org/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA" target="_blank" class="ne-link"><span class="ne-text">https://v3.cn.vuejs.org/guide/instance.html#生命周期图示</span></a></li><li id="ufc8d3456"><a href="https://juejin.cn/post/6942030120383168542" data-href="https://juejin.cn/post/6942030120383168542" target="_blank" class="ne-link"><span class="ne-text">https://juejin.cn/post/6942030120383168542</span></a></li><li id="ued2b84b0"><a href="https://segmentfault.com/a/1190000038426588" data-href="https://segmentfault.com/a/1190000038426588" target="_blank" class="ne-link"><span class="ne-text">https://segmentfault.com/a/1190000038426588</span></a></li><li id="u4c8420da"><a href="https://juejin.cn/post/7108206884867276831" data-href="https://juejin.cn/post/7108206884867276831" target="_blank" class="ne-link"><span class="ne-text">https://juejin.cn/post/7108206884867276831</span></a></li><li id="uf0950a9a"><a href="https://segmentfault.com/a/1190000039680245" data-href="https://segmentfault.com/a/1190000039680245" class="ne-link"><span class="ne-text">Vue 3 生命周期完整指南</span></a></li></ul><ul class="ne-tl"><li checked="true" id="u6f3bfb6f"><strong><span class="ne-text">bug：</span></strong><span class="ne-text">刚进入页面，下面的地方不会自动摊开宽度，获取dom的宽度失败</span></li></ul><p id="u6a058fb0" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1663310483216-ada7ca88-f2e2-4a4b-8447-c3c417c779c8.png" width="193" id="u937129c7" class="ne-image"></p><p id="u32c78c63" class="ne-p"><span class="ne-text">代码放到onMounted中即可</span></p><p id="u5b79d127" class="ne-p"><span class="ne-text"></span></p><p id="u7671054e" class="ne-p"><span class="ne-text">vue2当中：</span></p><ol class="ne-ol"><li id="u03072dc1"><span class="ne-text">beforeCreate：在实例初始化之后，数据观测和事件配置之前被调用</span></li><li id="u7f6830af"><span class="ne-text">created：在实例创建完成后被立即调用</span></li><li id="u363a87ca"><span class="ne-text">beforeMount：在挂载开始之前被调用</span></li><li id="u8c6e7b07"><span class="ne-text">mounted：el被新创建的vm.$el替换，并挂载到实例上去之后调用该钩子</span></li><li id="ub431174c"><span class="ne-text">beforeUpdate：数据更新时调用，发生在虚拟DOM打补丁之前</span></li><li id="ud4c52258"><span class="ne-text">updated：由于数据更改导致的虚拟DOM重新渲染和打补丁，在这之后会调用该钩子</span></li><li id="u5cb6441c"><span class="ne-text">beforeDestroy：实例销毁之前调用</span></li><li id="ue81310ec"><span class="ne-text">destroyed：实例销毁后调用</span></li></ol><p id="u2b15d174" class="ne-p"><span class="ne-text"></span></p><pre><code class="vue">&lt;script&gt;  setup() &#123;    console.log(&#39;----setup第一个执行----&#39;)    // vue3.x生命周期写在setup中    onBeforeMount(() =&gt; &#123;      console.log(&#39;------vue3中onBeforeMount-----&#39;)    &#125;)    onMounted(() =&gt; &#123;      console.log(&#39;------vue3中onMounted-----&#39;)    &#125;)    onRenderTriggered((event) =&gt; &#123;      console.log(&#39;------vue3中onRenderTriggered-----&#39;, event)    &#125;)  &#125;,  // vue2当中的  beforeCreate() &#123;    console.log(&#39;----vue2中beforeCreate第二个执行----&#39;)  &#125;,  // vue2当中的  created() &#123;    console.log(&#39;----vue2中created第三个执行----&#39;)  &#125;,&lt;/script&gt;</code></pre><p id="u20c2d491" class="ne-p"><span class="ne-text">执行结果如下：</span></p><p id="u9c80ce3d" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1644646841871-0aaeece1-c5dd-493e-bbfc-41f52925931a.png" width="792" id="ue1197c21" class="ne-image"></p><h2 id="amOyt"><span class="ne-text">具体使用</span></h2><h3 id="EL5JT"><span class="ne-text">router和route区别及使用</span></h3><p id="u7abd5330" class="ne-p"><span class="ne-text"> </span><a href="https://juejin.cn/post/7116720209502683172" data-href="https://juejin.cn/post/7116720209502683172" class="ne-link"><span class="ne-text">vue3中的useRoute（）和useRouter()； - 掘金</span></a></p><h3 id="OSYBy"><span class="ne-text">Vue3中使用Async Await</span></h3><ul class="ne-ul"><li id="ue00b3b0d"><span class="ne-text">vue3的setup本就是一个async</span><span class="ne-text" style="text-decoration: line-through">，所以可以直接使用await（不可以）</span></li><li id="u4e6107bb"><a href="https://www.cnblogs.com/shiazhen/p/14986454.html" data-href="https://www.cnblogs.com/shiazhen/p/14986454.html" class="ne-link"><span class="ne-text">vue3.0 中 如何在setup中使用async await - 阿臻 - 博客园</span></a></li></ul><pre><code class="typescript">const handleLoginOut = async () =&gt; &#123;  emit(&#39;wsClosed&#39;);  const &#123; ret &#125; = await logout();  if (ret &gt; -1) &#123;    localStorage.clear();    onRedirect();  &#125;&#125;;</code></pre><h3 id="KYiG2"><span class="ne-text">emit使用</span></h3><ul class="ne-ul"><li id="ubc4be53c"><a href="https://segmentfault.com/a/1190000041054210" data-href="https://segmentfault.com/a/1190000041054210" class="ne-link"><span class="ne-text">vue3 setup使用emit</span></a></li></ul><p id="u52cd0197" class="ne-p" style="text-align: left"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1660633907664-aa2576f8-129c-45e4-a747-0f5ce9f765cf.png" width="329.99542236328125" id="u9e932c10" class="ne-image"></p><h3 id="XK1pV"><span class="ne-text">slot使用</span></h3><p id="u4b93f37b" class="ne-p"><span class="ne-text">vue2：</span></p><pre><code class="vue">&lt;template&gt;  &lt;template slot=&quot;content&quot;&gt;    ···  &lt;/template&gt;&lt;/template&gt;</code></pre><p id="u2d76544d" class="ne-p"><span class="ne-text">vue3：</span></p><pre><code class="vue">&lt;template&gt;  &lt;slot name=&quot;content&quot;&gt;    ···  &lt;/slot&gt;&lt;/template&gt;</code></pre><h3 id="ZQBWT"><span class="ne-text">ref获取元素节点</span></h3><ul class="ne-ul"><li id="ub4539e16"><a href="https://zhuanlan.zhihu.com/p/546041641" data-href="https://zhuanlan.zhihu.com/p/546041641" class="ne-link"><span class="ne-text">一文讲全Vue3中使用ref获取元素节点</span></a></li></ul><h3 id="wZVbK"><span class="ne-text">[取]函数式编程模式[弃]Mixin逻辑</span></h3><ul class="ne-ul"><li id="u737a443d"><span class="ne-text">cooperation的Mixin代码较难抽离出来</span></li></ul><p id="uc4c1ed40" class="ne-p"><span class="ne-text">使用到较多的cooperation文件代码，Mixin逻辑，不再像Home组件中的上传逻辑一样直接放到一块，改用引用函数的方式，因为变量不多。</span></p><p id="u7d540e78" class="ne-p"><strong><span class="ne-text">ylCooperationSdkInstance变量在组件中使用较少，但是如果直接引用ts文件中的变量，是否会存在不再响应的问题</span></strong><span class="ne-text">。使用vue3推荐的组合式函数编程方式：</span></p><p id="u3d96f510" class="ne-p"><a href="https://cn.vuejs.org/guide/reusability/composables.html" data-href="https://cn.vuejs.org/guide/reusability/composables.html" target="_blank" class="ne-link"><span class="ne-text">https://cn.vuejs.org/guide/reusability/composables.html</span></a></p><ul class="ne-ul"><li id="u4138f1c6"><span class="ne-text">上面的mixin文件代码全部放在ts文件中，然后在vue中导入ts文件，其仍然保留生命周期</span></li><li id="u58172690"><span class="ne-text">单独ts文件是用不了全局变量</span></li></ul><p id="u42054b22" class="ne-p"><span class="ne-text">直接导入router文件，使用根源API</span></p><p id="ua53deb11" class="ne-p"><a href="https://cn.vuejs.org/guide/reusability/composables.html#vs-mixins" data-href="https://cn.vuejs.org/guide/reusability/composables.html#vs-mixins" target="_blank" class="ne-link"><span class="ne-text">https://cn.vuejs.org/guide/reusability/composables.html#vs-mixins</span></a></p><ul class="ne-tl"><li id="ucfbac137"><span class="ne-text">将上传逻辑js代码转为ts代码，然后再全量导入Home/index.vue中</span></li><li id="u3d1d9606"><span class="ne-text">data数据迁移</span></li></ul><ul class="ne-list-wrap"><ul ne-level="1" class="ne-ul"><li id="u6f267da4"><span class="ne-text">里面应该只有uploadedNum变量再vue组件中使用到了</span></li><li id="u7045ba9d"><span class="ne-text">iconType变量两者都有</span></li></ul></ul><hr id="XrhMr" class="ne-hr"><ul class="ne-tl"><li checked="true" id="uec0bdb16"><strong><span class="ne-text">uploadHandler.ts上传逻辑代码进行ts转换</span></strong><span class="ne-text">。并且将代码放到组件中</span></li></ul><p id="u138bcb53" class="ne-p"><span class="ne-text">在Home组件中，混合代码较多，其中，上传逻辑使用的是vue2.x的Minix混入方式，但是在vue3不再推荐该模式写代码，所以单独将上传逻辑js文件单独整理其逻辑，文件逻辑中，上传js代码和Home.vue组件两者相互又使用一些变量···</span></p><ul class="ne-ul"><li id="u121972f0"><span class="ne-text">上传js代码中有6处使用vue中的变量</span></li><li id="u94ae31fe"><span class="ne-text">vue中有2处使用js代码中变量</span></li></ul><div data-type="success" class="ne-alert"><p id="uccbb3b29" class="ne-p"><span class="ne-text">尝试方法1：因为两者多出混入变量使用，尝试将上传的ts代码全部放到Home组件中，虽然代码变长了，但是逻辑性提高了，先做出如下备份</span></p></div><h3 id="Dg53c"><span class="ne-text">vue3中不要命名冲突</span></h3><p id="u9e776dd7" class="ne-p"><span class="ne-text">会导致取值和预期取值不一样</span></p><p id="ub011d3d5" class="ne-p"><span class="ne-text">pagination对象类型，在首页的分页逻辑有误</span></p><p id="udba536aa" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1660899285052-ac9a2e6a-56f3-4a12-9b98-2d08b236aaf3.png" width="364" id="v8HpR" class="ne-image"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1660899292966-6f4b637e-1724-4691-9ea9-43073709682d.png" width="428" id="iFQc8" class="ne-image"></p><p id="u549774ab" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1661153296181-86029975-7753-4d85-b214-775ceba0d1cc.png" width="923" id="ude0118c7" class="ne-image"></p><p id="u8f10d885" class="ne-p"><br></p><h3 id="LqHwF"><span class="ne-text">vue3全局路由配置</span></h3><ul class="ne-ul"><li id="ua2ae1e5d"><span class="ne-text">vue3路由全局匹配</span></li></ul><p id="uf8affa74" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1661333780817-83937643-c4b9-43f0-ad47-6db7487230e6.png" width="536" id="f9d06" class="ne-image"></p><p id="uf09f5f1c" class="ne-p"><a href="https://blog.csdn.net/Boale_H/article/details/118526941" data-href="https://blog.csdn.net/Boale_H/article/details/118526941" class="ne-link"><span class="ne-text">vue3配置路由报错Catch all routes (“*“) must now be defined using a param with a custom regexp._Boale_H的博客-CSDN博客</span></a></p><h3 id="HSZos"><span class="ne-text">js/ts文件使用相应vue中函数</span></h3><ul class="ne-ul"><li id="u65257d16"><span class="ne-text">vue2：传递“this”：</span><a href="https://www.cnblogs.com/taohuaya/p/10765731.html" data-href="https://www.cnblogs.com/taohuaya/p/10765731.html" target="_blank" class="ne-link"><span class="ne-text">https://www.cnblogs.com/taohuaya/p/10765731.html</span></a></li><li id="u10603717"><span class="ne-text">但是vue3没有this，利用传参</span></li></ul><p id="u5d3f8e2c" class="ne-p"><br></p><h3 id="Dznst"><span class="ne-text">全局变量的使用</span></h3><p id="u7bad40cd" class="ne-p"><span class="ne-text">vue3注册全局变量失去响应性</span></p><ul class="ne-tl"><li checked="true" id="u30cdb9c2"><span class="ne-text">点击登录按钮，相应一个loading的状态，这个在之前项目中是利用全局注册的一个变量，vue3的全局注册变量方法</span></li></ul><ul class="ne-ul"><li id="u3074ce17"><a href="https://blog.csdn.net/weixin_43090018/article/details/117222606" data-href="https://blog.csdn.net/weixin_43090018/article/details/117222606" target="_blank" class="ne-link"><span class="ne-text">https://blog.csdn.net/weixin_43090018/article/details/117222606</span></a></li><li id="u585d358a"><a href="https://blog.csdn.net/XKFC1/article/details/123715354" data-href="https://blog.csdn.net/XKFC1/article/details/123715354" target="_blank" class="ne-link"><strong><span class="ne-text" style="text-decoration: underline">https://blog.csdn.net/XKFC1/article/details/123715354</span></strong></a></li><li id="u1c46c536"><a href="https://blog.csdn.net/Jkssns/article/details/117369556" data-href="https://blog.csdn.net/Jkssns/article/details/117369556" class="ne-link"><span class="ne-text">vue3 怎么创建全局的响应式对象 创建简单的vuex_最有才的河南大汉的博客-CSDN博客</span></a></li><li id="u696bccca"><strong><span class="ne-text">fetch文件中的axiosLoadingObj变量，在main.ts中注册为全局变量，Login.vue中使用，当fetch中axiosLoadingObj变量的值改变，Login.vue中使用该全局变量不会发生改变</span></strong><span class="ne-text">。</span></li></ul><ul class="ne-tl"><li checked="true" id="u88965f22"><strong><span class="ne-text">接口 - loading 的全局变量迁移</span></strong></li></ul><div class="ne-quote"><p id="u79d31fbe" class="ne-p"><span class="ne-text">不能使用v3全局变量api getCurrentInstance 不能响应式，同时打包情况下</span></p></div><p id="u07af8264" class="ne-p"><span class="ne-text">直接导入ts文件，在ts文件中做变量导出，</span></p><p id="udf2d3f0f" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1661412605610-41df1509-a29d-413c-b416-35df368c1ea1.png" width="299" id="CCoRo" class="ne-image"></p><h3 id="hGeeF"><span class="ne-text">v-if/else branches must use unique keys.vue(29)</span></h3><ul class="ne-ul"><li id="u461d521b"><span class="ne-text">官方解释：</span><a href="https://github.com/vuejs/core/issues/1712#issuecomment-665206103" data-href="https://github.com/vuejs/core/issues/1712#issuecomment-665206103" target="_blank" class="ne-link"><span class="ne-text">https://github.com/vuejs/core/issues/1712#issuecomment-665206103</span></a></li><li id="ub105d81b"><span class="ne-text">解决参考：</span><a href="https://blog.csdn.net/Fine_Cui/article/details/124906140" data-href="https://blog.csdn.net/Fine_Cui/article/details/124906140" target="_blank" class="ne-link"><span class="ne-text">https://blog.csdn.net/Fine_Cui/article/details/124906140</span></a></li></ul><pre><code class="vue">&lt;template v-for=&quot;(item, index) in fileList&quot;&gt;  &lt;a-menu-divider v-if=&quot;item.isDivider&quot; :key=&quot;index&quot; /&gt;  &lt;a-menu-item    v-else    :key=&quot;item.value&quot;    class=&quot;create-button-menu-item&quot;    @click=&quot;handleMenuClick(item.value)&quot;  &gt;</code></pre><p id="u083015aa" class="ne-p"><span class="ne-text">将第五行代码中的index换成item.value，一是因为index在这里并没有传值的实际作用，而是解决key值相同问题</span></p><h3 id="R4NI3"><span class="ne-text">具名插槽</span></h3><ul class="ne-ul"><li id="u256fd8ea"><span class="ne-text">vue3插槽使用方式和vue2不一样，不能使用template，而是slot标签，name属性</span></li><li id="u405399c1"><span class="ne-text">具名插槽在vue2和vue3两者使用有差别</span></li></ul><p id="u14e51d6f" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1661134037087-4a944237-fc24-4400-a575-94a6d16c45e9.png" width="362" id="u1dba96bd" class="ne-image"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1661134050262-d9d14d5e-0a75-4653-aada-bc4ed4ed049e.png" width="470" id="u57e5a561" class="ne-image"></p><h3 id="Dtowl"><span class="ne-text">注释导致页面不能渲染</span></h3><p id="ud619e2be" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1661131638426-cfc30116-2d9a-48bd-a012-4e35ba5e05b0.png" width="819" id="u65bae636" class="ne-image"></p><p id="u61297059" class="ne-p"><span class="ne-text">上述箭头所标注的地方不要有注释，有注释会渲染不出来</span></p><h3 id="lByqY"><span class="ne-text">样式只在当前页面有效</span></h3><p id="u9daaaa0e" class="ne-p"><span class="ne-text">组件中style标签后面加上</span><code class="ne-code"><span class="ne-text">scoped</span></code><span class="ne-text">就可以</span></p><pre><code class="vue">&lt;style lang=&quot;less&quot; scoped&gt;&lt;/style&gt;</code></pre><h3 id="NWJql"><span class="ne-text">vue2获取dom节点自定义属性值</span></h3><p id="u8c71347d" class="ne-p"><a href="https://blog.csdn.net/qq_41854017/article/details/79653096" data-href="https://blog.csdn.net/qq_41854017/article/details/79653096" class="ne-link"><span class="ne-text">vue如何获取自定义元素属性参数值_lotSeed_5的博客-CSDN博客_vue获取元素的属性值</span></a></p><h3 id="O8eIn"><span class="ne-text">根据dom属性来动态改变css</span></h3><p id="u10c84f23" class="ne-p"><span class="ne-text">当给dom添加自定义属性，vue2和vue3实际渲染出来的不一样（如果是标签自身属性，vue3和vue2是一样的）</span></p><ul class="ne-ul"><li id="uaf70c49a"><span class="ne-text">vue3</span></li></ul><pre><code class="vue">&lt;div :selected=&quot;true&quot;&gt;selected&lt;/div&gt;&lt;div :selected=&quot;false&quot;&gt;UnSlected&lt;/div&gt;</code></pre><p id="u188abf3d" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/webp/1484158/1662269390565-52d14982-b80a-441f-8c6c-db04807b1cf0.webp" width="301" id="u9cb11d77" class="ne-image"></p><ul class="ne-ul"><li id="ucd66fee6"><span class="ne-text">vue2</span></li></ul><pre><code class="vue">&lt;div :selected=&quot;true&quot;&gt;selected&lt;/div&gt;&lt;div :selected=&quot;false&quot;&gt;UnSlected&lt;/div&gt;</code></pre><p id="u74d0c552" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/webp/1484158/1662269414261-8fcbcd09-3ca9-4d1c-b4d1-9e04602285d3.webp" width="251" id="u7e5c48ec" class="ne-image"></p><ul class="ne-ul"><li id="u71487448"><span class="ne-text">根据以上不同，在css选择器使用有区别</span></li><li id="ua4cc1f9a"><span class="ne-text">vue3</span></li></ul><pre><code class="vue">//  vue3div[selected=true] &#123;  color: red;&#125;</code></pre><ul class="ne-ul"><li id="u0822b525"><span class="ne-text">vue2</span></li></ul><pre><code class="vue">// vue2div[selected] &#123;    color: red;&#125;</code></pre><h2 id="yT5Qx"><span class="ne-text">参考</span></h2><ul class="ne-ul"><li id="u9b3ec81f"><a href="https://segmentfault.com/a/1190000041849882" data-href="https://segmentfault.com/a/1190000041849882" target="_blank" class="ne-link"><span class="ne-text">Vue3.2 setup语法糖总结</span></a></li></ul></div>]]></content:encoded>
      
      
      <category domain="https://www.wztlink1013.com/categories/Web%E5%BC%80%E5%8F%91/">Web开发</category>
      
      <category domain="https://www.wztlink1013.com/categories/Web%E5%BC%80%E5%8F%91/Vue/">Vue</category>
      
      
      
      <comments>https://www.wztlink1013.com/blog/wg5n0g/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Vue3实现一个类微信聊天界面</title>
      <link>https://www.wztlink1013.com/blog/yx51zf/</link>
      <guid>https://www.wztlink1013.com/blog/yx51zf/</guid>
      <pubDate>Sat, 09 Jul 2022 23:30:49 GMT</pubDate>
      
        
        
          
          
      <description>&lt;!doctype html&gt;&lt;div class=&quot;lake-content&quot; typography=&quot;classic&quot;&gt;&lt;ul class=&quot;ne-ul&quot;&gt;&lt;li id=&quot;u2703b449&quot;&gt;&lt;span</description>
          
        
      
      
      
      <content:encoded><![CDATA[<!doctype html><div class="lake-content" typography="classic"><ul class="ne-ul"><li id="u2703b449"><span class="ne-text">编写一个类微信聊天界面要求除了常规功能外，顶部有一个系统状态栏，显示当前时间，精确到秒</span></li></ul><ul class="ne-ul"><li id="u8dda41c6"><span class="ne-text" style="color: rgb(36, 41, 47); font-size: 14px">其中icon使用了</span><a href="http://www.fontawesome.com.cn/get-started/" data-href="http://www.fontawesome.com.cn/get-started/" target="_blank" class="ne-link"><span class="ne-text">http://www.fontawesome.com.cn/get-started/</span></a><span class="ne-text" style="color: rgb(36, 41, 47); font-size: 14px"> UI库（下图未放icon）</span></li></ul><p id="u3dc031bb" class="ne-p" style="text-align: center"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1658750105722-3d6a1954-d707-48bd-8fe4-377aefe9fba7.png" width="407.99310302734375" id="u144640ca" class="ne-image"></p><p id="u1119cc0b" class="ne-p"><span class="ne-text" style="color: rgb(36, 41, 47); font-size: 14px"></span></p><pre><code class="vue">&lt;template&gt;    &lt;div class=&quot;box&quot;&gt;        &lt;div class=&quot;header&quot;&gt;            &lt;div class=&quot;status&quot;&gt;                &lt;span&gt;                    &lt;i class=&quot;fa fa-wifi&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;                &lt;/span&gt;                &lt;span style=&quot;float: right&quot;&gt;                    &lt;i class=&quot;fa fa-battery-quarter&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;                    &#123;&#123;timer&#125;&#125;                &lt;/span&gt;            &lt;/div&gt;            &lt;div class=&quot;info&quot;&gt;                &lt;span style=&quot;float: left;margin-left: 5px;&quot;&gt;                    &lt;i class=&quot;fa fa-chevron-left&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;                &lt;/span&gt;                &lt;span&gt;群聊1&lt;/span&gt;                &lt;span style=&quot;float: right;margin-right: 5px;&quot;&gt;                    &lt;i class=&quot;fa fa-ellipsis-h&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;                &lt;/span&gt;            &lt;/div&gt;        &lt;/div&gt;        &lt;div class=&quot;content&quot;&gt;            &lt;div v-for=&quot;item, index in news_items&quot; class=&quot;new_box&quot;&gt;                &lt;div v-if=&quot;item.isMe === true&quot; style=&quot;width: 100%;text-align: right;&quot;&gt;                    &lt;div style=&quot;display: inline-block;margin-left: 10px&quot;&gt;                        &lt;div class=&quot;new_box_detail&quot;&gt;&#123;&#123;item.content&#125;&#125;&lt;/div&gt;                    &lt;/div&gt;                    &lt;img :src=&#39;item.avatar&#39; alt=&quot;&quot;&gt;                &lt;/div&gt;                &lt;div v-if=&quot;item.isMe === false&quot;&gt;                    &lt;img :src=&#39;item.avatar&#39; alt=&quot;&quot;&gt;                    &lt;div style=&quot;display: inline-block;margin-left: 10px;&quot;&gt;                        &lt;span&gt;&#123;&#123;item.name&#125;&#125;&lt;/span&gt;                        &lt;br&gt;                        &lt;div class=&quot;new_box_detail&quot;&gt;&#123;&#123;item.content&#125;&#125;&lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/div&gt;        &lt;div class=&quot;input_box&quot;&gt;            &lt;i class=&quot;fa fa-commenting fa-2x&quot; aria-hidden=&quot;true&quot; style=&quot;margin: 10px&quot;&gt;&lt;/i&gt;            &lt;span&gt;&lt;input type=&quot;text&quot; name=&quot;input_content&quot; @keyup.enter=&quot;enterKeyDown&quot; v-model=&quot;new_info&quot;&gt;&lt;/span&gt;            &lt;i class=&quot;fa fa-smile-o fa-2x&quot; aria-hidden=&quot;true&quot; style=&quot;margin-left: 10px&quot;&gt;&lt;/i&gt;            &lt;i class=&quot;fa fa-plus-circle fa-2x&quot; aria-hidden=&quot;true&quot;  style=&quot;margin-left: 10px&quot;&gt;&lt;/i&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/template&gt;&lt;script setup lang=&quot;ts&quot;&gt;import &#123; reactive, ref &#125; from &#39;vue&#39;interface NewsItemsInterface &#123;  id: number  avatar: string  isMe: boolean  content: string  name: string&#125;let news_items: NewsItemsInterface[] = reactive([  &#123;    id: 1,    avatar: &#39;https://npm.elemecdn.com/cdn-pictures@0.0.0/avatar/pic/MilkTea.png&#39;,    content: &#39;用户1消息&#39;,    name: &#39;小王&#39;,    isMe: false  &#125;,  &#123;    id: 2,    avatar: &#39;https://npm.elemecdn.com/cdn-pictures@0.0.0/avatar/pic/MilkTea.png&#39;,    content: &#39;我的消息&#39;,    name: &#39;小吴&#39;,    isMe: true  &#125;,  &#123;    id: 3,    avatar: &#39;https://npm.elemecdn.com/cdn-pictures@0.0.0/avatar/pic/MilkTea.png&#39;,    content: &#39;用户2消息用户2消息用户2消息&#39;,    name: &#39;小李&#39;,    isMe: false  &#125;,])let timer = ref(&#39;&#39;)let new_info = ref(&#39;&#39;)const toDateYMDHMS = () =&gt; &#123;  const date = new Date()  const h = date.getHours() &lt; 10 ? `0$&#123;date.getHours()&#125;:` : date.getHours() + &#39;:&#39;  const m = date.getMinutes() &lt; 10 ? `0$&#123;date.getMinutes()&#125;:` : date.getMinutes() + &#39;:&#39;  const s = date.getSeconds() &lt; 10 ? `0$&#123;date.getSeconds()&#125;` : date.getSeconds()  return h + m + s&#125;setInterval(() =&gt; &#123;    timer.value = toDateYMDHMS()&#125;, 1000)const enterKeyDown = () =&gt; &#123;    news_items.push(&#123;        id: 2,        avatar: &#39;https://npm.elemecdn.com/cdn-pictures@0.0.0/avatar/pic/MilkTea.png&#39;,        content: new_info.value,        name: &#39;小吴&#39;,        isMe: true    &#125;)    new_info.value = &#39;&#39;&#125;&lt;/script&gt;&lt;style scoped&gt;.box &#123;    margin: 0 auto;    height: 100%;    width: 60vw;    border: 1px rgb(0, 0, 0) solid;&#125;/* ------------------------------------------------------------------------- */.header &#123;    height: 80px;    /* border: 1px cyan solid; */    background-color: rgb(231, 231, 231);&#125;.header .status &#123;    height: 30px;    line-height: 30px;    vertical-align: middle;&#125;.header .info &#123;    height: 50px;    line-height: 50px;    text-align: center;&#125;/* ------------------------------------------------------------------------- */.content &#123;    /* border: 1px red solid; */    background-color: rgb(164, 201, 201);    height: 75vh&#125;.content .new_box img &#123;    width: 30px;&#125;.content .new_box_detail &#123;    background-color: rgb(255, 255, 255);    padding: 5px;&#125;/* ------------------------------------------------------------------------- */.input_box &#123;    /* border: 1px blueviolet solid; */    height: 60px;    line-height: 60px;    background-color: rgb(231, 231, 231);&#125;.input_box input &#123;    width: 70%;    border: none;    outline: none;    height: 60%;&#125;.input_box input:focus &#123;    outline: none;&#125;&lt;/style&gt;</code></pre><p id="u02ce1c89" class="ne-p"><br></p></div>]]></content:encoded>
      
      
      <category domain="https://www.wztlink1013.com/categories/Web%E5%BC%80%E5%8F%91/">Web开发</category>
      
      <category domain="https://www.wztlink1013.com/categories/Web%E5%BC%80%E5%8F%91/Vue/">Vue</category>
      
      
      
      <comments>https://www.wztlink1013.com/blog/yx51zf/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Vue3实现一个ButtonGroup组件</title>
      <link>https://www.wztlink1013.com/blog/he31vw/</link>
      <guid>https://www.wztlink1013.com/blog/he31vw/</guid>
      <pubDate>Sat, 09 Jul 2022 23:29:33 GMT</pubDate>
      
        
        
          
          
      <description>&lt;!doctype html&gt;&lt;div class=&quot;lake-content&quot; typography=&quot;classic&quot;&gt;&lt;p id=&quot;u2eccf227&quot; class=&quot;ne-p&quot;&gt;&lt;span class=&quot;ne-text&quot;&gt;编写一个ButtonGroup组件要求支持</description>
          
        
      
      
      
      <content:encoded><![CDATA[<!doctype html><div class="lake-content" typography="classic"><p id="u2eccf227" class="ne-p"><span class="ne-text">编写一个ButtonGroup组件要求支持 单选、多选</span></p><p id="ud689e7b4" class="ne-p" style="text-align: center"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1658749703167-7b9db556-0f22-411b-8adb-8289b5725b76.png" width="607.4074503162137" id="u4982b92e" class="ne-image"></p><p id="u04fd3e7b" class="ne-p"><span class="ne-text"></span></p><pre><code class="vue">&lt;template&gt;&lt;div style=&quot;text-align: center&quot;&gt;  &lt;div&gt;    &lt;p&gt;选择butonGroup的单选/多选类型：&lt;/p&gt;    &lt;label&gt;单选&lt;input type=&quot;radio&quot; v-model=&quot;gender&quot; value=&quot;single&quot; @click=&quot;clickSingleMulti&quot;/&gt;&lt;/label&gt;    &lt;label&gt;多选&lt;input type=&quot;radio&quot; v-model=&quot;gender&quot; value=&quot;multi&quot; @click=&quot;clickSingleMulti&quot; /&gt;&lt;/label&gt;    &lt;p&gt;已选类型：&#123;&#123;gender === 'single' ? '单选' : gender === 'multi' ? '多选' : ''&#125;&#125;&lt;/p&gt;  &lt;/div&gt;  &lt;hr&gt;  &lt;div v-for=&quot;item, index in button_items&quot;&gt;    &lt;button @click=&quot;clickFun(item, $event)&quot; :selected=&#39;item.select&#39; :disabled=&quot;gender === &#39;&#39;&quot;&gt;      &#123;&#123;item.title&#125;&#125;    &lt;/button&gt;  &lt;/div&gt;&lt;/div&gt;&lt;/template&gt;&lt;script setup lang=&quot;ts&quot;&gt;import &#123; reactive, ref &#125; from &#39;vue&#39;interface ButtonItemsInterface &#123;  id: number  title: string  select: boolean&#125;let button_items: ButtonItemsInterface[] = reactive([  &#123;    id: 1,    title: &#39;选项1&#39;,    select: false  &#125;,  &#123;    id: 2,    title: &#39;选项2&#39;,    select: false  &#125;,  &#123;    id: 3,    title: &#39;选项3&#39;,    select: false  &#125;,])let result: any[] = reactive([])let gender = ref(&#39;&#39;)// 置空函数，当切换单选多选，置空result数组const clickSingleMulti = () =&gt; &#123;  result = []&#125;const clickFun = (item: any, e: any) =&gt; &#123;  if (gender.value === &#39;multi&#39;) &#123;        if (e.target.getAttribute(&#39;selected&#39;) === &#39;true&#39;) &#123;        // 被选中        let index = result.indexOf(item.id)        if (index &gt; -1) &#123;            result.splice(index,1);        &#125;    &#125; else &#123;        // 未被选中        result.push(item.id)    &#125;    item.select = !item.select    console.log(&#39;单选选择的结果：&#39;, result)  &#125; else &#123;    result = []    result.push(item.id)    console.log(&#39;多选选择的结果：&#39;, result)  &#125;&#125;&lt;/script&gt;&lt;style scoped&gt;button[selected=true] &#123;    color: red;&#125;&lt;/style&gt;</code></pre></div>]]></content:encoded>
      
      
      <category domain="https://www.wztlink1013.com/categories/Web%E5%BC%80%E5%8F%91/">Web开发</category>
      
      <category domain="https://www.wztlink1013.com/categories/Web%E5%BC%80%E5%8F%91/Vue/">Vue</category>
      
      
      
      <comments>https://www.wztlink1013.com/blog/he31vw/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
