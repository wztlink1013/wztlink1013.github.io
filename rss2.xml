<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/css" href="/public/css/rss.css" ?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title><![CDATA[尼采般地抒情]]></title>
    <link>https://www.wztlink1013.com/</link>
    <script xmlns="http://www.w3.org/1999/xhtml" src="/public/js/rss.js"></script>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    <description><![CDATA[什么都无法舍弃，什么也改变不了]]></description>
    <pubDate>Wed Feb 10 2021 16:04:28 GMT+0000 (Coordinated Universal Time)</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title><![CDATA[RSA公钥密码算法]]></title>
      <link>https://www.wztlink1013.com/blog/ccd10c/</link>
      <guid>https://www.wztlink1013.com/blog/ccd10c/</guid>
      <pubDate>Wed Feb 10 2021 07:21:00 GMT+0000 (Coordinated Universal Time)</pubDate>
      <description>
      <![CDATA[RSA公钥密码算法]]>
      
      </description>
      <content:encoded><![CDATA[<blockquote>
<p>最近利用自己曾经写过的一篇文章『<a href="https://www.wztlink1013.com/blog/bw80k6/">https://www.wztlink1013.com/blog/bw80k6/</a>』（利用一次抓包来复习学习过的计网知识）</p>
</blockquote>
<p>在分析 HTTPS 和 HTTP 这两个协议之间的区别的时候，我感觉 HTTPS 的 SSL(Secure Sockets Layer 安全套接字协议)证书很类似之前老师讲过的 RSA 算法，做此篇文章复习下 RSA 算法和加深 HTTPS 的理解。</p>
<p>在密码学当中，由对称密钥和非对称密钥之分。</p>
<h2 id="对称密钥"><a href="#对称密钥" class="headerlink" title="对称密钥"></a>对称密钥</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612943343546-b8330998-9019-40a1-9759-12b459d5379b.png#align=left&amp;display=inline&amp;height=345&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=690&amp;originWidth=982&amp;size=266245&amp;status=done&amp;style=stroke&amp;width=491" alt="image.png"><br>用一个简单的凯撒密码例子来讲解一下对称密钥：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612943823633-5283daed-a125-46fd-a785-93851daf5269.png#align=left&amp;display=inline&amp;height=325&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=650&amp;originWidth=957&amp;size=205858&amp;status=done&amp;style=stroke&amp;width=478.5" alt="image.png"><br>上图是凯撒密码的定义，先说一下怎么用：</p>
<p>假如张三和李四两个人之间需要传输一段密码 apple，他们之间共同约定使用密钥-3（再上图表示就为 e 字母编程 b 字母了，以此类推），而这个算法是基于<a href="https://zh.wikipedia.org/wiki/%E6%A8%A1%E9%99%A4" target="_blank" rel="noopener">mod 运算</a>（在这里看成是一种加密/解密机制）的。</p>
<p>张三利用 mod 运算加密机制（mod 运算）将 apple 转换位 xmmfb<br>李四利用 mod 运算解密机制（mod 运算）将 xmmfb 转换位 apple</p>
<blockquote>
<p>a 为什么到 x：（0-3）mod26 可以看成（23-26）mod26=23，所以 a 往后退三位还是 x</p>
</blockquote>
<p>上述例子的加密机制和解密机制算法一样（mod 运算），实际上也可以不一样，不做详述。但是可以说名对称加密的密钥都一样，该例子中表现为-3</p>
<h2 id="RSA-公钥密码算法"><a href="#RSA-公钥密码算法" class="headerlink" title="RSA 公钥密码算法"></a>RSA 公钥密码算法</h2><p>RSA 公钥密码算法是非对称加密。</p>
<p>先说一下和上面的对称密钥的不同，很简单，不同之处就是对称密钥只有一个密钥，而非对称密钥有两个（我觉得严谨来说可以有多个，但在这里先局限地说有两个），而且一个叫公钥，一个叫密钥。</p>
<p>还是上面的张三李四例子，就相当于张三这次用公钥来加密 apple 这个单词，加密成一段密文，这段密文<strong>只能由密钥来解密</strong>，即便是你有了公钥，也不能将其解密。</p>
<p>然后来抛出几个问题来分析之：</p>
<blockquote>
<p>【Q1】公钥和密钥怎么来规定呢？我要是一个网络攻击者，我利用公钥来推理出密钥，那我岂不是直接解密了？！</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612945567958-1cd39a87-ba61-4dd8-955e-1a4fc130378d.png#align=left&amp;display=inline&amp;height=290&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=579&amp;originWidth=474&amp;size=117414&amp;status=done&amp;style=stroke&amp;width=237" alt="image.png"><br>具体的相关 mod 运算在此不做详述</p>
<blockquote>
<p>【Q2】算法可靠与否</p>
</blockquote>
<p>为了保证严谨，同时也证明了这种算法的</p>
<ul>
<li>可行性，所计算出来的算法复杂度最高是 4 次方，对计算机而言，可计算</li>
<li>不可攻破，在学界，大数因子分解不可行，或者说，如今的科技还不能轻易的破解</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612945767363-ee62dad7-357d-42d3-a932-78cc10d29866.png#align=left&amp;display=inline&amp;height=337&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=674&amp;originWidth=985&amp;size=269673&amp;status=done&amp;style=stroke&amp;width=492.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612945781929-bea0946c-3f24-472d-a4d4-3c40abd83ee3.png#align=left&amp;display=inline&amp;height=244&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=487&amp;originWidth=987&amp;size=177512&amp;status=done&amp;style=stroke&amp;width=493.5" alt="image.png"></p>
]]></content:encoded>
      <comments>https://www.wztlink1013.com/blog/ccd10c/#comments</comments>
    </item>
    
    <item>
      <title><![CDATA[HTTPS较HTTP安全在哪？]]></title>
      <link>https://www.wztlink1013.com/blog/pl8gro/</link>
      <guid>https://www.wztlink1013.com/blog/pl8gro/</guid>
      <pubDate>Wed Feb 10 2021 07:15:00 GMT+0000 (Coordinated Universal Time)</pubDate>
      <description>
      <![CDATA[HTTPS较HTTP安全在哪？]]>
      
      </description>
      <content:encoded><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612949716697-1ceb6a5c-fa5e-4129-9c0a-63e01ce75057.png#align=left&amp;display=inline&amp;height=51&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=56&amp;originWidth=615&amp;size=6666&amp;status=done&amp;style=shadow&amp;width=564" alt="image.png"></p>
<h2 id="HTTPS-的精妙之处"><a href="#HTTPS-的精妙之处" class="headerlink" title="HTTPS 的精妙之处"></a>HTTPS 的精妙之处</h2><p>在我写的算法相关文章里面，有一篇 RSA 相关的文章<a href="https://www.wztlink1013.com/blog/ccd10c/">https://www.wztlink1013.com/blog/ccd10c/</a>，里面解释了对称加密和的非对称加密</p>
<p>我觉得 HTTPS 的精妙之处就是在于它同时运用了<strong>对称加密（AES）</strong>和<strong>非对称加密（RSA）</strong>两种加密，下面我解释一下：</p>
<h2 id="HTTP-为何安全？"><a href="#HTTP-为何安全？" class="headerlink" title="HTTP 为何安全？"></a>HTTP 为何安全？</h2><p>客户端对服务端做出请求，然后服务端做出响应，这个大家都知道，但是 HTTP 是明文传输，我在<a href="https://www.wztlink1013.com/blog/bw80k6/">https://www.wztlink1013.com/blog/bw80k6/</a>这篇文章里面也详细抓包展示了 HTTP 的明文传输<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612946821326-d568e02e-1173-4af4-93c5-539275023ba3.png#align=left&amp;display=inline&amp;height=282&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=563&amp;originWidth=1544&amp;size=287151&amp;status=done&amp;style=stroke&amp;width=772" alt="image.png"><br>这样传输的信息就不安全，攻击者就能轻易得到，进一步讲，得到了就不安全吗？</p>
<ul>
<li>因为假如此时服务端响应给客户端的是很重要的诸如密码或者个人信息之类的敏感信息，就会被窃听</li>
<li>中途截取，将所传输的信息不完整等等</li>
</ul>
<h2 id="HTTPS-安全在哪？精妙之处！"><a href="#HTTPS-安全在哪？精妙之处！" class="headerlink" title="HTTPS 安全在哪？精妙之处！"></a>HTTPS 安全在哪？精妙之处！</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612947167321-69c11c8d-9f8d-4f78-80a9-b2ee1c02e6b8.png#align=left&amp;display=inline&amp;height=259&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=517&amp;originWidth=992&amp;size=373859&amp;status=done&amp;style=stroke&amp;width=496" alt="image.png"><br>由上图所示，HTTPS 的协议栈相较 HTTP 协议栈多了安全层，也就是 SSL(安全套接层)或者 TSL(安全传输层)协议</p>
<ol>
<li><p>客户端向服务端发出一个 https 请求，其中端口位 443</p>
<blockquote>
<p>说明：采用 https 的网站都会有相应的 ssl 证书，在服务器那里，这个证书内容就是颁发的机构、到期时间……，而这个证书的形式就是以公钥的形式存在于服务器的。</p>
</blockquote>
</li>
<li><p>服务端响应给客户端这个证书（公钥的形式）</p>
</li>
<li>客户端解析响应来的公钥，因为需要验证这个 ssl 是不是伪造的还是过期了等等，假如验证不成功，就会如下：</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612948950125-219e56dd-b6cd-4245-8aa5-44ad8e6e381c.png#align=left&amp;display=inline&amp;height=38&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=75&amp;originWidth=605&amp;size=7708&amp;status=done&amp;style=stroke&amp;width=302.5" alt="image.png"></p>
<ol start="4">
<li>然后客户端（浏览器）利用这个公钥随机得出的私钥，然后将这个私钥发给服务端，以后客户端和服务端就可以利用这个密钥来解密双方传来传去的加密信息了<blockquote>
<p>说明：随机的出的私钥并不是那么“随机”，因为要保证不可攻破性，具体可以看我的 RSA 算法相关文章</p>
</blockquote>
</li>
</ol>
<hr>
<ol start="5">
<li>服务端将要展示给客户端的具体信息利用上述私钥来加密</li>
<li>客户端接收到服务端发过来的加密信息，用共同都有的私钥解密查看之<blockquote>
<p>整个过程对外人而言看到的都是加密后的信息，而不是明文</p>
</blockquote>
</li>
</ol>
<p>综上，56 条是采用了 AES 对称加密，而前面是利用 RSA 算法得到私钥</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li>这位博主（数据中心网络工程师）将 SSL 讲解的更加细致，可以常看：<a href="https://cshihong.github.io/2019/05/09/SSL%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener">SSL/TLS 协议详解</a></li>
</ul>
]]></content:encoded>
      <comments>https://www.wztlink1013.com/blog/pl8gro/#comments</comments>
    </item>
    
    <item>
      <title><![CDATA[IDEA环境下的Web开发bug汇总]]></title>
      <link>https://www.wztlink1013.com/blog/aiuif3/</link>
      <guid>https://www.wztlink1013.com/blog/aiuif3/</guid>
      <pubDate>Mon Feb 08 2021 00:21:00 GMT+0000 (Coordinated Universal Time)</pubDate>
      <description>
      <![CDATA[IDEA环境下的Web开发bug汇总]]>
      
      </description>
      <content:encoded><![CDATA[<h2 id="Unsupported-major-minor-version-52-0"><a href="#Unsupported-major-minor-version-52-0" class="headerlink" title="Unsupported major.minor version 52.0"></a>Unsupported major.minor version 52.0</h2><blockquote>
<p>版本过低</p>
</blockquote>
<pre><code class="java">[2021-02-07 08:25:52,537] Artifact javaweb-blog:war exploded: Error during artifact deployment. See server log for details.
</code></pre>
<pre><code class="java"> java.lang.UnsupportedClassVersionError: com/nic/filter/AdminFilter : Unsupported major.minor version 52.0 (unable to load class com.nic.filter.AdminFilter)
</code></pre>
<p>一直报错，网上找一直是说和 jdk 的版本有关，但是 jdk 的版本尝试更换几个都无效。事实上是 Tomcat 的版本问题，项目开始用的是 Tomcat8.1 升级至 8.5.34 即可（升级 Tomcat9 可以否？会对下兼容吗？trytry）</p>
<h2 id="org-apache-tomcat-util-descriptor-web-WebXml-setVersion-Unknown-version-string-4-0"><a href="#org-apache-tomcat-util-descriptor-web-WebXml-setVersion-Unknown-version-string-4-0" class="headerlink" title="org.apache.tomcat.util.descriptor.web.WebXml.setVersion Unknown version string [4.0]"></a>org.apache.tomcat.util.descriptor.web.WebXml.setVersion Unknown version string [4.0]</h2><blockquote>
<p>warning：4.0 太高</p>
</blockquote>
<pre><code class="java">org.apache.tomcat.util.descriptor.web.WebXml.setVersion Unknown version string [4.0]
</code></pre>
<ul>
<li>解决：<a href="https://blog.csdn.net/qq_32483145/article/details/80292463" target="_blank" rel="noopener">https://blog.csdn.net/qq_32483145/article/details/80292463</a></li>
</ul>
<h2 id="用到-servlet-的页面跳转-404"><a href="#用到-servlet-的页面跳转-404" class="headerlink" title="用到 servlet 的页面跳转 404"></a>用到 servlet 的页面跳转 404</h2><h3 id="web-xml-配置有误"><a href="#web-xml-配置有误" class="headerlink" title="web.xml 配置有误"></a>web.xml 配置有误</h3><p>页面能访问，也成功部署到 tomcat 下面的 weapps 文件夹下面，但是在进行页面跳转的过程中，会出现下面的 404 情况。分析之后是我这个项目是新建的一个空项目，然后代码是之前在 eclipse 下运行过的，而后直接将内容代码复制过来，却没复制 web.xml，导致现项目的 web.xml 是“空的”，无配置。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612753264339-b79c791c-6814-4c38-b42d-6b85bb9c1d5f.png#align=left&amp;display=inline&amp;height=144&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=288&amp;originWidth=1920&amp;size=37994&amp;status=done&amp;style=none&amp;width=960" alt="image.png"></p>
<h3 id="Tomcat-路径配置有误"><a href="#Tomcat-路径配置有误" class="headerlink" title="Tomcat 路径配置有误"></a>Tomcat 路径配置有误</h3><p>还有一种情况，就是 tomcat 配置过程中的那两个路径也要注意下<br>调整为如下配置，不然会出现访问/jsp-peojectname/jsp-peojectname/index.jsp 页面为 404 的情况<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612756924057-55c60ad3-85b8-4cf0-aa9d-6184bfbd296e.png#align=left&amp;display=inline&amp;height=78&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=156&amp;originWidth=1611&amp;size=17507&amp;status=done&amp;style=none&amp;width=805.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612756936656-72d837f5-46ef-4d35-8e39-e49d2c6f077d.png#align=left&amp;display=inline&amp;height=97&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=194&amp;originWidth=1611&amp;size=12795&amp;status=done&amp;style=none&amp;width=805.5" alt="image.png"></p>
<h3 id="其他类型错误"><a href="#其他类型错误" class="headerlink" title="其他类型错误"></a>其他类型错误</h3><p>可能还有其他类型错误，参考以下的总结</p>
<ul>
<li><a href="https://blog.csdn.net/DBC_121/article/details/79204340" target="_blank" rel="noopener">Web 开发：关于 Tomcat 出现 The origin server did not find a current representation for the target resourc…的问题</a></li>
</ul>
<h2 id="数据库报错"><a href="#数据库报错" class="headerlink" title="数据库报错"></a>数据库报错</h2><p>navicat 也不能查看该数据库</p>
<pre><code class="java">HTTP Status 500 – Internal Server Error
Type Exception Report

Message get connection error!

Description The server encountered an unexpected condition that prevented it from fulfilling the request.

Exception

java.lang.RuntimeException: get connection error!
    com.nic.util.JdbcUtil.getConnection(JdbcUtil.java:55)
    com.nic.dao.ArticleDao.findArticle(ArticleDao.java:56)
    com.nic.service.ArticleService.findArticle(ArticleService.java:20)
    com.nic.servlet.PostlistServlet.doGet(PostlistServlet.java:50)
    javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
    javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
    org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
Root Cause

java.lang.ClassNotFoundException: com.mysql.jdbc.Driver
    org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1309)
    org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1137)
    java.lang.Class.forName0(Native Method)
    java.lang.Class.forName(Class.java:264)
    com.nic.util.JdbcUtil.getConnection(JdbcUtil.java:52)
    com.nic.dao.ArticleDao.findArticle(ArticleDao.java:56)
    com.nic.service.ArticleService.findArticle(ArticleService.java:20)
    com.nic.servlet.PostlistServlet.doGet(PostlistServlet.java:50)
    javax.servlet.http.HttpServlet.service(HttpServlet.java:635)
    javax.servlet.http.HttpServlet.service(HttpServlet.java:742)
    org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
Note The full stack trace of the root cause is available in the server logs.

Apache Tomcat/8.5.34
</code></pre>
<p>初步分析是用的 phpstudy 里面的 mysql 数据库不能生效，删除电脑之前的 mysql，用 phpstudy 数据库恢复</p>
<hr>
<p>但是还会报错，判断应该是代码文件出错【不过不用将这个 jar 包导入到 lib 文件夹下（反而会报错），只需要将其导入到 tomcat 文件夹下的 lib 文件夹，即可】<br><a href="https://www.yuque.com/attachments/yuque/0/2021/jar/1484158/1612768356808-4c69cbaa-cbc7-4ebe-9232-423cad8ef54f.jar?_lake_card=%7B%22uid%22%3A%221612761483730-0%22%2C%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2021%2Fjar%2F1484158%2F1612768356808-4c69cbaa-cbc7-4ebe-9232-423cad8ef54f.jar%22%2C%22name%22%3A%22mysql-connector-java-5.1.49.jar%22%2C%22size%22%3A1006904%2C%22type%22%3A%22%22%2C%22ext%22%3A%22jar%22%2C%22progress%22%3A%7B%22percent%22%3A99%7D%2C%22status%22%3A%22done%22%2C%22percent%22%3A0%2C%22id%22%3A%22xrOhc%22%2C%22refSrc%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2021%2Fjar%2F1484158%2F1612761486309-2d90c3e5-5a0c-4b57-95f5-5551ed944a23.jar%22%2C%22card%22%3A%22file%22%7D" target="_blank" rel="noopener">mysql-connector-java-5.1.49.jar</a>（或者直接上网搜再下载）<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612756117413-4649efa1-9274-4ae5-aa1a-463750acd571.png#align=left&amp;display=inline&amp;height=332&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=663&amp;originWidth=1291&amp;size=105075&amp;status=done&amp;style=shadow&amp;width=645.5" alt="image.png">~~</p>
]]></content:encoded>
      <comments>https://www.wztlink1013.com/blog/aiuif3/#comments</comments>
    </item>
    
    <item>
      <title><![CDATA[IDEA创建javaWeb项目]]></title>
      <link>https://www.wztlink1013.com/blog/qi1ddv/</link>
      <guid>https://www.wztlink1013.com/blog/qi1ddv/</guid>
      <pubDate>Sun Feb 07 2021 09:21:00 GMT+0000 (Coordinated Universal Time)</pubDate>
      <description>
      <![CDATA[IDEA创建javaWeb项目]]>
      
      </description>
      <content:encoded><![CDATA[<h2 id="一、Tomcat-下载"><a href="#一、Tomcat-下载" class="headerlink" title="一、Tomcat 下载"></a>一、Tomcat 下载</h2><h3 id="1-下载并安装"><a href="#1-下载并安装" class="headerlink" title="1. 下载并安装"></a>1. 下载并安装</h3><blockquote>
<p>假如不是集成开发环境（比如 phpstudy），电脑要有 jdk 环境</p>
</blockquote>
<p>【1】官网下载：<a href="http://tomcat.apache.org/" target="_blank" rel="noopener">http://tomcat.apache.org/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598787914511-a035ba93-0b7a-450b-b391-5d1452435ca7.png#align=left&amp;display=inline&amp;height=220&amp;margin=%5Bobject%20Object%5D&amp;originHeight=952&amp;originWidth=1842&amp;size=0&amp;status=done&amp;style=shadow&amp;width=425" alt><br>【2】下载并解压到自己的相应盘区，再检验是否成功<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598787914448-2ef2e1a1-2966-4d35-8bfe-82162aa1588b.png#align=left&amp;display=inline&amp;height=273&amp;margin=%5Bobject%20Object%5D&amp;originHeight=727&amp;originWidth=1147&amp;size=0&amp;status=done&amp;style=shadow&amp;width=431" alt><br>点击第二个框不出现闪退情况则证明成功<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598787914507-87063aec-884a-4180-b124-568478d81bc0.png#align=left&amp;display=inline&amp;height=222&amp;margin=%5Bobject%20Object%5D&amp;originHeight=639&amp;originWidth=1223&amp;size=0&amp;status=done&amp;style=shadow&amp;width=425" alt><br>【3】浏览器进入端口<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a>上述配置成功则表明成功<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598787914624-248148e3-3f5f-45ca-ad93-c063216a7aff.png#align=left&amp;display=inline&amp;height=270&amp;margin=%5Bobject%20Object%5D&amp;originHeight=1030&amp;originWidth=1838&amp;size=0&amp;status=done&amp;style=shadow&amp;width=482" alt></p>
<h3 id="2-过程中可能会出现的问题"><a href="#2-过程中可能会出现的问题" class="headerlink" title="2. 过程中可能会出现的问题"></a>2. 过程中可能会出现的问题</h3><p>【1】点击 startup.bat 文件出现闪退</p>
<blockquote>
<p>电脑中 java jdk 有无（JAVA_HOME）</p>
</blockquote>
<p>【2】端口被占用</p>
<blockquote>
<p>进入 Tomcat 文件夹下的 conf 文件下的 server.xml 文件，用记事本查找 8080，下面复制一个新的初始端口<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1598787914513-8083bc6e-4c6f-436e-b0b0-98d3d70b9dea.png#align=left&amp;display=inline&amp;height=80&amp;margin=%5Bobject%20Object%5D&amp;originHeight=80&amp;originWidth=557&amp;size=0&amp;status=done&amp;style=shadow&amp;width=557" alt></p>
</blockquote>
<h2 id="二、利用-IDEA-创建一个-JavaWeb-项目"><a href="#二、利用-IDEA-创建一个-JavaWeb-项目" class="headerlink" title="二、利用 IDEA 创建一个 JavaWeb 项目"></a>二、利用 IDEA 创建一个 JavaWeb 项目</h2><h3 id="1-创建新项目"><a href="#1-创建新项目" class="headerlink" title="1. 创建新项目"></a>1. 创建新项目</h3><p>依次点击：<code>File</code>-&gt; <code>New</code>-&gt; <code>Project</code><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612697874347-fef7ad38-7ff2-4567-89a9-f5d47a1f4824.png#align=left&amp;display=inline&amp;height=316&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=812&amp;originWidth=1202&amp;size=104672&amp;status=done&amp;style=none&amp;width=468" alt="image.png"></p>
<h3 id="2-项目工程配置"><a href="#2-项目工程配置" class="headerlink" title="2. 项目工程配置"></a>2. 项目工程配置</h3><p>【1】在<code>WEB-INF</code>下创建两个空文件夹 <code>classes</code> <code>lib</code></p>
<blockquote>
<p>目的：</p>
<ul>
<li>classes 文件夹用于存放编译后的 class 文件</li>
<li>lib 文件夹用于存放依赖的 jar 包</li>
</ul>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612697966439-ab639870-61ab-429e-919a-4109c8cefdc5.png#align=left&amp;display=inline&amp;height=237&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=473&amp;originWidth=469&amp;size=29009&amp;status=done&amp;style=none&amp;width=234.5" alt="image.png"><br>【2】依次点击<code>file</code> -&gt; <code>Project Structure</code></p>
<blockquote>
<p>目的：将后面编译的 class 文件默认生成到刚刚新建的 classes 目录下</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612698144393-24e78472-430b-47a4-b423-e091597bb4f3.png#align=left&amp;display=inline&amp;height=364&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=727&amp;originWidth=1535&amp;size=95789&amp;status=done&amp;style=none&amp;width=767.5" alt="image.png"><br>【3】依次点击<code>file</code> -&gt; <code>Project Structure</code></p>
<blockquote>
<p>目的：添加 jar 包依赖<br>（项目所需要的 jar 包都放到刚刚新建的 lib 文件夹）<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612698241583-99ff6441-6e2a-4776-addb-9f8f1eda6636.png#align=left&amp;display=inline&amp;height=268&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=535&amp;originWidth=1274&amp;size=68026&amp;status=done&amp;style=none&amp;width=637" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612698274993-98e1b314-c726-41e6-973e-1dbb07ef7312.png#align=left&amp;display=inline&amp;height=169&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=337&amp;originWidth=546&amp;size=22322&amp;status=done&amp;style=none&amp;width=273" alt="image.png"><br>【4】配置打包方式 Artifacts<br><del>点击 Artifacts 选项卡，IDEA 会为该项目自动创建一个名为“JavaWeb:war exploded”的打包方式，表示 打包成 war 包，并且是文件展开性的，输出路径为当前项目下的 out 文件夹，保持默认即可。另外勾选下“Build on make”，表示编译的时候就打包部署，勾选“Show content of elements”，表示显示详细的内容列表。</del></p>
</blockquote>
<p><em>如果按照上面说的，那么会发现发布的项目并没有在 tomcat 目录下的 webapps 目录下，如果项目以前在其他电脑抑或是其他环境下运行过，可能会导致项目的很多子页面默认 URL404。</em><br><del><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612711385355-7645f327-ad5c-40aa-a165-b975f957ebe3.png#align=left&amp;display=inline&amp;height=239&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=479&amp;originWidth=884&amp;size=112691&amp;status=done&amp;style=shadow&amp;width=442" alt="image.png"></del><br>正确解决办法：项目一开始依次点击<code>file</code> -&gt; <code>Project Structure</code></p>
<blockquote>
<p>1 区域：将 output 路径指定到<code>tomcat</code>的<code>webapps</code>下面（新建一个本项目的同名文件夹）<br>2 区域：Output Layout 就是配置这个路径里面生成的所有文件<br>3 区域：将右边的文件内容脱拉到左边的 3 区域即可</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612763067214-29b72122-e8c6-4df1-a112-50ffb6c43084.png#align=left&amp;display=inline&amp;height=327&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=653&amp;originWidth=1535&amp;size=81034&amp;status=done&amp;style=none&amp;width=767.5" alt="image.png"></p>
<h3 id="3-Tomcat-配置"><a href="#3-Tomcat-配置" class="headerlink" title="3. Tomcat 配置"></a>3. Tomcat 配置</h3><p>【1】点击如下位置进入 tomcat 容器编辑板块<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612698536983-4544013a-5e2a-43d7-ae31-7aa5c871fb3a.png#align=left&amp;display=inline&amp;height=151&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=301&amp;originWidth=1920&amp;size=55468&amp;status=done&amp;style=none&amp;width=960" alt="image.png"><br>【2】默认会自动给我们生成一个 Tomcat 容器，基本上只需要配置<code>Deployment</code>即可，如果没有默认生成就新建一个。其中<code>Application server</code>填写本地 tomcat 的安装目录文件夹即可（因为一台电脑开发可能会有多个 tomcat 版本）<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612711521404-673143aa-f3fd-4b37-aed1-919d0ea1de1f.png#align=left&amp;display=inline&amp;height=370&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=740&amp;originWidth=1163&amp;size=152940&amp;status=done&amp;style=none&amp;width=581.5" alt="image.png"></p>
<blockquote>
<p>❗ ❗ ❗ 如果要换不同版本的 tomcat 来运行项目，改如下地方：</p>
<ol>
<li>先将上面图片<code>Application server</code>tomcat 版本更换至新的 tomcat 版本</li>
<li>去<code>2. 项目工程配置</code>步骤中，减去原先的 tomcat，加上新的 tomcat</li>
</ol>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612698612335-158bfcb3-3016-478c-b86a-770ad57ad2a9.png#align=left&amp;display=inline&amp;height=511&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1022&amp;originWidth=1611&amp;size=111169&amp;status=done&amp;style=none&amp;width=805.5" alt="image.png"></p>
<blockquote>
<p>此处的 Application context 是指定本工程的根目录</p>
</blockquote>
<h3 id="4-结果测试"><a href="#4-结果测试" class="headerlink" title="4. 结果测试"></a>4. 结果测试</h3><p>在<code>index.jsp</code>文件下添加显示代码<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612698732177-5bedf912-6a16-47d4-ab96-d5527b9567d1.png#align=left&amp;display=inline&amp;height=271&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=542&amp;originWidth=1879&amp;size=244164&amp;status=done&amp;style=none&amp;width=939.5" alt="image.png"><br>直接运行<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612698844575-2952fffc-3616-43f1-be90-138dbe0df86d.png#align=left&amp;display=inline&amp;height=128&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=256&amp;originWidth=1107&amp;size=40673&amp;status=done&amp;style=shadow&amp;width=553.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612698866551-55b0f5c6-fc7e-423a-8c59-2af2cbe08953.png#align=left&amp;display=inline&amp;height=152&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=303&amp;originWidth=827&amp;size=28375&amp;status=done&amp;style=shadow&amp;width=413.5" alt="image.png"></p>
<blockquote>
<p>如果在 Tomcat 配置过程中的部署路径为 <code>/</code> ，会出现下面第二张图的结果，都能访问，但是最好还是上面的方式，符合服务器“一个文件夹一个站点”的思想，路径访问的相关问题不会挖坑。</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612698976241-4d798089-9581-4cdf-893b-dbbc11b18057.png#align=left&amp;display=inline&amp;height=511&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1022&amp;originWidth=1611&amp;size=101904&amp;status=done&amp;style=none&amp;width=805.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612698989649-0fdabed2-a690-450a-b11f-3900a477a68a.png#align=left&amp;display=inline&amp;height=170&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=340&amp;originWidth=862&amp;size=27789&amp;status=done&amp;style=shadow&amp;width=431" alt="image.png"></p>
<h3 id="❗-JavaWeb-项目结构分析"><a href="#❗-JavaWeb-项目结构分析" class="headerlink" title="❗ JavaWeb 项目结构分析"></a>❗ JavaWeb 项目结构分析</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612752142869-4f7db98f-6d15-4ce5-be4b-1e0e13dcab08.png#align=left&amp;display=inline&amp;height=444&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=888&amp;originWidth=321&amp;size=43193&amp;status=done&amp;style=none&amp;width=160.5" alt="image.png"></p>
<ul>
<li>src 文件夹：编写的 java 代码，编译后会放到 WEB-INF 文件夹下的 classes 文件夹</li>
<li>web 文件夹：web 应用程序的根目录，web 应用程序所有的文件都在该目录下</li>
<li>WEB-INF：客户不能直接通过浏览器进行访问<ul>
<li>classes：存放 servlet 和其他有用的 class 文件（编译后的）</li>
<li>lib：存放 web 应用程序所需要的 jar 包</li>
<li>web.xml：存放部署和配置信息的文件（当前 WEB 项目的核心配置，Servlet2.5 必须有，3.0 以后可省略）</li>
</ul>
</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.csdn.net/m0_37499059/article/details/78806617" target="_blank" rel="noopener">Intellij idea 创建 javaWeb 项目</a></li>
<li><a href="https://blog.csdn.net/c_little_white/article/details/89435646?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control" target="_blank" rel="noopener">IDEA 启动 tomcat 不报错，tomcat 的 webapps 文件夹没有项目文件，项目的默认 URL404</a></li>
</ul>
]]></content:encoded>
      <comments>https://www.wztlink1013.com/blog/qi1ddv/#comments</comments>
    </item>
    
    <item>
      <title><![CDATA[P674. 最长连续递增序列]]></title>
      <link>https://www.wztlink1013.com/blog/guaorh/</link>
      <guid>https://www.wztlink1013.com/blog/guaorh/</guid>
      <pubDate>Sun Jan 24 2021 03:21:00 GMT+0000 (Coordinated Universal Time)</pubDate>
      <description>
      <![CDATA[P674. 最长连续递增序列]]>
      
      </description>
      <content:encoded><![CDATA[<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre><code class="java">package com.wztlink1013.problems.leetcode.editor.cn;

// P674.最长连续递增序列
// P674.longest-continuous-increasing-subsequence
//给定一个未经排序的整数数组，找到最长且 连续递增的子序列，并返回该序列的长度。
//
// 连续递增的子序列 可以由两个下标 l 和 r（l &lt; r）确定，如果对于每个 l &lt;= i &lt; r，都有 nums[i] &lt; nums[i + 1] ，那
//么子序列 [nums[l], nums[l + 1], ..., nums[r - 1], nums[r]] 就是连续递增子序列。
//
//
//
// 示例 1：
//
//
//输入：nums = [1,3,5,4,7]
//输出：3
//解释：最长连续递增序列是 [1,3,5], 长度为3。
//尽管 [1,3,5,7] 也是升序的子序列, 但它不是连续的，因为 5 和 7 在原数组里被 4 隔开。
//
//
// 示例 2：
//
//
//输入：nums = [2,2,2,2,2]
//输出：1
//解释：最长连续递增序列是 [2], 长度为1。
//
//
//
//
// 提示：
//
//
// 0 &lt;= nums.length &lt;= 104
// -109 &lt;= nums[i] &lt;= 109
//
// Related Topics 数组
// 👍 147 👎 0

public class P674LongestContinuousIncreasingSubsequence{
    public static void main(String[] args) {
        Solution solution = new P674LongestContinuousIncreasingSubsequence().new Solution();
        int [] nums = {1,3,5,7};
        int result = solution.findLengthOfLCIS(nums);
        System.out.println(result);
    }

//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public int findLengthOfLCIS(int[] nums) {
        if (nums.length == 0) { return 0; }
        int result = 1;
        int count = 1;
        for (int i=0; i&lt;nums.length-1; i++) {
            if (nums[i] &lt; nums[i+1] ) {
                count++;
                if (result &lt; count) {result = count;}
            } else {
                if (result &lt; count) {result = count;}
                count = 1;
            }
        }
        return result;
    }
}
//leetcode submit region end(Prohibit modification and deletion)

}
</code></pre>
<h2 id="细节注意"><a href="#细节注意" class="headerlink" title="细节注意"></a>细节注意</h2><ul>
<li>56 行 count++</li>
<li>将 57 和 59 行代码删去，改为如下表达式赋值</li>
</ul>
<pre><code class="java">result = count &gt; result ? count : result;
</code></pre>
]]></content:encoded>
      <comments>https://www.wztlink1013.com/blog/guaorh/#comments</comments>
    </item>
    
    <item>
      <title><![CDATA[软件工程知识小结]]></title>
      <link>https://www.wztlink1013.com/blog/sc6tzq/</link>
      <guid>https://www.wztlink1013.com/blog/sc6tzq/</guid>
      <pubDate>Thu Dec 24 2020 09:55:00 GMT+0000 (Coordinated Universal Time)</pubDate>
      <description>
      <![CDATA[软件工程知识小结]]>
      
      </description>
      <content:encoded><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>软件工程生命周期</p>
</blockquote>
<ol>
<li>问题定义</li>
<li>可行性研究</li>
<li>需求分析</li>
<li>总体设计</li>
<li>详细设计</li>
<li>编码和单元测试</li>
<li>综合测试</li>
<li>软件维护</li>
</ol>
<h2 id="可行性研究"><a href="#可行性研究" class="headerlink" title="可行性研究"></a>可行性研究</h2><blockquote>
<p>在了解问题定义之后，将其模型抽离出来，然后对其进行可行性分析，探索若干种解法，对每种解法仔细研究其可行性，从下面几种方面来考虑</p>
</blockquote>
<ol>
<li>技术可行性：能否用现又技术实现？</li>
<li>经济可行性：软件带来的经济效益能否大于软件的开发成本？</li>
<li>操作可行性：在用户组织之间是否具有操作可行性？</li>
</ol>
<p>必要时还有从法律和社会效益来研究其可行性。</p>
<blockquote>
<p>系统流程图<br>数据流图</p>
</blockquote>
<blockquote>
<p>成本/效益分析</p>
</blockquote>
<p>成本估计的几种方法</p>
<ul>
<li>代码行技术：根据每行代码的平均成本乘以行数就是大概的成本</li>
<li>任务分解技术：将整个声明周期划分不同阶段，估计每个不同阶段所花费的成本，一般都是各阶段的人数诚意平均工资再加这般</li>
<li>自动估计成本：根据程序来估计，一般要用到大量数据，才能保证这个估计有效（大数据时代应该很吃香，可以利用所搜集的大量数据来进行建模）</li>
</ul>
<p>成本/效益分析的方法</p>
<ul>
<li>货币的时间价值：这里面有年利率的概念，就是过 n 年之后，你手中的钱在 n 年之后会提升</li>
</ul>
<p>F=P（1+n）^n （P 元钱在 n 年后的价值）</p>
<ul>
<li>投资回收期：你所赚的钱等于你所投资的资金所花费的时间越短越好</li>
<li>纯收入：整个生命周期内，赚的钱减去你投资的钱</li>
</ul>
<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><blockquote>
<p>与用户沟通获取需求的方法</p>
</blockquote>
<ul>
<li>访谈</li>
<li>面向数据流自顶向下求精</li>
<li>简易的应用规格说明技术</li>
<li>快速建立软件模型</li>
</ul>
<blockquote>
<p>根据结构化分析准则，需求分析过程应该建立三种模型，它们分别是？以及他们所用到的工具？</p>
</blockquote>
<ul>
<li>数据模型——E-R 图：就是数据库里面学到的实体-联系图</li>
<li>功能模型——数据流图：描述数据在系统中的转换的逻辑过程</li>
<li>行为模型——状态转换图：作为外部事件结果的系统行为</li>
</ul>
<blockquote>
<p>其他的工具还有</p>
</blockquote>
<ul>
<li>层次方框图（树形结构）</li>
<li>Warnier 图{大括号包裹）</li>
<li>IPO 图（方框-箭头；表格形式）</li>
</ul>
<h2 id="形式化说明技术"><a href="#形式化说明技术" class="headerlink" title="形式化说明技术"></a>形式化说明技术</h2><blockquote>
<p>软件工程所使用的方法可划分为下面三种</p>
</blockquote>
<ul>
<li>非形式化方法：用自然语言描述就是典型的非形式化方法</li>
<li>半形式化方法：利用 E-R 图描述就是半形式化方法</li>
<li>形式化方法：用到数学的技术，也就是说，如果一种方法用到坚实的数学基础，那么他就是形式化方法</li>
</ul>
<h2 id="总体设计"><a href="#总体设计" class="headerlink" title="总体设计"></a>总体设计</h2><blockquote>
<p>总体设计又称之为概要设计、初步设计</p>
</blockquote>
<blockquote>
<p>由哪两阶段组成呢？</p>
</blockquote>
<ul>
<li>系统设计阶段：确定系统的具体实现方案</li>
<li>结构设计阶段：确定软件结构</li>
</ul>
<blockquote>
<p>设计原理</p>
</blockquote>
<p><strong>模块</strong>是由边界元素限定的相邻程序元素（数据说明，可执行的语句）的序列，而且有一个总体标识符代表它</p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1608815946283-167d2edb-f25b-45de-ade4-6041bddf45c2.png#align=left&amp;display=inline&amp;height=258&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=516&amp;originWidth=694&amp;size=141087&amp;status=done&amp;style=shadow&amp;width=347" alt="image.png"></p>
<p>模块之间的<strong>独立程度</strong>有两个标准来度量，分别是：</p>
<p>耦合：度量<strong>模块间</strong>的互相依赖程度</p>
<p>内聚：度量<strong>模块内部元素间</strong>的结合程度</p>
<p><strong>尽量使用数据耦合，少用控制耦合和特征耦合，限制公共环境耦合的范围，完全不用内容耦合</strong><br>**<br>7 种内聚优劣评分：功能内聚（10 分）偶然内聚（0 分）</p>
<blockquote>
<p>描绘软件结构的图形工具</p>
</blockquote>
<ul>
<li>层次图（树状）和 HIPO 图（带编号的层次图）</li>
<li>结构图</li>
</ul>
<blockquote>
<p>面向数据流的设计方法</p>
</blockquote>
<p>概念：面向数据流的设计方法就是把信息流映射成软件结构，同时信息流的结构决定了映射的方法</p>
<ul>
<li>变换流</li>
<li>事务流</li>
<li>设计过程</li>
</ul>
<h2 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h2><blockquote>
<p>结构程序设计</p>
</blockquote>
<p>只用 3 种控制结构就能实现任何单入口单出口的程序，这三种结构分别是顺序结构、选择结构、循环结构</p>
<blockquote>
<p>人机界面设计的设计问题有：</p>
</blockquote>
<ul>
<li>系统响应时间</li>
<li>用户帮助实施</li>
<li>出错信息处理</li>
<li>命令交互</li>
</ul>
<blockquote>
<p>人机界面设计的设计指南：</p>
</blockquote>
<ul>
<li>一般交互指南</li>
<li>信息显示指南</li>
<li>数据输入指南</li>
</ul>
<blockquote>
<p>过程设计的工具【重要】</p>
</blockquote>
<ol>
<li>程序流程图</li>
<li>盒图（N-S 图）</li>
<li>PAD 图</li>
<li>判定表</li>
<li>判定树</li>
<li>过程设计语言</li>
</ol>
<blockquote>
<p>面向数据结构的设计方法</p>
</blockquote>
<p><strong>两个最著名的方法为：Jackson 方法和 Warnier 方法</strong><br>**</p>
<blockquote>
<p>Jackson 方法</p>
</blockquote>
<p>只有顺序、选择、重复三种结构</p>
<p>要会用伪代码表示</p>
<blockquote>
<p>程序复杂程度的定量度量有 McCabe 方法和 Halstead 方法，只介绍前者</p>
</blockquote>
<ol>
<li>流图（给出伪代码画流图）</li>
<li>计算环形复杂度的方法</li>
</ol>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h2 id="维护"><a href="#维护" class="headerlink" title="维护"></a>维护</h2>]]></content:encoded>
      <comments>https://www.wztlink1013.com/blog/sc6tzq/#comments</comments>
    </item>
    
    <item>
      <title><![CDATA[计算机组成原理知识点回顾]]></title>
      <link>https://www.wztlink1013.com/blog/pnf49g/</link>
      <guid>https://www.wztlink1013.com/blog/pnf49g/</guid>
      <pubDate>Wed Dec 23 2020 09:21:00 GMT+0000 (Coordinated Universal Time)</pubDate>
      <description>
      <![CDATA[计算机组成原理知识点回顾]]>
      
      </description>
      <content:encoded><![CDATA[<blockquote>
<p>利用一些基本的问题简单回顾一下这学期学的计组的基本知识点。</p>
</blockquote>
<h2 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h2><blockquote>
<p>电子数字计算机和电子模拟计算机的区别是什么？</p>
</blockquote>
<p>电子数字计算机处理的信息是<strong>离散</strong>的，运算过程是离散的<br>电子模拟计算机处理的信号时<strong>连续</strong>的，运算过程是连续的</p>
<blockquote>
<p>冯诺依曼计算机的特点是什么？其中最主要的一点是什么？</p>
</blockquote>
<ol>
<li>计算机由运算器、控制器、存储器、输入系统、输出系统<strong>五大部件</strong>组成（注意中央处理器是运算器和控制器的合称）</li>
<li>计算机内部由<strong>二进制编码</strong>指令和数据</li>
<li>将编好的数据和程序<strong>先放</strong>入存储器中，然后<strong>再启动</strong>计算机工作</li>
</ol>
<p>其中最主要的一点是第三点最主要！</p>
<h2 id="数据的机器层次表示"><a href="#数据的机器层次表示" class="headerlink" title="数据的机器层次表示"></a>数据的机器层次表示</h2><blockquote>
<p>机器数的原码+反码+补码表示</p>
</blockquote>
<p>定点小数表示：阶码：小数点位数；尾数：在小数那里编码即可</p>
<p>真值就是加正负所表现出来的</p>
<blockquote>
<p>给定计算机字长位数，知道各种情况下表示数值的范围</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1608863188017-8f6c8d66-710e-4880-8559-af59c6e37609.png#align=left&amp;display=inline&amp;height=356&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=712&amp;originWidth=1315&amp;size=336629&amp;status=done&amp;style=shadow&amp;width=657.5" alt="image.png"></p>
<h2 id="数值的机器运算"><a href="#数值的机器运算" class="headerlink" title="数值的机器运算"></a>数值的机器运算</h2><blockquote>
<p>定点加减运算+判断结果是否溢出</p>
</blockquote>
<ol>
<li>先写出两个数的补码（减法运算转换为加法运算即可）</li>
<li>然后进行二进制加法运算（遵循 0+0=0，1+0=1，0+1=1，1+1=10 向高位进位）</li>
<li>判断是否溢出【00：结果为正无溢出；01：正溢；10：负溢；11 结果为负无溢出】</li>
<li>将[X+Y]补转换为[X+Y]真值<blockquote>
<p>定点乘法运算：原码一位乘法运算+补码一位乘法运算</p>
</blockquote>
</li>
</ol>
<p>原码一位乘法运算：</p>
<ol>
<li>先写出 X 和 Y 的绝对值|X|和|Y|</li>
<li>让 00.0……和|X|相加同时判断|Y|的最后一位（如果为 1 加|X|如果是 0 加 0）</li>
<li>加完之后右移一位，再判断，加了再判断，啥时候那个分隔符分没了，就好了……………</li>
<li>最后判断真值符号</li>
</ol>
<p>我写的个啥………………逃</p>
<p>补码一位乘法运算：</p>
<ol>
<li>写出[X]补[-X]补[Y]补</li>
<li>在[Y]补码尾巴后面加一个 0，判断最后两位，（00 加 0；10 加[-X]补；01 加[X]补；11 加 0）</li>
<li>让 00.000……加上上面判断的加上某某</li>
<li>又一直这样下去下去……</li>
<li>把补码换成原码即可……</li>
</ol>
<p>…………逃 🤣</p>
<h2 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h2><blockquote>
<p>什么叫主程序和子程序？调用子程序还可以采用哪几种方法保存返回地址？画出图说明调用子程序的过程。</p>
</blockquote>
<p>主程序：<strong>通常</strong>的程序<br><strong><br>子程序：可以被反复调用、</strong>公用<strong>的程序，只要知道其</strong>入口地址**，就可以调用之，其就是我们编程常写的函数</p>
<p>保存返回地址的方法：</p>
<ul>
<li>子程序的第一个<strong>子单元</strong>存放返回地址，然后从第二个字单元开始执行子程序</li>
<li><strong>寄存器</strong>存放</li>
<li><strong>堆栈</strong>保存</li>
</ul>
<p>以堆栈保存返回地址的方法来说明调用子程序的过程：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1608774330112-3e8bf3df-1091-4476-aa72-e9757e36a3e6.png#align=left&amp;display=inline&amp;height=77&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=154&amp;originWidth=242&amp;size=22896&amp;status=done&amp;style=shadow&amp;width=121" alt="image.png"></p>
<blockquote>
<p>如果某计算机调用子程序保存返回地址是上个问题的第一种方式，有这么几个问题：</p>
<ol>
<li>为这种方法设计一条从子程序转到主程序的返回指令</li>
<li>怎么在主程序和子程序之间进行传参</li>
<li>可否用于子程序嵌套</li>
<li>可否用于子程序的递归</li>
<li>如果将该种方式改为第三种方式（堆栈方式），可否完成 4</li>
</ol>
</blockquote>
<ol>
<li>使用间接寻址方式</li>
</ol>
<table>
<thead>
<tr>
<th>JMP</th>
<th>@</th>
<th>子程序首地址</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<ol start="2">
<li>可以利用寄存器或主存单元进行主、子程序间的参数传递</li>
<li>可以。返回的地址都放在子程序的第一个单元</li>
<li>不可以。会破坏其内部结构</li>
<li>可以。因为堆栈具有后进先出功能</li>
</ol>
<h2 id="存储系统和结构"><a href="#存储系统和结构" class="headerlink" title="存储系统和结构"></a>存储系统和结构</h2><blockquote>
<p>如何区别存储器和寄存器？两者是一回事说法对吗？</p>
</blockquote>
<p>两者不是一回事。</p>
<p>存储器是在<strong>CPU</strong>外边，用来存放数据和程序的，访问存储器的<strong>速度</strong>较慢；</p>
<p>寄存器数据 CPU 的一部分，访问寄存器的速度很快。<br>**</p>
<blockquote>
<p>存储器的主要功能是什么？为什么把存储系统分成若干个不同层次？主要有那些层次？</p>
</blockquote>
<p>存储器的主要功能：存储数据和程序</p>
<p>存储系统是有几个<strong>容量、速度、价格</strong>不同的存储器用硬件、软件、软硬件相结合起来的系统。分成若干个不同层次是因为考虑到不同存储器的价格因素、存储速度、存储容量三个因素。</p>
<ol>
<li>高速缓存</li>
<li>主存</li>
<li>辅存</li>
</ol>
<p>其中 12 又称之为 Cache-主存存储层次，23 又称之为主存-辅存存储层次。</p>
<blockquote>
<p>动态 RAM 为什么要刷新？一般有几种刷新方式？各有什么优缺点？</p>
</blockquote>
<p><strong>为了维持 DRAM 的记忆单元的存储信息</strong></p>
<ul>
<li><strong>集中式</strong>刷新</li>
</ul>
<p>优点：<strong>读写操作</strong>不受刷新工作的影响，<strong>存取速度</strong>高</p>
<p>缺点：存储容量越大，死区越长</p>
<ul>
<li><strong>分散式</strong>刷新</li>
</ul>
<p>优点：没有死区</p>
<p>缺点：加长了系统的<strong>存取周期</strong>，降低了整机的速度，并且刷新过于频繁，没有充分利用允许的最大刷新间隔</p>
<ul>
<li><strong>异步式</strong>刷新</li>
</ul>
<p>异步式虽然有死区，但是比几种方式的<strong>死区小</strong>得多，而且<strong>减少了刷新次数</strong>，是比较实用的一种刷新方式。</p>
<h2 id="中央处理器"><a href="#中央处理器" class="headerlink" title="中央处理器"></a>中央处理器</h2><hr>
<blockquote>
<p>控制器有哪几种控制方式？各有何特点？</p>
</blockquote>
<ul>
<li><strong>同步</strong>控制方式</li>
</ul>
<p>该控制方式各项操作都由统一的<strong>时序信号</strong>完成，并且在每个及其周期中产生统一的<strong>节拍电位和工作脉冲</strong>。这种方式设计简单，但是对于许多<strong>单指令</strong>来说，有太多的<strong>空闲时间</strong>，造成时间浪费，影响指令执行速度。</p>
<ul>
<li><strong>异步</strong>控制方式</li>
</ul>
<p>该控制方式的各项操作都<strong>不由统一的时序信号</strong>完成，而是由指令本身或部件的具体情况决定，因此这种控制方式的效率高，时间能够合理利用，但是该控制方式也比较复杂。</p>
<ul>
<li><strong>联合</strong>控制方式</li>
</ul>
<p>是由上面的同步控制方式和异步控制方式相结合的方式。</p>
<hr>
<blockquote>
<p>什么是三级时序系统？</p>
</blockquote>
<p>三级时序系统是指<strong>机器周期</strong>、<strong>节拍</strong>、<strong>工作脉冲</strong></p>
<p>具体所属关系是：每个指令周期划分若干个机器周期，每个机器周期划分若干个节拍，每个节拍划分 1 个或几个工作脉冲。</p>
<hr>
<blockquote>
<p>控制器有哪些基本功能？可分为哪几类？分类的依据是什么？</p>
</blockquote>
<p>基本功能：</p>
<ul>
<li>从主存中<strong>取出一条指令</strong>，并指出下一跳指令在主存中的位置</li>
<li>对指令进行<strong>译码或是测试</strong>，产生相应的操作控制信号，以便启动规定的工作</li>
<li>指挥并控制<strong>CPU</strong>，主存和输入输出设备之间的<strong>数据流动</strong></li>
</ul>
<p>分类：</p>
<ul>
<li><strong>组合逻辑</strong>型</li>
<li><strong>存储逻辑</strong>型</li>
<li>组合逻辑和存储逻辑<strong>结合</strong>型</li>
</ul>
<p>分类的依据：<br>在于控制器的核心——<strong>微操作信号发生器的实现方法不同</strong>。</p>
<hr>
<blockquote>
<p>中央处理器有哪些功能？它是由那些基本部件构成的？</p>
</blockquote>
<p>构成：</p>
<ul>
<li>控制器</li>
<li>运算器</li>
</ul>
<p>功能：<br>对数据流和指令流在时间上和空间上进行正确的控制。当然，对于冯诺依曼结构的计算机而言，数据流是基于指令流的操作而驱动的。</p>
<hr>
<blockquote>
<p>中央处理器有哪几个主要寄存器？说说他们的结构和功能？</p>
</blockquote>
<p>寄存器的功能就是用来存放程序运行过程中的中间结果、最终结果以及控制、状态信息的。</p>
<ul>
<li>通用寄存器</li>
</ul>
<p>用来存放原始数据和运算结果，有的还可以作为变址寄存器、计数器、地址指针等</p>
<ul>
<li>专用寄存器</li>
</ul>
<p>是用来完成某些特定功能的寄存器：程序计数器（PC）、指令寄存器（IR）、存储器地址寄存器（MAR）、存储器数据寄存器（MDR）、程序状态字寄存器（PSWR）等</p>
<blockquote>
<p>以单指令为例，简要说明下列部件在计算机的取值周期和执行周期的作用。</p>
</blockquote>
<ul>
<li>程序计数器（PC）：存放指令地址</li>
<li>指令寄存器（IR）：存放当前指令</li>
<li>存储器地址寄存器（MAR）：进行算术逻辑运算</li>
<li>存储器数据寄存器（MDR）：存放写入或读出的数据/指令</li>
<li>程序状态字寄存器（PSWR）：存放写入或读出的数据/指令的地址</li>
</ul>
<hr>
<blockquote>
<p>什么是指令周期？什么是 CPU 周期？他们之间有什么关系？</p>
</blockquote>
<p>指令周期：指<strong>取指令</strong>、<strong>分析指令</strong>到<strong>执行指令</strong>所花费的所有时间</p>
<p>CPU 周期：也叫<strong>机器周期</strong>，是指完成一个基本操作所花费的时间<br>一个指令周期划分为多个 CPU 周期</p>
<hr>
<h2 id="【总线-外部设备】nothing"><a href="#【总线-外部设备】nothing" class="headerlink" title="【总线+外部设备】nothing"></a>【总线+外部设备】nothing</h2><h2 id="输入输出系统"><a href="#输入输出系统" class="headerlink" title="输入输出系统"></a>输入输出系统</h2><hr>
<blockquote>
<p>什么是计机的输入输出系统？输入输出设备有哪些编址方式？有什么特点？</p>
</blockquote>
<p>输入输出系统：包括输入输出<strong>接口</strong>和输入输出信息<strong>传送</strong>控制方式，是计算机系统中最具有<strong>多样性</strong>和<strong>复杂性</strong>的部分。</p>
<p>编址方式：</p>
<ul>
<li><strong>独立编址</strong></li>
</ul>
<p>优点：指令易于区分，译码简单，主存空间不会减少</p>
<p>缺点：增加了控制线 I/ORead 和 I/OWrite 信号</p>
<ul>
<li><strong>统一编址</strong></li>
</ul>
<p>优点：总线结构简单，全部访存类指令都可用于控制外设，可直接对外设寄存器进行各种运算</p>
<p>缺点：占用主存一部分地址，缩小了可用的主存空间</p>
<hr>
<blockquote>
<p>什么是 I/O 接口？I/O 接口有哪些特点和功能？接口有哪些类型？</p>
</blockquote>
<p>主机和外设之间的交接界面</p>
<p>特点：<br>实现信息交换</p>
<p>功能：</p>
<ul>
<li>实现主机和外设的通信联络控制</li>
<li>进行地址译码和设备选择</li>
<li>实现数据缓冲</li>
<li>完成数据格式的变换</li>
<li>传递控制命令和状态信息</li>
</ul>
<p>类型：</p>
<ul>
<li>串行接口</li>
<li>并行接口</li>
</ul>
<hr>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1608728980150-18e3d2ee-cc80-4187-b38c-14c78554e979.png#align=left&amp;display=inline&amp;height=152&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=198&amp;originWidth=766&amp;size=190453&amp;status=done&amp;style=none&amp;width=589" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1608729028676-c983dd94-3689-431d-bf54-76bbb5b01f75.png#align=left&amp;display=inline&amp;height=80&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=160&amp;originWidth=788&amp;size=111323&amp;status=done&amp;style=none&amp;width=394" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1608729049887-aee5cd74-e49d-44d1-88b2-bcdc511ff3c3.png#align=left&amp;display=inline&amp;height=107&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=214&amp;originWidth=968&amp;size=213320&amp;status=done&amp;style=none&amp;width=484" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1608729065956-47dc5b50-caaa-44a1-a54e-8e3f5ae2192a.png#align=left&amp;display=inline&amp;height=172&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=343&amp;originWidth=687&amp;size=119088&amp;status=done&amp;style=none&amp;width=343.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1608729081886-f27d6175-e541-4379-b158-0093a23b693d.png#align=left&amp;display=inline&amp;height=139&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=277&amp;originWidth=922&amp;size=156708&amp;status=done&amp;style=none&amp;width=461" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1608729097801-61fd270b-1608-48ab-b1fa-a951febba5d6.png#align=left&amp;display=inline&amp;height=87&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=173&amp;originWidth=907&amp;size=129678&amp;status=done&amp;style=none&amp;width=453.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1608729108461-95f5d6e5-efd6-4acf-a2c7-fb72f6052d25.png#align=left&amp;display=inline&amp;height=71&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=141&amp;originWidth=897&amp;size=100962&amp;status=done&amp;style=none&amp;width=448.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1608729131667-e6955db4-4b2c-4efb-ad1f-3acf8ccc5e48.png#align=left&amp;display=inline&amp;height=315&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=630&amp;originWidth=974&amp;size=493234&amp;status=done&amp;style=none&amp;width=487" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1608729144873-1a207e20-98d9-4e44-b40e-c1a81a54b667.png#align=left&amp;display=inline&amp;height=195&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=390&amp;originWidth=968&amp;size=379559&amp;status=done&amp;style=none&amp;width=484" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1608729157489-b3899992-00d9-405b-8f02-9619f08d9960.png#align=left&amp;display=inline&amp;height=193&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=386&amp;originWidth=938&amp;size=349548&amp;status=done&amp;style=none&amp;width=469" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1608729176250-7499ab5f-2a40-4514-92f3-afc46c739936.png#align=left&amp;display=inline&amp;height=275&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=549&amp;originWidth=1005&amp;size=475058&amp;status=done&amp;style=none&amp;width=502.5" alt="image.png"></p>
]]></content:encoded>
      <comments>https://www.wztlink1013.com/blog/pnf49g/#comments</comments>
    </item>
    
    <item>
      <title><![CDATA[VuePress初体验]]></title>
      <link>https://www.wztlink1013.com/blog/czl3oc/</link>
      <guid>https://www.wztlink1013.com/blog/czl3oc/</guid>
      <pubDate>Mon Dec 21 2020 09:21:00 GMT+0000 (Coordinated Universal Time)</pubDate>
      <description>
      <![CDATA[VuePress初体验]]>
      
      </description>
      <content:encoded><![CDATA[<h2 id="安装-Yarn"><a href="#安装-Yarn" class="headerlink" title="安装 Yarn"></a>安装 Yarn</h2><blockquote>
<p>Yarn 是为了弥补 npm 的一些缺陷而生的</p>
</blockquote>
<p>具体参考：<a href="https://zhuanlan.zhihu.com/p/27449990" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/27449990</a></p>
<h3 id="引导式安装"><a href="#引导式安装" class="headerlink" title="引导式安装"></a>引导式安装</h3><p><a href="https://classic.yarnpkg.com/zh-Hans/docs/install#windows-stable" target="_blank" rel="noopener">下载地址</a><br>使用 Windows 版的下载安装即可<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1608540352757-ed3ef592-f042-4262-9378-42aa9d053fcd.png#align=left&amp;display=inline&amp;height=35&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=69&amp;originWidth=433&amp;size=3803&amp;status=done&amp;style=none&amp;width=216.5" alt="image.png"></p>
<h3 id="bash-安装"><a href="#bash-安装" class="headerlink" title="bash 安装"></a>bash 安装</h3><p>在 bash 里面不能显示，在 bash 里面下载<br><code>npm install -g yarn</code> 即可</p>
<h2 id="将-VuePress-安装为本地依赖"><a href="#将-VuePress-安装为本地依赖" class="headerlink" title="将 VuePress 安装为本地依赖"></a>将 VuePress 安装为本地依赖</h2><h3 id="yarn-init"><a href="#yarn-init" class="headerlink" title="yarn init"></a>yarn init</h3><p>yarn init 出错</p>
<pre><code class="bash">error An unexpected error occurred: &quot;Can&#39;t answer a question unless a user TTY&quot;. info If you think t
</code></pre>
<p><strong>使用 cmd 或者 power shell 不要使用 bash</strong><br>**</p>
<h3 id="yarn-add-D-vuepress"><a href="#yarn-add-D-vuepress" class="headerlink" title="yarn add -D vuepress"></a>yarn add -D vuepress</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1608541125538-3124ff43-0574-4bfd-a290-908621b54644.png#align=left&amp;display=inline&amp;height=272&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=543&amp;originWidth=1920&amp;size=147908&amp;status=done&amp;style=none&amp;width=960" alt="image.png"></p>
<h3 id="创建一篇文章"><a href="#创建一篇文章" class="headerlink" title="创建一篇文章"></a>创建一篇文章</h3><p>在 bash 创建，在 powershell 里面创建会报错</p>
<pre><code class="bash">mkdir docs &amp;&amp; echo &#39;# Hello VuePress&#39; &gt; docs/README.md
</code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1608541380531-3ad1565f-0eef-4dac-bebf-64d1a131d7f3.png#align=left&amp;display=inline&amp;height=105&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=210&amp;originWidth=1160&amp;size=36343&amp;status=done&amp;style=none&amp;width=580" alt="image.png"></p>
<h3 id="添加脚本"><a href="#添加脚本" class="headerlink" title="添加脚本"></a>添加脚本</h3><pre><code class="json">{
  &quot;name&quot;: &quot;my-site&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;main&quot;: &quot;index.js&quot;,
  &quot;license&quot;: &quot;MIT&quot;,
  &quot;devDependencies&quot;: {
    &quot;vuepress&quot;: &quot;^1.7.1&quot;
  },
  &quot;scripts&quot;: {
    &quot;docs:dev&quot;: &quot;vuepress dev docs&quot;,
    &quot;docs:build&quot;: &quot;vuepress build docs&quot;
  }
}
</code></pre>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1608541418296-b53b29dc-f6a9-480f-b65d-009a21c0d013.png#align=left&amp;display=inline&amp;height=237&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=474&amp;originWidth=951&amp;size=59046&amp;status=done&amp;style=none&amp;width=475.5" alt="image.png"><br>端口访问：<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></p>
]]></content:encoded>
      <comments>https://www.wztlink1013.com/blog/czl3oc/#comments</comments>
    </item>
    
    <item>
      <title><![CDATA[搭建“文本三巨头”环境]]></title>
      <link>https://www.wztlink1013.com/blog/yhxiep/</link>
      <guid>https://www.wztlink1013.com/blog/yhxiep/</guid>
      <pubDate>Sat Dec 19 2020 06:32:00 GMT+0000 (Coordinated Universal Time)</pubDate>
      <description>
      <![CDATA[搭建“文本三巨头”环境]]>
      
      </description>
      <content:encoded><![CDATA[<h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><h3 id="Vim-下载安装"><a href="#Vim-下载安装" class="headerlink" title="Vim 下载安装"></a>Vim 下载安装</h3><p><a href="https://www.vim.org/download.php" target="_blank" rel="noopener">下载地址</a><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1608357192619-ac3d093e-c4e4-49fa-9a3b-8ead607b2160.png#align=left&amp;display=inline&amp;height=299&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=598&amp;originWidth=1919&amp;size=248340&amp;status=done&amp;style=none&amp;width=959.5" alt="image.png"><br>下载完之后 next 安装即可</p>
<h3 id="Vim-环境变量配置"><a href="#Vim-环境变量配置" class="headerlink" title="Vim 环境变量配置"></a>Vim 环境变量配置</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1608357482468-e6a53bc3-991d-4eda-aa2e-c5643b9617b0.png#align=left&amp;display=inline&amp;height=89&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=177&amp;originWidth=602&amp;size=11434&amp;status=done&amp;style=none&amp;width=301" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1608357463679-c00baef1-4e21-4405-8e79-f65afabe0370.png#align=left&amp;display=inline&amp;height=469&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=938&amp;originWidth=976&amp;size=105454&amp;status=done&amp;style=none&amp;width=488" alt="image.png"></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1608357601712-bc8f6f5b-6038-4358-8699-a7201ce8223e.png#align=left&amp;display=inline&amp;height=112&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=225&amp;originWidth=1468&amp;size=22708&amp;status=done&amp;style=none&amp;width=734" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1608357572830-fd4043b2-f02a-4c32-b9e7-677c4918ec19.png#align=left&amp;display=inline&amp;height=383&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=766&amp;originWidth=1442&amp;size=64262&amp;status=done&amp;style=none&amp;width=721" alt="image.png"></p>
<h2 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h2><h3 id="安装-Linux-子系统"><a href="#安装-Linux-子系统" class="headerlink" title="安装 Linux 子系统"></a>安装 Linux 子系统</h3><p>查看之前写的文章：<a href="https://www.wztlink1013.com/blog/xnh83z/">搭建 Windows 子系统 Linux - 尼采般地抒情</a></p>
<h3 id="安装-ConEmu"><a href="#安装-ConEmu" class="headerlink" title="安装 ConEmu"></a>安装 ConEmu</h3><p><a href="https://www.fosshub.com/ConEmu.html" target="_blank" rel="noopener">https://www.fosshub.com/ConEmu.html</a><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1608358847174-3a3b7ba1-45e8-4951-a943-debd2a09de43.png#align=left&amp;display=inline&amp;height=217&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=434&amp;originWidth=1904&amp;size=80285&amp;status=done&amp;style=none&amp;width=952" alt="image.png"><br>设置如下：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1608358926353-c172728f-978e-47f7-9ec5-34472219ccdb.png#align=left&amp;display=inline&amp;height=376&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=751&amp;originWidth=1143&amp;size=84693&amp;status=done&amp;style=none&amp;width=571.5" alt="image.png"><br>确定后会进入以下界面<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1608358964494-c12c30a4-4b04-4463-b3d6-3c5fc21b607f.png#align=left&amp;display=inline&amp;height=359&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=717&amp;originWidth=970&amp;size=40132&amp;status=done&amp;style=none&amp;width=485" alt="image.png"></p>
<h3 id="安装并配置-zsh"><a href="#安装并配置-zsh" class="headerlink" title="安装并配置 zsh"></a>安装并配置 zsh</h3><p>进入页面 <code>sudo apt-get install -y zsh</code> ，输入密码：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1608359167583-80d5f5fd-77e6-417d-ac0c-279dbfb55776.png#align=left&amp;display=inline&amp;height=300&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=600&amp;originWidth=960&amp;size=64893&amp;status=done&amp;style=none&amp;width=480" alt="image.png"><br>安装成功界面如下：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1608360612991-863a5a2e-77a2-4bd7-b1b9-4ef6a79dcb86.png#align=left&amp;display=inline&amp;height=456&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=912&amp;originWidth=1908&amp;size=196509&amp;status=done&amp;style=none&amp;width=954" alt="image.png"></p>
<h3 id="安装-oh-my-zsh"><a href="#安装-oh-my-zsh" class="headerlink" title="安装 oh-my-zsh"></a>安装 oh-my-zsh</h3><p>sh -c “$(curl -fsSL <a href="https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh" target="_blank" rel="noopener">https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)”</a>%22)<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1608360763102-d6886d61-c954-4c15-adfc-ca42c0daf337.png#align=left&amp;display=inline&amp;height=411&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=821&amp;originWidth=1908&amp;size=125769&amp;status=done&amp;style=none&amp;width=954" alt="image.png"><br>上述文件夹在这里： <code>C:\Users\wztli\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState\rootfs\home\wztlink1013</code></p>
<h2 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h2><h3 id="安装运行"><a href="#安装运行" class="headerlink" title="安装运行"></a>安装运行</h3><p>Ubuntu 系统命令行界面输入： <code>sudo apt install tmux</code></p>
<p>在 Ubuntu 系统输入并执行”tmux”命令，会进入 tmux 窗口</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.jianshu.com/p/5f7b83ca3952" target="_blank" rel="noopener">https://www.jianshu.com/p/5f7b83ca3952</a></li>
<li><a href="https://post.smzdm.com/p/a5k6e033/" target="_blank" rel="noopener">https://post.smzdm.com/p/a5k6e033/</a></li>
<li><a href="https://blog.csdn.net/qq_2300688967/article/details/81774297" target="_blank" rel="noopener">https://blog.csdn.net/qq_2300688967/article/details/81774297</a></li>
</ul>
]]></content:encoded>
      <comments>https://www.wztlink1013.com/blog/yhxiep/#comments</comments>
    </item>
    
    <item>
      <title><![CDATA[P150.逆波兰表达式求值]]></title>
      <link>https://www.wztlink1013.com/blog/ewoap5/</link>
      <guid>https://www.wztlink1013.com/blog/ewoap5/</guid>
      <pubDate>Thu Dec 03 2020 12:21:00 GMT+0000 (Coordinated Universal Time)</pubDate>
      <description>
      <![CDATA[P150.逆波兰表达式求值]]>
      
      </description>
      <content:encoded><![CDATA[<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>对所给字符串进行遍历，遇到数字字符就压入栈 stack 内，遇到+-*/符号就 pop 处栈的两个元素，进行该字符运算处理</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre><code class="java">package com.wztlink1013.problems.leetcode.editor.cn;

// P150.逆波兰表达式求值
// P150.evaluate-reverse-polish-notation
//根据 逆波兰表示法，求表达式的值。
//
// 有效的运算符包括 +, -, *, / 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。
//
//
//
// 说明：
//
//
// 整数除法只保留整数部分。
// 给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。
//
//
//
//
// 示例 1：
//
// 输入: [&quot;2&quot;, &quot;1&quot;, &quot;+&quot;, &quot;3&quot;, &quot;*&quot;]
//输出: 9
//解释: 该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9
//
//
// 示例 2：
//
// 输入: [&quot;4&quot;, &quot;13&quot;, &quot;5&quot;, &quot;/&quot;, &quot;+&quot;]
//输出: 6
//解释: 该算式转化为常见的中缀算术表达式为：(4 + (13 / 5)) = 6
//
//
// 示例 3：
//
// 输入: [&quot;10&quot;, &quot;6&quot;, &quot;9&quot;, &quot;3&quot;, &quot;+&quot;, &quot;-11&quot;, &quot;*&quot;, &quot;/&quot;, &quot;*&quot;, &quot;17&quot;, &quot;+&quot;, &quot;5&quot;, &quot;+&quot;]
//输出: 22
//解释:
//该算式转化为常见的中缀算术表达式为：
//  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
//= ((10 * (6 / (12 * -11))) + 17) + 5
//= ((10 * (6 / -132)) + 17) + 5
//= ((10 * 0) + 17) + 5
//= (0 + 17) + 5
//= 17 + 5
//= 22
//
//
//
// 逆波兰表达式：
//
// 逆波兰表达式是一种后缀表达式，所谓后缀就是指算符写在后面。
//
//
// 平常使用的算式则是一种中缀表达式，如 ( 1 + 2 ) * ( 3 + 4 ) 。
// 该算式的逆波兰表达式写法为 ( ( 1 2 + ) ( 3 4 + ) * ) 。
//
//
// 逆波兰表达式主要有以下两个优点：
//
//
// 去掉括号后表达式无歧义，上式即便写成 1 2 + 3 4 + * 也可以依据次序计算出正确结果。
// 适合用栈操作运算：遇到数字则入栈；遇到算符则取出栈顶两个数字进行计算，并将结果压入栈中。
//
// Related Topics 栈
// 👍 213 👎 0


import java.util.Stack;

public class P150EvaluateReversePolishNotation{
    public static void main(String[] args) {
        Solution solution = new P150EvaluateReversePolishNotation().new Solution();
        String[] tokens_1 = {&quot;10&quot;, &quot;6&quot;, &quot;9&quot;, &quot;3&quot;, &quot;+&quot;, &quot;-11&quot;, &quot;*&quot;, &quot;/&quot;, &quot;*&quot;, &quot;17&quot;, &quot;+&quot;, &quot;5&quot;, &quot;+&quot;};
        int temp = solution.evalRPN(tokens_1);
        System.out.println(temp);

    }

//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public int evalRPN(String[] tokens) {
        Stack&lt;String&gt; stack = new Stack&lt;&gt;();

        String temp = &quot;0&quot;;
        stack.push(temp);

        for (String token : tokens) {
            int sum = 0;
            if (token.equals(&quot;+&quot;)) {
                sum += Integer.parseInt(stack.pop()) + Integer.parseInt(stack.pop());
                String str = String.valueOf(sum);
                stack.push(str);
            } else if (token.equals(&quot;-&quot;)) {
                int i = Integer.parseInt(stack.pop());
                int j = Integer.parseInt(stack.pop());
                sum += j-i;
                String str = String.valueOf(sum);
                stack.push(str);
            } else if (token.equals(&quot;*&quot;)) {
                sum += Integer.parseInt(stack.pop()) * Integer.parseInt(stack.pop());
                String str = String.valueOf(sum);
                stack.push(str);
            } else if (token.equals(&quot;/&quot;)) {
                int i = Integer.parseInt(stack.pop());
                int j = Integer.parseInt(stack.pop());
                sum += j / i;
                String str = String.valueOf(sum);
                stack.push(str);
            } else {
                stack.push(token);
            }
        }
        int result = Integer.parseInt(stack.pop());
        return result;
    }
}
//leetcode submit region end(Prohibit modification and deletion)

}
</code></pre>
]]></content:encoded>
      <comments>https://www.wztlink1013.com/blog/ewoap5/#comments</comments>
    </item>
    
    <item>
      <title><![CDATA[hexo-部署出错at formatNunjucksError]]></title>
      <link>https://www.wztlink1013.com/blog/gw1d4z/</link>
      <guid>https://www.wztlink1013.com/blog/gw1d4z/</guid>
      <pubDate>Thu Dec 03 2020 11:01:00 GMT+0000 (Coordinated Universal Time)</pubDate>
      <description>
      <![CDATA[hexo-部署出错at formatNunjucksError]]>
      
      </description>
      <content:encoded><![CDATA[<h2 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h2><p>GitHub Actions 流程中 hexo g 出现错误，具体错误在“Vue 笔记”中那篇文章中，有个地方用到了大括号嵌套的情况。</p>
<pre><code class="bash">    =====             Context Dump Ends            =====
    at formatNunjucksError (/home/runner/work/website/website/node_modules/hexo/lib/extend/tag.js:102:13)
    at Promise.fromCallback.catch.err (/home/runner/work/website/website/node_modules/hexo/lib/extend/tag.js:124:34)
    at tryCatcher (/home/runner/work/website/website/node_modules/bluebird/js/release/util.js:16:23)
    at Promise._settlePromiseFromHandler (/home/runner/work/website/website/node_modules/bluebird/js/release/promise.js:547:31)
    at Promise._settlePromise (/home/runner/work/website/website/node_modules/bluebird/js/release/promise.js:604:18)
    at Promise._settlePromise0 (/home/runner/work/website/website/node_modules/bluebird/js/release/promise.js:649:10)
    at Promise._settlePromises (/home/runner/work/website/website/node_modules/bluebird/js/release/promise.js:725:18)
    at _drainQueueStep (/home/runner/work/website/website/node_modules/bluebird/js/release/async.js:93:12)
    at _drainQueue (/home/runner/work/website/website/node_modules/bluebird/js/release/async.js:86:9)
    at Async._drainQueues (/home/runner/work/website/website/node_modules/bluebird/js/release/async.js:102:5)
    at Immediate.Async.drainQueues [as _onImmediate] (/home/runner/work/website/website/node_modules/bluebird/js/release/async.js:15:14)
    at runCallback (timers.js:705:18)
    at tryOnImmediate (timers.js:676:5)
    at processImmediate (timers.js:658:5)
Error: Process completed with exit code 2.
</code></pre>
<h2 id="问题分析与解决"><a href="#问题分析与解决" class="headerlink" title="问题分析与解决"></a>问题分析与解决</h2><p>上述代码中第二行其实已经说的很明确 <code>at formatNunjucksError</code><br>但是 hexo 中，渲染过程中用到的是 Nunjucks，在 Nunjucks 中双大括号被视为语法，所以报错。</p>
<h2 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h2><p><a href="https://www.wztlink1013.com/blog/pxpix4/">https://www.wztlink1013.com/blog/pxpix4/</a></p>
<p>其实之前遇到过类似的问题……写的博客还是要经常回顾……</p>
]]></content:encoded>
      <comments>https://www.wztlink1013.com/blog/gw1d4z/#comments</comments>
    </item>
    
    <item>
      <title><![CDATA[GitHub多人协作功能Pull requests]]></title>
      <link>https://www.wztlink1013.com/blog/iwvugw/</link>
      <guid>https://www.wztlink1013.com/blog/iwvugw/</guid>
      <pubDate>Wed Dec 02 2020 13:04:00 GMT+0000 (Coordinated Universal Time)</pubDate>
      <description>
      <![CDATA[GitHub多人协作功能Pull requests]]>
      
      </description>
      <content:encoded><![CDATA[<h2 id="给出一个初始场景"><a href="#给出一个初始场景" class="headerlink" title="给出一个初始场景"></a>给出一个初始场景</h2><p>小吴和小王同时开发一个项目 project，该项目托管到 GitHub 上，假定该项目托管到小吴的 GitHub 上，小王要想同时开发这个 project，就必须要 fork 小吴的这个 project，最后两个人 GitHub 仓库是这个样子的：</p>
<p>小吴：xiaowu/project<br>小王：xiaowang/project</p>
<p>（需要明确一点，小吴小王各自的 project 仓库现在就相当各做各的事情了）</p>
<h2 id="具体工作场景"><a href="#具体工作场景" class="headerlink" title="具体工作场景"></a>具体工作场景</h2><p>小王的仓库 xiaowang/project 改了代码，想要 push 合并到小吴的仓库 xiaowu/project 中，这里分两种情况。</p>
<h3 id="第一种情况"><a href="#第一种情况" class="headerlink" title="第一种情况"></a>第一种情况</h3><p><strong>小王在从 fork 小吴仓库到现在这段期间，小吴没有对 xiaowu/project 做任何改动</strong></p>
<blockquote>
<p>处理方法：直接 Pull request<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1606915274704-123b219d-d7fe-4816-88c4-91ba11b5c466.png#align=left&amp;display=inline&amp;height=143&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=285&amp;originWidth=1917&amp;size=47997&amp;status=done&amp;style=shadow&amp;width=958.5" alt="image.png"> &gt; <img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1606915405152-c1e60a93-99fb-42d5-a7a5-87c564fe53d4.png#align=left&amp;display=inline&amp;height=270&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=540&amp;originWidth=1920&amp;size=80075&amp;status=done&amp;style=shadow&amp;width=960" alt="image.png"><br>可以看到 1 区域显示 Able to merge，表明这个 Pull request 对于双方是没有矛盾的</p>
</blockquote>
<h3 id="第二种情况"><a href="#第二种情况" class="headerlink" title="第二种情况"></a>第二种情况</h3><p><strong>小王在从 fork 小吴仓库到现在这段期间，小吴又在 xiaowu/project 里面做了改动，就相当于小王 fork 过后，两个人都对各自的仓库更新了，然后小王想将自己的改动推送到小吴那里</strong></p>
<blockquote>
<p><strong><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1606916524143-c5076532-2497-4923-986f-d442122e6de7.png#align=left&amp;display=inline&amp;height=287&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=574&amp;originWidth=1920&amp;size=91126&amp;status=done&amp;style=shadow&amp;width=960" alt="image.png"></strong> &gt; <strong>可以发现 1 处并没有那么顺利，因为产生了冲突，但是 2 处仍然可以新建一个 request 请求，先点击 2</strong> &gt; <strong><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1606916762342-e5215ae5-cf61-43ac-9051-f73c40de1fb1.png#align=left&amp;display=inline&amp;height=307&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=613&amp;originWidth=1191&amp;size=52688&amp;status=done&amp;style=shadow&amp;width=595.5" alt="image.png"></strong> &gt; <strong>点击之后会这样 👇</strong> &gt; <strong><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1606916826669-b406d584-50a7-49d5-9044-166bba4bc75f.png#align=left&amp;display=inline&amp;height=133&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=266&amp;originWidth=1284&amp;size=32978&amp;status=done&amp;style=shadow&amp;width=642" alt="image.png"></strong><br>1 处显示矛盾的文件（就是小吴和小王在各自的仓库都进行了更改）<br>我们点击 2 处<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1606916998671-6b369cf8-f6dc-4ad3-ba0b-d2f7006b7804.png#align=left&amp;display=inline&amp;height=198&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=396&amp;originWidth=1920&amp;size=65448&amp;status=done&amp;style=shadow&amp;width=960" alt="image.png"><br>接下来解决这个问题并且点击 Mark as resolved 按钮就可以了<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1606917076365-e79652f9-3c56-4259-87d4-b6e979af277d.png#align=left&amp;display=inline&amp;height=181&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=361&amp;originWidth=1920&amp;size=44612&amp;status=done&amp;style=shadow&amp;width=960" alt="image.png"> &gt; <img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1606917146702-bc316303-78f2-4746-94fa-72e4cda90dd0.png#align=left&amp;display=inline&amp;height=196&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=391&amp;originWidth=1920&amp;size=87061&amp;status=done&amp;style=shadow&amp;width=960" alt="image.png"><br>最后就会出现下面的图，接下来，小吴在他的 GitHub 上同意接受这个请求就可以了。（或者小王有权限小王自己接受也可以）<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1606917264180-37c25758-4db9-44f8-a3f6-0ca725d6c0fd.png#align=left&amp;display=inline&amp;height=435&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=869&amp;originWidth=1435&amp;size=132722&amp;status=done&amp;style=shadow&amp;width=717.5" alt="image.png"></p>
</blockquote>
]]></content:encoded>
      <comments>https://www.wztlink1013.com/blog/iwvugw/#comments</comments>
    </item>
    
    <item>
      <title><![CDATA[P224.基本计算器]]></title>
      <link>https://www.wztlink1013.com/blog/ckr31m/</link>
      <guid>https://www.wztlink1013.com/blog/ckr31m/</guid>
      <pubDate>Tue Dec 01 2020 11:21:00 GMT+0000 (Coordinated Universal Time)</pubDate>
      <description>
      <![CDATA[P224.基本计算器]]>
      
      </description>
      <content:encoded><![CDATA[<h2 id="问题思路"><a href="#问题思路" class="headerlink" title="问题思路"></a>问题思路</h2><p>用栈来作为临时存取非括号的求和数。对字符串进行逐个遍历，然后对遇到的每个字符串进行判断</p>
<ul>
<li>数字：将其求和到 sum 当中</li>
<li>（：将上述 sum 和符号压入栈内</li>
<li>）：将栈内的元素取出与现有 sum 求和</li>
<li>+：直接走</li>
<li>-：直接走不过给下一个计算数提前加负号</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre><code class="java">package com.wztlink1013.problems.leetcode.editor.cn;

// P224.基本计算器
//实现一个基本的计算器来计算一个简单的字符串表达式的值。
//
// 字符串表达式可以包含左括号 ( ，右括号 )，加号 + ，减号 -，非负整数和空格 。
//
// 示例 1:
//
// 输入: &quot;1 + 1&quot;
//输出: 2
//
//
// 示例 2:
//
// 输入: &quot; 2-1 + 2 &quot;
//输出: 3
//
// 示例 3:
//
// 输入: &quot;(1+(4+5+2)-3)+(6+8)&quot;
//输出: 23
//
// 说明：
//
//
// 你可以假设所给定的表达式都是有效的。
// 请不要使用内置的库函数 eval。
//
// Related Topics 栈 数学
// 👍 309 👎 0

import java.util.Stack;

public class P224BasicCalculator{
    public static void main(String[] args) {
        Solution solution = new P224BasicCalculator().new Solution();
        int key_1 = solution.calculate(&quot;7896979&quot;);
        int key_2 = solution.calculate(&quot;(23-2)-33+1111&quot;);
        System.out.println(key_1);
        System.out.println(key_2);
    }

//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public int calculate(String s) {
        Stack&lt;Integer&gt; stack_1 = new Stack&lt;Integer&gt;();
        int sum = 0;
        int sign = 1;
        int num = 0;

        for (int i=0;i&lt;s.length();i++) {
            char ch = s.charAt(i);
            if (Character.isDigit(ch)) {
                num = 10 * num + (int) (ch - &#39;0&#39;);
            } else if (ch == &#39;+&#39;) {
                num = num * sign;
                sum = sum + num;
                sign = 1;
                num = 0;
            } else if (ch == &#39;-&#39;) {
                num = num * sign;
                sum = sum + num;
                sign = -1;
                num = 0;
            } else if (ch == &#39;(&#39;) {
                stack_1.push(sum);
                stack_1.push(sign);
                sum = 0;
                num = 0;
                sign = 1;
            } else if (ch == &#39;)&#39;) {
                num = num * sign;
                sum = sum + num;
                sum = stack_1.pop() * sum;
                sum = sum + stack_1.pop();
                num = 0;
                sign = 1;
            }

        }
        sum = sum + sign * num;
        return sum;
    }}
//leetcode submit region end(Prohibit modification and deletion)

}
</code></pre>
]]></content:encoded>
      <comments>https://www.wztlink1013.com/blog/ckr31m/#comments</comments>
    </item>
    
    <item>
      <title><![CDATA[.gitignore文件使用总结]]></title>
      <link>https://www.wztlink1013.com/blog/hgxgvd/</link>
      <guid>https://www.wztlink1013.com/blog/hgxgvd/</guid>
      <pubDate>Fri Nov 27 2020 09:11:00 GMT+0000 (Coordinated Universal Time)</pubDate>
      <description>
      <![CDATA[在Git项目将要提交到github仓库的时候，有些时候我们想要将指定文件不push，例如含有敏感信息类似token的文件，或者.class、.xml、等文件]]>
      
      </description>
      <content:encoded><![CDATA[<blockquote>
<p>这篇文章是根据博客园用户<a href="https://home.cnblogs.com/u/kevingrace/" target="_blank" rel="noopener">散尽浮华</a>整理来的，原文请看：<a href="https://www.cnblogs.com/kevingrace/p/5690241.html" target="_blank" rel="noopener">https://www.cnblogs.com/kevingrace/p/5690241.html</a></p>
</blockquote>
<p>在 Git 项目将要提交到 github 仓库的时候，有些时候我们想要将指定文件不 push，例如含有敏感信息类似 token 的文件，或者.class、.xml、等文件</p>
<h2 id="忽略指定文件的-push-的三种方式"><a href="#忽略指定文件的-push-的三种方式" class="headerlink" title="忽略指定文件的 push 的三种方式"></a>忽略指定文件的 push 的三种方式</h2><ul>
<li>方式一：在 Git 项目中定义.gitignore 文件</li>
<li>方式二：在 Git 项目的设置中指定排除文件</li>
<li>方式三：定义 Git 全局的 .gitignore 文件</li>
</ul>
<h2 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h2><pre><code>#               表示此为注释,将被Git忽略
*.a             表示忽略所有 .a 结尾的文件
!lib.a          表示但lib.a除外
/TODO           表示仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO
build/          表示忽略 build/目录下的所有文件，过滤整个build文件夹；
doc/*.txt       表示会忽略doc/notes.txt但不包括 doc/server/arch.txt

bin/:           表示忽略当前路径下的bin文件夹，该文件夹下的所有内容都会被忽略，不忽略 bin 文件
/bin:           表示忽略根目录下的bin文件
/*.c:           表示忽略cat.c，不忽略 build/cat.c
debug/*.obj:    表示忽略debug/io.obj，不忽略 debug/common/io.obj和tools/debug/io.obj
**/foo:         表示忽略/foo,a/foo,a/b/foo等
a/**/b:         表示忽略a/b, a/x/b,a/x/y/b等
!/bin/run.sh    表示不忽略bin目录下的run.sh文件
*.log:          表示忽略所有 .log 文件
config.php:     表示忽略当前路径的 config.php 文件

/mtk/           表示过滤整个文件夹
*.zip           表示过滤所有.zip文件
/mtk/do.c       表示过滤某个具体文件

被过滤掉的文件就不会出现在git仓库中（gitlab或github）了，当然本地库中还有，只是push的时候不会上传。

需要注意的是，gitignore还可以指定要将哪些文件添加到版本管理中，如下：
!*.zip
!/mtk/one.txt

唯一的区别就是规则开头多了一个感叹号，Git会将满足这类规则的文件添加到版本管理中。为什么要有两种规则呢？
想象一个场景：假如我们只需要管理/mtk/目录中的one.txt文件，这个目录中的其他文件都不需要管理，那么.gitignore规则应写为：：
/mtk/*
!/mtk/one.txt

假设我们只有过滤规则，而没有添加规则，那么我们就需要把/mtk/目录下除了one.txt以外的所有文件都写出来！
注意上面的/mtk/*不能写为/mtk/，否则父目录被前面的规则排除掉了，one.txt文件虽然加了!过滤规则，也不会生效！

----------------------------------------------------------------------------------
还有一些规则如下：
fd1/*
说明：忽略目录 fd1 下的全部内容；注意，不管是根目录下的 /fd1/ 目录，还是某个子目录 /child/fd1/ 目录，都会被忽略；

/fd1/*
说明：忽略根目录下的 /fd1/ 目录的全部内容；

/*
!.gitignore
!/fw/
/fw/*
!/fw/bin/
!/fw/sf/
说明：忽略全部内容，但是不忽略 .gitignore 文件、根目录下的 /fw/bin/ 和 /fw/sf/ 目录；注意要先对bin/的父目录使用!规则，使其不被排除。
</code></pre><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li>文章主要参考：<a href="https://www.cnblogs.com/kevingrace/p/5690241.html" target="_blank" rel="noopener">https://www.cnblogs.com/kevingrace/p/5690241.html</a></li>
</ul>
]]></content:encoded>
      <comments>https://www.wztlink1013.com/blog/hgxgvd/#comments</comments>
    </item>
    
    <item>
      <title><![CDATA[sdnu-dboj-成绩管理-Movie]]></title>
      <link>https://www.wztlink1013.com/blog/zhdy1x/</link>
      <guid>https://www.wztlink1013.com/blog/zhdy1x/</guid>
      <pubDate>Thu Nov 19 2020 06:23:23 GMT+0000 (Coordinated Universal Time)</pubDate>
      <description>
      <![CDATA[几乎都是SELECT语句训练]]>
      
      </description>
      <content:encoded><![CDATA[<blockquote>
<p>题目入口：<a href="http://db.itoi.sd.cn/problem/set" target="_blank" rel="noopener">http://db.itoi.sd.cn/problem/set</a></p>
</blockquote>
<h2 id="成绩管理相关题目"><a href="#成绩管理相关题目" class="headerlink" title="成绩管理相关题目"></a>成绩管理相关题目</h2><h3 id="Student-表"><a href="#Student-表" class="headerlink" title="Student 表"></a>Student 表</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1600849205116-d4263820-8bbb-4d01-b97b-a0363f4498e7.png#align=left&amp;display=inline&amp;height=216&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=432&amp;originWidth=722&amp;size=41200&amp;status=done&amp;style=shadow&amp;width=361" alt="image.png"></p>
<h3 id="Course-表"><a href="#Course-表" class="headerlink" title="Course 表"></a>Course 表</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1600849217512-41be815b-8bc4-4b6a-82c2-cbb4d335c9b9.png#align=left&amp;display=inline&amp;height=256&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=511&amp;originWidth=632&amp;size=38392&amp;status=done&amp;style=shadow&amp;width=316" alt="image.png"></p>
<h3 id="SC-表"><a href="#SC-表" class="headerlink" title="SC 表"></a>SC 表</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1600849229639-8d5cd91f-d87e-49e9-a1cd-9c563b64723f.png#align=left&amp;display=inline&amp;height=262&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=523&amp;originWidth=492&amp;size=32976&amp;status=done&amp;style=shadow&amp;width=246" alt="image.png"></p>
<h3 id="初始化-SQL-语句"><a href="#初始化-SQL-语句" class="headerlink" title="初始化 SQL 语句"></a>初始化 SQL 语句</h3><pre><code class="sql">SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

/*学生表*/
CREATE TABLE Student
(
    Sno  INT(9) PRIMARY KEY,
    Sname VARCHAR(10),
    Ssex  CHAR(2),
    Sage  TINYINT(3),
    Sdept VARCHAR(20)
);
INSERT INTO Student
VALUES (201215121, &#39;李勇&#39;, &#39;男&#39;, 20, &#39;CS&#39;),
     (201215122, &#39;刘晨&#39;, &#39;女&#39;, 19, &#39;CS&#39;),
    (201215123, &#39;王敏&#39;, &#39;女&#39;, 18, &#39;MA&#39;),
    (201215125, &#39;张立&#39;, &#39;男&#39;, 19, &#39;IS&#39;),
    (201215133, &#39;张三&#39;, &#39;男&#39;, 21, &#39;TE&#39;),
     (201215137, &#39;赵四&#39;, &#39;男&#39;, 23, &#39;TE&#39;),
     (201215139, &#39;田二&#39;, &#39;女&#39;, 24, &#39;CS&#39;),
     (201215140, &#39;李四&#39;, &#39;男&#39;, 21, &#39;CS&#39;),
     (201215141, &#39;郑五&#39;, &#39;女&#39;, 22, &#39;IS&#39;);

/*课程表*/
CREATE TABLE Course
(
    Cno      INT(4) PRIMARY KEY,
    Cname     VARCHAR(40),
    Cpno      INT(4),
    Ccredit     TINYINT(3),
    FOREIGN     KEY (Cpno) REFERENCES Course (Cno)
);
INSERT INTO Course
VALUES    (1, &#39;数据库&#39;, 5, 4),
        (2, &#39;数学&#39;, NULL, 2),
    (3, &#39;信息系统&#39;, 1, 4),
     (4, &#39;操作系统&#39;, 6, 3),
     (5, &#39;数据结构&#39;, 7, 4),
     (6, &#39;数据处理&#39;, NULL, 2),
     (7, &#39;PASCAL语言&#39;, 6, 4);

/*选课表*/
CREATE TABLE SC
(
    Sno  INT(9),
    Cno  INT(4),
    Grade SMALLINT(3),
    PRIMARY KEY (Sno, Cno),
/* 主码由两个属性构成，必须作为表级完整性进行定义*/
    FOREIGN KEY (Sno) REFERENCES Student (Sno),
/* 表级完整性约束条件，Sno是外码，被参照表是Student */
    FOREIGN KEY (Cno) REFERENCES Course (Cno)
/* 表级完整性约束条件， Cno是外码，被参照表是Course*/
);
INSERT INTO SC
VALUES (201215121, 1, 92),
            (201215121, 2, 85),
            (201215121, 3, 88),
            (201215122, 2, 90),
      (201215122, 3, 80),
            (201215122, 6, 59),
         (201215123, 1, 84),
         (201215125, 1, 60),
         (201215125, 3, 90),
         (201215133, 4, 87),
         (201215137, 2, 79),
         (201215139, 2, 80),
         (201215140, 2, 81);

SET FOREIGN_KEY_CHECKS = 1;
</code></pre>
<h3 id="问题代码"><a href="#问题代码" class="headerlink" title="问题代码"></a>问题代码</h3><pre><code class="sql">0
select Sno, Sname
        from Student
1
select Sname, Sno, Sdept
        from Student
2
select Sname, Sno, Sdept
        from Student
3
select distinct Sno
        from SC
4
select distinct Sname
        from Student
        where Sdept=&#39;CS&#39;
5
select Sname, Sage
    from Student
    where Sage&lt;20
6
select Sno
    from SC
    where Grade&lt;60
7
select Sname, Sdept, Sage
    from Student
    where Sage&gt;=20 and Sage&lt;=23
8
select Sname, Sdept, Sage
    from Student
    where Sage&lt;20 or Sage&gt;23
9
select Sname, Ssex
    from Student
    where Sdept=&#39;CS&#39; or Sdept=&#39;MA&#39; or Sdept=&#39;IS&#39;
10
select Sname, Ssex
    from Student
    where Sdept not in (&#39;CS&#39;, &#39;MA&#39;, &#39;IS&#39;)
11
select Sname, Sno, Ssex
    from Student
    where Sname like &#39;刘_&#39;
12
select Sname, Sno
    from Student
    where Sname like &#39;_立&#39;
13
select Sname, Sno, Ssex
    from Student
    where Sname not like &#39;刘_&#39;
14
select Sno, Cno
    from SC
    where Grade is not null
15
select Sname
    from Student
    where Sdept=&#39;CS&#39; and Sage&lt;20
16
select Sno, Grade
    from SC
    where Cno=&#39;3&#39;
    order by Grade desc
17
select *
    from Student
    order by Sdept asc, Sage desc
18
select count(Sno) as &#39;COUNT&#39;
    from Student
19
select count(Sno) as COUNT
        from (
        select Sno
                from SC
                group by sno) as test
20
select avg(Grade) as AVG
    from SC
    where Cno=&#39;1&#39;
21
select max(Grade) as MAX
    from SC
    where Cno=&#39;1&#39;
22
select SUM(Ccredit) as SUM
        from Course, SC
        where Course.Cno=SC.Cno
        and Sno=&#39;201215121&#39;
23
select Cno, count(Grade) as COUNT
        from SC
        group by Cno
24
select Sno
        from(
        select Sno, count(Grade) as COUNT
                from SC
                group by Sno
            )as test
        where COUNT&gt;2
25
select Sno, AVG(Grade) as AVG
        from SC
        group by Sno
        having AVG(Grade)&gt;=88
26
select Student.Sno, Sname, Ssex, Sage, Sdept, Cno, Grade
    from Student inner join SC
    on Student.Sno=SC.Sno
27
SELECT x.Cno, y.Cpno
        FROM Course x, Course y
        WHERE x.Cpno = y.Cno
28
select Student.Sno, Student.Sname
        from Student, SC
        where Student.Sno=SC.Sno
                and SC.Cno=&#39;2&#39;
                and SC.Grade&gt;80
29
select test.Sno, test.Sname, Course.Cname, test.Grade
    from Course join
        (select SC.Sno, SC.Cno, Student.Sname, SC.Grade
            from Student join SC
                on Student.Sno=SC.Sno)as test
        on Course.Cno=test.Cno
</code></pre>
<h2 id="Movie-相关题目"><a href="#Movie-相关题目" class="headerlink" title="Movie 相关题目"></a>Movie 相关题目</h2><pre><code class="sql">30
select title
        from movie
        where director=&#39;Steven Spielberg&#39;
31
select year
        from movie
        where mID in (
                select mID
                from rating
                where stars=&#39;4&#39; or stars=&#39;5&#39;
                )
        order by year asc
32
select title
        from movie
        where mID not in (
                select mID
                    from rating)
33
select name
        from reviewer
        where rID in (
                select rID
                        from rating
                        where ratingDate is null)
34
select reviewer.name, test.title, test.stars, test.ratingDate
from reviewer join (
    select movie.title, rating.rID, rating.stars, rating.ratingDate
    from movie join rating
    on movie.mID=rating.mID
    ) as test
on reviewer.rID=test.rID
order by reviewer.name, test.title, test.stars
35

37
select movie.title, rating_2.stars_avg as stars
from movie join (
    select mID, AVG(stars) as stars_avg
    from rating
    group by mID) as rating_2
on movie.mID=rating_2.mID
order by stars desc, title
38
select name
from reviewer
where rID in(
    select rID
    from rating
    group by rID
    having COUNT(rID)&gt;=3)
39
select name
from reviewer
where rID in (
select distinct rID
from rating
where mID in (
    select mID
    from movie
    where title=&#39;Gone with the Wind&#39;))
 40
 select temp.name as name, movie.title as title, temp.stars as stars
    from movie join (
        select rating.stars, reviewer.name, rating.mID
        from rating join reviewer
        on rating.rID=reviewer.rID) as temp
    on movie.mID=temp.mID
    where movie.director=temp.name

</code></pre>
]]></content:encoded>
      <comments>https://www.wztlink1013.com/blog/zhdy1x/#comments</comments>
    </item>
    
    <item>
      <title><![CDATA[贪心算法-Huffman算法]]></title>
      <link>https://www.wztlink1013.com/blog/ggu8v9/</link>
      <guid>https://www.wztlink1013.com/blog/ggu8v9/</guid>
      <pubDate>Sat Nov 14 2020 06:24:00 GMT+0000 (Coordinated Universal Time)</pubDate>
      <description>
      <![CDATA[贪心算法-Huffman算法]]>
      
      </description>
      <content:encoded><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>压缩算法，目的就是根据字母的出现频率来“按需分配”编码来优化编码方式。</p>
<p>比如：给出一串字母 <code>Huffman Coding</code>   ，按照计算机处理形式，会根据 ascll 码将这串字符编码，具体形式（十进制）就是 104 117 102 102 109 97 110 32 67 111 100 105 110 103，然后转换成二进制，最后会得到需要 97 个比特来存储。</p>
<h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><p>算法角度来讲对上述问题 ascll 编码方式是浪费空间的，优化方向是改变编码方式，根据字母出现的频率来“按需分配”进制位。</p>
<p>给出下面所给出的字母，以及出现的频率，来得到哈夫曼编码<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1605340774734-5ec5e8f1-0fae-47ff-8ded-dccf9611a3ad.png#align=left&amp;display=inline&amp;height=45&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=89&amp;originWidth=411&amp;size=4276&amp;status=done&amp;style=shadow&amp;width=205.5" alt="image.png"><br>先提出将频率小的依次加入。d 和 h 组合权值为 9(或者说 A 只是称呼方便)，然后将这个 9“替换 d 和 h”代入整个序列，在进行插入树操作，</p>
<blockquote>
<p>过程中，遵循数字大的在左数字小的在右原则（互换也没关系，只不过换的是二进制的 0 和 1）</p>
</blockquote>
<p>在进行到 E 的时候，此时的队列应该为 120 107 42 37，所以此时需要重新调整队列，然后进行到结束。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1605340899720-d8867a90-d01c-4bf6-8ec7-ca0e812a99dd.png#align=left&amp;display=inline&amp;height=221&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=443&amp;originWidth=376&amp;size=24239&amp;status=done&amp;style=shadow&amp;width=188" alt="image.png"><br>最后的编码结果为：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1605341313840-61587c86-135d-4ba0-96aa-844868de1d56.png#align=left&amp;display=inline&amp;height=101&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=201&amp;originWidth=165&amp;size=4405&amp;status=done&amp;style=shadow&amp;width=82.5" alt="image.png"></p>
<h2 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h2><pre><code class="cpp">#include &lt;stdio.h&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
namespace NS_HuffmanCoding {
using namespace std;
void BuildHuffmanTree();
void Initialization(vector&lt;pair&lt;char, int&gt;&gt; chars);
void Finalization();
struct HFMNode {
  char Ch; int Freq;
  HFMNode* Left, * Right;
  HFMNode(char pCh, int pFreq, HFMNode* pLeft, HFMNode* pRight)
    : Ch(pCh), Freq(pFreq), Left(pLeft), Right(pRight) {}
  HFMNode(char pCh, int pFreq)
    : HFMNode(pCh, pFreq, NULL, NULL) {}
};
void MinHeapify(vector&lt;HFMNode*&gt;&amp; H);
void InsertH(vector&lt;HFMNode*&gt;&amp; H, HFMNode* node);
void SiftDown(vector&lt;HFMNode*&gt;&amp; H, int i);
void SiftUp(vector&lt;HFMNode*&gt;&amp; H, int i);
HFMNode* ExtractMin(vector&lt;HFMNode*&gt;&amp; H);
void DeleteANode(HFMNode* node);
void ShowInput(vector&lt;pair&lt;char, int&gt;&gt; chars);
void Output();
static vector&lt;HFMNode*&gt; Q;
void HuffmanCodingCaller(vector&lt;pair&lt;char, int&gt;&gt; chars)
{
  ShowInput(chars);
  Initialization(chars);
  BuildHuffmanTree();
  Output();
  Finalization();
}
void BuildHuffmanTree()
{
  char C = &#39;A&#39;;
  while (Q.size() &gt; 1)
  {
    HFMNode* x = ExtractMin(Q);
    HFMNode* y = ExtractMin(Q);
    HFMNode* z = new HFMNode(C++, x-&gt;Freq + y-&gt;Freq, x, y);
    InsertH(Q, z);
  }
}
HFMNode* ExtractMin(vector&lt;HFMNode*&gt;&amp; H)
{
  swap(H.front(), H.back());
  HFMNode* p = H.back();
  H.pop_back();
  if (!H.empty())
    SiftDown(H, 0);
  return p;
}
void SiftDown(vector&lt;HFMNode*&gt;&amp; H, int i)
{
    while ((i = (i &lt;&lt; 1) + 1) &lt; H.size()) {
        if ((i + 1 &lt; H.size()) &amp;&amp; (H[i + 1]-&gt;Freq &lt; H[i]-&gt;Freq))
            i = i + 1;
        if (H[(i - 1) &gt;&gt; 1]-&gt;Freq &gt; H[i]-&gt;Freq)
            swap(H[(i - 1) &gt;&gt; 1], H[i]);
        else break;
    }
}
void InsertH(vector&lt;HFMNode*&gt;&amp; H, HFMNode* node)
{
  H.push_back(node);
  SiftUp(H, H.size() - 1);
}
void SiftUp(vector&lt;HFMNode*&gt;&amp; H, int i)
{
  while (i &gt; 0 &amp;&amp; H[i]-&gt;Freq &lt; H[(i - 1) &gt;&gt; 1]-&gt;Freq) {
    swap(H[i], H[(i - 1) &gt;&gt; 1]);
    i = (i - 1) &gt;&gt; 1;
  }
}
void MinHeapify(vector&lt;HFMNode*&gt;&amp; H)
{
  for (int i = (H.size() &gt;&gt; 1) - 1; i &gt;= 0; i--) {
    SiftDown(H, i);
  }
}

void Initialization(vector&lt;pair&lt;char, int&gt;&gt; chars)
{
  Q.clear();
  for (auto ch : chars)
    Q.push_back(new HFMNode(ch.first, ch.second));
  MinHeapify(Q);
}
void Finalization()
{
  DeleteANode(Q[0]);
}
void DeleteANode(HFMNode* node)
{
  if (node-&gt;Left)
  {
    DeleteANode(node-&gt;Left);
    DeleteANode(node-&gt;Right);
  }
  delete node;
}
void ShowInput(vector&lt;pair&lt;char, int&gt;&gt; chars)
{
  printf(&quot;Huffman coding input: \n&quot;);
  for (auto c : chars)
    printf(&quot;%c,%d; &quot;, c.first, c.second);
  printf(&quot;\n&quot;);
}
static vector&lt;char&gt; coding;
static vector&lt;pair&lt;char, vector&lt;char&gt;&gt;&gt; codingList;
void GetHuffmanCoding(HFMNode* node)
{
  if (node-&gt;Left)
  {
    coding.push_back(&#39;0&#39;);
    GetHuffmanCoding(node-&gt;Left);
    coding.pop_back();
    coding.push_back(&#39;1&#39;);
    GetHuffmanCoding(node-&gt;Right);
    coding.pop_back();
  }
  else
  {
    codingList.push_back(pair&lt;char,
      vector&lt;char&gt;&gt;(node-&gt;Ch, coding));
  }
}
void Output()
{
  printf(&quot;Huffman coding:\n&quot;);
  coding.clear();
  codingList.clear();
  GetHuffmanCoding(Q[0]);
  sort(codingList.begin(), codingList.end());
  for (auto c1 : codingList)
  {
    printf(&quot;  %c: &quot;, c1.first);
    for (auto c2 : c1.second)
      printf(&quot;%c&quot;, c2);
    printf(&quot;\n&quot;);
  }
  printf(&quot;\n&quot;);
}
} //namespace NS_HuffmanCoding
using namespace NS_HuffmanCoding;
void TestHuffmanCoding()
{
  vector&lt;vector&lt;pair&lt;char, int&gt;&gt;&gt; charLists = {
      //Introduction to Algorithms
     {
        { {&#39;a&#39;,40}, {&#39;b&#39;,13}, {&#39;c&#39;,12},
          {&#39;d&#39;,16}, {&#39;e&#39;,9}, {&#39;f&#39;,5} },
     },
     //ÑÏÎµÃô
     {
        { {&#39;a&#39;,5}, {&#39;b&#39;,29}, {&#39;c&#39;,7}, {&#39;d&#39;,8},
          {&#39;e&#39;,14}, {&#39;f&#39;,23}, {&#39;g&#39;,3}, {&#39;h&#39;,11} },
     },
  };
  int n = charLists.size();
  for (int i = 0; i &lt; n; i++)
  {
    HuffmanCodingCaller(charLists[i]);
  }
}
</code></pre>
]]></content:encoded>
      <comments>https://www.wztlink1013.com/blog/ggu8v9/#comments</comments>
    </item>
    
    <item>
      <title><![CDATA[C++匿名函数]]></title>
      <link>https://www.wztlink1013.com/blog/uq89oe/</link>
      <guid>https://www.wztlink1013.com/blog/uq89oe/</guid>
      <pubDate>Sat Nov 14 2020 03:26:00 GMT+0000 (Coordinated Universal Time)</pubDate>
      <description>
      <![CDATA[C++匿名函数]]>
      
      </description>
      <content:encoded><![CDATA[<h3 id="常用形式"><a href="#常用形式" class="headerlink" title="常用形式"></a>常用形式</h3><pre><code class="cpp">[](int x, int y) -&gt; int { int z = x + y; return z; } //这样显示指定返回类型:

[](int x, int y) { return x + y; } // 隐式返回类型
[](int&amp; x) { ++x; }   // 没有return语句 -&gt; lambda 函数的返回类型是&#39;void&#39;
[]() { ++global_x; }  // 没有参数,仅访问某个全局变量
[]{ ++global_x; }     // 与上一个相同,省略了()
</code></pre>
<h3 id="小例子"><a href="#小例子" class="headerlink" title="小例子"></a>小例子</h3><pre><code class="cpp">#include &lt;iostream&gt;

int main() {
    // lambda表达式
    auto multiply = [](int a, int b) -&gt; int { return a * b; };
    // 匿名函数调用
    auto result = multiply(2, 4);
    std::cout &lt;&lt; result &lt;&lt; std::endl;
    return 0;
}
</code></pre>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote>
<p>一些进一步用法<a href="https://www.cnblogs.com/pzhfei/archive/2013/01/14/lambda_expression.html" target="_blank" rel="noopener">https://www.cnblogs.com/pzhfei/archive/2013/01/14/lambda_expression.html</a></p>
</blockquote>
]]></content:encoded>
      <comments>https://www.wztlink1013.com/blog/uq89oe/#comments</comments>
    </item>
    
    <item>
      <title><![CDATA[贪心算法-Kruskal 算法]]></title>
      <link>https://www.wztlink1013.com/blog/ghf568/</link>
      <guid>https://www.wztlink1013.com/blog/ghf568/</guid>
      <pubDate>Sat Nov 14 2020 00:45:00 GMT+0000 (Coordinated Universal Time)</pubDate>
      <description>
      <![CDATA[贪心算法-Kruskal 算法]]>
      
      </description>
      <content:encoded><![CDATA[<h2 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h2><p><strong>连通图</strong></p>
<blockquote>
<p>在<a href="https://baike.baidu.com/item/%E5%9B%BE%E8%AE%BA/1433806" target="_blank" rel="noopener">图论</a>中，连通图基于连通的概念。在一个<a href="https://baike.baidu.com/item/%E6%97%A0%E5%90%91%E5%9B%BE/1680427" target="_blank" rel="noopener">无向图</a> G 中，若从<a href="https://baike.baidu.com/item/%E9%A1%B6%E7%82%B9/11030118" target="_blank" rel="noopener">顶点</a>i 到顶点 j 有路径相连（当然从 j 到 i 也一定有路径），则称 i 和 j 是连通的。如果 G 是<a href="https://baike.baidu.com/item/%E6%9C%89%E5%90%91%E5%9B%BE" target="_blank" rel="noopener">有向图</a>，那么连接 i 和 j 的路径中所有的边都必须同向。如果图中任意两点都是连通的，那么图被称作连通图。如果此图是有向图，则称为强连通图（注意：需要双向都有路径）。图的<a href="https://baike.baidu.com/item/%E8%BF%9E%E9%80%9A%E6%80%A7/6688865" target="_blank" rel="noopener">连通性</a>是图的基本性质。</p>
</blockquote>
<p><strong>生成树</strong></p>
<blockquote>
<p>包含图的全部顶点，边数最少的连通子图</p>
</blockquote>
<p><strong>最小生成树</strong></p>
<blockquote>
<p>总权值最小的生成树</p>
</blockquote>
<p>常见问题（该算法）就是求最小生成树。<br><strong>并查集</strong></p>
<blockquote>
<p>是一个数据结构，功能有查找 a 和 b 是否为同一组；将 a 和 b 合并为同一组。</p>
</blockquote>
<h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>把所有边按照权值全部按数值大小拿出来，然后按顺序选取每条边，利用并查集的思想，如果这条边的两个端点不属于同一集合，那么就将它们合并，直到所有的点都属于同一个集合为止。</p>
<p>比如有如下这么一个图：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1605320252853-c5d445e4-aa0e-4279-b9fd-7477f23b1bc1.png#align=left&amp;display=inline&amp;height=95&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=189&amp;originWidth=438&amp;size=10882&amp;status=done&amp;style=shadow&amp;width=219" alt="image.png"><br>单独分析 ①② 边和 ③④ 边情况下，两个不在一个集合里面，<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1605320331669-51ec03dc-caf6-449d-9e8b-e4e62b9f35a6.png#align=left&amp;display=inline&amp;height=96&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=192&amp;originWidth=769&amp;size=21600&amp;status=done&amp;style=shadow&amp;width=384.5" alt="image.png"><br>不断重复，不断判断是否为同一个集合，不在同一个集合的话，就合并，持续如此。比方说当一直操作到权值为 3 的时候，此时就需要将左右两个集合合并了<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1605320497092-00097419-4852-44c4-884e-febd4d37eb65.png#align=left&amp;display=inline&amp;height=101&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=202&amp;originWidth=748&amp;size=22229&amp;status=done&amp;style=shadow&amp;width=374" alt="image.png"><br>最后的结果样式就为如下<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1605320612085-d893c759-4ef1-410c-976e-8f32ddfe6321.png#align=left&amp;display=inline&amp;height=146&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=292&amp;originWidth=780&amp;size=31319&amp;status=done&amp;style=shadow&amp;width=390" alt="image.png"></p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre><code class="cpp">#include &lt;stdio.h&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
namespace NS_KruskalMST {
using namespace std;
void KruskalMST();
int FindSet(int u);
void UnionSets(int u, int v);
void Initialization();
void GenEdges();
void MakeSets();
void Output(int v0);
#define INF INT_MAX
static int n;
static vector&lt;vector&lt;int&gt;&gt; WMatrix;
static vector&lt;pair&lt;pair&lt;int, int&gt;, int&gt;&gt; Edges;
//Node struct for the disjoint set
struct DJSNode {
    int Parent; int Rank;
    DJSNode(int p) : Parent(p), Rank(0) {}
};
static vector&lt;DJSNode&gt; DisjointSet;
static vector&lt;pair&lt;int, int&gt;&gt; MST;
//The adjacency list for MST
static vector&lt;vector&lt;int&gt;&gt; MSTList;
static vector&lt;int&gt; Prev;
void KruskalMSTCaller(int an,
    vector&lt;vector&lt;int&gt;&gt; &amp;wMatrix, int v0)
{
    n = an;
    WMatrix = wMatrix;
    Initialization();
    KruskalMST();
    Output(v0);
}
void KruskalMST()
{
    for (auto &amp;e: Edges)
    {
        int u = e.first.first;
        int v = e.first.second;
        int setU = FindSet(u);
        int setV = FindSet(v);
        if (setU != setV)
        {
            MST.push_back(e.first);
            if (MST.size() == n - 1)
                break;
            UnionSets(setU, setV);
        }
    }
}
int FindSet(int u)
{
    while (u != DisjointSet[u].Parent)
        u = DisjointSet[u].Parent;
        //For path compression:
        //DisjointSet[u].Parent =
        //    FindSet(DisjointSet[u].Parent);
    return u;
}
void UnionSets(int u, int v)
{
    if (DisjointSet[u].Rank &gt;= DisjointSet[v].Rank)
        DisjointSet[v].Parent = u;
    else
        DisjointSet[u].Parent = v;
    if (DisjointSet[u].Rank == DisjointSet[v].Rank)
        DisjointSet[u].Rank++;
}
void Initialization()
{
    GenEdges();
    sort(Edges.begin(), Edges.end(),
        [](pair&lt;pair&lt;int, int&gt;, int&gt;a,
            pair&lt;pair&lt;int, int&gt;, int&gt;b)
        {return a.second &lt; b.second; });
    MakeSets();
    MST.clear();
}
void GenEdges()
{
    Edges.clear();
    //Traverse the upper triangle of WMatrix
    for (int i = 0; i &lt; n - 1; i++)
    {
        for (int j = i + 1; j &lt; n; j++)
            if (WMatrix[i][j] != INF)
                Edges.push_back({ {i, j},
                    WMatrix[i][j] });
    }
}
void MakeSets()
{
    DisjointSet.clear();
    for (int i = 0; i &lt; n; i++)
        DisjointSet.push_back(DJSNode(i));
}
void OutputWMatrix()
{
    printf(&quot;n = %d\n&quot;, n);
    printf(&quot;The weight matrix:\n&quot;);
    printf(&quot;%3c&quot;, &#39; &#39;);
    for (int j = 0; j &lt; n; j++)
        printf(&quot;%3d&quot;, j + 1);
    printf(&quot;\n&quot;);
    for (int i = 0; i &lt; n; i++)
    {
        printf(&quot;%3d&quot;, i + 1);
        for (auto j : WMatrix[i])
            if (j &lt; INF)
                printf(&quot;%3d&quot;, j);
            else
                printf(&quot;%3c&quot;, &#39;*&#39;);
        printf(&quot;\n&quot;);
    }
}
void OutputPath(int u)
{
    if (Prev[u] == -1)
        printf(&quot;%d&quot;, u + 1);
    else
    {
        OutputPath(Prev[u]);
        printf(&quot;-%d&quot;, u + 1);
    }
}
void GenMSTList()
{
    MSTList.clear();
    MSTList.resize(n);
    for (auto &amp;e: MST)
    {
        MSTList[e.first].push_back(e.second);
        MSTList[e.second].push_back(e.first);
    }
}
void GenPrev(int v)
{
    for (auto &amp;u : MSTList[v])
        if (u != -1)
        {
            Prev[u] = v;
            auto w = find(MSTList[u].begin(),
                MSTList[u].end(), v);
            MSTList[u][w - MSTList[u].begin()] = -1;
            GenPrev(u);
        }
}
void Output(int v0)
{
    printf(&quot;Kruskal&#39;s MST algorithm\n&quot;);
    OutputWMatrix();
    int wSum = 0;
    for (int i = 0; i &lt; n - 1; i++)
        wSum += WMatrix[MST[i].first][MST[i].second];
    GenMSTList();
    Prev.clear();
    Prev.resize(n);
    Prev[v0] = -1;
    GenPrev(v0);
    printf(&quot;The MST edges:\n&quot;);
    printf(&quot;Edge Weight\n&quot;);
    for (auto &amp;e : MST)
        printf(&quot; %d-%d  %d\n&quot;, e.first + 1, e.second + 1,
            WMatrix[e.first][e.second]);
    printf(&quot;Total MST weight: %d\n&quot;, wSum);
    printf(&quot;The MST paths from vertex %d:\n&quot;, v0 + 1);
    for (int u = 0; u &lt; n; u++)
        if (u != v0)
        {
            printf(&quot;%3d: &quot;, u + 1);
            OutputPath(u);
            printf(&quot;\n&quot;);
        }
    printf(&quot;\n&quot;);
}
} //namespace NS_KruskalMST
using namespace NS_KruskalMST;
void TestKruskalMST(int v0 = 0)
{
    vector&lt;vector&lt;vector&lt;int&gt;&gt;&gt; w = {
        //https://www.geeksforgeeks.org/
        //prims-minimum-spanning-tree-mst-greedy-algo-5/
        {
            {   0,  2,INF,  6,INF },
            {   2,  0,  3,  8,  5 },
            { INF,  3,  0,INF,  7 },
            {   6,  8,INF,  0,  9 },
            { INF,  5,  7,  9,  0 }
        },
        // Dijkstra&#39;s algorithm on Wikipedia
        {
            {   0,  7,  9,INF,INF, 14 },
            {   7,  0, 10, 15,INF,INF },
            {   9, 10,  0, 11,INF,  2 },
            { INF, 15, 11,  0,  6,INF },
            { INF,INF,INF,  6,  0,  9 },
            {  14,INF,  2,INF,  9,  0 },
        },
        //https://www.geeksforgeeks.org/
        //kruskals-minimum-spanning-tree-using-stl-in-c/
        {
            {   0,  4,INF,INF,INF,INF,INF,  8,INF },
            {   4,  0,  8,INF,INF,INF,INF, 11,INF },
            { INF,  8,  0,  7,INF,  4,INF,INF,  2 },
            { INF,INF,  7,  0,  9, 14,INF,INF,INF },
            { INF,INF,INF,  9,  0, 10,INF,INF,INF },
            { INF,INF,  4, 14, 10,  0,  2,INF,INF },
            { INF,INF,INF,INF,INF,  2,  0,  1,  6 },
            {   8, 11,INF,INF,INF,INF,  1,  0,  7 },
            { INF,INF,  2,INF,INF,INF,  6,  7,  0 },
        },
    };
    int k = w.size();
    for (int i = 0; i &lt; k; i++)
    {
      if (v0 &gt; w[i].size() - 1)
        v0 = w[i].size() - 1;
      KruskalMSTCaller(w[i].size(), w[i], v0);
    }
}
</code></pre>
]]></content:encoded>
      <comments>https://www.wztlink1013.com/blog/ghf568/#comments</comments>
    </item>
    
    <item>
      <title><![CDATA[搭建Windows子系统Linux]]></title>
      <link>https://www.wztlink1013.com/blog/xnh83z/</link>
      <guid>https://www.wztlink1013.com/blog/xnh83z/</guid>
      <pubDate>Mon Nov 09 2020 09:39:00 GMT+0000 (Coordinated Universal Time)</pubDate>
      <description>
      <![CDATA[搭建Windows子系统Linux]]>
      
      </description>
      <content:encoded><![CDATA[<h2 id="Windows-子系统-Linux"><a href="#Windows-子系统-Linux" class="headerlink" title="Windows 子系统 Linux"></a>Windows 子系统 Linux</h2><h3 id="子系统-Linux-下载安装"><a href="#子系统-Linux-下载安装" class="headerlink" title="子系统 Linux 下载安装"></a>子系统 Linux 下载安装</h3><p>在 windows 里面搜索 <code>windows功能</code><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1604913834448-30d164c9-e0a6-47f8-baac-03c5d6648186.png#align=left&amp;display=inline&amp;height=517&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1033&amp;originWidth=1176&amp;size=659449&amp;status=done&amp;style=shadow&amp;width=588" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1604913865729-b20b3a35-ab49-48c9-be97-9f3c56d6d7a6.png#align=left&amp;display=inline&amp;height=295&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=590&amp;originWidth=623&amp;size=61833&amp;status=done&amp;style=shadow&amp;width=311.5" alt="image.png"><br>然后已知下一步操作即可，该过程中会有重启的过程。<br>之后重启之后在应用商店下载 Ubuntu 系统，如下。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1604913776014-38c5ce17-996d-4827-8c49-bb047b2f7d3c.png#align=left&amp;display=inline&amp;height=339&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=948&amp;originWidth=1200&amp;size=183352&amp;status=done&amp;style=shadow&amp;width=429" alt="image.png"><br>然后启动的时候，会有让自己输入用户名和密码的情况。输入确认就好了（<strong>输入密码的时候，终端内不会显示光标以及输入的字符！但是会有密码验证</strong>）</p>
<h3 id="子系统-Linux-文件目录"><a href="#子系统-Linux-文件目录" class="headerlink" title="子系统 Linux 文件目录"></a>子系统 Linux 文件目录</h3><p><code>C:\Users\wztli\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState\rootfs\home\wztlink1013</code><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1604914117863-4fc253c2-1978-44b1-94c6-48e82a3ddf3a.png#align=left&amp;display=inline&amp;height=111&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=221&amp;originWidth=1468&amp;size=28524&amp;status=done&amp;style=shadow&amp;width=734" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1604914176405-056c5008-8168-40f8-a599-0e7951cad309.png#align=left&amp;display=inline&amp;height=293&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=585&amp;originWidth=1406&amp;size=115194&amp;status=done&amp;style=shadow&amp;width=703" alt="image.png"></p>
<h3 id="Linux-访问-Windows-文件"><a href="#Linux-访问-Windows-文件" class="headerlink" title="Linux 访问 Windows 文件"></a>Linux 访问 Windows 文件</h3><p>如下图中 1 所示，访问时，需要先将 Windows 磁盘挂载到/mnt 下面，然后就可以访问了。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1604914600884-f758bc8f-668d-4354-be9f-f9be774cfff1.png#align=left&amp;display=inline&amp;height=189&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=378&amp;originWidth=1122&amp;size=63616&amp;status=done&amp;style=shadow&amp;width=561" alt="image.png"></p>
]]></content:encoded>
      <comments>https://www.wztlink1013.com/blog/xnh83z/#comments</comments>
    </item>
    
    <item>
      <title><![CDATA[[转]uni-app相关知识]]></title>
      <link>https://www.wztlink1013.com/blog/ytoag7/</link>
      <guid>https://www.wztlink1013.com/blog/ytoag7/</guid>
      <pubDate>Fri Nov 06 2020 09:23:00 GMT+0000 (Coordinated Universal Time)</pubDate>
      <description>
      <![CDATA[uni-app简单api调用]]>
      
      </description>
      <content:encoded><![CDATA[<blockquote>
<ul>
<li>本文转载自：<a href="https://ask.dcloud.net.cn/article/35657" target="_blank" rel="noopener">白话 uni-app </a></li>
<li>添加部分细节自己写的内容</li>
</ul>
</blockquote>
<h2 id="uni-app-相对传统的变化"><a href="#uni-app-相对传统的变化" class="headerlink" title="uni-app 相对传统的变化"></a>uni-app 相对传统的变化</h2><h3 id="网络模型的变化"><a href="#网络模型的变化" class="headerlink" title="网络模型的变化"></a>网络模型的变化</h3><p>之前学习的<code>javaweb</code>形式的是“相互嵌套”类型的，<code>jsp</code>代码里面可以有<code>html</code>代码。</p>
<p>以前网页大多是 b/s，服务端代码混合在页面里；<br>现在是 c/s，前后端分离，通过 js api(类似 ajax 的<code>uni.request</code>)获取 json 数据，把数据绑定在界面上渲染。</p>
<h3 id="文件类型变化"><a href="#文件类型变化" class="headerlink" title="文件类型变化"></a>文件类型变化</h3><p>.vue 文件通过编译，编译 js 文件</p>
<h3 id="代码架构大变动"><a href="#代码架构大变动" class="headerlink" title="代码架构大变动"></a>代码架构大变动</h3><p>以前的 HTML 代码节点，有 html 大节点，还有 script 和 style 两个小结点</p>
<pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot; /&gt;
    &lt;title&gt;&lt;/title&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
    &lt;style type=&quot;text/css&quot;&gt;&lt;/style&gt;
  &lt;/head&gt;
  &lt;body&gt;&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>现在 template 是一级节点，用于写<strong>tag 组件</strong>，script 和 style 是并列的一级节点，也就是有 3 个一级节点</p>
<pre><code class="vue">&lt;template&gt;
  &lt;view&gt;
    注意必须有一个view，且只能有一个根view。所有内容写在这个view下面。
  &lt;/view&gt;
&lt;/template&gt;

&lt;script&gt;
export default {};
&lt;/script&gt;

&lt;style&gt;&lt;/style&gt;
</code></pre>
<ul>
<li><a href="https://cn.vuejs.org/v2/guide/single-file-components.html" target="_blank" rel="noopener">Vue 单文件组件</a></li>
</ul>
<p>###</p>
<h3 id="组件-标签的变化"><a href="#组件-标签的变化" class="headerlink" title="组件/标签的变化"></a>组件/标签的变化</h3><p>下为 html 标签和 uni-app 内置组件的映射表：<br>（其实老的 HTML 标签也可以在 uni-app 里使用，uni-app 编译器会在编译时把老标签转为新标签，比如把 div 编译成 view。但不推荐这种用法，调试 H5 端时容易混乱。）</p>
<ul>
<li>div 改成 <a href="https://uniapp.dcloud.io/component/view" target="_blank" rel="noopener">view</a></li>
<li>span、font 改成 <a href="https://uniapp.dcloud.io/component/text" target="_blank" rel="noopener">text</a></li>
<li>a 改成 <a href="https://uniapp.dcloud.io/component/navigator" target="_blank" rel="noopener">navigator</a></li>
<li>img 改成 <a href="https://uniapp.dcloud.io/component/image" target="_blank" rel="noopener">image</a></li>
<li><a href="https://uniapp.dcloud.io/component/input" target="_blank" rel="noopener">input</a> 还在，但 type 属性改成了 confirmtype</li>
<li><a href="https://uniapp.dcloud.io/component/form" target="_blank" rel="noopener">form</a>、<a href="https://uniapp.dcloud.io/component/button" target="_blank" rel="noopener">button</a>、<a href="https://uniapp.dcloud.io/component/checkbox" target="_blank" rel="noopener">checkbox</a>、<a href="https://uniapp.dcloud.io/component/radio" target="_blank" rel="noopener">radio</a>、<a href="https://uniapp.dcloud.io/component/label" target="_blank" rel="noopener">label</a>、<a href="https://uniapp.dcloud.io/component/textarea" target="_blank" rel="noopener">textarea</a>、<a href="https://uniapp.dcloud.io/component/canvas" target="_blank" rel="noopener">canvas</a>、<a href="https://uniapp.dcloud.io/component/video" target="_blank" rel="noopener">video</a> 这些还在。</li>
<li>select 改成 <a href="https://uniapp.dcloud.io/component/picker" target="_blank" rel="noopener">picker</a></li>
<li>iframe 改成 <a href="https://uniapp.dcloud.io/component/web-view" target="_blank" rel="noopener">web-view</a></li>
<li>ul、li 没有了，都用 view 替代</li>
<li>audio 不再推荐使用，改成 api 方式，<a href="https://uniapp.dcloud.io/api/media/background-audio-manager?id=getbackgroundaudiomanager" target="_blank" rel="noopener">背景音频 api 文档</a></li>
</ul>
<p><strong>除了改动外，新增了一批手机端常用的新组件</strong><br>**</p>
<ul>
<li>scroll-view <a href="https://uniapp.dcloud.io/component/scroll-view" target="_blank" rel="noopener">可区域滚动视图容器</a></li>
<li>swiper <a href="https://uniapp.dcloud.io/component/swiper" target="_blank" rel="noopener">可滑动区域视图容器</a></li>
<li>icon <a href="https://uniapp.dcloud.io/component/icon" target="_blank" rel="noopener">图标</a></li>
<li>rich-text <a href="https://uniapp.dcloud.io/component/rich-text" target="_blank" rel="noopener">富文本（不可执行 js，但可渲染各种文字格式和图片）</a></li>
<li>progress <a href="https://uniapp.dcloud.io/component/progress" target="_blank" rel="noopener">进度条</a></li>
<li>slider <a href="https://uniapp.dcloud.io/component/slider" target="_blank" rel="noopener">滑块指示器</a></li>
<li>switch <a href="https://uniapp.dcloud.io/component/switch" target="_blank" rel="noopener">开关选择器</a></li>
<li>camera <a href="https://uniapp.dcloud.io/component/camera" target="_blank" rel="noopener">相机</a></li>
<li>live-player <a href="https://uniapp.dcloud.io/component/live-player" target="_blank" rel="noopener">直播</a></li>
<li>map <a href="https://uniapp.dcloud.io/component/map" target="_blank" rel="noopener">地图</a></li>
<li>cover-view <a href="https://uniapp.dcloud.io/component/cover-view?id=cover-view" target="_blank" rel="noopener">可覆盖原生组件的视图容器</a><br>cover-view 需要多强调几句，uni-app 的非 h5 端的 video、map、canvas、textarea 是原生组件，层级高于其他组件。如需覆盖原生组件，则需要使用 cover-view 组件。详见<a href="https://uniapp.dcloud.net.cn/component/native-component" target="_blank" rel="noopener">层级介绍</a></li>
</ul>
<p>除了内置组件，还有很多开源的扩展组件，把常用操作都进行封装，DCloud 建立了插件市场收录这些扩展组件，详见<a href="https://ext.dcloud.net.cn/" target="_blank" rel="noopener">插件市场</a></p>
<p>**</p>
<h3 id="工程结构和页面管理"><a href="#工程结构和页面管理" class="headerlink" title="工程结构和页面管理"></a>工程结构和页面管理</h3><p>uni-app 的工程结构有单独的要求，<a href="https://uniapp.dcloud.io/frame?id=%e7%9b%ae%e5%bd%95%e7%bb%93%e6%9e%84" target="_blank" rel="noopener">详见</a></p>
<p>每个可显示的页面，都必须在 <a href="https://uniapp.dcloud.io/collocation/pages" target="_blank" rel="noopener">pages.json</a> 中注册。如果你开发过小程序，那么 pages.json 类似 app.json。如果你熟悉 vue，这里没有 vue 的路由，都是在 pages.json 里管理。</p>
<p>原来工程的首页一般是 index.html 或 default.html，是在 web server 里配的。而 uni-app 的首页，是在 pages.json 里配的，page 节点下第一个页面就是首页。一般在/pages/xx 的目录下。</p>
<p>app 和小程序中，为了提升体验，页面提供了原生的导航栏和底部 tabbar，注意这些配置是在 pages.json 中做，而不是在 vue 页面里创建，但点击事件的监听在显示的 vue 页面中做。</p>
<p>如果你熟悉小程序开发的话，对比变化如下：</p>
<ul>
<li>原来 app.json 被一拆为二。页面管理，被挪入了 uni-app 的 pages.json；非页面管理，挪入了 manifest.json</li>
<li>原来的 app.js 和 app.wxss 被合并到了 app.vue 中</li>
</ul>
<h2 id="文件导入方式变化"><a href="#文件导入方式变化" class="headerlink" title="文件导入方式变化"></a>文件导入方式变化</h2><h3 id="js-引入方式"><a href="#js-引入方式" class="headerlink" title="js 引入方式"></a>js 引入方式</h3><p>以前通过<code>script `</code>src <code>、</code> link <code></code>href <code>引入外部的 js 和 css；
现在是**es6**的写法，</code>import`引入外部的 js 模块(注意不是文件)或 css<br>以前</p>
<pre><code class="javascript">&lt;script src=&quot;js/jquery-1.10.2.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
&lt;link href=&quot;css/bootstrap.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;
</code></pre>
<p>现在</p>
<blockquote>
<p>js 要 require 进来，变成了对象。</p>
</blockquote>
<p>在 hello uni-app 项目的 common 目录有一个工具类<code>util.js</code>，可以在 hello uni-app 中搜索这个例子查看。</p>
<pre><code class="javascript">&lt;script&gt;
  var util = require(&#39;../../../common/util.js&#39;); //require这个js模块 var
  formatedPlayTime = util.formatTime(playTime); //调用js模块的方法
&lt;/script&gt;
</code></pre>
<p>而在这个<code>util.js</code>里，要把之前的 function 封装为对象的方法<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1604048264989-b4591bb0-e4bc-4581-aae5-bf7615f268b4.png#align=left&amp;display=inline&amp;height=231&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=606&amp;originWidth=1331&amp;size=70716&amp;status=done&amp;style=shadow&amp;width=508" alt="image.png"><br>当然还有一些高级的用法</p>
<pre><code class="javascript">var dateUtils = require(&quot;../../../common/util.js&quot;).dateUtils; //直接使用js模块的属性。在hello uni-app有示例
import * as echarts from &quot;/components/echarts/echarts.simple.min.js&quot;; //将js导入并重命名为echarts，然后使用echarts.来继续执行方法。
</code></pre>
<h3 id="CSS-引入方式"><a href="#CSS-引入方式" class="headerlink" title="CSS 引入方式"></a>CSS 引入方式</h3><pre><code class="css">&lt;style&gt;
    @import &quot;./common/uni.css&quot;;
    .uni-hello-text{
        color:#7A7E83;
    }
&lt;/style&gt;
</code></pre>
<p><strong>改全局样式：</strong>在根目录下的 app.vue 里写入，每个页面都会加载 app.vue 里的样式。</p>
<h3 id="组件导入"><a href="#组件导入" class="headerlink" title="组件导入"></a>组件导入</h3><p>类似 hexo 博客主题设计一样，能以组件的形式模块化导入。<br>如下是导入一个角标的组件库，在页面上显示一个 abc 并且右上角有个数字角标 1，<a href="http://ext.dcloud.net.cn/plugin?id=21" target="_blank" rel="noopener">详见</a></p>
<pre><code class="vue">&lt;template&gt;
  &lt;view&gt;
    &lt;uni-badge text=&quot;abc&quot; :inverted=&quot;true&quot;&gt;&lt;/uni-badge
    &gt;&lt;!--3.使用组件--&gt;
  &lt;/view&gt;
&lt;/template&gt;
&lt;script&gt;
import uniBadge from &quot;../../../components/uni-badge.vue&quot;; //1.导入组件（这步属于传统vue规范，但在uni-app的easycom下可以省略这步）
export default {
  data() {
    return {};
  },
  components: {
    uniBadge, //2.注册组件（这步属于传统vue规范，但在uni-app的easycom下可以省略这步）
  },
};
&lt;/script&gt;
</code></pre>
<p>如需要全局导入 vue 组件，即每个页面都可以直接使用而不用引用和注册的话，在项目根目录下的 main.js 里处理。如下是 hello uni-app 里的例子。</p>
<pre><code class="javascript">//main.js
import pageHead from &quot;./components/page-head.vue&quot;; //导入
Vue.component(&quot;page-head&quot;, pageHead); //注册。注册后在每个vue的page页面里可以直接使用&lt;page-head&gt;&lt;/page-head&gt;组件。
</code></pre>
<p>上述的组件使用方式属于传统 vue 的概念。uni-app 2.7 以后推出了更简单的组件使用技术<a href="https://uniapp.dcloud.net.cn/collocation/pages?id=easycom" target="_blank" rel="noopener">easycom</a>，无需引用和注册组件，直接在 template 区域使用组件即可。</p>
<h2 id="js-的变化"><a href="#js-的变化" class="headerlink" title="js 的变化"></a>js 的变化</h2><p>js 的变化，分为<strong>运行环境变化</strong>、<strong>数据绑定模式变化</strong>、<strong>api 变化</strong>3 部分。</p>
<h3 id="运行环境从浏览器变成-v8-引擎"><a href="#运行环境从浏览器变成-v8-引擎" class="headerlink" title="运行环境从浏览器变成 v8 引擎"></a>运行环境从浏览器变成 v8 引擎</h3><p>标准 js 语法和 api 都支持，比如 if、for、settimeout、indexOf 等。</p>
<p>但<strong>浏览器专用的</strong>window、document、navigator、location 对象，包括 cookie 等存储，<strong>只有在浏览器中才有</strong>，app 和小程序都不支持。</p>
<blockquote>
<p>可能有些人以为 js 等于浏览器里的 js。其实 js 是 ECMAScript 组织管理的，浏览器中的 js 是 w3c 组织基于 js 规范补充了 window、document、navigator、location 等专用对象。</p>
</blockquote>
<p>在 uni-app 的各个端中，除了 h5 端，其他端的 js 都运行在一个独立的 v8 引擎下，不是在浏览器中，所以浏览器的对象无法使用。如果你做过小程序开发，对此应当很了解。<br><strong>这意味着依赖 document 的很多 HTML 的库，比如 jqurey 无法使用。</strong><br>当然 app 和小程序支持 web-view 组件，里面可以加载标准 HTML，这种页面仍然支持浏览器专用对象 window、document、navigator、location。</p>
<h3 id="以前的-dom-操作，改成-vue-的-MVVM-模式"><a href="#以前的-dom-操作，改成-vue-的-MVVM-模式" class="headerlink" title="以前的 dom 操作，改成 vue 的 MVVM 模式"></a>以前的 dom 操作，改成 vue 的 MVVM 模式</h3><p>现在前端趋势是去 dom 化，改用<strong>mvvm 模式，</strong>更简洁的写法，大幅减少代码行数，同时差量渲染性能更好。<br>uni-app 使用 vue 的数据绑定方式解决 js 和 dom 界面交互的问题。<br>如果你想改变某个 dom 元素的显示内容，比如一个 view 的显示文字：<br><strong>以前</strong>是给 view 设 id，然后 js 里通过选择器获取 dom 元素，进一步通过 js 进行赋值操作，修改 dom 元素的属性或值。<br>如下演示了一段代码，页面中有个显示的文字区和一个按钮，点击按钮后会修改文字区的值</p>
<pre><code class="html">&lt;html&gt;
  &lt;head&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
      document.addEventListener(&quot;DOMContentLoaded&quot;, function () {
        document.getElementById(&quot;spana&quot;).innerText = &quot;456&quot;;
      });
      function changetextvalue() {
        document.getElementById(&quot;spana&quot;).innerText = &quot;789&quot;;
      }
    &lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;span id=&quot;spana&quot;&gt;123&lt;/span&gt;
    &lt;button type=&quot;button&quot; onclick=&quot;changetextvalue()&quot;&gt;修改为789&lt;/button&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>现在的做法，是<strong>vue 的绑定模式</strong>，给这个<strong>dom 元素绑定一个 js 变量</strong>，在 script 中修改 js 变量的值，dom 会自动变化，页面会自动更新渲染</p>
<pre><code class="vue">&lt;template&gt;
  &lt;view&gt;
    &lt;text&gt;{{ textvalue }}&lt;/text
    &gt;&lt;!-- 这里演示了组件值的绑定 --&gt;
    &lt;button :type=&quot;buttontype&quot; @click=&quot;changetextvalue()&quot;&gt;修改为789&lt;/button
    &gt;&lt;!-- 这里演示了属性和事件的绑定 --&gt;
  &lt;/view&gt;
&lt;/template&gt;
&lt;script&gt;
export default {
  data() {
    return {
      textvalue: &quot;123&quot;,
      buttontype: &quot;primary&quot;,
    };
  },
  onLoad() {
    this.textvalue = &quot;456&quot;; //这里修改textvalue的值，其实123都来不及显示就变成了456
  },
  methods: {
    changetextvalue() {
      this.textvalue = &quot;789&quot;; //这里修改textvalue的值，页面自动刷新为789
    },
  },
};
&lt;/script&gt;
</code></pre>
<p>注意上述代码中的 <code>export default {}</code> 里的 <code>data(): {return { }}</code>。<br>在 vue 的设计中，这里存放着页面中需要绑定的数据，写在 data 里，才能被界面正确的绑定和渲染。<br>注意：uni-app 的 vue 页面是 vue 的单文件组件规范，按照 vue 的定义只接受 function，必须用 return 包起来。<br>如果你学过小程序的数据绑定，但不了解 vue，要注意：</p>
<ul>
<li>小程序的数据绑定参考了 vue，但自己修改了一些。在 uni-app 中只支持标准的 vue，不支持小程序的数据绑定语法</li>
<li>小程序里的 setData 在 uni-app 里并不存在，因为 vue 是自动双向数据绑定的。直接通过赋值方式修改数据，如果数据绑定到界面上，界面会自动更新渲染</li>
</ul>
<p>从上述示例，还可看出事件的写法变化。</p>
<ul>
<li>以前，元素的事件是用 onxxx=””，里面写一段 js 或引用 function 的 name，比如上述代码中的<code>onclick=&quot;changetextvalue()&quot;</code></li>
<li>现在，需要在 js 的<code>export default {}</code> 里的 <code>methods: {}</code> 里写一个方法，然后在组件中使用<code>@click=&quot;changetextvalue()&quot;</code></li>
</ul>
<p>在 js 中，与 data 和 methods 平级的，如上述示例代码中的<code>onload()</code>，称为生命周期。在普通 vue 页面里的生命周期叫页面生命周期。在项目根目录的 app.vue 文件中的生命周期叫应用生命周期。<br>除了<code>onload</code>，还有<code>onready</code>等很多生命周期，具体见<a href="https://uniapp.dcloud.io/collocation/frame/lifecycle" target="_blank" rel="noopener">uni-app 的生命周期</a><br>在高级用法里，<strong>vue 支持给组件设 ref（引用标记）</strong>，这类似于之前 html 中给一个 dom 元素设 id，然后在 js 中也可以用<code>this.$refs.xxx</code>来获取。如下：</p>
<pre><code class="vue">&lt;template&gt;
  &lt;view&gt;
    &lt;view ref=&quot;testview&quot;&gt;11111&lt;/view&gt;
    &lt;button @click=&quot;getTest&quot;&gt;获取test节点&lt;/button&gt;
  &lt;/view&gt;
&lt;/template&gt;
&lt;script&gt;
export default {
  methods: {
    getTest() {
      console.log(this.$refs.testview);
    },
  },
};
&lt;/script&gt;
</code></pre>
<h3 id="js-api-的变化"><a href="#js-api-的变化" class="headerlink" title="js api 的变化"></a>js api 的变化</h3><p>因为 uni-app 的 api 是<strong>参考小程序</strong>的，所以<strong>和浏览器的 js api</strong>有很多不同，如</p>
<ol>
<li>alert,confirm 改成 <a href="https://uniapp.dcloud.io/api/ui/prompt?id=showmodal" target="_blank" rel="noopener">uni.showmodel</a></li>
<li>ajax 改成 <a href="https://uniapp.dcloud.io/api/request/request" target="_blank" rel="noopener">uni.request</a></li>
<li>cookie、session 没有了，local.storage 改成 <a href="https://uniapp.dcloud.io/api/storage/storage?id=setstorage" target="_blank" rel="noopener">uni.storage</a></li>
</ol>
<p>uni-app 的 js api 还有很多，但基本就是小程序的 api，把 wx.xxx 改为 uni.xxx 即可。<a href="https://uniapp.dcloud.io/api/README" target="_blank" rel="noopener">详见</a><br>uni-app 在不同的端，支持条件编译，无限制的使用各端独有的 api，<a href="https://uniapp.dcloud.io/platform" target="_blank" rel="noopener">详见条件编译</a></p>
<h2 id="css-的变化"><a href="#css-的变化" class="headerlink" title="css 的变化"></a>css 的变化</h2><p><strong>标准的 css 基本都是支持的。</strong></p>
<h3 id="选择器方面"><a href="#选择器方面" class="headerlink" title="选择器方面"></a>选择器方面</h3><blockquote>
<p>有 2 个变化：</p>
</blockquote>
<ol>
<li>*选择器不支持；</li>
<li>元素选择器里没有 body，改为了 page。微信小程序即是如此。</li>
</ol>
<pre><code class="css">page {
}
</code></pre>
<ul>
<li><strong>单位方面：</strong>px 无法动态适应不同宽度的屏幕，rem 无法用于 nvue/weex。如果想使用根据屏幕宽度自适应的单位，推荐使用 rpx，全端支持。 <a href="https://uniapp.dcloud.io/frame?id=%e5%b0%ba%e5%af%b8%e5%8d%95%e4%bd%8d" target="_blank" rel="noopener">尺寸单位文档</a></li>
<li><strong>布局方面：</strong>uni-app 推荐使用 flex 布局，这个布局思路和传统流式布局有点区别。但 flex 的特色在于，不管是什么技术都支持这种排版，web、小程序/快应用、weex/rn、原生的 iOS、Android 开发，全都支持 flex。它是通吃所有端的新一代布局方案。相关教程请自行百度学习。</li>
</ul>
<h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p>uni-app 的 vue 文件里支持所有 web 排版方式，不管是流式还是 flex。但 nvue 里，只支持 flex，因为它在 app 端是使用原生排版引擎渲染的。<br><strong>注意 css 里背景图和字体文件，尽量不要大于 40k，因为会影响性能。在小程序端，如果要大于 40k，需放到服务器侧远程引用或 base64 后引入，不能放到本地作为独立文件引用。</strong></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://uniapp.dcloud.net.cn/" target="_blank" rel="noopener">https://uniapp.dcloud.net.cn/</a></li>
<li><a href="https://cn.vuejs.org/index.html" target="_blank" rel="noopener">https://cn.vuejs.org/index.html</a></li>
<li>官方教程：<a href="https://ke.qq.com/course/343370" target="_blank" rel="noopener">uni-app 跨平台框架官方教程</a></li>
<li><a href="https://ask.dcloud.net.cn/article/35657" target="_blank" rel="noopener">白话 uni-app </a></li>
<li>微信官方文档：<a href="https://developers.weixin.qq.com/doc/" target="_blank" rel="noopener">https://developers.weixin.qq.com/doc/</a></li>
</ul>
]]></content:encoded>
      <comments>https://www.wztlink1013.com/blog/ytoag7/#comments</comments>
    </item>
    
    <item>
      <title><![CDATA[npm- ERR! Unexpected end of JSON input while parsing]]></title>
      <link>https://www.wztlink1013.com/blog/gcwu9h/</link>
      <guid>https://www.wztlink1013.com/blog/gcwu9h/</guid>
      <pubDate>Tue Oct 27 2020 14:30:00 GMT+0000 (Coordinated Universal Time)</pubDate>
      <description>
      <![CDATA[npm- ERR! Unexpected end of JSON input while parsing]]>
      
      </description>
      <content:encoded><![CDATA[<h2 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h2><pre><code class="bash">npm WARN deprecated circular-json@0.5.9: CircularJSON is in maintenance only, flatted is its successor.
npm ERR! Unexpected end of JSON input while parsing near &#39;...:&quot;~0.0.0&quot;,&quot;webpack-de&#39;

npm ERR! A complete log of this run can be found in:
npm ERR! C:\文件路径\npm-cache_logs\2018-12-13T10_24_02_151Z-debug.log
Package install failed, see above.
</code></pre>
<p>（具体的报错信息和这个类似）<br>升级 hexo5.0 过程中，npm i –save 出错，各种插件都不能很好的下载。</p>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>在 node 安装目录下配置的 node_cache 目录里面 <code>D:\Develop\nodejs</code><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603808754530-64316710-95b9-4e13-98dd-efda5197f782.png#align=left&amp;display=inline&amp;height=167&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=487&amp;originWidth=1128&amp;size=62358&amp;status=done&amp;style=shadow&amp;width=387" alt="image.png"><br>系统盘的 AppData/roaming 的文件夹并没有一个 npm 的缓存目录，安装 node 的时候将<code>D:\Develop\nodejs</code> 放到系统环境变量的 Path 路径了。</p>
<p>所以只需要一下两条命令即可</p>
<pre><code class="bash">npm cache clean --force

npm install
</code></pre>
<p>**</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://stackoverflow.com/questions/53759929/npm-err-unexpected-end-of-json-input-while-parsing" target="_blank" rel="noopener">stackoverflow-npm ERR! Unexpected end of JSON input while parsing</a></li>
<li><a href="https://www.ruanyifeng.com/blog/2016/01/npm-install.html" target="_blank" rel="noopener">阮一峰-npm 模块安装机制简介</a></li>
</ul>
]]></content:encoded>
      <comments>https://www.wztlink1013.com/blog/gcwu9h/#comments</comments>
    </item>
    
    <item>
      <title><![CDATA[js-Cannot set property 'innerHTML' of null]]></title>
      <link>https://www.wztlink1013.com/blog/fg4az5/</link>
      <guid>https://www.wztlink1013.com/blog/fg4az5/</guid>
      <pubDate>Mon Oct 26 2020 14:42:00 GMT+0000 (Coordinated Universal Time)</pubDate>
      <description>
      <![CDATA[js-Cannot set property 'innerHTML' of null]]>
      
      </description>
      <content:encoded><![CDATA[<h2 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h2><pre><code class="javascript">Cannot set property &#39;innerHTML&#39; of null
</code></pre>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>如果 js 放在头部时，此时浏览器渲染未进入 dom 节点，因为提示为空，或者找不到。<br>所以把 js 代码放到最后或调用的对象后面就行了。id 元素在 script 脚本之后，不能引用，类似在使用变量之前对其进行定义一样。</p>
]]></content:encoded>
      <comments>https://www.wztlink1013.com/blog/fg4az5/#comments</comments>
    </item>
    
    <item>
      <title><![CDATA[CPP-LINKfatal error LNK1561: 必须定义入口点]]></title>
      <link>https://www.wztlink1013.com/blog/oyvpk4/</link>
      <guid>https://www.wztlink1013.com/blog/oyvpk4/</guid>
      <pubDate>Sun Oct 25 2020 10:10:00 GMT+0000 (Coordinated Universal Time)</pubDate>
      <description>
      <![CDATA[CPP-LINK fatal error LNK1561: 必须定义入口点]]>
      
      </description>
      <content:encoded><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><pre><code class="cpp">LINK : fatal error LNK1561: 必须定义入口点
</code></pre>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>每个应用程序(文件格式为 exe)都应该有个启动点，这个点就是 main 函数。缺少就会出现 link error 。</p>
<p>解决方法</p>
<ol>
<li>添加含有 main 函数的 CPP 文件</li>
<li>右击属性，在常规项中修改配置类型，将应用程序修改为库，动静态库</li>
</ol>
]]></content:encoded>
      <comments>https://www.wztlink1013.com/blog/oyvpk4/#comments</comments>
    </item>
    
    <item>
      <title><![CDATA[IDEA-控制台输出中文乱码问题]]></title>
      <link>https://www.wztlink1013.com/blog/lkgrkx/</link>
      <guid>https://www.wztlink1013.com/blog/lkgrkx/</guid>
      <pubDate>Sun Oct 25 2020 08:30:00 GMT+0000 (Coordinated Universal Time)</pubDate>
      <description>
      <![CDATA[IDEA控制台输出中文乱码问题]]>
      
      </description>
      <content:encoded><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在 java 实现 ping/tracert 两个命令时候，输出到控制台里面中文乱码。</p>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>应该是调用了终端，而 windows 的终端默认是 GBK 的编码，所以要对其更改管用的 utf-8 编码，改为 GBK 编码。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603613519544-dc851d0f-e0c0-4a0a-9a2d-0043285b3db0.png#align=left&amp;display=inline&amp;height=441&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=881&amp;originWidth=706&amp;size=74813&amp;status=done&amp;style=shadow&amp;width=353" alt="image.png"></p>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><h3 id="编码更改"><a href="#编码更改" class="headerlink" title="编码更改"></a>编码更改</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603613302488-7bd6d045-81c3-470c-a57c-05a020588fcd.png#align=left&amp;display=inline&amp;height=511&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1022&amp;originWidth=1449&amp;size=141645&amp;status=done&amp;style=shadow&amp;width=724.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603613687953-21f1bbc9-b0bc-4db4-a935-3fcf6275909f.png#align=left&amp;display=inline&amp;height=185&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=369&amp;originWidth=1920&amp;size=135691&amp;status=done&amp;style=shadow&amp;width=960" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603613719305-ac9dc39b-2c6a-4350-9f31-49d48dbedfe5.png#align=left&amp;display=inline&amp;height=110&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=220&amp;originWidth=764&amp;size=24151&amp;status=done&amp;style=none&amp;width=382" alt="image.png"></p>
<ul>
<li><code>Reload</code> 表示使用新编码重新加载，新编码不会保存到文件中</li>
<li><code>Convert</code> 表示使用新编码进行转换，新编码会保存到文件中</li>
<li>含有中文的代码文件，<code>Convert</code> 之后可能会使中文变成乱码，所以在转换成请做好备份，不然可能出现转换过程变成乱码，无法还原</li>
</ul>
<h3 id="BOM-问题"><a href="#BOM-问题" class="headerlink" title="BOM 问题"></a>BOM 问题</h3><blockquote>
<p>BOM：byte-order mark 字节顺序标记<br><a href="https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%85%83%E7%B5%84%E9%A0%86%E5%BA%8F%E8%A8%98%E8%99%9F" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%85%83%E7%B5%84%E9%A0%86%E5%BA%8F%E8%A8%98%E8%99%9F</a></p>
</blockquote>
<p>可能会出现的问题有：</p>
<blockquote>
<p>编译报错：<code>找不到符号</code>、<code>未结束的字符串文字</code> 或者是 提示 <code>非法字符</code></p>
</blockquote>
<p>解决办法：有上述百科可知，UTF-8 编码分有 BOM 和无 BOM 两种分类。IDEA 打开 Eclipse 项目，会提示出现上述编译问题，因为<strong>Eclipse 默认是有 BOM 的文件编译</strong>，而<strong>IDEA 只能编译无 BOM 的文件编译</strong>，所以解决办法就是对项目进行<strong>BOM 去除</strong>操作。</p>
]]></content:encoded>
      <comments>https://www.wztlink1013.com/blog/lkgrkx/#comments</comments>
    </item>
    
    <item>
      <title><![CDATA[莱文斯坦距离(LD)问题]]></title>
      <link>https://www.wztlink1013.com/blog/bvk4ok/</link>
      <guid>https://www.wztlink1013.com/blog/bvk4ok/</guid>
      <pubDate>Sat Oct 24 2020 10:26:00 GMT+0000 (Coordinated Universal Time)</pubDate>
      <description>
      <![CDATA[莱温斯坦举例问题]]>
      
      </description>
      <content:encoded><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p><strong>Levenshtein Distance</strong>也称<strong>莱文斯坦距离</strong></p>
<p>具体形式就是求一个字符串到另一个字符串所需要的<strong>最少操作步数</strong>，操作形式有：</p>
<ul>
<li>替换字母</li>
<li>删除字母</li>
<li>插入字母</li>
</ul>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>利用动态规划思想，将其剖析为一个个子问题，用其子问题的解决方式来解决该问题。问题分解出来的子问题存在重叠的情况，这是区分分治算法的不同。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603615056984-36cbce7c-c55e-456a-bb90-eb18471167e0.png#align=left&amp;display=inline&amp;height=335&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=670&amp;originWidth=1026&amp;size=202356&amp;status=done&amp;style=shadow&amp;width=513" alt="image.png"></p>
<p><strong>莱文斯坦的公式化</strong>表述为：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603614727015-dad259b0-7904-4e5d-9ec8-f4ac284af2e5.png#align=left&amp;display=inline&amp;height=94&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=188&amp;originWidth=874&amp;size=23400&amp;status=done&amp;style=shadow&amp;width=437" alt="image.png"></p>
<p>下面利用表格的形式来步步推出该字母所需要达到相应的目标字母序列的步数。</p>
<p>| |<br>| s | o | n |<br>| — | — | — | — | — |<br>|<br>| 0 | 1 | 2 | 3 |<br>| s | 1 | 0 | 1 | 2 |<br>| u | 2 | 1 | 1 | 2 |<br>| n | 3 | 2 | 2 | 1 |</p>
<p>记横（son）为 i 字符串序列，纵（sun）为 j 字符串序列。需要完成的字符串变换为 i-&gt;j。现举例格子数值该怎么填：</p>
<p>当到了第三行第三列的那一格，需要完成 s-&gt;s，有三种情况可以选择</p>
<ol>
<li>左操作(i-1,j)：删除 s 字符然后插入 s 字符===操作步数两步</li>
<li>上操作(i,j-1)：插入 s 字符然后删除 s 字符===操作步数两步</li>
<li>左上操作(i-1,j-1)：替换步骤，因为这个元素相同，故===操作步数零部</li>
</ol>
<p>然后选取上述三种情况最短步数的数值 0</p>
<p>然后再看第三行第四列，需要完成 so-&gt;s，</p>
<ol>
<li>左操作：删除 o===一步</li>
<li>上操作：插入 s 删除 so===三步</li>
<li>做上操作：替换 s 删除 o===两步</li>
</ol>
<p>综上应该填 1</p>
<p>其他格子也一样以上述方法填写。</p>
<p>有个作业遗留问题，在 CAAIS 里面每个得出的值右上标的 <code>U</code>  <code>L</code>  <code>0</code>  <code>1</code>  这些的依次顺序是怎么个顺序？<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603615446981-23bea432-08ee-490a-9037-018ba6280c3b.png#align=left&amp;display=inline&amp;height=201&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=401&amp;originWidth=651&amp;size=49834&amp;status=done&amp;style=shadow&amp;width=325.5" alt="image.png"></p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre><code class="cpp">#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include&lt;iostream&gt;
#include&lt;ctime&gt;

const int LEN_NAME=100;

namespace NS_LSEditDist {
    using namespace std;
    void Initialization(const string &amp;x, const string &amp;y);
    int GetLSEditDist(const string &amp;x, const string &amp;y);
    void GetLSEdits(const string &amp;x, const string &amp;y);
    void Output(const string &amp;x, const string &amp;y, int OptD);
    void OutputE(const string &amp;x, const string &amp;y);
    void OutputP(const string &amp;x, const string &amp;y);
    static int m, n;
    static vector&lt;vector&lt;int&gt;&gt; E;
    static vector&lt;vector&lt;char&gt;&gt; P;
    static string xe, ye;
    void LSEditDistCaller(const string &amp;x, const string &amp;y)
    {
        Initialization(x, y);
        int OptD = GetLSEditDist(x, y);
        GetLSEdits(x, y);
        Output(x, y, OptD);
    }
    int GetLSEditDist(const string &amp;x, const string &amp;y)
    {
        for (int i = 1; i &lt;= m; i++)
            for (int j = 1; j &lt;= n; j++)
            {
                E[i][j] = min(E[i - 1][j] + 1,
                              min(E[i][j - 1] + 1,
                                  E[i - 1][j - 1] + (x[i - 1] != y[j - 1])));
                if (E[i][j] == E[i - 1][j] + 1)
                    P[i][j] = &#39;U&#39;;
                else if (E[i][j] == E[i][j - 1] + 1)
                    P[i][j] = &#39;L&#39;;
                else if (x[i - 1] != y[j - 1])
                    P[i][j] = &#39;1&#39;;
            }
        return E[m][n];
    }
    void GetLSEdits(const string &amp;x, const string &amp;y)
    {
        int i = m, j = n;
        while (i &gt; 0 || j &gt; 0)
        {
            if (P[i][j] == &#39;0&#39; || P[i][j] == &#39;1&#39;)
            {
                xe.insert(0, 1, x[i - 1]);
                ye.insert(0, 1, y[j - 1]);
                i--; j--;
            }
            else if (P[i][j] == &#39;U&#39;)
            {
                xe.insert(xe.begin(), x[i - 1]);
                ye.insert(ye.begin(), &#39;-&#39;);
                i--;
            }
            else
            {
                xe.insert(xe.begin(), &#39;-&#39;);
                ye.insert(ye.begin(), y[j - 1]);
                j--;
            }
        }
    }
    void Initialization(const string &amp;x, const string &amp;y)
    {
        m = x.length();
        n = y.length();
        E.clear();
        E.resize(m + 1, vector&lt;int&gt;(n + 1, 0));
        P.clear();
        P.resize(m + 1, vector&lt;char&gt;(n + 1, &#39;0&#39;));
        for (int j = 1; j &lt;= n; j++)
        {
            E[0][j] = j;
            P[0][j] = &#39;L&#39;;
        }
        for (int i = 1; i &lt;= m; i++)
        {
            E[i][0] = i;
            P[i][0] = &#39;U&#39;;
        }
        xe.clear();
        ye.clear();
    }
    void Output(const string &amp;x, const string &amp;y, int OptD)
    {
        printf(&quot;Levenshtein distance: \n&quot;);
        printf(&quot;Strings: %s, %s\n\n&quot;, x.c_str(), y.c_str());
        OutputE(x, y);
        OutputP(x, y);
        printf(&quot;Distance: %d\n&quot;, OptD);
        printf(&quot;Edited strings:\n&quot;);
        for (auto c : xe)
            printf(&quot;%2c&quot;, c);
        printf(&quot;\n&quot;);
        for (auto c : ye)
            printf(&quot;%2c&quot;, c);
        printf(&quot;\n\n&quot;);
    }
    void OutputE(const string &amp;x, const string &amp;y)
    {
        printf(&quot; E  &quot;);
        for (int j = 0; j &lt; n; j++)
            printf(&quot;%2c&quot;, y[j]);
        printf(&quot;\n&quot;);
        for (int i = 0; i &lt;= m; i++)
        {
            if (i == 0)
                printf(&quot;  &quot;);
            else
                printf(&quot;%2c&quot;, x[i - 1]);
            for (int j = 0; j &lt;= n; j++)
            {
                printf(&quot;%2d&quot;, E[i][j]);
            }
            printf(&quot;\n&quot;);
        }
        printf(&quot;\n&quot;);
    }
    void OutputP(const string &amp;x, const string &amp;y)
    {
        printf(&quot; P  &quot;);
        for (int j = 0; j &lt; n; j++)
            printf(&quot;%2c&quot;, y[j]);
        printf(&quot;\n&quot;);
        for (int i = 0; i &lt;= m; i++)
        {
            if (i == 0)
                printf(&quot;  &quot;);
            else
                printf(&quot;%2c&quot;, x[i - 1]);
            for (int j = 0; j &lt;= n; j++)
            {
                printf(&quot;%2c&quot;, P[i][j]);
            }
            printf(&quot;\n&quot;);
        }
        printf(&quot;\n&quot;);
    }
} //namespace NS_LSEditDist
char *rand_str(char *str,const int len)
{
    int i;
    for(i=0;i&lt;len;++i)
        str[i]=&#39;a&#39;+rand()%26;
    str[++i]=&#39;\0&#39;;
    return str;
}
using namespace NS_LSEditDist;
int main()
{
    vector&lt;vector&lt;string&gt;&gt; abs = {
            { &quot;water&quot;, &quot;wheat&quot; },
            { &quot;servant&quot;, &quot;reveal&quot; }
    };
    for (auto ab : abs)
    {
        string a = ab[0];
        string b = ab[1];
        LSEditDistCaller(a, b);
    }

    cout&lt;&lt;&quot;两个100位字符串的LevenShtein距离：&quot;&lt;&lt;endl;

    srand(time(NULL));
    int i;
    char name[LEN_NAME+1];
    string x = rand_str(name,LEN_NAME);
    string y = rand_str(name,LEN_NAME);

    cout&lt;&lt;&quot;字符串1：&quot;&lt;&lt;x&lt;&lt;endl;
    cout&lt;&lt;&quot;字符串2：&quot;&lt;&lt;y&lt;&lt;endl;

    LSEditDistCaller(x, y);
}
</code></pre>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://zh.wikipedia.org/wiki/%E8%90%8A%E6%96%87%E6%96%AF%E5%9D%A6%E8%B7%9D%E9%9B%A2" target="_blank" rel="noopener">莱文斯坦距离</a></li>
<li><a href="https://www.dazhuanlan.com/2019/12/06/5dea0cb03281f/" target="_blank" rel="noopener">理解 Levenshtein Distancee</a></li>
<li><a href="https://www.throwable.club/2020/03/08/learn-about-levenshtein-distance-algorithm/" target="_blank" rel="noopener">Levenshtein Distance（编辑距离）算法与使用场景</a></li>
</ul>
]]></content:encoded>
      <comments>https://www.wztlink1013.com/blog/bvk4ok/#comments</comments>
    </item>
    
    <item>
      <title><![CDATA[分治算法+归并排序]]></title>
      <link>https://www.wztlink1013.com/blog/ab9fkt/</link>
      <guid>https://www.wztlink1013.com/blog/ab9fkt/</guid>
      <pubDate>Fri Oct 23 2020 15:22:00 GMT+0000 (Coordinated Universal Time)</pubDate>
      <description>
      <![CDATA[分治算法+归并排序]]>
      
      </description>
      <content:encoded><![CDATA[<h2 id="分治算法"><a href="#分治算法" class="headerlink" title="分治算法"></a>分治算法</h2><p>此前学习的<strong>递归设计方法</strong>，是针对规模大的问题拆成规模小的问题，并且规模大的问题和规模小的问题的解决办法相同。</p>
<p>分治算法与递归设计方法的不同之处就是，该规模较大的问题分解为多个不重叠的子问题，并将其称为<strong>“分而治之”</strong><br>**<br>分治的三个步骤：</p>
<ol>
<li>分解：将原问题分解为若干个规模较小、相互不重叠与原问题形式相同的子问题</li>
<li>解决：<ol>
<li>若子问题规模较小且易于解决时候直接解出</li>
<li>否则递归地解决各个子问题</li>
</ol>
</li>
<li>合并：将各个子问题的解个并未原问题的解</li>
</ol>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><ul>
<li>分解：将排序数组分解为左右两个相等的不重叠的数组</li>
<li>解决：递归</li>
<li>合并：将两个已经有序的数组合并为一个有序的数组</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603617542157-07613fda-ebed-4924-bf6a-091c19b12fc7.png#align=left&amp;display=inline&amp;height=431&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=861&amp;originWidth=895&amp;size=74826&amp;status=done&amp;style=shadow&amp;width=447.5" alt="image.png"></p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3>]]></content:encoded>
      <comments>https://www.wztlink1013.com/blog/ab9fkt/#comments</comments>
    </item>
    
    <item>
      <title><![CDATA[利用WireShark捕获并分析以太网报文结构]]></title>
      <link>https://www.wztlink1013.com/blog/bw80k6/</link>
      <guid>https://www.wztlink1013.com/blog/bw80k6/</guid>
      <pubDate>Fri Oct 23 2020 01:25:00 GMT+0000 (Coordinated Universal Time)</pubDate>
      <description>
      <![CDATA[数据链路层——利用WireShark捕获并分析以太网报文结构]]>
      
      </description>
      <content:encoded><![CDATA[<blockquote>
<p>学习网络协议分析工具 WireShark，利用 WireShark 捕获并分析以太网报文结构，最重要的是后面超星网登录案例分析，用实际例子将计网的所学知识串起来。<br>文章更新内容说明：无线上网和有线上网的 MAC 地址是不一样的<br>【查看本地地址的截图是在家里的查看，wireshark 的使用是在学校】</p>
</blockquote>
<h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><h3 id="查看本地的-mac-地址"><a href="#查看本地的-mac-地址" class="headerlink" title="查看本地的 mac 地址"></a>查看本地的 mac 地址</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612839562082-cbc1fcf8-a520-4820-bafc-e26f07ba1177.png#align=left&amp;display=inline&amp;height=248&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=496&amp;originWidth=1920&amp;size=78833&amp;status=done&amp;style=shadow&amp;width=960" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612839610832-5568023d-da16-41af-b95e-1787acadf747.png#align=left&amp;display=inline&amp;height=402&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=804&amp;originWidth=1335&amp;size=109239&amp;status=done&amp;style=shadow&amp;width=667.5" alt="image.png"></p>
<h3 id="ping-命令"><a href="#ping-命令" class="headerlink" title="ping 命令"></a>ping 命令</h3><blockquote>
<p>先使用 ping 命令找到需要抓包的网站的 ip 地址</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612845955475-12f08386-5ec4-4b3f-8cbf-56059d79677c.png#align=left&amp;display=inline&amp;height=162&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=323&amp;originWidth=828&amp;size=51064&amp;status=done&amp;style=shadow&amp;width=414" alt="image.png"></p>
<h2 id="WireShark-使用"><a href="#WireShark-使用" class="headerlink" title="WireShark 使用"></a>WireShark 使用</h2><h3 id="WireShark-使用及面板功能区域"><a href="#WireShark-使用及面板功能区域" class="headerlink" title="WireShark 使用及面板功能区域"></a>WireShark 使用及面板功能区域</h3><p>进入软件，若成功适配电脑网卡，则出现如下类似接口列表<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603434019601-cc879af3-8784-4ada-83dc-642d64e02981.png#align=left&amp;display=inline&amp;height=329&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1038&amp;originWidth=1920&amp;size=115692&amp;status=done&amp;style=shadow&amp;width=608" alt="image.png"><br>直接双击上图中 WLAN 行即可抓包，也可以如下设置网卡启动抓包<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603434096441-73c67d75-4e36-4e76-ae3c-0a8b8976da28.png#align=left&amp;display=inline&amp;height=301&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=911&amp;originWidth=1920&amp;size=114148&amp;status=done&amp;style=shadow&amp;width=634" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603431676018-f4988b52-5aef-4d92-8b9b-15109a08adab.png#align=left&amp;display=inline&amp;height=345&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1033&amp;originWidth=1920&amp;size=207427&amp;status=done&amp;style=shadow&amp;width=641" alt="image.png"></p>
<h3 id="1-区域-显示过滤器"><a href="#1-区域-显示过滤器" class="headerlink" title="1 区域-显示过滤器"></a>1 区域-显示过滤器</h3><blockquote>
<p>为过滤 ip 地址区域。相关表达式语法有</p>
</blockquote>
<ol>
<li>协议过滤。比如 TCP，只显示 TCP 协议。</li>
<li>IP 过滤。比如 ip.src == 192.168.1.102,显示源地址为 192.168.1.102，</li>
</ol>
<p>ip.dst == 192.168.1.102, 目标地址为 192.168.1.102。</p>
<ol start="3">
<li>端口过滤。   tcp.port ==80,   端口为 80 的</li>
</ol>
<p>tcp.srcport == 80,只显示 TCP 协议的愿端口为 80 的。</p>
<ol start="4">
<li>Http 模式过滤。http.request.method==”GET”,   只显示 HTTP GET 方法的。</li>
<li>逻辑运算符为 AND/ OR</li>
</ol>
<h3 id="2-区域-获取的数据包"><a href="#2-区域-获取的数据包" class="headerlink" title="2 区域-获取的数据包"></a>2 区域-获取的数据包</h3><blockquote>
<p>封包列表(Packet List Pane)</p>
</blockquote>
<h3 id="3-区域-单个数据包各层详细内容"><a href="#3-区域-单个数据包各层详细内容" class="headerlink" title="3 区域-单个数据包各层详细内容"></a>3 区域-单个数据包各层详细内容</h3><blockquote>
<p>选定的封包详细信息 (Packet Details Pane)</p>
</blockquote>
<ol>
<li>Frame:物理层的数据帧概况。</li>
</ol>
<pre><code class="http">Frame 165: 74 bytes on wire (592 bits), 74 bytes captured (592 bits) on interface \Device\NPF_{B016AB5D-3088-41BD-8997-48F19D9DEBFA}, id 0 //165号帧，对方发送74字节，实际收到74字节
    Interface id: 0 (\Device\NPF_{B016AB5D-3088-41BD-8997-48F19D9DEBFA}) //接口id为0
        Interface name: \Device\NPF_{B016AB5D-3088-41BD-8997-48F19D9DEBFA}
        Interface description: WLAN
    Encapsulation type: Ethernet (1) //封装类型
    Arrival Time: Oct 23, 2020 13:37:43.372763000 中国标准时间//捕获日期和时间（中国标准时间）
    [Time shift for this packet: 0.000000000 seconds]
    Epoch Time: 1603431463.372763000 seconds
    [Time delta from previous captured frame: 0.008472000 seconds]//与前一包时间间隔
    [Time delta from previous displayed frame: 0.000000000 seconds]
    [Time since reference or first frame: 36.349570000 seconds]//此包与第一帧的时间间隔
    Frame Number: 165//帧序号
    Frame Length: 74 bytes (592 bits)//帧长度
    Capture Length: 74 bytes (592 bits)//捕获字节长度
    [Frame is marked: False]//是否做了标记
    [Frame is ignored: False]//是否被忽略
    [Protocols in frame: eth:ethertype:ip:icmp:data]//帧内封装的协议层次结构
    [Coloring Rule Name: ICMP]//着色标记的协议名称
    [Coloring Rule String: icmp || icmpv6]//着色规则显示的字符串
</code></pre>
<ol start="2">
<li>Ethernet II:数据链路层以太网帧头部信息。</li>
</ol>
<pre><code class="http">Ethernet II, Src: IntelCor_fb:33:94 (0c:54:15:fb:33:94), Dst: HuaweiTe_da:ff:f3 (7c:a1:77:da:ff:f3)
    Destination: HuaweiTe_da:ff:f3 (7c:a1:77:da:ff:f3)//目的MAC地址
    Source: IntelCor_fb:33:94 (0c:54:15:fb:33:94)//源MAC地址（就是我电脑的MAC地址）
    Type: IPv4 (0x0800)//0x0800表示使用IP协议
</code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603432754493-20843464-3bbb-4c01-9ceb-e781759a583d.png#align=left&amp;display=inline&amp;height=280&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=559&amp;originWidth=1920&amp;size=110051&amp;status=done&amp;style=shadow&amp;width=960" alt="image.png"></p>
<ol start="3">
<li>Internet Protocol Version 4:互联网层 IP 包头部信息。</li>
</ol>
<pre><code class="http">Internet Protocol Version 4, Src: 192.168.43.36, Dst: 39.156.66.18
    0100 .... = Version: 4//互联网协议IPv4
    .... 0101 = Header Length: 20 bytes (5)//IP包头部长度
    Differentiated Services Field: 0x00 (DSCP: CS0, ECN: Not-ECT)//差分服务字段
    Total Length: 60//IP包的总长度
    Identification: 0xdf8c (57228)//标志字段
    Flags: 0x0000//标记字段
    Fragment offset: 0//分的偏移量
    Time to live: 128//生存期TTL
    Protocol: ICMP (1)//此包内封装的上层协议为TCP
    Header checksum: 0x05ba [validation disabled]//头部数据的校验和
    [Header checksum status: Unverified]
    Source: 192.168.43.36//来源IP地址
    Destination: 39.156.66.18//目标IP地址
</code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603433033837-c88714a1-eaa1-45cb-b836-5672e4515eee.png#align=left&amp;display=inline&amp;height=189&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=378&amp;originWidth=640&amp;size=84901&amp;status=done&amp;style=shadow&amp;width=320" alt="image.png"></p>
<ol start="4">
<li>Transmission Control Protocol:传输层 T 的数据段头部信息，此处是 TCP。</li>
</ol>
<pre><code class="http">Transmission Control Protocol, Src Port: 80 (80), Dst Port: 50362 (50362), Seq: 1025, Ack: 447, Len: 714
Source Port: 80 (80) //源端口号
Destination Port: 50362 (50362) //目标端口号
Sequence number: 1025 (relative sequence number) //序列号（相对序列号）
[Next sequence number: 1739 (relative sequence number)] //下一个序列号
Acknowledgment number: 447    (relative ack number) //确认序列号
Header Length: 20 bytes  //头部长度
.... 0000 0001 1000 = Flags: 0x018 (PSH, ACK) //TCP标记长度
Window size value: 5896  //流量控制的窗口大小
Checksum: 0x915b [validation disabled] //TCP数据段的校验和
</code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603433149527-0125377e-b64b-4e32-9eb0-e122d0c111cb.png#align=left&amp;display=inline&amp;height=190&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=379&amp;originWidth=579&amp;size=89043&amp;status=done&amp;style=shadow&amp;width=289.5" alt="image.png"></p>
<ol start="5">
<li><p>Hypertext Transfer Protocol:应用层的信息，此处是 HTTP 协议。</p>
</li>
<li><p>Data（312 bytes）：数据。</p>
</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603434354567-45e84cc7-63a9-4136-adde-85c377345e92.png#align=left&amp;display=inline&amp;height=147&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=347&amp;originWidth=1920&amp;size=49744&amp;status=done&amp;style=shadow&amp;width=813" alt="image.png"></p>
<h2 id="超星网登录案例分析"><a href="#超星网登录案例分析" class="headerlink" title="超星网登录案例分析"></a>超星网登录案例分析</h2><h3 id="网站请求和响应"><a href="#网站请求和响应" class="headerlink" title="网站请求和响应"></a>网站请求和响应</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612849248230-2f38b355-ee1f-4ee1-8b8a-291e64f4e1bd.png#align=left&amp;display=inline&amp;height=356&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=711&amp;originWidth=1920&amp;size=230540&amp;status=done&amp;style=none&amp;width=960" alt="image.png"></p>
<h3 id="发送请求相应协议"><a href="#发送请求相应协议" class="headerlink" title="发送请求相应协议"></a>发送请求相应协议</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612849740094-cbdefdda-f504-43f3-9e41-ac8dc8029fd3.png#align=left&amp;display=inline&amp;height=440&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=880&amp;originWidth=1920&amp;size=208371&amp;status=done&amp;style=none&amp;width=960" alt="image.png"></p>
<h3 id="收到响应相应协议"><a href="#收到响应相应协议" class="headerlink" title="收到响应相应协议"></a>收到响应相应协议</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612849811431-437bd72d-ac54-4c28-b731-9e128b6b998f.png#align=left&amp;display=inline&amp;height=441&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=881&amp;originWidth=1918&amp;size=151717&amp;status=done&amp;style=stroke&amp;width=959" alt="image.png"></p>
<blockquote>
<p>接下来的 7 个小节内容来具体对数据报头做出分析 ❗</p>
</blockquote>
<h3 id="Hypertext-Transfer-Protocol"><a href="#Hypertext-Transfer-Protocol" class="headerlink" title="Hypertext Transfer Protocol"></a>Hypertext Transfer Protocol</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612849851243-b18b3e15-f21e-4998-bcfe-45c0b92aabde.png#align=left&amp;display=inline&amp;height=339&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=678&amp;originWidth=1920&amp;size=99636&amp;status=done&amp;style=shadow&amp;width=960" alt="image.png"></p>
<blockquote>
<p>HTTP 协议定义了客户端和服务器之间交互的消息内容和步骤，大家按照固定的步骤和格式进行通信<br>根据 URL 可以定位请求资源的位置，但是对于这个资源可能还有多种处理方法，比如是请求资源还是要删除指定资源？</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612851558692-ed870a9e-f619-4235-bb98-85d22557340f.png#align=left&amp;display=inline&amp;height=493&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=985&amp;originWidth=1920&amp;size=489577&amp;status=done&amp;style=none&amp;width=960" alt="image.png"><br>这个时候<strong>浏览器</strong>将需要请求的信息，按照 HTTP 协议约定的格式，封装成为 HTTP 请求报文<br>HTTP 主要请求方法为 GET 和 POST<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612851687862-c1a44f57-065b-4547-93bb-4ae9b1f9cb95.png#align=left&amp;display=inline&amp;height=190&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=379&amp;originWidth=693&amp;size=117900&amp;status=done&amp;style=shadow&amp;width=346.5" alt="image.png"></p>
<blockquote>
<p>请求报文和响应报文的具体形式参考课本</p>
</blockquote>
<h3 id="Line-based-text-data"><a href="#Line-based-text-data" class="headerlink" title="Line-based text data"></a>Line-based text data</h3><p>这里面内容就是请求成功所返回的 Html 代码<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612851995920-233bc149-948d-43e1-a549-fc2887c23163.png#align=left&amp;display=inline&amp;height=353&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=706&amp;originWidth=1920&amp;size=159705&amp;status=done&amp;style=none&amp;width=960" alt="image.png"></p>
<h3 id="Transmission-Control-Protocol"><a href="#Transmission-Control-Protocol" class="headerlink" title="Transmission Control Protocol"></a>Transmission Control Protocol</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612852359910-50409417-8113-4600-bbb6-6d0e02db4894.png#align=left&amp;display=inline&amp;height=356&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=712&amp;originWidth=1920&amp;size=104306&amp;status=done&amp;style=none&amp;width=960" alt="image.png"><br>这个数据报传输使用的可靠的 TCP 协议，而不是 UDP，所以会有相应的滑动窗口、流量控制等等相关机制，还有三次握手，四次挥手……<br>（插个眼，日后再复习一下……）<br><img src="https://cdn.nlark.com/yuque/0/2021/gif/1484158/1612852762215-ba49fa51-55e0-440d-afa7-b567540e39a2.gif#align=left&amp;display=inline&amp;height=151&amp;margin=%5Bobject%20Object%5D&amp;name=huaji-779c5947261d2633.gif&amp;originHeight=151&amp;originWidth=218&amp;size=163714&amp;status=done&amp;style=none&amp;width=218" alt="huaji-779c5947261d2633.gif"><br>（插眼专用图/滑稽）</p>
<h3 id="Internet-Protocol-Version-4"><a href="#Internet-Protocol-Version-4" class="headerlink" title="Internet Protocol Version 4"></a>Internet Protocol Version 4</h3><p>好了，接下来到了 IP 层，需要给上面来的数据报加上 IP 头部，IP 数据报结构如下：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612853140617-ff243167-abb7-4c65-b5c3-b0bbaa77b5aa.png#align=left&amp;display=inline&amp;height=237&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=474&amp;originWidth=892&amp;size=244750&amp;status=done&amp;style=stroke&amp;width=446" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612853444183-7fa048ef-3e75-4586-82a7-ac9cc58c3630.png#align=left&amp;display=inline&amp;height=203&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=405&amp;originWidth=1920&amp;size=105587&amp;status=done&amp;style=stroke&amp;width=960" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612852425531-82ec984f-ac3b-4f8a-a06e-0c48080815f6.png#align=left&amp;display=inline&amp;height=353&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=706&amp;originWidth=1920&amp;size=107520&amp;status=done&amp;style=none&amp;width=960" alt="image.png"><br>比如说<code>45</code>这个字节这具体表现是 ip 数据报的第一行和第二行的具体信息，IP 版本为 IPv4，报头长度为二十个字节，往后的各个字段都是这样一一对应的关系，具体还要加强对那张 ip 数据报结构图的理解，要了然于胸。</p>
<h3 id="Ethernet-II-Src"><a href="#Ethernet-II-Src" class="headerlink" title="Ethernet II, Src"></a>Ethernet II, Src</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612853924295-ea6fe64c-bc90-4e49-ad4e-5ff212448fdc.png#align=left&amp;display=inline&amp;height=214&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=428&amp;originWidth=904&amp;size=226429&amp;status=done&amp;style=stroke&amp;width=452" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612850191706-18807d7d-16b5-44fa-a436-5c2b7c4ed5ed.png#align=left&amp;display=inline&amp;height=321&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=641&amp;originWidth=1920&amp;size=151109&amp;status=done&amp;style=none&amp;width=960" alt="image.png"></p>
<blockquote>
<p>图中三个方框的 14 个字节对应以太网 MAC 帧的前 14 个字节：前 6 个字节是目的地址，接下来的 6 个字节是源地址，最后两个字节是类型字段(用来标志上一层使用的是什么协议，以便把收到的 MAC 帧的数据交给上一层的这个协议。0x8000 代表上层使用的是 IP 数据报)，后面是数据部分。<br>另外：wireshark 把 8 字节的前序（前同步码）和 4 字节的 FCS（帧开始界定符）都给过滤掉了，所以捕获到的帧里看不到这两部分。</p>
</blockquote>
<h3 id="Frame-75"><a href="#Frame-75" class="headerlink" title="Frame 75"></a>Frame 75</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612852486656-87756b19-ff3d-4833-9af9-d2006a401068.png#align=left&amp;display=inline&amp;height=353&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=706&amp;originWidth=1920&amp;size=135359&amp;status=done&amp;style=none&amp;width=960" alt="image.png"></p>
<ul>
<li>对方发送 5520 字节，实际收到 5520 字节</li>
<li>第一行表示接口位 0 号</li>
</ul>
<h3 id="总体数据表示"><a href="#总体数据表示" class="headerlink" title="总体数据表示"></a>总体数据表示</h3><p>其实在计算机看来，网络中的数据传输就是传输下面的这些字节</p>
<blockquote>
<p>一个字节由八个位组成，而位就是我们通常所说的二进制中的 0 或 1</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612852578885-9519d1d0-a72d-409b-a480-f8554b87fd0d.png#align=left&amp;display=inline&amp;height=299&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=598&amp;originWidth=1918&amp;size=138039&amp;status=done&amp;style=stroke&amp;width=959" alt="image.png"></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><h3 id="Wireshark-抓不到-HTTPS-数据包"><a href="#Wireshark-抓不到-HTTPS-数据包" class="headerlink" title="Wireshark 抓不到 HTTPS 数据包"></a>Wireshark 抓不到 HTTPS 数据包</h3><blockquote>
<p>有些时候 HTTP 包也抓不到抑或是抓的不全，用如下方式解决即可。</p>
</blockquote>
<p>在 C 盘根目录下创建如下目录和文件，.log 就是后缀不要 txt<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612847971131-6c3c2084-c6d8-41ae-8a82-8a4df65748b8.png#align=left&amp;display=inline&amp;height=112&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=224&amp;originWidth=811&amp;size=14570&amp;status=done&amp;style=shadow&amp;width=405.5" alt="image.png"><br>添加环境变量<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612848066208-6f22250b-e74d-4156-aa31-c5de17d2e812.png#align=left&amp;display=inline&amp;height=236&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=471&amp;originWidth=968&amp;size=35366&amp;status=done&amp;style=none&amp;width=484" alt="image.png"><br>进入 wireshark 软件<br><code>编辑 `</code>首选项 <code></code>Protocols`<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1484158/1612848155164-ace1e002-1971-4910-8d04-cf9c388eb5cd.png#align=left&amp;display=inline&amp;height=496&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=992&amp;originWidth=1362&amp;size=89975&amp;status=done&amp;style=none&amp;width=681" alt="image.png"></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://www.cnblogs.com/linyfeng/p/9496126.html" target="_blank" rel="noopener">wireshark 抓包新手使用教程</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/82498482" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/82498482</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/264942536" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/264942536</a></li>
<li><a href="https://blog.csdn.net/zam183/article/details/103783785" target="_blank" rel="noopener">https://blog.csdn.net/zam183/article/details/103783785</a></li>
<li>TODO: <a href="https://www.cnblogs.com/zhaopei/p/12152139.html#autoid-2-6" target="_blank" rel="noopener">Wireshark 抓包，带你快速入门</a></li>
<li>TODO: <a href="https://www.cnblogs.com/noteless/p/10256470.html#21" target="_blank" rel="noopener">网络是如何连接的？网络发展简介（四）</a></li>
</ul>
]]></content:encoded>
      <comments>https://www.wztlink1013.com/blog/bw80k6/#comments</comments>
    </item>
    
    <item>
      <title><![CDATA[ping、traceroute命令编程实现]]></title>
      <link>https://www.wztlink1013.com/blog/qlrcf6/</link>
      <guid>https://www.wztlink1013.com/blog/qlrcf6/</guid>
      <pubDate>Fri Oct 23 2020 00:25:00 GMT+0000 (Coordinated Universal Time)</pubDate>
      <description>
      <![CDATA[网络层——ping、traceroute命令编程实现]]>
      
      </description>
      <content:encoded><![CDATA[<h2 id="ping-和-tracert"><a href="#ping-和-tracert" class="headerlink" title="ping 和 tracert"></a>ping 和 tracert</h2><h3 id="ping-和-tracert-命令"><a href="#ping-和-tracert-命令" class="headerlink" title="ping 和 tracert 命令"></a>ping 和 tracert 命令</h3><p><strong>ping</strong>命令一般用来测试两台机器或者机器和服务器之间网络是否连通。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603437323252-a3bf1470-c4ae-450a-b0fd-4d83281aab46.png#align=left&amp;display=inline&amp;height=156&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=311&amp;originWidth=1439&amp;size=57273&amp;status=done&amp;style=shadow&amp;width=719.5" alt="image.png"><br><strong>tracert</strong>命令显示数据报到达目标主机途中所经过的路径（路由器），并且显示到达每个节点（路由器）的花费时间，显示的信息比 ping 出来的信息要多，要详细。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1484158/1603437358485-aef50645-6ff9-4395-bbae-0bfe22ce3dc1.png#align=left&amp;display=inline&amp;height=269&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=538&amp;originWidth=1436&amp;size=63435&amp;status=done&amp;style=shadow&amp;width=718" alt="image.png"></p>
<h3 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h3><h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><pre><code class="java">import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.UnknownHostException;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

import java.util.Scanner;

public class CommandUtil {

    String tracert = &quot;tracert -h 10 &quot;; //模拟tracert命令
    String ping = &quot;ping&quot;;//模拟 ping 命令
    String routePrint = &quot;route print -4&quot;;//模拟route print命令

    public static void main(String args[]){

        String input = null;

        @SuppressWarnings(&quot;resource&quot;)
        Scanner scanner = new Scanner(System.in);
        //利用while循环接收输入的命令行参数
        while(true){

            System.out.println(&quot;Please input destination server IP address ：\n&quot;);

            input = scanner.next();

            CommandUtil host = new CommandUtil();

            host.tracert = host.tracert + &quot; &quot; + input;

            host.ping = host.ping + &quot; &quot; + input;

            try {

                host.command(host.routePrint);

            } catch (IOException exception) {

                exception.printStackTrace();
            }

            try {

                host.command(host.tracert) ;

            } catch (IOException exception) {

                exception.printStackTrace();
            }

            try {

                host.command(host.ping);

            } catch (IOException exception) {

                exception.printStackTrace();
            }

            InetAddress ipAddress;

            try {

                ipAddress = InetAddress.getByName(input);

                System.out.println(&quot;IP address : &quot;+ipAddress);

            } catch (UnknownHostException exception) {

                exception.printStackTrace();
            }

            URL url;

            try {
                url = new URL(&quot;http&quot;,input,80,&quot;index.html&quot;);

                System.out.println();//输出服务器地址

                System.out.println(&quot;Get the Server-Name# : &quot;+url.getHost());

                System.out.println();//输出首页文件

                System.out.println(&quot;Get the default file# : &quot;+url.getFile());

                System.out.println();//输出首页协议和端口

                System.out.println(&quot;Get the protocol# : &quot;+url.getProtocol()+&quot; &quot;+url.getPort());

                System.out.println();

            } catch (MalformedURLException e) {

                e.printStackTrace();
            }

            System.out.println();

            try {

                System.out.println(&quot;Get serverName &amp; IPAddress：&quot;+InetAddress.getByName(input));

            } catch (UnknownHostException e) {

                e.printStackTrace();
            }

            long freeMemory = Runtime.getRuntime().freeMemory();

            System.out.println(&quot;Surplus memory of JVM: &quot;+freeMemory+&quot;B&quot;);

        }
    }
    //模拟 tracert 命令

    StringBuffer commandResult = null;

    private void command(String tracerCommand) throws IOException{
        //第一步：创建进程(是接口不必初始化)

        //1.通过Runtime类的getRuntime().exec()传入需要运行的命令参数

        System.out.println();

        System.out.println(InetAddress.getByName(&quot;localhost&quot;)+&quot; is tracking the destination server...&quot;);

        Process process = Runtime.getRuntime().exec(tracerCommand);

        readResult(process.getInputStream());

        process.destroy();
    }
    //第二步：通过输入流来将命令执行结果输出到控制台

    private void readResult(InputStream inputStream) throws IOException{

        commandResult = new StringBuffer();  //初始化命令行

        String commandInfo = null; //定义用于接收命令行执行结果的字符串

        BufferedReader bufferedReader =
                new BufferedReader(new InputStreamReader(inputStream));

        while ( (commandInfo = bufferedReader.readLine()) != null)  {

            System.out.println(commandInfo);
        }
        bufferedReader.close();
    }
}
</code></pre>
<h4 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h4><pre><code>D:\Java\jdk1.8.0_181\bin\java.exe &quot;-javaagent:D:\JetBrains\IntelliJ IDEA 2020.1.3\lib\idea_rt.jar=39614:D:\JetBrains\IntelliJ IDEA 2020.1.3\bin&quot; -Dfile.encoding=GBK -classpath D:\Java\jdk1.8.0_181\jre\lib\charsets.jar;D:\Java\jdk1.8.0_181\jre\lib\deploy.jar;D:\Java\jdk1.8.0_181\jre\lib\ext\access-bridge-64.jar;D:\Java\jdk1.8.0_181\jre\lib\ext\cldrdata.jar;D:\Java\jdk1.8.0_181\jre\lib\ext\dnsns.jar;D:\Java\jdk1.8.0_181\jre\lib\ext\jaccess.jar;D:\Java\jdk1.8.0_181\jre\lib\ext\jfxrt.jar;D:\Java\jdk1.8.0_181\jre\lib\ext\localedata.jar;D:\Java\jdk1.8.0_181\jre\lib\ext\nashorn.jar;D:\Java\jdk1.8.0_181\jre\lib\ext\sunec.jar;D:\Java\jdk1.8.0_181\jre\lib\ext\sunjce_provider.jar;D:\Java\jdk1.8.0_181\jre\lib\ext\sunmscapi.jar;D:\Java\jdk1.8.0_181\jre\lib\ext\sunpkcs11.jar;D:\Java\jdk1.8.0_181\jre\lib\ext\zipfs.jar;D:\Java\jdk1.8.0_181\jre\lib\javaws.jar;D:\Java\jdk1.8.0_181\jre\lib\jce.jar;D:\Java\jdk1.8.0_181\jre\lib\jfr.jar;D:\Java\jdk1.8.0_181\jre\lib\jfxswt.jar;D:\Java\jdk1.8.0_181\jre\lib\jsse.jar;D:\Java\jdk1.8.0_181\jre\lib\management-agent.jar;D:\Java\jdk1.8.0_181\jre\lib\plugin.jar;D:\Java\jdk1.8.0_181\jre\lib\resources.jar;D:\Java\jdk1.8.0_181\jre\lib\rt.jar;D:\project-java\jiwang\out\production\jiwang CommandUtil
Please input destination server IP address ：

baidu.com

localhost/127.0.0.1 is tracking the destination server...
===========================================================================
接口列表
  6...b4 b6 86 df cc 9d ......Realtek PCIe GbE Family Controller
 11...0c 54 15 fb 33 95 ......Microsoft Wi-Fi Direct Virtual Adapter
 14...0e 54 15 fb 33 94 ......Microsoft Wi-Fi Direct Virtual Adapter #2
 16...0c 54 15 fb 33 94 ......Intel(R) Dual Band Wireless-AC 3168
 17...0c 54 15 fb 33 98 ......Bluetooth Device (Personal Area Network)
  1...........................Software Loopback Interface 1
===========================================================================

IPv4 路由表
===========================================================================
活动路由:
网络目标        网络掩码          网关       接口   跃点数
          0.0.0.0          0.0.0.0      192.168.2.1    192.168.2.132     35
        127.0.0.0        255.0.0.0            在链路上         127.0.0.1    331
        127.0.0.1  255.255.255.255            在链路上         127.0.0.1    331
  127.255.255.255  255.255.255.255            在链路上         127.0.0.1    331
      192.168.2.0    255.255.255.0            在链路上     192.168.2.132    291
    192.168.2.132  255.255.255.255            在链路上     192.168.2.132    291
    192.168.2.255  255.255.255.255            在链路上     192.168.2.132    291
        224.0.0.0        240.0.0.0            在链路上         127.0.0.1    331
        224.0.0.0        240.0.0.0            在链路上     192.168.2.132    291
  255.255.255.255  255.255.255.255            在链路上         127.0.0.1    331
  255.255.255.255  255.255.255.255            在链路上     192.168.2.132    291
===========================================================================
永久路由:
  无

localhost/127.0.0.1 is tracking the destination server...

通过最多 10 个跃点跟踪
到 baidu.com [39.156.69.79] 的路由:

  1     1 ms     1 ms     1 ms  RM2100.lan [192.168.2.1]
  2     *        *        *     请求超时。
  3     *        *        *     请求超时。
  4     4 ms     3 ms     3 ms  192.168.100.253
  5     4 ms     5 ms    10 ms  192.168.100.114
  6     3 ms     3 ms     3 ms  192.168.100.118
  7     *        *        *     请求超时。
  8     *        *        *     请求超时。
  9     *        *        *     请求超时。
 10     *        *        *     请求超时。

跟踪完成。

localhost/127.0.0.1 is tracking the destination server...

正在 Ping baidu.com [39.156.69.79] 具有 32 字节的数据:
来自 39.156.69.79 的回复: 字节=32 时间=20ms TTL=48
来自 39.156.69.79 的回复: 字节=32 时间=20ms TTL=48
来自 39.156.69.79 的回复: 字节=32 时间=20ms TTL=48
来自 39.156.69.79 的回复: 字节=32 时间=20ms TTL=48

39.156.69.79 的 Ping 统计信息:
    数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，
往返行程的估计时间(以毫秒为单位):
    最短 = 20ms，最长 = 20ms，平均 = 20ms
IP address : baidu.com/39.156.69.79

Get the Server-Name# : baidu.com

Get the default file# : index.html

Get the protocol# : http 80


Get serverName &amp; IPAddress：baidu.com/39.156.69.79
Surplus memory of JVM: 124194640B
</code></pre>]]></content:encoded>
      <comments>https://www.wztlink1013.com/blog/qlrcf6/#comments</comments>
    </item>
    
    <item>
      <title><![CDATA[C++随机字符串生成函数]]></title>
      <link>https://www.wztlink1013.com/blog/zeszpb/</link>
      <guid>https://www.wztlink1013.com/blog/zeszpb/</guid>
      <pubDate>Thu Oct 22 2020 15:11:00 GMT+0000 (Coordinated Universal Time)</pubDate>
      <description>
      <![CDATA[C++随机字符串生成函数]]>
      
      </description>
      <content:encoded><![CDATA[<pre><code class="cpp">//C++ 随机字符串生成函数
#include&lt;iostream&gt;
#include&lt;ctime&gt;
using namespace std;

const int LEN_NAME=4;

char *rand_str(char *str,const int len)
{
    int i;
    for(i=0;i&lt;len;++i)
        str[i]=&#39;A&#39;+rand()%26;
    str[++i]=&#39;\0&#39;;
    return str;
}

void main()
{
    srand(time(NULL));
    int i;
    char name[LEN_NAME+1];

    for(i=0;i&lt;20;++i)
    {
        cout&lt;&lt;rand_str(name,LEN_NAME)&lt;&lt;endl;
    }
}
</code></pre>
]]></content:encoded>
      <comments>https://www.wztlink1013.com/blog/zeszpb/#comments</comments>
    </item>
    
    <item>
      <title><![CDATA[JAVA-正则表达式]]></title>
      <link>https://www.wztlink1013.com/blog/xm1a2g/</link>
      <guid>https://www.wztlink1013.com/blog/xm1a2g/</guid>
      <pubDate>Thu Oct 22 2020 11:45:47 GMT+0000 (Coordinated Universal Time)</pubDate>
      <description>
      <![CDATA[JAVA-正则表达式]]>
      
      </description>
      <content:encoded><![CDATA[<h2 id="常见匹配符号"><a href="#常见匹配符号" class="headerlink" title="常见匹配符号"></a>常见匹配符号</h2><table>
<thead>
<tr>
<th style="text-align:center">正则表达式</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>.</code></td>
<td style="text-align:center">匹配所有单个字符，除了换行符（Linux 中换行是 <code>\n</code>，Windows 中换行是 <code>\r\n</code>）</td>
</tr>
<tr>
<td style="text-align:center"><code>^regex</code></td>
<td style="text-align:center">正则必须匹配字符串开头</td>
</tr>
<tr>
<td style="text-align:center"><code>regex$</code></td>
<td style="text-align:center">正则必须匹配字符串结尾</td>
</tr>
<tr>
<td style="text-align:center"><code>[abc]</code></td>
<td style="text-align:center">复选集定义，匹配字母 a 或 b 或 c</td>
</tr>
<tr>
<td style="text-align:center"><code>[abc][vz]</code></td>
<td style="text-align:center">复选集定义，匹配字母 a 或 b 或 c，后面跟着 v 或 z</td>
</tr>
<tr>
<td style="text-align:center"><code>[^abc]</code></td>
<td style="text-align:center">当插入符 <code>^</code> 在中括号中以第一个字符开始显示，则表示否定模式。此模式匹配所有字符，除了 a 或 b 或 c</td>
</tr>
<tr>
<td style="text-align:center"><code>[a-d1-7]</code></td>
<td style="text-align:center">范围匹配，匹配字母 a 到 d 和数字从 1 到 7 之间，但不匹配 d1</td>
</tr>
<tr>
<td style="text-align:center"><code>XZ</code></td>
<td style="text-align:center">匹配 X 后直接跟着 Z</td>
</tr>
<tr>
<td style="text-align:center">X&#124;Z</td>
<td style="text-align:center">匹配 X 或 Z</td>
</tr>
</tbody>
</table>
<h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><table>
<thead>
<tr>
<th style="text-align:center">正则表达式</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>\d</code></td>
<td style="text-align:center">匹配一个数字，是 <code>[0-9]</code> 的简写</td>
</tr>
<tr>
<td style="text-align:center"><code>\D</code></td>
<td style="text-align:center">匹配一个非数字，是 <code>[^0-9]</code> 的简写</td>
</tr>
<tr>
<td style="text-align:center"><code>\s</code></td>
<td style="text-align:center">匹配一个空格，是 <code>[ \t\n\x0b\r\f]</code> 的简写</td>
</tr>
<tr>
<td style="text-align:center"><code>\S</code></td>
<td style="text-align:center">匹配一个非空格</td>
</tr>
<tr>
<td style="text-align:center"><code>\w</code></td>
<td style="text-align:center">匹配一个单词字符（大小写字母、数字、下划线），是 <code>[a-zA-Z_0-9]</code> 的简写</td>
</tr>
<tr>
<td style="text-align:center"><code>\W</code></td>
<td style="text-align:center">匹配一个非单词字符（除了大小写字母、数字、下划线之外的字符），等同于 <code>[^\w]</code></td>
</tr>
</tbody>
</table>
<h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><p>| 正则表达式 | 描述 | 举例 |<br>| <code>*</code> | 匹配 &gt;=0 个，是 <code>{0,}</code> 的简写 | <code>X*</code> 表示匹配零个或多个字母 X，<code>.*</code> 表示匹配任何字符串 |<br>| :—: | :—: | :—: |<br>| <code>+</code> | 匹配 &gt;=1 个，是 <code>{1,}</code> 的简写 | <code>X+</code> 表示匹配一个或多个字母 X |<br>| <code>?</code> | 匹配 1 个或 0 个，是 <code>{0,1}</code> 的简写 | <code>X?</code> 表示匹配 0 个或 1 个字母 X |<br>| <code>{X}</code> | 只匹配 X 个字符 | <code>\d{3}</code> 表示匹配 3 个数字，<code>.{10}</code> 表示匹配任何长度是 10 的字符串 |<br>| <code>{X,Y}</code> | 匹配 &gt;=X 且 &lt;=Y 个 | <code>\d{1,4}</code> 表示匹配至少 1 个最多 4 个数字 |<br>| <code>*?</code> | 如果 <code>?</code> 是限定符 <code>*</code> 或 <code>+</code> 或 <code>?</code> 或 <code>{}</code> 后面的第一个字符，那么表示<strong>非贪婪模式</strong>（尽可能少的匹配字符），而不是默认的<strong>贪婪模式</strong> | |</p>
]]></content:encoded>
      <comments>https://www.wztlink1013.com/blog/xm1a2g/#comments</comments>
    </item>
    
  </channel>
</rss>
