<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>尼采般地抒情</title>
  <icon>https://www.wztlink1013.com/favicon.ico</icon>
  <subtitle>什么都不舍弃，什么也改变不了</subtitle>
  <link href="https://www.wztlink1013.com/atom.xml" rel="self"/>
  
  <link href="https://www.wztlink1013.com/"/>
  <updated>2022-11-26T06:13:52.401Z</updated>
  <id>https://www.wztlink1013.com/</id>
  
  <author>
    <name>尼采般地抒情</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一个梦——新学期</title>
    <link href="https://www.wztlink1013.com/essay/shdnxh6ya6pgbh1n/"/>
    <id>https://www.wztlink1013.com/essay/shdnxh6ya6pgbh1n/</id>
    <published>2022-11-23T14:12:36.000Z</published>
    <updated>2022-11-26T06:13:52.401Z</updated>
    
    <content type="html"><![CDATA[<!doctype html><div class="lake-content" typography="classic"><p id="u3fe3baad" class="ne-p" style="text-align: center"><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/1484158/1669244059061-5269cc7d-fa21-4467-a750-5aa43184f583.jpeg" width="600" id="ZLXlO" class="ne-image"></p><p id="uc8d73b3a" class="ne-p"><span class="ne-text">下学期开学了，位置是我初中的那个学校，教室是最初的靠近大门的高排宿舍那里，那里本来是一排宿舍，不知怎么改为教室了。</span></p><p id="u76d5ec95" class="ne-p"><span class="ne-text">新学期开学，我还是一如既往去的很晚，教室里面坐满了人，我看着第三排还是第四排边上有个空位，就坐了过去，第一堂课是数学，具体讲的我忘了，不过记得讲的是一种新型运算，打破传统运算的那种…</span></p><p id="ucb3b5036" class="ne-p"><span class="ne-text">我的同桌告诉我待会可能按照成绩分位置，我一脸懵，不知道有什么成绩…</span></p><p id="u1912f2dc" class="ne-p"><span class="ne-text">然后快下课的前十分钟，班主任进来了，她说报一下上次数学考试排名，我记得我排第五还是第六，分数是我高考数学成绩，同学把我的试卷递给我。老师说这次新班级数学超过1xx的有十个，讲完，我便醒了（冻醒）……</span></p><p id="u8a72d38f" class="ne-p"><span class="ne-text">后记:</span></p><p id="u727b7420" class="ne-p"><span class="ne-text">那个位置不是靠窗的，可我上课还是喜欢看着外面，看那个一排排自行车的地方。</span></p><p id="u62d08c65" class="ne-p"><span class="ne-text">新学期的第一堂课，一如既往般地身边所有同学都很聚精会神，但我却很出神……</span></p><p id="u6a799471" class="ne-p"><span class="ne-text">其实我一直都不喜欢新学期，特别是大学之前的小学初中，一切都太新了，那种氛围感有点让人窒息抑郁…直到大学，我几乎只坐最后一排靠窗，我喜欢在上课的时候看小说，尤其是所有人都在认真听课的时候，记得大三有一个学期中的两个礼拜的所有离散数学课，我全都用来看《平凡的世界》了……</span></p><p id="u4fc2e318" class="ne-p"><span class="ne-text">梦醒的那一刻，一大堆记忆涌入脑海:上大学了…大学毕业了…工作上班了…我还在睡觉…待会起来上班……</span></p></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;!doctype html&gt;&lt;div class=&quot;lake-content&quot; typography=&quot;classic&quot;&gt;&lt;p id=&quot;u3fe3baad&quot; class=&quot;ne-p&quot; style=&quot;text-align: center&quot;&gt;&lt;img</summary>
        
      
    
    
    
    <category term="异世界" scheme="https://www.wztlink1013.com/categories/%E5%BC%82%E4%B8%96%E7%95%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>CommonJS模块转ESM模块方法</title>
    <link href="https://www.wztlink1013.com/blog/fhxatr6exkaavb4k/"/>
    <id>https://www.wztlink1013.com/blog/fhxatr6exkaavb4k/</id>
    <published>2022-11-16T03:44:20.000Z</published>
    <updated>2022-11-26T06:13:29.277Z</updated>
    
    <content type="html"><![CDATA[<!doctype html><div class="lake-content" typography="classic"><p id="ua2542a3a" class="ne-p" style="text-align: center"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1668599149397-081cdc1f-3a12-445f-a1ee-077ecde12f33.png" width="240" id="ue9195258" class="ne-image"></p><p id="u22b00a16" class="ne-p"><span class="ne-text">前言：vite项目中，依赖包的加载都是基于esm模块加载的，有些依赖打包后不是esm而是CommonJS类型的，则需要由CommonJS转为esm类型。vite预构建可以默认将node_modules下的依赖包进行转换为esm类型并存放在node_modules文件夹下的.vite文件夹下，也可以自行添加路径来预构建（详见文档：</span><a href="https://cn.vitejs.dev/guide/dep-pre-bundling.html#customizing-the-behavior" data-href="https://cn.vitejs.dev/guide/dep-pre-bundling.html#customizing-the-behavior" target="_blank" class="ne-link"><span class="ne-text">https://cn.vitejs.dev/guide/dep-pre-bundling.html#customizing-the-behavior</span></a><span class="ne-text">）。</span></p><p id="ub9247581" class="ne-p"><span class="ne-text">但是对于一些老旧sdk，在vite项目中，利用pnpm link调试，就需要转包操作了。在此记录一下手动将CommonJS模块转为ESM模块的方法。</span></p><pre><code class="json">&#123;&quot;name&quot;: &quot;cjs_to_esm&quot;,&quot;version&quot;: &quot;1.0.0&quot;,&quot;description&quot;: &quot;&quot;,&quot;type&quot;: &quot;module&quot;,&quot;scripts&quot;: &#123;&quot;build&quot;: &quot;rollup -c&quot;&#125;,&quot;keywords&quot;: [],&quot;author&quot;: &quot;&quot;,&quot;license&quot;: &quot;ISC&quot;,&quot;devDependencies&quot;: &#123;&quot;@rollup/plugin-commonjs&quot;: &quot;^23.0.2&quot;,&quot;rollup&quot;: &quot;^3.2.5&quot;&#125;&#125;</code></pre><pre><code class="javascript">import commonjs from &#39;@rollup/plugin-commonjs&#39;;export default &#123;input: &#39;src/test_cjs.js&#39;,output: &#123;file: &#39;output/test_esm.js&#39;,format: &#39;es&#39;&#125;,plugins: [commonjs()]&#125;;</code></pre></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;!doctype html&gt;&lt;div class=&quot;lake-content&quot; typography=&quot;classic&quot;&gt;&lt;p id=&quot;ua2542a3a&quot; class=&quot;ne-p&quot; style=&quot;text-align: center&quot;&gt;&lt;img</summary>
        
      
    
    
    
    <category term="Web开发" scheme="https://www.wztlink1013.com/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    <category term="Node.js" scheme="https://www.wztlink1013.com/categories/Web%E5%BC%80%E5%8F%91/Node-js/"/>
    
    
  </entry>
  
  <entry>
    <title>一个梦——一个老人</title>
    <link href="https://www.wztlink1013.com/essay/gkc62n/"/>
    <id>https://www.wztlink1013.com/essay/gkc62n/</id>
    <published>2022-10-30T12:20:33.000Z</published>
    <updated>2022-11-26T06:13:52.405Z</updated>
    
    <content type="html"><![CDATA[<p>这是加密文章！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;这是加密文章！&lt;/p&gt;
</summary>
        
      
    
    
    
    <category term="异世界" scheme="https://www.wztlink1013.com/categories/%E5%BC%82%E4%B8%96%E7%95%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue异步接口请求的几种使用方式</title>
    <link href="https://www.wztlink1013.com/blog/vdv6i5/"/>
    <id>https://www.wztlink1013.com/blog/vdv6i5/</id>
    <published>2022-10-14T23:56:22.000Z</published>
    <updated>2022-11-26T06:13:29.281Z</updated>
    
    <content type="html"><![CDATA[<!doctype html><div class="lake-content" typography="classic"><p id="u2321b18b" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1665821781199-5e03f0f2-b6c3-405e-a5e9-6071e66be32d.png" width="1400" id="u884cd2d4" class="ne-image"></p><p id="u45cb7189" class="ne-p"><br></p><p id="u97cd96d5" class="ne-p"><span class="ne-text">前言：Vue请求接口多是异步操作数据，我们一般会用then、catch来进行链式获取接口数据，除此之外还可以使用Async、Await这个方式来执行异步代码，待接口数据请求完成，再进行下面的逻辑执行。但是上述情况一个是会陷入“回调地狱”，而且请求失败所获得的数据不好获取处理，这个时候使用Promise来封装返回的数据就很好用了，不仅如此，这种形式也有利于传递接口给SDK，具体代码如下：</span></p><p id="u8ecd33bf" class="ne-p"><span class="ne-text"></span></p><pre><code class="javascript">async getData(id) &#123;···return new Promise((resolve, reject) =&gt; &#123;getInterfaceData(&#123; param: id &#125;).then((res) =&gt; &#123;···resolve(res.data);&#125;).catch((err) =&gt; &#123;···reject(new Error(err));&#125;);&#125;);&#125;,const data = getData(&#39;xxx&#39;);</code></pre></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;!doctype html&gt;&lt;div class=&quot;lake-content&quot; typography=&quot;classic&quot;&gt;&lt;p id=&quot;u2321b18b&quot; class=&quot;ne-p&quot;&gt;&lt;img</summary>
        
      
    
    
    
    <category term="Web开发" scheme="https://www.wztlink1013.com/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    <category term="Vue" scheme="https://www.wztlink1013.com/categories/Web%E5%BC%80%E5%8F%91/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>Axios实现重连机制</title>
    <link href="https://www.wztlink1013.com/blog/urrudl/"/>
    <id>https://www.wztlink1013.com/blog/urrudl/</id>
    <published>2022-10-14T23:29:38.000Z</published>
    <updated>2022-11-26T06:13:29.297Z</updated>
    
    <content type="html"><![CDATA[<!doctype html><div class="lake-content" typography="classic"><p id="u719a7e4d" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1665819024337-8997802d-d9c9-4398-aa69-f7be2c45d02b.png" width="1347.499946455163" id="u1a5e26ad" class="ne-image"></p><p id="ub28fc1f7" class="ne-p"><span class="ne-text"></span></p><p id="uab8a1db5" class="ne-p"><span class="ne-text">前言：Vue项目中利用Axios封装接口的请求和响应过程中，请求的接口可能会出现本地网络情况抑或是服务端相关环境错误，如果需要接口配置重连机制，如下逻辑可以实现：</span></p><p id="u7c9e092e" class="ne-p"><br></p><pre><code class="javascript">···service.interceptors.response.use((response) =&gt; &#123;tryCloseLoading();return response &amp;&amp; response.data;&#125;,(err) =&gt; &#123;// 通用报错处理if (err.response) &#123;// 通用报错处理···// 关闭加载中tryCloseLoading();// return Promise.reject(err.response.data);&#125; else &#123;const &#123; config &#125; = err;if (!config || !config.retry) return Promise.reject(err);config.retryCount = config.retryCount || 0;// 检查是否已经达到重连总数if (config.retryCount &gt;= config.retry) &#123;message.error(&#39;当前网络异常&#39;);tryCloseLoading();return Promise.reject(err);&#125;config.retryCount += 1;// 自动计算每次重试的延时，重试次数越多，延时越大const retryDelay = (1 / 2) _ (Math.pow(2, config.retryCount) - 1) _ 1000;// 创建新的 Promise 来发起请求const backoff = new Promise((resolve) =&gt; &#123;setTimeout(() =&gt; &#123;resolve();&#125;, retryDelay);&#125;);return backoff.then(() =&gt; &#123;tryCloseLoading();return service(config);&#125;);&#125;&#125;,);···</code></pre></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;!doctype html&gt;&lt;div class=&quot;lake-content&quot; typography=&quot;classic&quot;&gt;&lt;p id=&quot;u719a7e4d&quot; class=&quot;ne-p&quot;&gt;&lt;img</summary>
        
      
    
    
    
    <category term="Web开发" scheme="https://www.wztlink1013.com/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    <category term="Vue" scheme="https://www.wztlink1013.com/categories/Web%E5%BC%80%E5%8F%91/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>同站点防盗链图片和百度统计Referer不一致的解决方案</title>
    <link href="https://www.wztlink1013.com/blog/ugwagn/"/>
    <id>https://www.wztlink1013.com/blog/ugwagn/</id>
    <published>2022-10-06T22:19:11.000Z</published>
    <updated>2022-11-26T06:13:29.309Z</updated>
    
    <content type="html"><![CDATA[<!doctype html><div class="lake-content" typography="classic"><p id="uac5762ec" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1665124978469-51dce474-28f7-4372-9549-d55a6fd48098.png" width="874.1666319304056" id="udf2cdd49" class="ne-image"></p><p id="ue8a744ec" class="ne-p"><span class="ne-text">前言：个人网站使用的语雀外链图片和百度统计两者之间的referrer不一致的解决方案</span></p><p id="u85ff8593" class="ne-p"><span class="ne-text"></span></p><p id="u1cbd0778" class="ne-p"><span class="ne-text">问题：防盗链图片不在所指定的白名单内，是不被允许访问的，比如语雀图片不能在自己网站上渲染使用，通过设置页面的referrer可以进行访问（</span><a href="https://blog.csdn.net/qq_53225741/article/details/125239106" data-href="https://blog.csdn.net/qq_53225741/article/details/125239106" class="ne-link"><span class="ne-text">Referer和Referrer Policy以及图片防盗链_前端码农小王的博客-CSDN博客_前端设置referer</span></a><span class="ne-text">）</span></p><pre><code class="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;</code></pre><p id="uf17ac2f5" class="ne-p"><span class="ne-text">设置上述referrer，那么对百度统计代码失效，因为百度统计需要携带请求网站的referr等信息才能进一步进行数据统计分析</span></p><p id="uaa9559de" class="ne-p"><br></p><p id="u41eb776c" class="ne-p"><span class="ne-text">解决思路：动态对网站的referrer进行更改，设置网站初始referrer为no-referrer，待网站所有外链图片加载完成，动态修改referrer为strict-origin-when-cross-origin，再进行百度统计逻辑代码的执行。核心代码如下：</span></p><pre><code class="javascript">// 防盗链图片共存const getImgLoadEd = (callback) =&gt; &#123;let images = document.getElementById(&quot;lyrics&quot;).querySelectorAll(&quot;img&quot;);const promises = Array.prototype.slice.call(images).filter((img) =&gt; /^(https:\/\/cdn.xxx.com\/yuque)/.test(img.src)).map((node) =&gt; &#123;return new Promise((resolve, reject) =&gt; &#123;// 加一重保障node.setAttribute(&quot;referrerpolicy&quot;, &quot;no-referrer&quot;);let loadImg = new Image();loadImg.src = node.src;loadImg.onload = () =&gt; &#123;resolve(node);&#125;;&#125;);&#125;);Promise.all(promises).then((data) =&gt; &#123;if (callback) callback();&#125;).catch((e) =&gt; &#123;console.log(&quot;所拉取的文章图床访问失败!&quot;);&#125;);&#125;;const baidutongji = () =&gt; &#123;document.querySelector(&#39;meta[name=&quot;referrer&quot;]&#39;).setAttribute(&quot;content&quot;, &quot;strict-origin-when-cross-origin&quot;);var hm = document.createElement(&quot;script&quot;);hm.src = &quot;https://hm.baidu.com/hm.js?bcxxxxxxxxxxxx1&quot;;var s = document.getElementsByTagName(&quot;script&quot;)[0];s.parentNode.insertBefore(hm, s);&#125;;</code></pre></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;!doctype html&gt;&lt;div class=&quot;lake-content&quot; typography=&quot;classic&quot;&gt;&lt;p id=&quot;uac5762ec&quot; class=&quot;ne-p&quot;&gt;&lt;img</summary>
        
      
    
    
    
    <category term="其他" scheme="https://www.wztlink1013.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    <category term="玩转博客" scheme="https://www.wztlink1013.com/categories/%E5%85%B6%E4%BB%96/%E7%8E%A9%E8%BD%AC%E5%8D%9A%E5%AE%A2/"/>
    
    
  </entry>
  
  <entry>
    <title>站点添加雷姆live2d+看板模型</title>
    <link href="https://www.wztlink1013.com/blog/wrygmp/"/>
    <id>https://www.wztlink1013.com/blog/wrygmp/</id>
    <published>2022-10-06T20:43:55.000Z</published>
    <updated>2022-11-26T06:13:29.509Z</updated>
    
    <content type="html"><![CDATA[<!doctype html><div class="lake-content" typography="classic"><p id="ubf72f4a0" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1665116739656-379177c2-ffa2-4cc4-b22c-38fb12c201e8.png" width="1599.1666031214952" id="u3f0332ae" class="ne-image"></p><p id="u2c3627c7" class="ne-p"><br></p><p id="u15698168" class="ne-p"><span class="ne-text">前言：为自己站点配置雷姆live2d，并在live2d模型的基础上附加添加看板功能。</span></p><h2 id="dTMUK"><span class="ne-text">安装hexo-helper-live2d</span></h2><ul class="ne-ul"><li id="ua238e076"><span class="ne-text">下载</span><code class="ne-code"><span class="ne-text">hexo-helper-live2d</span></code><span class="ne-text">（</span><a href="https://github.com/EYHN/hexo-helper-live2d" data-href="https://github.com/EYHN/hexo-helper-live2d" target="_blank" class="ne-link"><span class="ne-text">https://github.com/EYHN/hexo-helper-live2d</span></a><span class="ne-text">）</span></li></ul><pre><code class="bash">npm install --save hexo-helper-live2d</code></pre><h2 id="xTwII"><span class="ne-text">配置自定义蕾姆模型</span></h2><h3 id="LkS5r"><span class="ne-text">文件配置</span></h3><ul class="ne-ul"><li id="uba7ea8c6"><span class="ne-text">remu模型下载：</span><a href="https://onedrive.wztlink1013.com/zh-CN/live2d/" data-href="https://onedrive.wztlink1013.com/zh-CN/live2d/" target="_blank" class="ne-link"><span class="ne-text">https://onedrive.wztlink1013.com/zh-CN/live2d/</span></a><span class="ne-text"> 【密码：remu】</span></li><li id="u4c758308"><span class="ne-text">在hexo</span><strong><span class="ne-text">项目根目录</span></strong><span class="ne-text">新建</span><code class="ne-code"><span class="ne-text">live2d_models</span></code><span class="ne-text">文件夹，再将所下载的模型解压放入该文件夹</span></li></ul><p id="ub4f75940" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1665114888992-4037e056-a783-4827-9d0f-426fbc3e0107.png" width="548.3333115445251" id="u4879bd54" class="ne-image"></p><h3 id="RMXIc"><span class="ne-text">_config.yml配置</span></h3><ul class="ne-ul"><li id="ue2750c2f"><span class="ne-text">根目录_config.yml添加如下配置</span></li><li id="u1a142b41"><span class="ne-text">API文档：</span><a href="https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init" data-href="https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init" target="_blank" class="ne-link"><span class="ne-text">https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init</span></a></li></ul><pre><code class="yaml">## live2dlive2d:enable: true # 是否开启 live2dscriptFrom: local # 脚本从本地引入pluginRootPath: live2d/ # 插件在站点上的根目录(相对路径)pluginJsPath: lib/ # 脚本文件相对与插件根目录路径pluginModelPath: assets/ # 模型文件相对与插件根目录路径tagMode: false # 标签模式, 是否仅替换 live2d tag 标签而非插入到所有页面中debug: false # 调试, 是否在控制台输出日志model:use: remu # 填写放进 live2d_models 文件夹中的模型文件夹名字scale: 1 # canvas 模型与 canvas 的缩放display:width: 150 # 宽度height: 300 # 高度position: left # 显示位置hOffset: 0 #水平偏移vOffset: -12 #垂直偏移mobile:show: true # 手机端是否显示scale: 1 # 移动设备上的缩放react:opacity: 1 # 透明度</code></pre><div data-type="info" class="ne-alert"><p id="u9c7aaaf6" class="ne-p"><span class="ne-text">PS：按需加载 live2d 标签</span></p><p id="u6dcae3e1" class="ne-p"><span class="ne-text">上述配置中</span><code class="ne-code"><span class="ne-text">tagMode: true</span></code><span class="ne-text">则代表需要在主题中单独给出需要显示的页面</span></p></div><h3 id="aCTih"><span class="ne-text">最终 live2d 效果</span></h3><p id="u79795e33" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1665115637123-4e5c7429-8a8e-4ae9-b38b-64fc9779a01f.png" width="1599.9999364217147" id="uf21a5c73" class="ne-image"></p><h2 id="dgYzR"><span class="ne-text">配置三方插件模型</span></h2><p id="ua70cfc9f" class="ne-p"><span class="ne-text">上述步骤是下载 remu 源文件然后自定义的 remu 模型，也可以下载社区封装好 npm 插件的模型，本文做自定义模型的说明，故不做该部分详述。相关参考如下：</span></p><ul class="ne-ul"><li id="ufdb404b2"><a href="https://github.com/xiazeyu/live2d-widget-models" data-href="https://github.com/xiazeyu/live2d-widget-models" target="_blank" class="ne-link"><span class="ne-text">https://github.com/xiazeyu/live2d-widget-models</span></a></li><li id="u4b8b184e"><a href="https://huaji8.top/post/live2d-plugin-2.0/" data-href="https://huaji8.top/post/live2d-plugin-2.0/" class="ne-link"><span class="ne-text">https://huaji8.top/post/live2d-plugin-2.0/</span></a></li></ul><h2 id="ayEhu"><span class="ne-text">附：给 live2d 添加看板功能</span></h2><p id="u85e2afa1" class="ne-p"><span class="ne-text">上述所有步骤完成 live2d 的安装配置，在此基础上还可以给 live2d 添加看板功能，就如本文第一张图片那种效果</span></p><h3 id="MW7kI"><span class="ne-text">添加看板样式</span></h3><p id="uc900e14f" class="ne-p"><span class="ne-text">添加静态样式即可：</span></p><details class="lake-collapse"><summary id="u319b4002"><span class="ne-text">\_live2d/remu.styl</span></summary><pre><code class="css">// 收缩之后的左下角的贴附样式#waifu-toggle &#123;background-color: #3f51b5;border-radius: 5px;bottom: 66px;color: #fff;cursor: pointer;font-size: 14px;left: 5px;margin-left: -90px;padding: 5px 2px 5px 5px;position: fixed;transition: margin-left 1s;width: 60px;writing-mode: vertical-rl;&#125;#waifu-toggle.waifu-toggle-active &#123;margin-left: -40px;&#125;#waifu-toggle.waifu-toggle-active:hover &#123;margin-left: -30px;&#125;// 容纳雷姆的盒子#waifu &#123;bottom: -1000px;left: 0;line-height: 0;margin-bottom: -10px;position: fixed;transform: translateY(3px);transition: transform .3s ease-in-out, bottom 3s ease-in-out;z-index: 1;&#125;#waifu:hover &#123;transform: translateY(0);&#125;// 文字提示框#waifu-tips &#123;animation: shake 50s ease-in-out 5s infinite;background-color: rgba(100,149,237, .5);border: 1px solid rgba(30,144,255, .62);border-radius: 12px;box-shadow: 0 3px 15px 2px rgba(191, 158, 118, .2);font-size: 14px;line-height: 24px;margin: -30px 20px;min-height: 70px;opacity: 0;overflow: hidden;padding: 5px 10px;position: absolute;text-overflow: ellipsis;transition: opacity 1s;width: 180px;word-break: break-all;&#125;#waifu-tips.waifu-tips-active &#123;opacity: 1;transition: opacity .2s;&#125;#waifu-tips spancolor: rgba(0,0,255,.7); // 文字提示框中的重点字// 容纳雷姆的外加小盒子#waifu #live2d &#123;cursor: grab;height: 300px;position: relative;width: 200px;&#125;#waifu #live2d:active &#123;cursor: grabbing;&#125;// 小按钮组件#waifu-tool &#123;color: #0684bd;opacity: 0.5;position: absolute;left: 5pxtop: 70px;transition: opacity 1s;&#125;#waifu:hover #waifu-tool &#123;opacity: 1;&#125;// 小按钮的 span 样式#waifu-tool span &#123;color: #0684bd;cursor: pointer;display: block;line-height: 30px;text-align: center;transition: color .3s;&#125;#waifu-tool span:hover &#123;color: #0684bd; /_ #34495e _/&#125;@keyframes shake &#123;2% &#123;transform: translate(.5px, -1.5px) rotate(-.5deg);&#125;4% &#123;transform: translate(.5px, 1.5px) rotate(1.5deg);&#125;6% &#123;transform: translate(1.5px, 1.5px) rotate(1.5deg);&#125;8% &#123;transform: translate(2.5px, 1.5px) rotate(.5deg);&#125;10% &#123;transform: translate(.5px, 2.5px) rotate(.5deg);&#125;12% &#123;transform: translate(1.5px, 1.5px) rotate(.5deg);&#125;14% &#123;transform: translate(.5px, .5px) rotate(.5deg);&#125;16% &#123;transform: translate(-1.5px, -.5px) rotate(1.5deg);&#125;18% &#123;transform: translate(.5px, .5px) rotate(1.5deg);&#125;20% &#123;transform: translate(2.5px, 2.5px) rotate(1.5deg);&#125;22% &#123;transform: translate(.5px, -1.5px) rotate(1.5deg);&#125;24% &#123;transform: translate(-1.5px, 1.5px) rotate(-.5deg);&#125;26% &#123;transform: translate(1.5px, .5px) rotate(1.5deg);&#125;28% &#123;transform: translate(-.5px, -.5px) rotate(-.5deg);&#125;30% &#123;transform: translate(1.5px, -.5px) rotate(-.5deg);&#125;32% &#123;transform: translate(2.5px, -1.5px) rotate(1.5deg);&#125;34% &#123;transform: translate(2.5px, 2.5px) rotate(-.5deg);&#125;36% &#123;transform: translate(.5px, -1.5px) rotate(.5deg);&#125;38% &#123;transform: translate(2.5px, -.5px) rotate(-.5deg);&#125;40% &#123;transform: translate(-.5px, 2.5px) rotate(.5deg);&#125;42% &#123;transform: translate(-1.5px, 2.5px) rotate(.5deg);&#125;44% &#123;transform: translate(-1.5px, 1.5px) rotate(.5deg);&#125;46% &#123;transform: translate(1.5px, -.5px) rotate(-.5deg);&#125;48% &#123;transform: translate(2.5px, -.5px) rotate(.5deg);&#125;50% &#123;transform: translate(-1.5px, 1.5px) rotate(.5deg);&#125;52% &#123;transform: translate(-.5px, 1.5px) rotate(.5deg);&#125;54% &#123;transform: translate(-1.5px, 1.5px) rotate(.5deg);&#125;56% &#123;transform: translate(.5px, 2.5px) rotate(1.5deg);&#125;58% &#123;transform: translate(2.5px, 2.5px) rotate(.5deg);&#125;60% &#123;transform: translate(2.5px, -1.5px) rotate(1.5deg);&#125;62% &#123;transform: translate(-1.5px, .5px) rotate(1.5deg);&#125;64% &#123;transform: translate(-1.5px, 1.5px) rotate(1.5deg);&#125;66% &#123;transform: translate(.5px, 2.5px) rotate(1.5deg);&#125;68% &#123;transform: translate(2.5px, -1.5px) rotate(1.5deg);&#125;70% &#123;transform: translate(2.5px, 2.5px) rotate(.5deg);&#125;72% &#123;transform: translate(-.5px, -1.5px) rotate(1.5deg);&#125;74% &#123;transform: translate(-1.5px, 2.5px) rotate(1.5deg);&#125;76% &#123;transform: translate(-1.5px, 2.5px) rotate(1.5deg);&#125;78% &#123;transform: translate(-1.5px, 2.5px) rotate(.5deg);&#125;80% &#123;transform: translate(-1.5px, .5px) rotate(-.5deg);&#125;82% &#123;transform: translate(-1.5px, .5px) rotate(-.5deg);&#125;84% &#123;transform: translate(-.5px, .5px) rotate(1.5deg);&#125;86% &#123;transform: translate(2.5px, 1.5px) rotate(.5deg);&#125;88% &#123;transform: translate(-1.5px, .5px) rotate(1.5deg);&#125;90% &#123;transform: translate(-1.5px, -.5px) rotate(-.5deg);&#125;92% &#123;transform: translate(-1.5px, -1.5px) rotate(1.5deg);&#125;94% &#123;transform: translate(.5px, .5px) rotate(-.5deg);&#125;96% &#123;transform: translate(2.5px, -.5px) rotate(-.5deg);&#125;98% &#123;transform: translate(-1.5px, -1.5px) rotate(-.5deg);&#125;0%, 100% &#123;transform: translate(0, 0) rotate(0);&#125;&#125;</code></pre></details><h3 id="ZDamL"><span class="ne-text">添加看板逻辑代码</span></h3><details class="lake-collapse"><summary id="ub489a590"><span class="ne-text">./part/live2d.js</span></summary><pre><code class="javascript">function loadWidget(config) &#123;let &#123; waifuPath, apiPath, cdnPath &#125; = config;let useCDN = false, modelList;if (typeof cdnPath === &quot;string&quot;) &#123;useCDN = true;if (!cdnPath.endsWith(&quot;/&quot;)) cdnPath += &quot;/&quot;;&#125; else if (typeof apiPath === &quot;string&quot;) &#123;if (!apiPath.endsWith(&quot;/&quot;)) apiPath += &quot;/&quot;;&#125; else &#123;console.error(&quot;Invalid initWidget argument!&quot;);return;&#125;localStorage.removeItem(&quot;waifu-display&quot;);sessionStorage.removeItem(&quot;waifu-text&quot;);document.body.insertAdjacentHTML(&quot;beforeend&quot;, `&lt;div id=&quot;waifu&quot;&gt;                &lt;div id=&quot;waifu-tips&quot;&gt;&lt;/div&gt;                &lt;canvas id=&quot;live2d&quot;&gt;&lt;/canvas&gt;                &lt;div id=&quot;waifu-tool&quot;&gt;                    &lt;span class=&quot;fa fa-comments&quot;&gt;&lt;/span&gt;                    &lt;span class=&quot;fa fa-link&quot;&gt;&lt;/span&gt;                    &lt;span class=&quot;fa fa-compress&quot;&gt;&lt;/span&gt;                &lt;/div&gt;            &lt;/div&gt;`);// https://stackoverflow.com/questions/24148403/trigger-css-transition-on-appended-elementsetTimeout(() =&gt; &#123;document.getElementById(&quot;waifu&quot;).style.bottom = 0;&#125;, 0);function randomSelection(obj) &#123;return Array.isArray(obj) ? obj[Math.floor(Math.random() * obj.length)] : obj;&#125;// 检测用户活动状态，并在空闲时显示消息let userAction = false,userActionTimer,messageTimer,messageArray = [&quot;好久不见，日子过得好快呢……&quot;, &quot;嗨～欢迎访问该站点！&quot;, &quot;记得把小家加入 Adblock 白名单哦！&quot;];window.addEventListener(&quot;mousemove&quot;, () =&gt; userAction = true);window.addEventListener(&quot;keydown&quot;, () =&gt; userAction = true);setInterval(() =&gt; &#123;if (userAction) &#123;userAction = false;clearInterval(userActionTimer);userActionTimer = null;&#125; else if (!userActionTimer) &#123;userActionTimer = setInterval(() =&gt; &#123;showMessage(randomSelection(messageArray), 6000, 9);&#125;, 20000);&#125;&#125;, 1000);(function registerEventListener() &#123;// TODO: 第一个 icon，说话document.querySelector(&quot;#waifu-tool .fa-comments&quot;).addEventListener(&quot;click&quot;, showHitokoto);// TODO: 第二个 icon，貌似是什么游戏// document.querySelector(&quot;#waifu-tool .fa-paper-plane&quot;).addEventListener(&quot;click&quot;, () =&gt; &#123;// if (window.Asteroids) &#123;// if (!window.ASTEROIDSPLAYERS) window.ASTEROIDSPLAYERS = [];// window.ASTEROIDSPLAYERS.push(new Asteroids());// &#125; else &#123;// const script = document.createElement(&quot;script&quot;);// script.src = &quot;https://cdn.jsdelivr.net/gh/stevenjoezhang/asteroids/asteroids.js&quot;;// document.head.appendChild(script);// &#125;// &#125;);// TODO: 第三个 icon，换人物// document.querySelector(&quot;#waifu-tool .fa-user-circle&quot;).addEventListener(&quot;click&quot;, loadOtherModel);// TODO: 第四个 icon，应该是换装// document.querySelector(&quot;#waifu-tool .fa-street-view&quot;).addEventListener(&quot;click&quot;, loadRandModel);// TODO: 第五个 icon，拍照// document.querySelector(&quot;#waifu-tool .fa-camera-retro&quot;).addEventListener(&quot;click&quot;, () =&gt; &#123;// showMessage(&quot;照好了嘛，是不是很可爱呢？&quot;, 6000, 9);// Live2D.captureName = &quot;photo.png&quot;;// Live2D.captureFrame = true;// &#125;);// TODO: 第六个 icon，原项目地址document.querySelector(&quot;#waifu-tool .fa-link&quot;).addEventListener(&quot;click&quot;, () =&gt; &#123;open(&quot;https://www.wztlink1013.com/about/&quot;);&#125;);// TODO: 第七个 icon，隐藏看板娘    document.querySelector(&quot;#waifu-tool .fa-compress&quot;).addEventListener(&quot;click&quot;, () =&gt; &#123;      localStorage.setItem(&quot;waifu-display&quot;, Date.now());      showMessage(&quot;愿你有一天能与重要的人重逢。&quot;, 2000, 11);      document.getElementById(&quot;waifu&quot;).style.bottom = &quot;-500px&quot;; // 隐藏大盒子      setTimeout(() =&gt; &#123;        document.getElementById(&quot;waifu&quot;).style.display = &quot;none&quot;;        document.getElementById(&quot;waifu-toggle&quot;).classList.add(&quot;waifu-toggle-active&quot;);      &#125;, 3000);    &#125;);    window.addEventListener(&quot;copy&quot;, () =&gt; &#123;      showMessage(&quot;你都复制了些什么呀，转载要记得加上出处哦！&quot;, 6000, 9);    &#125;);    window.addEventListener(&quot;visibilitychange&quot;, () =&gt; &#123;      if (!document.hidden) showMessage(&quot;哇，你终于回来了～&quot;, 6000, 9);    &#125;);&#125;)();// 首页展示特定文字(function welcomeMessage() &#123;let text;if (location.pathname === &quot;/&quot;) &#123; // 如果是主页const now = new Date().getHours();if (now &gt; 5 &amp;&amp; now &lt;= 7) text = &quot;早上好！一日之计在于晨，美好的一天就要开始了。&quot;;else if (now &gt; 7 &amp;&amp; now &lt;= 11) text = &quot;上午好！工作顺利嘛，不要久坐，多起来走动走动哦！&quot;;else if (now &gt; 11 &amp;&amp; now &lt;= 13) text = &quot;中午了，工作了一个上午，现在是午餐时间！&quot;;else if (now &gt; 13 &amp;&amp; now &lt;= 17) text = &quot;午后很容易犯困呢，今天的运动目标完成了吗？&quot;;else if (now &gt; 17 &amp;&amp; now &lt;= 19) text = &quot;傍晚了！窗外夕阳的景色很美丽呢，最美不过夕阳红～&quot;;else if (now &gt; 19 &amp;&amp; now &lt;= 21) text = &quot;晚上好，今天过得怎么样？&quot;;else if (now &gt; 21 &amp;&amp; now &lt;= 23) text = [&quot;已经这么晚了呀，早点休息吧，晚安～&quot;, &quot;深夜时要爱护眼睛呀！&quot;];else text = &quot;你是夜猫子呀？这么晚还不睡觉，明天起的来嘛？&quot;;&#125; else if (document.referrer !== &quot;&quot;) &#123;const referrer = new URL(document.referrer),domain = referrer.hostname.split(&quot;.&quot;)[1];if (location.hostname === referrer.hostname) text = `欢迎阅读&lt;span&gt;「$&#123;document.title.split(&quot; - &quot;)[0]&#125;」&lt;/span&gt;`;else if (domain === &quot;baidu&quot;) text = `Hello！来自 百度搜索 的朋友&lt;br&gt;你是搜索 &lt;span&gt;$&#123;referrer.search.split(&quot;&amp;wd=&quot;)[1].split(&quot;&amp;&quot;)[0]&#125;&lt;/span&gt; 找到的我吗？`;else if (domain === &quot;so&quot;) text = `Hello！来自 360搜索 的朋友&lt;br&gt;你是搜索 &lt;span&gt;$&#123;referrer.search.split(&quot;&amp;q=&quot;)[1].split(&quot;&amp;&quot;)[0]&#125;&lt;/span&gt; 找到的我吗？`;else if (domain === &quot;google&quot;) text = `Hello！来自 谷歌搜索 的朋友&lt;br&gt;欢迎阅读&lt;span&gt;「$&#123;document.title.split(&quot; - &quot;)[0]&#125;」&lt;/span&gt;`;else text = `Hello！来自 &lt;span&gt;$&#123;referrer.hostname&#125;&lt;/span&gt; 的朋友`;&#125; else &#123;text = `欢迎阅读&lt;span&gt;「$&#123;document.title.split(&quot; - &quot;)[0]&#125;」&lt;/span&gt;`;&#125;showMessage(text, 7000, 8);&#125;)();// TODO: 服务于第一个 iconfunction showHitokoto() &#123;// 增加 hitokoto.cn 的 APIfetch(&quot;https://v1.hitokoto.cn&quot;).then(response =&gt; response.json()).then(result =&gt; &#123;const text = `这句一言来自 &lt;span&gt;「$&#123;result.from&#125;」&lt;/span&gt;，是 &lt;span&gt;$&#123;result.creator&#125;&lt;/span&gt; 在 hitokoto.cn 投稿的。`;showMessage(result.hitokoto, 6000, 9);setTimeout(() =&gt; &#123;showMessage(text, 4000, 9);&#125;, 6000);&#125;);&#125;// 没有 bug 展示特定状态下的文字function showMessage(text, timeout, priority) &#123;if (!text || (sessionStorage.getItem(&quot;waifu-text&quot;) &amp;&amp; sessionStorage.getItem(&quot;waifu-text&quot;) &gt; priority)) return;if (messageTimer) &#123;clearTimeout(messageTimer);messageTimer = null;&#125;text = randomSelection(text);sessionStorage.setItem(&quot;waifu-text&quot;, priority);const tips = document.getElementById(&quot;waifu-tips&quot;);tips.innerHTML = text;tips.classList.add(&quot;waifu-tips-active&quot;);messageTimer = setTimeout(() =&gt; &#123;sessionStorage.removeItem(&quot;waifu-text&quot;);tips.classList.remove(&quot;waifu-tips-active&quot;);&#125;, timeout);&#125;&#125;function initWidget(config, apiPath) &#123;if (typeof config === &quot;string&quot;) config = &#123; waifuPath: config, apiPath &#125;;document.body.insertAdjacentHTML(&quot;beforeend&quot;, `&lt;div id=&quot;waifu-toggle&quot;&gt;                &lt;span&gt;雷姆&lt;/span&gt;            &lt;/div&gt;`);const toggle = document.getElementById(&quot;waifu-toggle&quot;);toggle.addEventListener(&quot;click&quot;, () =&gt; &#123;toggle.classList.remove(&quot;waifu-toggle-active&quot;);if (toggle.getAttribute(&quot;first-time&quot;)) &#123;loadWidget(config);toggle.removeAttribute(&quot;first-time&quot;);&#125; else &#123;localStorage.removeItem(&quot;waifu-display&quot;);document.getElementById(&quot;waifu&quot;).style.display = &quot;&quot;;setTimeout(() =&gt; &#123;document.getElementById(&quot;waifu&quot;).style.bottom = 0;&#125;, 0);&#125;// TODO: 一开始判断是否隐藏雷姆代码&#125;);if (localStorage.getItem(&quot;waifu-display&quot;) &amp;&amp; Date.now() - localStorage.getItem(&quot;waifu-display&quot;) &lt;= 86400000) &#123;toggle.setAttribute(&quot;first-time&quot;, true);setTimeout(() =&gt; &#123;toggle.classList.add(&quot;waifu-toggle-active&quot;);&#125;, 0);&#125; else &#123;loadWidget(config);&#125;&#125;export &#123;initWidget, //导出对象&#125;</code></pre></details><p id="u09d47608" class="ne-p"><span class="ne-text">在base.js中初始化看板逻辑代码</span></p><pre><code class="javascript">import &#123;initWidget&#125; from &#39;./part/live2d.js&#39;;// live2d 初始化initWidget(&#123;waifuPath: &quot;/data/remu.json&quot;,cdnPath: &quot;https://github.com/fghrsh/live2d_api/tree/1.0.1/&quot;&#125;);</code></pre><h3 id="kOl6b"><span class="ne-text">最终看板效果</span></h3><p id="u6ec1d33d" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1665116671351-7c3e9921-cb79-4902-822f-a09a3ce422ae.png" width="1599.9999364217147" id="u50ba46fe" class="ne-image"></p><h2 id="op5Lz"><span class="ne-text">参考</span></h2><ul class="ne-ul"><li id="u96f1ffee"><span class="ne-text">live2d API 文档：</span><a href="https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init" data-href="https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init" target="_blank" class="ne-link"><span class="ne-text">https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init</span></a></li><li id="uadc38fc5"><span class="ne-text">封装为 npm 插件模型：</span><a href="https://huaji8.top/post/live2d-plugin-2.0/" data-href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" class="ne-link"><span class="ne-text">https://huaji8.top/post/live2d-plugin-2.0/</span></a></li><li id="0b0eccc822d2e4f83803798ba3120030"><span class="ne-text">自定义扩展模型：</span><a href="https://github.com/luanshizhimei/live2d_models_collect" data-href="https://github.com/luanshizhimei/live2d_models_collect" target="_blank" class="ne-link"><span class="ne-text">https://github.com/luanshizhimei/live2d_models_collect</span></a></li><li id="u845fdd61"><span class="ne-text">vscode live2d 扩展：</span><a href="https://github.com/ezshine/vscode-rainbow-fart-waifu" data-href="https://github.com/ezshine/vscode-rainbow-fart-waifu" target="_blank" class="ne-link"><span class="ne-text">https://github.com/ezshine/vscode-rainbow-fart-waifu</span></a></li><li id="u1b0da9ef"><a href="https://github.com/fghrsh/live2d_api/tree/1.0.1/" data-href="https://github.com/fghrsh/live2d_api/tree/1.0.1/" target="_blank" class="ne-link"><span class="ne-text">https://github.com/fghrsh/live2d_api/tree/1.0.1/</span></a></li></ul><ul class="ne-tl"><li id="u57f3d399"><strong><span class="ne-text" style="background-color: #FADB14">TODO: </span></strong><span class="ne-text">优化资源加载方式，模型的静态资源使用外链的形式较为合理，以及插件每次在开发模式下都会编译文件，都会带来开发环境以及生产环境上的不便</span></li></ul></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;!doctype html&gt;&lt;div class=&quot;lake-content&quot; typography=&quot;classic&quot;&gt;&lt;p id=&quot;ubf72f4a0&quot; class=&quot;ne-p&quot;&gt;&lt;img</summary>
        
      
    
    
    
    <category term="其他" scheme="https://www.wztlink1013.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    <category term="玩转博客" scheme="https://www.wztlink1013.com/categories/%E5%85%B6%E4%BB%96/%E7%8E%A9%E8%BD%AC%E5%8D%9A%E5%AE%A2/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue3项目中ts报错总结</title>
    <link href="https://www.wztlink1013.com/blog/ngt02r/"/>
    <id>https://www.wztlink1013.com/blog/ngt02r/</id>
    <published>2022-08-27T04:10:55.000Z</published>
    <updated>2022-11-26T06:13:29.557Z</updated>
    
    <content type="html"><![CDATA[<!doctype html><div class="lake-content" typography="classic"><h2 id="xQF2S"><span class="ne-text">TS7053: 元素隐式具有 "any" 类型，因为类型为 "string" 的表达式不能用于索引类型 "{ doc_image: string; docx: string[]; }"。ts(7053)</span></h2><pre><code class="typescript">const MINE_TYPES = &#123;doc_image: [&#39;image/png&#39;, &#39;image/gif&#39;, &#39;image/jpeg&#39;, &#39;image/jpg&#39;, &#39;image/bmp&#39;].join(&#39;,&#39;),// 暂仅支持 docx 和 xlsxdocx: [// &#39;application/pdf&#39;,// &#39;application/msword&#39;,&#39;application/vnd.openxmlformats-officedocument.wordprocessingml.document&#39;,&#39;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&#39;]&#125;;</code></pre><p id="u6dd3159d" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1660816279493-28f705da-2d60-432f-bbd4-20cfef128611.png" width="982" id="TAU1s" class="ne-image"></p><ul class="ne-ul"><li id="ub4f24491"><span class="ne-text">ts 对于传入的 apiType，编译器只知道为字符串而不是具体的 doc_image 或者 docx，所以需要自行使用断言以及显示声明传入的值与这些值一致。</span></li></ul><pre><code class="typescript">const accept = MINE_TYPES[apiType as keyof typeof MINE_TYPES] || &#39;\*&#39;;</code></pre><h2 id="hMqm1"><span class="ne-text">TS2531: Type ‘HTMLElement | null‘ is not assignable to type ‘HTMLElement‘</span></h2><ul class="ne-ul"><li id="u4c1bc5d4"><span class="ne-text">查找 DOM 这块，很有可能是找不到该 DOM 元素的，如下：</span></li></ul><p id="u8774d23b" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1660617254293-3d7d5a6c-3512-4c0a-84e4-4af68868f2df.png" width="623" id="GNuC9" class="ne-image"></p><p id="ub7348ded" class="ne-p"><span class="ne-text">很确定 dom 层一渲染 dom 树，使用断言</span></p><pre><code class="typescript">// 点击按钮，返回顶部const handleBackToTop = () =&gt; &#123;let page_content: HTMLElement = document.getElementById(&#39;file-page-content&#39;) as HTMLElement;if (page_content !== null) &#123;page_content.scrollTop = 0;&#125;&#125;;</code></pre><h2 id="Lqyep"><span class="ne-text">TS2345: Typescript 'string | 类型的参数 null' 不能分配给“字符串”类型的参数.类型 'null' 不能分配给类型 'string'</span></h2><p id="u0af4acf7" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1660632598192-4b5203c9-b02e-4277-bdae-321bfb3bc173.png" width="1018" id="haE8A" class="ne-image"></p><pre><code class="typescript">const authorInfo = localStorage.getItem(&#39;LOGIN_USER&#39;)? JSON.parse(localStorage.getItem(&#39;LOGIN_USER&#39;) as string): null;</code></pre><h2 id="Mf6k2"><span class="ne-text">TS2307: 【找不到模块】或【ts 导入 js 文件】</span></h2><div class="ne-quote"><p id="u75fe1cc9" class="ne-p"><span class="ne-text">可以归为一类问题，都是导入非 ts 模块 而报错，而 ts 的编译是需要有声明类型的</span></p></div><p id="ua6da90e1" class="ne-p"><span class="ne-text">这类报错一般有如下两种情况：</span></p><ol class="ne-ol"><li id="ua5deb70d"><span class="ne-text">import 导入依赖包，但是提示找不到该包</span></li><li id="u688ca3e4"><span class="ne-text">ts 文件中导入 js 文件</span></li></ol><p id="u07a5d9a7" class="ne-p"><span class="ne-text">原因：</span></p><ol class="ne-ol"><li id="u13a96ef4"><span class="ne-text">依赖包没有做 ts 化，没有声明文件，或者说暴露出来的接口，import 不支持</span></li><li id="ubdd854de"><span class="ne-text">ts 不能导入 js，除非做一些配置文件的相关配置（但是尽量不要在 ts 项目存在 js 项目）</span></li></ol><p id="u700e1cdb" class="ne-p"><span class="ne-text">解决：</span></p><ul class="ne-ul"><li id="uc836f6e5"><span class="ne-text">国际化网站下载下来的是 js 文件，但是 vite 项目不能使用 require 来导入外部文件</span></li></ul><p id="u32bdd5fb" class="ne-p"><a href="https://www.cnblogs.com/fqh123/p/15820329.html" data-href="https://www.cnblogs.com/fqh123/p/15820329.html" class="ne-link"><span class="ne-text" style="text-decoration: line-through">vite 无法使用 require 的替代方案 - 古墩古墩 - 博客园</span></a><span class="ne-text" style="text-decoration: line-through">，api 已废弃</span></p><ul class="ne-tl"><li checked="true" id="u2557d297"><span class="ne-text">解决方法 1：（无伤解决方法）类似声明非 ts 项目依赖一样，单独声明再使用（</span><a href="https://www.cnblogs.com/Blod/p/16185788.html" data-href="https://www.cnblogs.com/Blod/p/16185788.html" class="ne-link"><span class="ne-text">在 ts 中怎么引入 js 文件 - 冰中焱 - 博客园</span></a><span class="ne-text">）</span></li></ul><p id="u4d870acd" class="ne-p"><span class="ne-text">en.d.ts 中添加</span></p><pre><code class="typescript">···declare module &#39;@/i18n/lang/zh.js&#39;;declare module &#39;@/i18n/lang/en.js&#39;;···</code></pre><p id="uf566735f" class="ne-p"><span class="ne-text">然后再 ts 文件中直接导入使用即可</span></p><pre><code class="typescript">import zh from &#39;@/i18n/lang/zh.js&#39;;import en from &#39;@/i18n/lang/en.js&#39;;···</code></pre><ul class="ne-ul"><li id="ufc211982"><span class="ne-text">解决方法 2：直接在 tsconfig 中配置可以使用 js 的配置项，但是需要单独添加 ts 编译后的 js 目录，改动较大</span></li></ul><div class="ne-quote"><ul class="ne-ul"><li id="u5e51fc86"><a href="https://segmentfault.com/q/1010000019980246" data-href="https://segmentfault.com/q/1010000019980246" class="ne-link"><span class="ne-text">tsconfig.json 报错 无法写错写入文件 ，因为他会覆盖输入文件是怎么回事？ - SegmentFault 思否</span></a></li><li id="u2c7f8371"><a href="https://juejin.cn/post/6844904127131025416" data-href="https://juejin.cn/post/6844904127131025416" class="ne-link"><span class="ne-text">ts 引用 js 文件（node 包/自己写的文件） - 掘金</span></a></li></ul></div><h2 id="tT4L5"><span class="ne-text" style="color: rgb(77, 77, 77); font-size: 16px">TS2339: </span><span class="ne-text">Property 'replaceAll' does not exist on type 'string'</span></h2><ul class="ne-ul"><li id="uc593baff"><span class="ne-text">ts 不能使用 js 中 String 的内置 API：replaceAll 方法</span></li><li id="u5431a587"><span class="ne-text">使用其他字符串 api 来达到该目的，</span><a href="https://stackoverflow.com/questions/63616486/property-replaceall-does-not-exist-on-type-string" data-href="https://stackoverflow.com/questions/63616486/property-replaceall-does-not-exist-on-type-string" target="_blank" class="ne-link"><span class="ne-text">https://stackoverflow.com/questions/63616486/property-replaceall-does-not-exist-on-type-string</span></a><span class="ne-text">，不推荐使用该方法</span></li></ul><ul class="ne-tl"><li checked="true" id="u8475e55e"><span class="ne-text">解决方法：默认 TypeScript 不支持某些 es6 polyfill 函数，在 tsconfig.json 配置中进行配置新版本的 js 语法</span></li></ul><pre><code class="json">&#123;...,&quot;compilerOptions&quot;: &#123;...,&quot;lib&quot;: [...,&quot;ES2021.String&quot;]&#125;&#125;</code></pre><h2 id="A8Glh"><span class="ne-text">TS2589: Type instantiation is excessively deep and possibly infinite.</span></h2><ul class="ne-tl"><li id="ub9e33958"><strong><span class="ne-text" style="color: #E8323C"></span></strong><span class="ne-text">如果使用 js 文件导入，那么在 ts 文件中使用就会报 ts 2589 错误。</span></li></ul><pre><code class="plain">src/utils/fetch.ts:63:55 - error TS2589: Type instantiation is excessively deep and possibly infinite.63 message[response.config.warnType as NoticeType](&lt;i18n.global.t(msg)&gt;);</code></pre><p id="ueab1ee74" class="ne-p"><span class="ne-text">使用如下方式导入 js 导出来的 js 和 json 数据</span></p><pre><code class="typescript">import &#123; createI18n &#125; from &#39;vue-i18n&#39;;import config from &#39;./config.json&#39;;import zh from &#39;@/i18n/lang/zh.js&#39;;import en from &#39;@/i18n/lang/en.js&#39;;import &#123; ref &#125; from &#39;vue&#39;;let zh_obj = &#123;&#125;;zh_obj = zh;let en_obj = &#123;&#125;;en_obj = en;export const lang = ref(&#39;zh_obj&#39;);export const languages = config;const i18n = createI18n(&#123;locale: lang.value,fallbackLocale: lang.value,messages: &#123;zh_obj,en_obj&#125;&#125;);export default i18n;</code></pre></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;!doctype html&gt;&lt;div class=&quot;lake-content&quot; typography=&quot;classic&quot;&gt;&lt;h2 id=&quot;xQF2S&quot;&gt;&lt;span class=&quot;ne-text&quot;&gt;TS7053: 元素隐式具有 &quot;any&quot; 类型，因为类型为 &quot;string&quot;</summary>
        
      
    
    
    
    <category term="Web开发" scheme="https://www.wztlink1013.com/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    <category term="JS+TS" scheme="https://www.wztlink1013.com/categories/Web%E5%BC%80%E5%8F%91/JS-TS/"/>
    
    <category term="TypeScript" scheme="https://www.wztlink1013.com/categories/Web%E5%BC%80%E5%8F%91/JS-TS/TypeScript/"/>
    
    
  </entry>
  
  <entry>
    <title>诺兰『蝙蝠侠』三部曲</title>
    <link href="https://www.wztlink1013.com/essay/lr2r4p/"/>
    <id>https://www.wztlink1013.com/essay/lr2r4p/</id>
    <published>2022-07-30T23:41:11.000Z</published>
    <updated>2022-11-26T06:13:52.405Z</updated>
    
    <content type="html"><![CDATA[<!doctype html><div class="lake-content" typography="classic"><p id="ud0b8a1c9" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1659258590527-a4ac7156-1a4c-494f-8480-9609de27e2c6.png" width="1139.259339739435" id="uc1f00cef" class="ne-image"></p><h4 id="AZQqk"><span class="ne-text">恐惧继而愤怒</span></h4><p id="u8e0b4d48" class="ne-p"><span class="ne-text">害怕的事物终究成为自我救赎的武器</span></p><p id="u3c9b937f" class="ne-p"><span class="ne-text">害怕黑暗与黑暗中的蝙蝠，害怕所带来的恐惧与懦弱</span></p><p id="u833ac2f1" class="ne-p"><span class="ne-text">一个人越害怕一件事情，这件事情往往会再现自己的身边</span></p><p id="ua567b001" class="ne-p"><span class="ne-text">只不过对于布鲁斯·韦恩，这个失去的东西太沉重</span></p><p id="ua4be8f15" class="ne-p"><span class="ne-text">于是带着自责与愤怒逃离那个错误的城市···</span></p><p id="ua1b2d4ff" class="ne-p"><span class="ne-text"></span></p><h4 id="GwlsN"><span class="ne-text">愤怒但非犯罪</span></h4><p id="u9bf106bf" class="ne-p"><span class="ne-text">秉承着 惧怕驱使你行善或作恶的动力 信念的影武者联盟</span></p><p id="u045841c1" class="ne-p"><span class="ne-text">消除了内心的恐惧</span></p><p id="ub502277c" class="ne-p"><span class="ne-text">但是消除并不等于黑化</span></p><p id="uaa843634" class="ne-p"><span class="ne-text">于是误入歧途的前一刻坚守自己认为对的事情···</span></p><p id="u67bf7b28" class="ne-p"><span class="ne-text"></span></p><h4 id="vqGFP"><span class="ne-text">侠影与得失</span></h4><p id="uc99c173d" class="ne-p"><span class="ne-text">用一己之力纠正那些不对的事</span></p><p id="u3ff1b640" class="ne-p"><span class="ne-text">当认定要做一些常人难以做成的事情</span></p><p id="u913e6cd7" class="ne-p"><span class="ne-text">就势必会失去一些已有的事物，比如感情与名望···</span></p><p id="u0a14c2c5" class="ne-p"><span class="ne-text"></span></p><h4 id="RrHQ4"><span class="ne-text">原则</span></h4><p id="ud66d9e8b" class="ne-p"><span class="ne-text">世上所有的反派都不及一个精神病患者</span></p><p id="u783c4a39" class="ne-p"><span class="ne-text">人才辈出阿卡姆就有这么一个人才</span></p><p id="u0186c38b" class="ne-p"><span class="ne-text">什么都不想要，只想要毁灭，只仇视所谓正义的秩序者</span></p><p id="uc880c0d5" class="ne-p"><span class="ne-text">众所周知，疯子和天才只有一线之隔</span></p><p id="ua8d05fb3" class="ne-p"><span class="ne-text">小丑最擅长的就是拿捏人性，而且是每次都成功拿捏人性中的暗</span></p><p id="uf90a1a98" class="ne-p"><span class="ne-text">所以小丑所设计的几个犯罪案例都是结合人性的超高智商案例</span></p><p id="u0ff2b39e" class="ne-p"><span class="ne-text">小丑和蝙蝠侠都是同类人</span></p><p id="u1ca4d347" class="ne-p"><span class="ne-text">造成这个不同的结果就是小时候的教育···</span></p><p id="u57861ea6" class="ne-p"><span class="ne-text">所以与其说这是蝙蝠侠与小丑或是正义与邪恶之间的较量</span></p><p id="u7cfb9084" class="ne-p"><span class="ne-text">不如说是人性的光与暗之间的碰撞</span></p><p id="ue3e3804c" class="ne-p"><span class="ne-text"></span></p><h4 id="ARbHF"><span class="ne-text">黑暗骑士——无名</span></h4><p id="ue3faa0f9" class="ne-p"><span class="ne-text">最高光最封神的就是第二部中蝙蝠侠与戈登最后的对话</span></p><div class="ne-quote"><p id="u426a0640" class="ne-p"><span class="ne-text">要么舍生取义、流芳百世</span></p><p id="u11d91de1" class="ne-p"><span class="ne-text">要么苟活到目睹自己被逼成恶棍</span></p><p id="uba08d3ec" class="ne-p"><span class="ne-text">把这些事算到我头上</span></p><p id="ub8294670" class="ne-p"><span class="ne-text">因为我不是英雄 不像丹特</span></p><p id="ue45b20a3" class="ne-p"><span class="ne-text">我可以背负杀死他们的罪名</span></p><p id="ua99b18c2" class="ne-p"><span class="ne-text">哥谭需要我是什么样的 我就是什么样的</span></p></div><p id="u78c6401e" class="ne-p"><span class="ne-text">行走在黑暗中的骑士，从来都不需要流芳百世</span></p><p id="ub69ea752" class="ne-p"><span class="ne-text">背负诋毁与罪名，让人们生活在光明且充满希望的世界···</span></p><p id="uf8c20e54" class="ne-p"><span class="ne-text"></span></p><h4 id="T0wSf"><span class="ne-text">崛起</span></h4><p id="u185ccb90" class="ne-p"><span class="ne-text">蝙蝠侠崛起的不是布鲁斯·韦恩，而是蝙蝠侠这种侠影精神</span></p><p id="u6de2757b" class="ne-p"><span class="ne-text">最后的罗宾来到蝙蝠洞就证明这一点</span></p><p id="u1b3ec18e" class="ne-p"><span class="ne-text">英雄谢幕退场到原点，后来者继上···</span></p><p id="u6cf9a49d" class="ne-p"><span class="ne-text"></span></p><p id="ub842d2d1" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/1484158/1659258039316-a9a813e2-6189-439d-84f2-16980eabae9a.jpeg" width="2400" id="MrsZD" class="ne-image"></p><p id="uda87b3d3" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/1484158/1659258040513-acdc8cbd-0d02-441f-a5c5-e685e7b96a83.jpeg" width="2400" id="ovmsC" class="ne-image"></p><p id="uc410fc3e" class="ne-p"><br></p></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;!doctype html&gt;&lt;div class=&quot;lake-content&quot; typography=&quot;classic&quot;&gt;&lt;p id=&quot;ud0b8a1c9&quot; class=&quot;ne-p&quot;&gt;&lt;img</summary>
        
      
    
    
    
    <category term="影视" scheme="https://www.wztlink1013.com/categories/%E5%BD%B1%E8%A7%86/"/>
    
    
  </entry>
  
  <entry>
    <title>js实现并发控制且并发上限为concurrency</title>
    <link href="https://www.wztlink1013.com/blog/wboxcq/"/>
    <id>https://www.wztlink1013.com/blog/wboxcq/</id>
    <published>2022-07-25T03:59:32.000Z</published>
    <updated>2022-11-26T06:13:29.573Z</updated>
    
    <content type="html"><![CDATA[<!doctype html><div class="lake-content" typography="classic"><p id="u5db88ede" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/1484158/1658750399274-d7c6f4fd-a9ce-4f10-a771-b9567b84830d.png" width="255.5555736086509" id="u9eff5b76" class="ne-image"></p><p id="u336780ef" class="ne-p"><span class="ne-text">前言：使用Typescript编写如下函数功能 并发控制函数 要求控制任务执行的并发上限为concurrency</span></p><p id="ua4fed787" class="ne-p"><span class="ne-text"></span></p><pre><code class="typescript">/*- @Author: wztlink1013- @Date: 2022-07-25 19:57:09- @LastEditTime: 2022-07-25 19:57:22- @Description:  \*/  // Practice 1  const test_1 = () =&gt; &#123;  return new Promise(resolve =&gt; &#123;  setTimeout(() =&gt; &#123;  console.log(&#39;2000&#39;)  let myDate = new Date()  console.log(&#39;---- &#39;, myDate.toTimeString().substring(0, 8), &#39; ----&#39;)  resolve(2000)  &#125;, 2000)  &#125;)  &#125;  const test_2 = () =&gt; &#123;  return new Promise(resolve =&gt; &#123;  setTimeout(() =&gt; &#123;  console.log(&#39;3000&#39;)  let myDate = new Date()  console.log(&#39;---- &#39;, myDate.toTimeString().substring(0, 8), &#39; ----&#39;)  resolve(3000)  &#125;, 3000)  &#125;)  &#125;  const test_3 = () =&gt; &#123;  return new Promise(resolve =&gt; &#123;  setTimeout(() =&gt; &#123;  console.log(&#39;4000&#39;)  let myDate = new Date()  console.log(&#39;---- &#39;, myDate.toTimeString().substring(0, 8), &#39; ----&#39;)  resolve(4000)  &#125;, 4000)  &#125;)  &#125;let arr = [test_1, test_2, test_3]async function parallel(tasks: (() =&gt; void)[],concurrency: number): Promise&lt;void&gt; &#123;const ret: any[] = []const executing: any[] = []let myDate = new Date()console.log(&#39;----start &#39;, myDate.toTimeString().substring(0, 8), &#39; ----&#39;)for (const item of tasks) &#123;const p = Promise.resolve().then(item)ret.push(p)    if (concurrency &lt;= tasks.length) &#123;      const e: any = p.then(() =&gt; executing.splice(executing.indexOf(e), 1))      executing.push(e)      if (executing.length &gt;= concurrency) &#123;        await Promise.race(executing)      &#125;    &#125;&#125;// return Promise.all(ret);&#125;parallel(arr, 2)</code></pre><h2 id="lXmLO"><span class="ne-text">参考：</span></h2><ul class="ne-ul"><li id="u6fd14527"><a href="https://juejin.cn/post/6976028030770610213" data-href="https://juejin.cn/post/6976028030770610213" class="ne-link"><span class="ne-text">JavaScript 中如何实现并发控制？ - 掘金</span></a></li></ul></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;!doctype html&gt;&lt;div class=&quot;lake-content&quot; typography=&quot;classic&quot;&gt;&lt;p id=&quot;u5db88ede&quot; class=&quot;ne-p&quot;&gt;&lt;img</summary>
        
      
    
    
    
    <category term="Web开发" scheme="https://www.wztlink1013.com/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    <category term="JS+TS" scheme="https://www.wztlink1013.com/categories/Web%E5%BC%80%E5%8F%91/JS-TS/"/>
    
    <category term="ECMAScript" scheme="https://www.wztlink1013.com/categories/Web%E5%BC%80%E5%8F%91/JS-TS/ECMAScript/"/>
    
    
  </entry>
  
</feed>
